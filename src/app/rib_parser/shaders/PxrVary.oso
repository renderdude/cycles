OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: -DOSX -I/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include -I/data/build/ratbuild/rmanshare/RIS/include -I/data/build/ratbuild/rmanshare/RIS/include/common -I/data/build/ratbuild/rmanshare/RIS/pattern/osl -I/data/build/ratbuild/rmanshare/RIS/include/osl -o /data/build/ratbuild/rmanshare/_built/osxMojave_x86-64_clang10_external_release/osl/PxrVary.osl/obj/PxrVary.oso
shader PxrVary	%meta{int,rfm_nodeid,1053438} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/color"} %meta{string,rfh_classification,"Pattern/Color"} %meta{string,help,"This node creates controlled random variations.<br>The variation source can be attribute or primvar based. "} 
param	color	inputRGB	0.5 0.5 0.5		%meta{string,widget,"color"} %meta{string,help,"The color that you would like to vary.<br><br>inputRGB (color)"} %meta{string,label,"Input Color"}  %read{0,0} %write{2147483647,-1}
param	int	varySource	0		%meta{string,widget,"mapper"} %meta{string,options,"Identifier ID:0|Identifier Name:1|Primvar:2|Attribute:3"} %meta{string,help,"The source of the variation. For user attributes,<br>type user:myattribute.<br><br>varySource (int) "} %meta{int,connectable,0} %meta{string,label,"Vary Source"}  %read{2,37} %write{2147483647,-1}
param	string	varName	""		%meta{string,widget,"default"} %meta{string,help,"If varySource is 1 or 2, the name of the primvar or user<br>attribute.<br><br>varName (string) "} %meta{int,connectable,0} %meta{string,label,"Variable Name"}  %read{25,47} %write{2147483647,-1}
param	float	hue	0		%meta{string,widget,"default"} %meta{string,help,"Limit random hue shift. Ranges from 0 (no variation)<br>to 1 (full variation).<br><br>hue (float) "} %meta{string,label,"Hue"} %meta{float,max,1} %meta{float,min,0}  %read{681,681} %write{2147483647,-1}
param	float	saturation	0		%meta{string,widget,"default"} %meta{string,help,"Limit random saturation scale. Ranges from 0 (no variation)<br>to 1 (full variation).<br><br>saturation (float) "} %meta{string,label,"Saturation"} %meta{float,max,1} %meta{float,min,0}  %read{683,683} %write{2147483647,-1}
param	float	lum	0		%meta{string,widget,"default"} %meta{string,help,"Limit random luminance scale. Ranges from 0 (no variation)<br>to 1 (full variation).<br><br>luminance (float) "} %meta{string,label,"Luminance"} %meta{float,max,1} %meta{float,min,0}  %read{685,685} %write{2147483647,-1}
param	float	gamma	0		%meta{string,widget,"default"} %meta{string,help,"Limit random gamma variation. Ranges from 0 (no variation)<br>to 1 (full variation).<br><br>gamma (float) "} %meta{string,label,"Gamma"} %meta{float,max,1} %meta{float,min,0}  %read{687,687} %write{2147483647,-1}
param	float	probability	1		%meta{string,widget,"default"} %meta{string,page,"Advanced"} %meta{int,page_open,1} %meta{string,help,"Range from 0 to 1 specifies the possibility of applying the<br>variation.<br><br>probability (float) "} %meta{string,label,"Probability"} %meta{float,max,1} %meta{float,min,0}  %read{62,317} %write{2147483647,-1}
param	int	hueMode	0		%meta{string,widget,"mapper"} %meta{string,options,"Centered:0|Additive:1|Subtractive:2"} %meta{string,page,"Advanced"} %meta{string,help,"Centered: The amount of variation will be centered around the current value.<br><br>hueMode (int) "} %meta{int,connectable,0} %meta{string,label,"Hue Mode"}  %read{603,606} %write{2147483647,-1}
param	int	saturationMode	0		%meta{string,widget,"mapper"} %meta{string,page,"Advanced"} %meta{string,options,"Centered:0|Additive:1|Subtractive:2"} %meta{string,help,"Centered: The amount of variation will be centered around the current value.<br><br>saturationMode (int) "} %meta{int,connectable,0} %meta{string,label,"Saturation Mode"}  %read{616,619} %write{2147483647,-1}
param	int	luminanceMode	0		%meta{string,widget,"mapper"} %meta{string,options,"Centered:0|Additive:1|Subtractive:2"} %meta{string,page,"Advanced"} %meta{string,help,"Centered: The amount of variation will be centered around the current value.<br><br>luminanceMode (int) "} %meta{int,connectable,0} %meta{string,label,"Luminance Mode"}  %read{629,632} %write{2147483647,-1}
param	int	gammaMode	0		%meta{string,widget,"mapper"} %meta{string,options,"Centered:0|Additive:1|Subtractive:2"} %meta{string,page,"Advanced"} %meta{string,help,"Centered: The amount of variation will be centered around the current value.<br><br>gammaMode (int) "} %meta{int,connectable,0} %meta{string,label,"Gamma Mode"}  %read{642,645} %write{2147483647,-1}
param	float	seed	0		%meta{string,widget,"default"} %meta{string,page,"Advanced"} %meta{string,help,"The seed will be added to the original attr/primvar value.<br><br>seed (float) "} %meta{string,label,"seed"}  %read{61,61} %write{2147483647,-1}
param	int	scaleNormalizedPrimvar	0		%meta{string,widget,"checkBox"} %meta{string,page,"Advanced"} %meta{string,help,"Re-scale a primvar with a 0->1 range to a suitable range.<br><br>scaleNormalizedPrimvar (int) "} %meta{int,connectable,0} %meta{string,label,"Scale normalized primvar"}  %read{34,34} %write{2147483647,-1}
param	int	verbosity	0		%meta{string,widget,"mapper"} %meta{string,options,"Silent:0|Warnings:1|Info:2"} %meta{string,page,"Advanced"} %meta{string,help,"Diagnostic output levels for scene debugging.<br><br>verbosity (int)"} %meta{int,connectable,0} %meta{string,label,"Verbosity"}  %read{5,43} %write{2147483647,-1}
param	int	matchCppPattern	0		%meta{string,widget,"checkBox"} %meta{string,label,"Match C++ patterns"} %meta{int,connectable,0} %meta{string,help,"Match RenderMan 23 C++ scenes but may slow down your render. Use only when necessary."}  %read{10,323} %write{2147483647,-1}
oparam	color	resultRGB	0 0 0		%meta{string,help,"resultRGB (color)"}  %read{689,727} %write{0,724}
oparam	float	resultR	0		%meta{string,help,"resultR (float)"}  %read{2147483647,-1} %write{725,725}
oparam	float	resultG	0		%meta{string,help,"resultG (float)"}  %read{2147483647,-1} %write{726,726}
oparam	float	resultB	0		%meta{string,help,"resultB (float)"}  %read{2147483647,-1} %write{727,727}
local	float[4096]	___475_rxcellrandtable	%read{97,580} %write{77,344}
local	int[4096]	___475_rxcellpermute	%read{97,580} %write{78,345}
local	int	___475_i	%read{97,580} %write{96,580}
local	int	___475_iz	%read{202,580} %write{202,580}
local	int	___475_iy	%read{140,580} %write{140,580}
local	float	___475_v0	%read{84,547} %write{83,536}
local	int	___475_int00	%read{97,580} %write{88,580}
local	int	___475_int01	%read{140,580} %write{131,580}
local	int	___475_int02	%read{202,580} %write{193,580}
local	int	___475_int03	%read{283,580} %write{274,580}
local	int	___475_k	%read{97,580} %write{79,580}
local	int	___538_np.domain	%read{347,494} %write{328,328} %mystruct{___538_np} %mystructfield{0}
local	int	___538_np.range	%read{363,580} %write{329,329} %mystruct{___538_np} %mystructfield{1}
local	float[4]	___538_np.input	%read{349,535} %write{332,339} %mystruct{___538_np} %mystructfield{2}
local	point	___538_np.result	%read{581,583} %write{340,580} %mystruct{___538_np} %mystructfield{3}
local	int	___538_np.periodic	%read{2147483647,-1} %write{341,341} %mystruct{___538_np} %mystructfield{4}
local	int[4]	___538_np.period	%read{2147483647,-1} %write{342,342} %mystruct{___538_np} %mystructfield{5}
local	int	___541_np.domain	%read{80,227} %write{67,67} %mystruct{___541_np} %mystructfield{0}
local	int	___541_np.range	%read{96,313} %write{68,68} %mystruct{___541_np} %mystructfield{1}
local	float[4]	___541_np.input	%read{82,268} %write{69,72} %mystruct{___541_np} %mystructfield{2}
local	point	___541_np.result	%read{314,314} %write{73,313} %mystruct{___541_np} %mystructfield{3}
local	int	___541_np.periodic	%read{2147483647,-1} %write{74,74} %mystruct{___541_np} %mystructfield{4}
local	int[4]	___541_np.period	%read{2147483647,-1} %write{75,75} %mystruct{___541_np} %mystructfield{5}
local	color	___555_out	%read{699,724} %write{689,723}
local	color	___556_hsl	%read{700,716} %write{699,715}
local	color	___558_rmode	%read{610,649} %write{320,320}
local	color	___559_r	%read{589,598} %write{584,588}
local	int	___559_m	%read{607,649} %write{605,645}
local	float	fseed	%read{7,587} %write{1,61}
local	string	___564_idname	%read{20,20} %write{18,19}
local	float	instanceId	%read{51,51} %write{48,49}
local	float	prob	%read{317,317} %write{57,316}
local	float[4]	rnd	%read{609,686} %write{58,658}
const	float	$const1	0		%read{1,718} %write{2147483647,-1}
const	int	$const2	0		%read{2,725} %write{2147483647,-1}
temp	int	$tmp1	%read{3,3} %write{2,2}
temp	int	$tmp2	%read{2147483647,-1} %write{4,4}
const	string	$const3	"builtin"		%read{4,4} %write{2147483647,-1}
const	string	$const4	"id"		%read{4,4} %write{2147483647,-1}
const	int	$const5	1		%read{5,726} %write{2147483647,-1}
temp	int	$tmp3	%read{6,6} %write{5,5}
const	string	$const6	"[PxrVary] id: %f"		%read{7,7} %write{2147483647,-1}
temp	int	$tmp4	%read{9,9} %write{8,8}
temp	int	$tmp5	%read{11,11} %write{10,10}
temp	int	$tmp6	%read{12,17} %write{11,16}
temp	int	$tmp7	%read{14,14} %write{13,13}
const	string	$const7	"user:rixhash"		%read{13,13} %write{2147483647,-1}
temp	int	$tmp8	%read{15,15} %write{14,14}
temp	int	$tmp9	%read{16,16} %write{15,15}
const	string	$const8	""		%read{18,18} %write{2147483647,-1}
temp	int	$tmp10	%read{2147483647,-1} %write{19,19}
const	string	$const9	"identifier:name"		%read{19,19} %write{2147483647,-1}
temp	int	$tmp11	%read{21,21} %write{20,20}
const	int	$const10	65536		%read{21,21} %write{2147483647,-1}
temp	int	$tmp12	%read{22,22} %write{21,21}
const	int	$const11	2		%read{23,727} %write{2147483647,-1}
temp	int	$tmp13	%read{24,24} %write{23,23}
temp	int	$tmp14	%read{26,26} %write{25,25}
const	string	$const12	"primvar"		%read{25,25} %write{2147483647,-1}
temp	int	$tmp15	%read{27,27} %write{26,26}
temp	int	$tmp16	%read{28,32} %write{27,31}
temp	int	$tmp17	%read{30,30} %write{29,29}
temp	int	$tmp18	%read{31,31} %write{30,30}
const	string	$const13	"[PxrVary] Could not find primvar or could not convert to float '%s'"		%read{33,33} %write{2147483647,-1}
const	float	$const14	0.5		%read{35,653} %write{2147483647,-1}
temp	float	$tmp19	%read{36,36} %write{35,35}
const	float	$const15	65535		%read{36,55} %write{2147483647,-1}
const	int	$const16	3		%read{37,686} %write{2147483647,-1}
temp	int	$tmp20	%read{38,38} %write{37,37}
temp	int	$tmp21	%read{40,40} %write{39,39}
temp	int	$tmp22	%read{41,41} %write{40,40}
temp	int	$tmp23	%read{42,46} %write{41,45}
temp	int	$tmp24	%read{44,44} %write{43,43}
temp	int	$tmp25	%read{45,45} %write{44,44}
const	string	$const17	"[PxrVary] Could not find attribute or could not convert to float '%s'"		%read{47,47} %write{2147483647,-1}
temp	int	$tmp26	%read{50,50} %write{49,49}
const	string	$const18	"user:procprimid"		%read{49,49} %write{2147483647,-1}
temp	float	$tmp27	%read{53,56} %write{51,51}
const	string	$const20	"mod"		%read{52,52} %write{2147483647,-1}
temp	float	$tmp28	%read{55,55} %write{54,54}
temp	float	$tmp29	%read{54,54} %write{53,53}
temp	float	$tmp30	%read{56,56} %write{55,55}
const	float	$const21	1		%read{57,722} %write{2147483647,-1}
const	float[4]	$const22	0 0 0 0 		%read{58,58} %write{2147483647,-1}
temp	int	$tmp31	%read{60,60} %write{59,59}
temp	int	$tmp32	%read{63,63} %write{62,62}
const	float	$const23	173		%read{65,315} %write{2147483647,-1}
temp	float	$tmp33	%read{69,69} %write{65,65}
const	string	$const24	"rxcellnoise"		%read{66,327} %write{2147483647,-1}
const	point	$const25	0 0 0		%read{73,340} %write{2147483647,-1}
const	int[4]	$const26	0 0 0 0 		%read{75,342} %write{2147483647,-1}
const	string	$const27	"rx_cell_noise"		%read{76,343} %write{2147483647,-1}
const	float[4096]	$const28	0.266395003 0.633545995 0.973936975 0.910194993 0.264102995 0.354968995 0.315187991 0.871517003 0.0166095998 0.229700997 0.948787987 0.383789986 0.297724009 0.723987997 0.269015014 0.209977999 0.588165998 0.171146005 0.401838988 0.687545002 0.512377977 0.566577017 0.736636996 0.636132002 0.501501024 0.211778998 0.748574018 0.351062 0.119280003 0.856431007 0.313887 0.385675013 0.489977002 0.287824988 0.295870006 0.754079998 0.642794013 0.611057997 0.625597 0.65940398 0.840758979 0.574384987 0.0431938991 0.138483003 0.298373014 0.312207997 0.348461002 0.886538029 0.483354986 0.75029999 0.574082971 0.995732009 0.316877007 0.310719997 0.631864011 0.818377972 0.522499979 0.380438 0.169440001 0.641780019 0.236869007 0.483327001 0.0274548996 0.726846993 0.77115202 0.323325008 0.480926991 0.413946003 0.934382975 0.106523 0.0733494982 0.775143027 0.680908024 0.116543002 0.913626015 0.979281008 0.428752005 0.262086987 0.865818977 0.912106991 0.0123869004 0.439902991 0.907839 0.329263985 0.750622988 0.539703012 0.147642002 0.273122996 0.920140982 0.317081988 0.914902985 0.157011002 0.800409019 0.942357004 0.883857012 0.571560979 0.265682995 0.364784002 0.985507011 0.200066 0.471307009 0.0588560998 0.975208998 0.152215004 0.175400004 0.888834 0.131495997 0.604151011 0.150921002 0.99731499 0.516258001 0.163307995 0.43721801 0.424097002 0.49257201 0.187840998 0.963801026 0.640214026 0.460963011 0.883942008 0.957296014 0.375865996 0.0409528017 0.757704973 0.318223 0.924809992 0.329266012 0.583905995 0.289593995 0.31477201 0.783972025 0.760900974 0.37362799 0.759180009 0.913115025 0.549027979 0.648015022 0.0446113013 0.153179005 0.798936009 0.0419264995 0.669438004 0.962243974 0.479144007 0.0935349986 0.454816014 0.666984975 0.0573357008 0.095029898 0.127948999 0.941277981 0.0523258001 0.503814995 0.982230008 0.810030997 0.822037995 0.90704 0.139295995 0.40594399 0.196633995 0.454068005 0.189916 0.957535028 0.827696979 0.949096024 0.870649993 0.376724005 0.597110987 0.915261984 0.529904008 0.396046013 0.95718801 0.199340999 0.358289987 0.436331987 0.292876005 0.813106 0.103317 0.350212008 0.90813601 0.231266007 0.291489989 0.960461974 0.735081017 0.273719996 0.770492017 0.557119012 0.180760995 0.909788013 0.963063002 0.377395004 0.363857001 0.152978003 0.334930003 0.191552997 0.102073997 0.205579996 0.568278015 0.699185014 0.120840997 0.0981817022 0.0952309966 0.0780292973 0.297522992 0.453521013 0.514361978 0.590399981 0.266627014 0.617679 0.940612018 0.174762994 0.848945022 0.232100993 0.135224 0.584025979 0.505822003 0.905716002 0.141145006 0.686582029 0.815505028 0.104207002 0.0639773011 0.179361999 0.257185012 0.398907006 0.370914996 0.359259009 0.604487002 0.93919301 0.0584441014 0.725328028 0.0373747014 0.153675005 0.803358018 0.334897995 0.607195973 0.317719012 0.925297022 0.873822987 0.935397983 0.86590898 0.0485858992 0.784344018 0.0980103016 0.183809996 0.368369997 0.603832006 0.0895266011 0.509513974 0.290414006 0.905031979 0.613721013 0.354391992 0.084393099 0.870907009 0.753298998 0.45530799 0.230166003 0.357784986 0.394501001 0.288610011 0.0831137002 0.431876004 0.442285001 0.886470973 0.766773999 0.0494818017 0.204190999 0.692071021 0.923304975 0.139588997 0.557980001 0.971890986 0.923933029 0.655990005 0.155700997 0.292302012 0.259822011 0.245228007 0.801815987 0.550235987 0.150259003 0.415538013 0.904627979 0.234651998 0.286444992 0.657926977 0.689961016 0.51661098 0.0157123003 0.0844618008 0.805221021 0.0988259986 0.516337991 0.247507006 0.985297024 0.283111006 0.29698801 0.189487994 0.97518301 0.220293 0.329077005 0.533161998 0.192184001 0.253010005 0.189153001 0.347885996 0.545311987 0.448974997 0.593113005 0.347128004 0.999211013 0.743372977 0.762665987 0.903840005 0.978025019 0.0491108 0.561766028 0.667985976 0.565721989 0.577479005 0.752447009 0.37094301 0.676304996 0.268785 0.618448973 0.66160202 0.551896989 0.915437996 0.851090014 0.527078986 0.135730997 0.180167004 0.0602415986 0.327915013 0.433176011 0.249394 0.675800979 0.978488028 0.698369026 0.268914014 0.325616002 0.697580993 0.0122868996 0.0882825032 0.601419985 0.99031198 0.137392998 0.163185999 0.658297002 0.703114986 0.740665019 0.410744995 0.0740574971 0.416970015 0.679530025 0.692507029 0.0785717964 0.231426999 0.607944012 0.929661989 0.758506 0.743676007 0.109829001 0.818746984 0.0715909973 0.54300499 0.068141602 0.747391999 0.521493018 0.766511023 0.0163062997 0.847109973 0.464091003 0.0285931006 0.935392022 0.0655115023 0.0189049002 0.0727853999 0.228698 0.677201986 0.775900006 0.969362974 0.0879471973 0.849958003 0.386332989 0.767476976 0.542464972 0.464904994 0.99890399 0.150408998 0.394566 0.757408977 0.89408499 0.504395008 0.576156974 0.96567601 0.0473999009 0.644298017 0.713068008 0.568893015 0.41080901 0.729373991 0.416002989 0.874899983 0.757966995 0.351395011 0.940411985 0.776871979 0.424180001 0.16911 0.454073995 0.200080007 0.138473004 0.542020977 0.0500381999 0.524806023 0.309498996 0.592503011 0.989709973 0.308402002 0.742911994 0.384276986 0.0658115968 0.636995971 0.888671994 0.641968012 0.602671981 0.936070979 0.286265999 0.315739989 0.504965007 0.697075009 0.0451133996 0.920966983 0.571974993 0.803080022 0.272361994 0.512386978 0.579952002 0.696542025 0.681496978 0.0340264998 0.896623015 0.819970012 0.576048017 0.946660995 0.344776005 0.885546982 0.539164007 0.334486008 0.193948999 0.282074988 0.718761981 0.259759992 0.919071972 0.607433975 0.901728988 0.521744013 0.543505013 0.187995002 0.837482989 0.0484699011 0.885070026 0.882597029 0.969437003 0.457044989 0.685676992 0.241798997 0.969431996 0.265628994 0.938341975 0.650929987 0.299656004 0.834963977 0.470898986 0.87570399 0.781624973 0.81567502 0.761250019 0.320789009 0.150160998 0.955199003 0.602864027 0.868923008 0.214959994 0.521935999 0.476357013 0.116687998 0.0436795019 0.0198624991 0.304683 0.881163001 0.0683325008 0.189752996 0.763759017 0.0377697013 0.646798015 0.449436009 0.279569 0.616231024 0.715066016 0.217911005 0.267159998 0.0147213005 0.0528746992 0.738059998 0.890425026 0.834500015 0.553735018 0.651674986 0.155288994 0.703894973 0.606875002 0.758153021 0.572818995 0.821834981 0.280088007 0.0491758995 0.938522995 0.32376799 0.0690383986 0.243205994 0.204931006 0.137371004 0.43295899 0.968689978 0.175141007 0.0797571987 0.418125987 0.454710007 0.695987999 0.133192003 0.672619998 0.963147998 0.147912994 0.725494981 0.701207995 0.0383381993 0.559994996 0.254942 0.690014005 0.715282977 0.958837986 0.296887994 0.473435998 0.531656027 0.118722998 0.753524005 0.580832005 0.0572457984 0.0772918016 0.649870992 0.300451994 0.282222003 0.787241995 0.733411014 0.250912011 0.962382019 0.813167989 0.669037998 0.417091995 0.509155989 0.80223 0.0897118002 0.472303987 0.95014298 0.815207005 0.173511997 0.988480985 0.375200987 0.428454012 0.67849499 0.0904844031 0.387291998 0.975383997 0.563920021 0.918947995 0.0941065997 0.317443997 0.499781013 0.151352003 0.394735992 0.149651006 0.451804012 0.676958025 0.936892986 0.185214996 0.927869976 0.899275005 0.998382986 0.596908987 0.316367 0.507538974 0.399138987 0.406078994 0.979842007 0.349281996 0.221285 0.153354004 0.337763011 0.596486986 0.581807971 0.0162585992 0.686971009 0.969099998 0.991641998 0.250891 0.888047993 0.0857487991 0.568334997 0.387829006 0.237101004 0.963070989 0.537479997 0.688905001 0.640029013 0.474373013 0.874119997 0.567898989 0.373647988 0.872502983 0.164808005 0.690015018 0.380041987 0.563947022 0.0960939005 0.359883994 0.913228989 0.317378998 0.513238013 0.250992 0.913865983 0.0950466022 0.267251015 0.600836992 0.0641466007 0.258893013 0.851728022 0.952194989 0.344642013 0.420062989 0.340023994 0.581743002 0.383134007 0.877503991 0.270648986 0.0231628008 0.351877004 0.144768998 0.591062009 0.725525975 0.0172720999 0.755869985 0.415540993 0.397314012 0.319817007 0.511635005 0.757197976 0.233045995 0.829014003 0.270435989 0.484037995 0.742879987 0.365482986 0.75128901 0.343717009 0.429628998 0.0101824999 0.195444003 0.381823987 0.35482499 0.615507007 0.721848011 0.936568022 0.998641014 0.599352002 0.207216993 0.0218038 0.95122999 0.351985991 0.612865984 0.676755011 0.369257987 0.368735999 0.0922963023 0.766570985 0.688552976 0.60393101 0.523769021 0.921598971 0.432945013 0.79420501 0.405638009 0.175825 0.159687996 0.156927004 0.519541025 0.589317977 0.167109996 0.714986026 0.971141994 0.521933973 0.330493003 0.692990005 0.458501995 0.329133987 0.292342991 0.665718019 0.350937992 0.243572995 0.0177039001 0.963804007 0.920328021 0.386961013 0.332540005 0.0126243997 0.153532997 0.0210931003 0.616554976 0.677302003 0.942691982 0.0495004989 0.471507013 0.348329991 0.225325003 0.631195009 0.50525701 0.744867027 0.220513001 0.672366023 0.45985201 0.191654995 0.194300994 0.790345013 0.884644985 0.652801991 0.119479001 0.176988006 0.318520993 0.470416993 0.420560986 0.336225003 0.434219986 0.340889007 0.723186016 0.766759992 0.353513002 0.876718998 0.787853003 0.970068991 0.554021001 0.730544984 0.0195693001 0.0255277995 0.0788754001 0.244894996 0.656723022 0.584132016 0.989760995 0.877236009 0.256498992 0.449613988 0.0688909963 0.450800002 0.239959002 0.953535974 0.103602 0.359438002 0.130523995 0.422122985 0.829854012 0.551084995 0.758346975 0.264075011 0.891973972 0.481534004 0.0308344997 0.245487005 0.358251989 0.818687022 0.215555996 0.91227299 0.549233019 0.235126004 0.937801003 0.628108025 0.480019987 0.594524026 0.212240994 0.469781995 0.471760005 0.468739986 0.91939503 0.540651023 0.919538975 0.159354001 0.494186997 0.0231413003 0.518791974 0.62471199 0.445264012 0.348645985 0.175797001 0.203612 0.612721026 0.0677710995 0.68514502 0.643554986 0.313259006 0.0433975011 0.462242991 0.528814971 0.955671012 0.0114757 0.76394099 0.893471003 0.639584005 0.243961006 0.487994999 0.851824999 0.713742018 0.959756017 0.320564985 0.633136988 0.500406981 0.240104005 0.792491019 0.994593978 0.263244987 0.311282992 0.619306028 0.708509028 0.659928977 0.795103014 0.912120998 0.272650003 0.862873971 0.597266018 0.916204989 0.176133007 0.640663981 0.378448009 0.704948008 0.596333981 0.38992399 0.468888015 0.489805996 0.0295075998 0.712849021 0.977801025 0.88133198 0.426591009 0.937556982 0.201896995 0.0597289018 0.437963009 0.442000985 0.852219999 0.432558 0.705245972 0.163503006 0.051863499 0.413755 0.823432028 0.846966028 0.325875998 0.0960822999 0.70984 0.923142016 0.0122873997 0.885972977 0.563805997 0.390735 0.590920985 0.160139993 0.78065902 0.0598088987 0.649945021 0.810167015 0.77265799 0.627746999 0.691498995 0.199248999 0.565303028 0.89339602 0.258978009 0.00326664001 0.335397005 0.111198999 0.435824007 0.0406426005 0.274702013 0.487688005 0.454398006 0.0981341973 0.334654003 0.780273974 0.194215998 0.0444944017 0.70341599 0.206504002 0.930468023 0.267221987 0.597239017 0.521387994 0.427361012 0.377898008 0.581197023 0.0773068964 0.188065007 0.353855014 0.705052972 0.879563987 0.553103983 0.270357013 0.772960007 0.812083006 0.27362299 0.108355999 0.923281014 0.70944798 0.148999006 0.197982997 0.197135001 0.603395998 0.296117008 0.531789005 0.383670002 0.490334004 0.576283991 0.0870862976 0.696838021 0.506751001 0.354308009 0.294077009 0.0281393006 0.781669021 0.671975017 0.609336019 0.858976007 0.860040009 0.963190973 0.564029992 0.739602983 0.516296029 0.834387004 0.51256299 0.328379005 0.108010001 0.620918989 0.251659989 0.81745702 0.769918025 0.449642986 0.0145925004 0.373313993 0.745760977 0.54638201 0.756985009 0.236093998 0.122665003 0.844070971 0.932932019 0.629415989 0.198378995 0.227008 0.657554984 0.980048001 0.898983002 0.266891986 0.839025021 0.759023011 0.230083004 0.403053999 0.498625994 0.746379018 0.237441003 0.0111889001 0.0747578964 0.345450997 0.632107973 0.326418012 0.162908003 0.402025998 0.776060998 0.177500993 0.775340021 0.521821976 0.72388202 0.532324016 0.757915974 0.846547008 0.376394987 0.690847993 0.47596401 0.574774027 0.917855978 0.133518994 0.554822028 0.81683898 0.40041101 0.393846989 0.57586199 0.630493999 0.796900988 0.0744881034 0.376872987 0.0343424007 0.0856769979 0.45163101 0.379792988 0.717785001 0.778048992 0.542701006 0.11981 0.554109991 0.720202029 0.895150006 0.0759316981 0.444083989 0.427473992 0.833848 0.29063201 0.803869009 0.524694979 0.766595006 0.378643006 0.442550987 0.900114 0.933466017 0.259389997 0.30052501 0.327311993 0.835251987 0.931019008 0.124214001 0.909740984 0.307891995 0.158555999 0.995418012 0.759522974 0.538348973 0.713202 0.537572026 0.0810509026 0.833012998 0.0916818008 0.801253021 0.728163004 0.167613998 0.245337993 0.155636996 0.00146108004 0.535969019 0.959506989 0.526156008 0.302565008 0.338149995 0.968707025 0.202678993 0.271614999 0.228098005 0.503203988 0.598927975 0.0633499026 0.434222996 0.723141015 0.973089993 0.742115021 0.881698012 0.968508005 0.501637995 0.420046985 0.681710005 0.0392098017 0.501097977 0.514723003 0.130891994 0.302350998 0.242886007 0.298505008 0.547688007 0.398523003 0.299966007 0.083657898 0.358029008 0.826121986 0.386222988 0.696178973 0.794830024 0.588901997 0.967795014 0.0229272004 0.0921060964 0.566721976 0.0862770975 0.526328981 0.289864004 0.0593673997 0.268444002 0.171561003 0.0278753992 0.770081997 0.591607988 0.709586024 0.809292018 0.0927060992 0.224308997 0.940183997 0.395056993 0.467193991 0.238689005 0.94274497 0.865716994 0.538654983 0.0264033992 0.223747 0.364778012 0.412625998 0.919925988 0.159606993 0.00152808998 0.887719989 0.182533994 0.0936342031 0.454443008 0.268810987 0.61996299 0.744306028 0.328179002 0.888408005 0.915867984 0.356054008 0.658490002 0.507475972 0.0656398013 0.467781991 0.600181997 0.289947987 0.407965988 0.995239019 0.757143021 0.646655023 0.937985003 0.622860014 0.185310006 0.964388013 0.846607029 0.550086975 0.377014011 0.766532004 0.709694982 0.378542006 0.654253006 0.892229021 0.472175986 0.108695 0.161039993 0.0921398029 0.853002012 0.48921901 0.980548024 0.768868983 0.845273018 0.639038026 0.276345015 0.910912991 0.106820002 0.876527011 0.200861007 0.514786005 0.871766984 0.958003998 0.161440998 0.809750974 0.580864012 0.346751004 0.774138987 0.427471012 0.896838009 0.151152998 0.194003001 0.606532991 0.529694974 0.848255992 0.498762012 0.00187152997 0.956951022 0.65980202 0.0940114036 0.809952974 0.149021 0.0745590031 0.578822017 0.994293988 0.713597 0.855167985 0.905206978 0.820416987 0.731694996 0.106068999 0.335202992 0.603461981 0.0640726984 0.49664399 0.413213015 0.644936979 0.843394995 0.187352002 0.0724077001 0.740233004 0.338505 0.266411006 0.346765995 0.868200004 0.114666998 0.845528007 0.870072007 0.0716186017 0.505330026 0.964083016 0.881572008 0.654352009 0.0386418998 0.460393995 0.648645997 0.752238989 0.31556201 0.553852975 0.572655976 0.047257401 0.659922004 0.907859027 0.650718987 0.72399497 0.404502988 0.0639320984 0.368930995 0.247896999 0.251284003 0.441338986 0.988130987 0.589788973 0.707750022 0.334897012 0.457989007 0.822417021 0.180425003 0.328060001 0.894035995 0.685756028 0.292142987 0.775608003 0.340108007 0.330785006 0.236001998 0.988753021 0.0830236971 0.551563978 0.542607009 0.655678988 0.598821998 0.202528998 0.563538015 0.249541 0.92652297 0.968039989 0.313472986 0.295455009 0.215938002 0.564756989 0.736793995 0.204069003 0.154545993 0.444543988 0.538966 0.612533987 0.266961008 0.719390988 0.940594018 0.160997003 0.405146986 0.232738003 0.936604977 0.745254993 0.563521981 0.172607005 0.734008014 0.646546006 0.724170983 0.276614994 0.302224994 0.32299301 0.479142994 0.865763009 0.572534025 0.405667007 0.833804011 0.886007011 0.701120973 0.0497415997 0.450764 0.437914997 0.253809988 0.60530901 0.882458985 0.792775989 0.217843994 0.149419993 0.512166977 0.158437997 0.31041801 0.917313993 0.391175985 0.247023001 0.662568986 0.954698026 0.419629991 0.396577001 0.601243973 0.143801004 0.673192024 0.90346998 0.466794014 0.152335003 0.769232988 0.0393276997 0.558001995 0.603037 0.92533499 0.259122998 0.652778029 0.376098007 0.697037995 0.906588018 0.981408 0.57949698 0.699364007 0.199250996 0.728917003 0.211531997 0.357688993 0.0393345989 0.128846005 0.748865008 0.286356986 0.791414976 0.703562975 0.705986977 0.187992007 0.304807007 0.84978801 0.861182988 0.208276004 0.316581994 0.0135185998 0.977509022 0.355910003 0.571519971 0.580546021 0.28124401 0.830642998 0.233324006 0.657342017 0.527680993 0.139911994 0.638750017 0.107178003 0.839277029 0.838001013 0.836094975 0.0508081988 0.195690006 0.875428975 0.179654002 0.944554985 0.161787003 0.971068978 0.648117006 0.86777401 0.159061 0.952924013 0.717561007 0.0202440992 0.161200002 0.0341431983 0.0337627009 0.138708994 0.390053004 0.605283022 0.719254971 0.671297014 0.43592599 0.952579021 0.328639001 0.963607013 0.0924908966 0.967388988 0.0707852021 0.931766987 0.80539 0.906880021 0.982576013 0.00107978994 0.782310009 0.16223 0.945634007 0.944096029 0.133298993 0.593751013 0.811869979 0.292358994 0.546675026 0.529430985 0.312602997 0.707875013 0.563574016 0.346365988 0.846584976 0.95362699 0.95164901 0.565840006 0.624924004 0.387575001 0.518418014 0.953562975 0.351182997 0.610908985 0.920952022 0.421968013 0.542676985 0.726342022 0.328848004 0.525252998 0.727421999 0.111157998 0.687481999 0.673056006 0.0552540012 0.820780993 0.26680699 0.867124021 0.113140002 0.813483 0.396555007 0.425743997 0.521358013 0.960129023 0.772109985 0.367942989 0.913756013 0.723758996 0.933781981 0.538680017 0.111334004 0.452201009 0.492242992 0.462516993 0.0631102994 0.413195014 0.884485006 0.605786979 0.139537007 0.213332996 0.131040007 0.866958022 0.324490994 0.818521976 0.540014029 0.379745007 0.639303029 0.806822002 0.246868998 0.752443016 0.620303988 0.643423975 0.178186998 0.141662002 0.603552997 0.950296998 0.50960499 0.51730901 0.674055994 0.443387002 0.0559896007 0.785390973 0.895587981 0.548232973 0.247907996 0.958697975 0.961427987 0.132393003 0.564485013 0.100965001 0.345726013 0.695524991 0.967922986 0.670216978 0.514047027 0.507937014 0.0499624014 0.153349996 0.314758986 0.296831012 0.905793011 0.935063004 0.940254986 0.0839805976 0.0767249987 0.543807983 0.0342776999 0.586329997 0.0611172989 0.708334029 0.0297164004 0.117106996 0.493725002 0.925303996 0.665340006 0.741632998 0.88400197 0.626767993 0.874026 0.448487014 0.727732003 0.219751999 0.144012004 0.695656002 0.889970005 0.658059001 0.203593001 0.939931989 0.811408997 0.518351972 0.236763 0.717202008 0.453415006 0.177018002 0.801182985 0.530139983 0.72082603 0.83546102 0.116470002 0.781943023 0.54379499 0.146185994 0.899049997 0.0375192985 0.0714901984 0.564390004 0.779151976 0.95549202 0.191156998 0.653177977 0.403979987 0.918889999 0.87292999 0.547991991 0.614544988 0.762898982 0.206051007 0.818139017 0.70283097 0.0174599998 0.336490989 0.939593971 0.734661996 0.789906025 0.116612002 0.535844982 0.320046008 0.837437987 0.371306002 0.436515003 0.619381011 0.915100992 0.582701027 0.518431008 0.952620029 0.654191017 0.0828204975 0.731772006 0.60968399 0.273977995 0.384950012 0.0136636002 0.192867994 0.257878989 0.561655998 0.807412982 0.0207789 0.76770699 0.625551999 0.723609984 0.785166979 0.962041974 0.663204014 0.519828975 0.751947999 0.779815972 0.0556744002 0.0719935 0.617254019 0.426979989 0.50850898 0.236635 0.34208101 0.0912100971 0.755065978 0.29470101 0.745401978 0.837885976 0.0264730006 0.355085999 0.111864001 0.411422998 0.368748993 0.304731995 0.669301987 0.930405021 0.112144999 0.690081 0.698110998 0.737695992 0.413691014 0.483278006 0.699738979 0.0768954009 0.00310679991 0.451685995 0.856711984 0.0587811992 0.523679972 0.473966002 0.485762 0.0321886986 0.710600972 0.82784301 0.123398997 0.465667009 0.122543998 0.868799984 0.303552985 0.149017006 0.223885998 0.415416986 0.560438991 0.592634976 0.720148027 0.229741007 0.523039997 0.832292974 0.919821978 0.221150994 0.569989979 0.333512992 0.704428971 0.269728005 0.410409003 0.707535982 0.721414983 0.267120004 0.76631701 0.245094001 0.741086006 0.252077997 0.277283013 0.451687008 0.0799209028 0.400682002 0.917353988 0.202464998 0.269481987 0.220906004 0.351480991 0.493368 0.636322975 0.911920011 0.0860036016 0.356471002 0.141661003 0.609043002 0.188764006 0.0614835992 0.830193996 0.758754015 0.394997001 0.534623027 0.0284819007 0.805405021 0.242158994 0.74989599 0.0725255981 0.00847576 0.994991004 0.813611984 0.260553986 0.272273988 0.265298992 0.340474993 0.67295599 0.182652995 0.542940021 0.942438006 0.403558999 0.894420981 0.43580699 0.0398819 0.806340992 0.521811008 0.396353006 0.948001981 0.130853996 0.585117996 0.0094859302 0.961048007 0.343872011 0.404482991 0.495671988 0.372352988 0.209887996 0.737830997 0.122249998 0.282413989 0.746306002 0.117241003 0.0960254967 0.00686055003 0.389515013 0.361324012 0.347335994 0.0624708012 0.543977022 0.890275002 0.00490929 0.947535992 0.784695983 0.440715998 0.987417996 0.591036975 0.962526977 0.383771002 0.539039016 0.0933806971 0.968888998 0.548524976 0.054429099 0.312759995 0.953007996 0.550100982 0.685114026 0.162896007 0.287932009 0.807363987 0.445309013 0.0342379995 0.924603999 0.541334987 0.0410985015 0.314119011 0.902658999 0.388433993 0.376590014 0.446635991 0.278708994 0.381498992 0.394172013 0.0634050965 0.822215021 0.381590009 0.654442012 0.784741998 0.765361011 0.193480998 0.878122985 0.734250009 0.742006004 0.93255198 0.0470100008 0.695012987 0.482652992 0.732123971 0.857909024 0.770583987 0.539487004 0.303218007 0.804822028 0.464091986 0.844552994 0.84592098 0.778210998 0.747211993 0.234355003 0.154800996 0.193848997 0.513064027 0.536300004 0.58802098 0.576469004 0.358514994 0.969610989 0.230911002 0.143257007 0.734972 0.424392015 0.0213801991 0.469220996 0.166398004 0.953931987 0.516231 0.861410975 0.436585009 0.248355001 0.719319999 0.207169995 0.787841976 0.0225389004 0.011992 0.251933992 0.867092013 0.857913017 0.0301444009 0.614304006 0.0922679976 0.184945002 0.808152974 0.605332017 0.721244991 0.396174014 0.181802005 0.0797599033 0.365783989 0.412712991 0.223017007 0.100755997 0.837104976 0.244396999 0.569976985 0.0035027999 0.19833 0.0862087011 0.864914 0.634914994 0.334564 0.584235013 0.842083991 0.122405998 0.606773019 0.854076028 0.374339998 0.473865986 0.711988986 0.404484004 0.0881700963 0.804256976 0.589429021 0.896323025 0.409590006 0.310674012 0.292497009 0.591391027 0.390433997 0.658281028 0.00410436979 0.613451004 0.759037018 0.841208994 0.857847989 0.329014987 0.844712019 0.0561779998 0.415223002 0.709626019 0.691093028 0.749786973 0.293861002 0.533177018 0.872192979 0.900633991 0.387254 0.246533006 0.374500006 0.0992432013 0.65101701 0.462669998 0.903500974 0.240446001 0.358992994 0.313089997 0.551119983 0.651489973 0.904482007 0.941552997 0.309771001 0.908586025 0.555004001 0.0688085034 0.74979502 0.412851989 0.397823006 0.594507992 0.469029993 0.813046992 0.304134011 0.160123006 0.562834024 0.597994983 0.693300009 0.435027003 0.498629004 0.080554001 0.681559026 0.87312901 0.179796994 0.332576007 0.335799009 0.0832977965 0.573022008 0.694791973 0.396387994 0.124141 0.346282005 0.300870001 0.065694198 0.656053007 0.209455997 0.620697975 0.724861979 0.959250987 0.0335502997 0.122685 0.553758979 0.502581 0.935730994 0.85789299 0.662703991 0.498564988 0.45588699 0.356004 0.933591008 0.954515994 0.436558008 0.615150988 0.827645004 0.616355002 0.947726011 0.163443998 0.699653029 0.520748019 0.858235002 0.0960408971 0.644888997 0.204517007 0.396910995 0.710582972 0.860570014 0.606366992 0.33128199 0.585431993 0.565617979 0.364832014 0.708115995 0.119377002 0.867411971 0.643848002 0.977270007 0.530116022 0.142413005 0.433156997 0.886120021 0.0760039985 0.387672991 0.322676986 0.691155016 0.215317994 0.939032018 0.638881028 0.378762007 0.638684988 0.159629002 0.236998007 0.734726012 0.804517984 0.441514999 0.131637007 0.515102029 0.302085012 0.738004029 0.846382976 0.887516975 0.303622007 0.211215004 0.59563297 0.422998011 0.0786276013 0.239481002 0.400267988 0.608743012 0.381893009 0.833424985 0.494863003 0.457897007 0.221099004 0.81753999 0.149051994 0.436417013 0.756573021 0.787932992 0.81517899 0.395258009 0.947562993 0.0521767996 0.129984006 0.752080977 0.493692011 0.261620998 0.267183006 0.79577601 0.999625027 0.113565996 0.683292985 0.303245991 0.324781001 0.278926015 0.726244986 0.403409004 0.518406987 0.126513004 0.0121523002 0.900300026 0.95993799 0.50701499 0.358197987 0.181036994 0.324555993 0.507250011 0.617453992 0.0811287016 0.295183003 0.432633013 0.476386994 0.242744997 0.484809995 0.606370986 0.994826019 0.978501976 0.867992997 0.262008995 0.774277985 0.867617011 0.375575006 0.457571 0.170864001 0.70035702 0.736497998 0.897108972 0.103765003 0.254904002 0.0236219 0.115918003 0.155204996 0.983560026 0.622932971 0.513401985 0.164597005 0.947489023 0.0206518993 0.78205198 0.0286174994 0.315834999 0.214684993 0.505003989 0.558579981 0.699495018 0.111376002 0.553406 0.677996993 0.979367971 0.815415025 0.452275008 0.846985996 0.190990999 0.909846008 0.0178497992 0.891346991 0.646344006 0.914959013 0.995112002 0.901247978 0.93858099 0.111029997 0.0564530008 0.922141016 0.733963013 0.569854975 0.0867383033 0.681451976 0.590506971 0.868789971 0.710069001 0.90634203 0.0834748 0.215074003 0.464922011 0.782970011 0.32644999 0.0183281004 0.460967004 0.305817991 0.833742976 0.913241982 0.152804002 0.0247338992 0.82308799 0.170653999 0.916081011 0.469431996 0.0856124014 0.911193013 0.370680004 0.024193 0.0222234 0.427132994 0.946334004 0.756187022 0.996987998 0.0330720991 0.437638015 0.587495029 0.901862025 0.147707999 0.493836999 0.985337019 0.362782001 0.95875901 0.768306971 0.689230978 0.977087021 0.229273006 0.995049 0.810829997 0.142515004 0.147853002 0.835564017 0.965602994 0.318506986 0.751645029 0.435034007 0.404119015 0.662838995 0.805714011 0.428312004 0.685061991 0.232847005 0.374646008 0.441248 0.229835004 0.407718003 0.878886998 0.817330003 0.309579998 0.0265947003 0.311167002 0.294916987 0.389376014 0.269926012 0.0632231012 0.0786074027 0.247013003 0.292495996 0.0736564994 0.0578433014 0.435010999 0.221508995 0.893408 0.400613993 0.540015996 0.645053029 0.835648 0.94413501 0.307891011 0.641362011 0.372447014 0.992953002 0.874207973 0.747093022 0.434201986 0.104042999 0.154810995 0.313089013 0.92137301 0.464390993 0.339682996 0.232539997 0.759307981 0.729058981 0.502466023 0.822530985 0.807667017 0.749478996 0.115027003 0.88132298 0.807322979 0.55003798 0.102833003 0.700730026 0.95065099 0.642849028 0.345782995 0.78629899 0.586983979 0.653674006 0.427661002 0.959432006 0.646627009 0.301869005 0.706525028 0.0808288977 0.405912012 0.861335993 0.393916994 0.327284992 0.325726986 0.733600974 0.559825003 0.0850344971 0.462660015 0.0622913986 0.907564998 0.270327002 0.811770976 0.0225920994 0.151649997 0.619093001 0.572629988 0.254483014 0.319822997 0.523280978 0.897332013 0.665606022 0.309581012 0.484315991 0.319279999 0.73724103 0.443747014 0.965907991 0.0391101018 0.150271997 0.0467365012 0.445021987 0.0116079999 0.44065401 0.772306979 0.337334991 0.174254 0.332132012 0.422369003 0.636914015 0.394423991 0.329935014 0.907240987 0.206193998 0.352526993 0.0588913001 0.825287998 0.925157011 0.313374013 0.145110995 0.448437989 0.210705996 0.810716987 0.75801897 0.695021987 0.129997998 0.49526 0.138769001 0.0959054977 0.534370005 0.289041013 0.142642006 0.979391992 0.300648987 0.583296001 0.751698971 0.637983978 0.757550001 0.0838309973 0.0603533983 0.394464999 0.47825399 0.390287995 0.301705986 0.684449017 0.742815018 0.360597014 0.509736001 0.667971015 0.673972011 0.654847026 0.116410002 0.884676993 0.465564996 0.874427974 0.57969898 0.595561981 0.369688004 0.71846801 0.691468 0.90405798 0.00750896009 0.834110022 0.883449972 0.30815801 0.417405993 0.635149002 0.946142018 0.174955994 0.718980014 0.00649531977 0.569420993 0.197235003 0.396782994 0.871127009 0.881684005 0.139597997 0.231723994 0.391420007 0.807569027 0.905695975 0.0462668985 0.923978984 0.790373027 0.511830986 0.798407018 0.370072007 0.107394002 0.168096006 0.0885401964 0.79886198 0.0721542016 0.0960491002 0.632970989 0.95560497 0.404206991 0.0503770001 0.590753973 0.350349009 0.225333005 0.309733987 0.356844008 0.794754028 0.506968975 0.753628016 0.665880978 0.38865301 0.893226027 0.897605002 0.780071974 0.700794995 0.803300977 0.826339006 0.624773979 0.593675017 0.338171005 0.423182011 0.963747025 0.445564002 0.591277003 0.0522871017 0.244425997 0.663432002 0.148335993 0.877397001 0.619036019 0.552542984 0.927774012 0.209790006 0.902891994 0.153107002 0.519523978 0.259737015 0.947861016 0.0264935996 0.0133645004 0.613741994 0.415145993 0.906589985 0.511346996 0.195217997 0.60738498 0.314648986 0.0215576999 0.232159004 0.90832299 0.359728009 0.655341029 0.872070014 0.805293024 0.246618003 0.924356997 0.0497188009 0.910049975 0.0726936981 0.927115977 0.529085994 0.625236988 0.854889989 0.738875985 0.528129995 0.00799768046 0.258401006 0.787865996 0.955859005 0.28489399 0.801231027 0.569600999 0.700040996 0.707821012 0.0809481964 0.895259023 0.315205991 0.395597011 0.916817009 0.547366023 0.303920001 0.276544988 0.202706993 0.175990999 0.0818378031 0.449324995 0.100348003 0.131557003 0.359375 0.173041999 0.0586728007 0.888460994 0.798278987 0.913563013 0.627337992 0.326407999 0.921561003 0.885739028 0.114275001 0.877420008 0.170633003 0.915506005 0.447021008 0.870674014 0.623327017 0.527969003 0.765932977 0.938533008 0.923565984 0.682748973 0.485899001 0.227485999 0.959294021 0.688606024 0.403477013 0.0411320999 0.137931004 0.503825009 0.172689006 0.497307003 0.676865995 0.231361002 0.385767996 0.475145012 0.144924998 0.0131059997 0.801554024 0.0664855987 0.898845017 0.91582799 0.943904996 0.0694776997 0.831333995 0.390926003 0.940150976 0.454661012 0.918895006 0.706084013 0.39319399 0.842459977 0.388832986 0.879094005 0.0699461997 0.348127007 0.567700028 0.473423004 0.389259011 0.705631018 0.977247 0.561948001 0.202938005 0.654114008 0.793309987 0.588706017 0.129259005 0.938233972 0.601812005 0.930813015 0.00471981987 0.500657022 0.846641004 0.948625028 0.570133984 0.677976012 0.339551002 0.510285974 0.132636994 0.258444995 0.216370001 0.525830984 0.100906 0.605202973 0.404924005 0.170852005 0.95332998 0.972624004 0.64427501 0.342588991 0.678255022 0.621522009 0.904537022 0.881192982 0.275635988 0.697847009 0.469898999 0.404895008 0.63608098 0.0717113018 0.335707992 0.640801013 0.572368026 0.182348996 0.589425981 0.142501995 0.860324979 0.928977013 0.652787983 0.992960989 0.187423006 0.86915803 0.518791974 0.288327992 0.474359989 0.923716009 0.459179997 0.427689999 0.896340013 0.103455 0.770280004 0.574595988 0.724977016 0.674817026 0.455789 0.000612734992 0.372664005 0.925688028 0.405508012 0.00874562003 0.997399986 0.741216004 0.649546981 0.569768012 0.92356497 0.238973007 0.712270021 0.783890009 0.167950004 0.365058005 0.776850998 0.355372995 0.234216005 0.295643002 0.643701017 0.708576024 0.219359994 0.102880999 0.136265993 0.115699999 0.206336007 0.906545997 0.690295994 0.931312978 0.581363022 0.146084994 0.931926012 0.95402801 0.0717732012 0.33743301 0.962773025 0.0691727027 0.0786492005 0.612320006 0.638939977 0.00221436005 0.851293027 0.351209998 0.786104023 0.0192431007 0.716268003 0.562955976 0.374615997 0.950483978 0.858599007 0.0183169991 0.659060001 0.0779590979 0.121197999 0.795325994 0.193660006 0.32753399 0.701871991 0.883956015 0.258846998 0.283235013 0.0300407 0.190772995 0.237262994 0.101814002 0.528205991 0.200036004 0.170986995 0.606854975 0.812355995 0.809926987 0.609070003 0.663649023 0.161137 0.395173997 0.682892025 0.877404988 0.958130002 0.0575078987 0.827889025 0.816729009 0.0758247972 0.486948997 0.89468801 0.197023004 0.282274991 0.0883475989 0.524556994 0.984147012 0.972302973 0.783405006 0.267381996 0.00234391005 0.974177003 0.50464499 0.104157999 0.502382994 0.704680979 0.275144011 0.109238997 0.517036974 0.0850709975 0.718308985 0.180685997 0.246207997 0.113482997 0.863578022 0.123613 0.0716124997 0.921086013 0.951502025 0.88834101 0.996910989 0.438450992 0.78302902 0.193933994 0.720725 0.871376991 0.718491018 0.704873025 0.843680024 0.501896024 0.972254992 0.846023977 0.476072997 0.476900011 0.950182021 0.978456974 0.181582004 0.225326002 0.0876955017 0.698619008 0.310396999 0.806003988 0.879306018 0.556604981 0.919487 0.74288398 0.680217981 0.991099 0.663969994 0.631720006 0.879441023 0.660880983 0.0701700971 0.662469983 0.854815006 0.790895998 0.533846974 0.573306978 0.495768011 0.377528012 0.0752025023 0.468023002 0.223552004 0.551276028 0.944922984 0.173733994 0.529731989 0.126505002 0.399060011 0.617428005 0.825124025 0.70945698 0.423431993 0.704429984 0.266061991 0.342918992 0.447313994 0.946280003 0.334017992 0.111284003 0.577998996 0.213459 0.772165 0.648168981 0.875928998 0.626980007 0.439065009 0.409776002 0.200286001 0.93483299 0.787303984 0.275489002 0.402855992 0.0108556999 0.826763988 0.347779006 0.184588999 0.35649699 0.474285007 0.58364898 0.973924994 0.299409002 0.29310599 0.397356987 0.00383896008 0.559167981 0.740275025 0.45115301 0.505447984 0.0742935017 0.562435985 0.0834472999 0.287752002 0.334601015 0.731616974 0.163681999 0.961580992 0.170681998 0.573458016 0.161866993 0.105515003 0.360762 0.437355995 0.508370996 0.371618003 0.264120996 0.856149971 0.556207001 0.620616972 0.330435008 0.139855996 0.594542027 0.62984401 0.432962 0.991899014 0.633683026 0.992129982 0.732173979 0.0848354995 0.497577995 0.806466997 0.647271991 0.581026018 0.0942199007 0.981872976 0.312642008 0.257901996 0.943454027 0.483323991 0.831359982 0.105320998 0.588838995 0.192121997 0.542676985 0.0972094983 0.563739002 0.806797981 0.953360021 0.119946003 0.427415013 0.283794999 0.259802014 0.0219573006 0.913637996 0.692764997 0.0138558997 0.547321022 0.684894979 0.746029973 0.632157028 0.182473004 0.552497029 0.279428989 0.763499022 0.646717012 0.261301994 0.0761412978 0.904618979 0.204756007 0.559464991 0.735978007 0.310077012 0.148304 0.92809999 0.85275501 0.245514005 0.491838992 0.659552991 0.198872998 0.611784995 0.0869679973 0.482668012 0.871587992 0.108925 0.396306008 0.564351976 0.122781001 0.943628013 0.249247 0.868811011 0.575784981 0.431721002 0.421308011 0.855212986 0.195219994 0.0680254996 0.116515003 0.271360993 0.972643971 0.321271002 0.830825984 0.708622992 0.631349027 0.979130983 0.636722028 0.484104007 0.224644005 0.128562003 0.143656 0.423518002 0.740347028 0.230624005 0.906185985 0.611935019 0.339549989 0.302491993 0.176286995 0.462330997 0.246120006 0.42553401 0.331142008 0.821904004 0.857254982 0.752449989 0.677118003 0.0524746999 0.820475996 0.793632984 0.323835999 0.793120027 0.114905 0.154661998 0.501742005 0.746253014 0.133792996 0.138465002 0.230357006 0.358437002 0.267026007 0.37401399 0.78195399 0.0073731998 0.60463798 0.688139975 0.619307995 0.944187999 0.990631998 0.79559499 0.406518996 0.236751005 0.221129 0.737659991 0.0586557984 0.0783839002 0.49011001 0.735773981 0.130859002 0.310586005 0.529407024 0.454694003 0.103706002 0.644311011 0.609356999 0.605448008 0.390565008 0.743148983 0.743912995 0.620922029 0.101585999 0.0109393997 0.994935989 0.883539975 0.0183125995 0.599574029 0.571680009 0.637619972 0.543761015 0.562312007 0.433214992 0.950280011 0.799063981 0.654344022 0.687940001 0.857719004 0.732728004 0.178050995 0.593492985 0.863586009 0.488635987 0.122900002 0.318280995 0.592342019 0.76721102 0.927636981 0.197790995 0.157775998 0.670786977 0.941703975 0.778698027 0.772373021 0.952642977 0.773633003 0.655912995 0.970956028 0.373207003 0.227593005 0.608576 0.916967988 0.789905012 0.0417911001 0.867247999 0.588968992 0.696134984 0.555188 0.446687996 0.428862989 0.733237982 0.0401809998 0.292448997 0.221874997 0.163081005 0.610729992 0.814216971 0.930290997 0.538366973 0.0120077999 0.0880670026 0.209153995 0.953710973 0.866765022 0.981526971 0.90635401 0.640398026 0.637440026 0.877309978 0.0136046 0.865032971 0.485886008 0.930572987 0.654938996 0.527677 0.797819972 0.243908003 0.223811999 0.353008002 0.690595984 0.652674973 0.0862466991 0.730777025 0.945124984 0.308122009 0.893857002 0.555854976 0.122339003 0.824149013 0.0942220986 0.134347007 0.912216008 0.303375989 0.088057898 0.77898097 0.28490299 0.994412005 0.419378012 0.922343016 0.871722996 0.432983011 0.787375987 0.357609004 0.363555998 0.442315012 0.885285974 0.161375999 0.68622297 0.109099001 0.514383972 0.376819015 0.761774004 0.600630999 0.107594997 0.706898987 0.908752978 0.00145291002 0.26275301 0.0310916007 0.825601995 0.356974989 0.165437996 0.737818003 0.660351992 0.253495991 0.516798019 0.945254982 0.247907996 0.936177015 0.867597997 0.119631 0.369159997 0.654973984 0.477239996 0.732715011 0.0972890034 0.362526 0.894092023 0.783511996 0.471625 0.408475995 0.160329998 0.233399004 0.00910731964 0.267926008 0.940298021 0.917859972 0.26937899 0.203051999 0.948952019 0.0949803963 0.560027003 0.114390001 0.832798004 0.220378995 0.367886007 0.349595994 0.165634006 0.615794003 0.285773009 0.0332312994 0.735424995 0.654932976 0.688205004 0.212665007 0.387647986 0.78549403 0.575191975 0.28174001 0.569006026 0.0468169004 0.690216005 0.729336023 0.280216008 0.699322999 0.997262001 0.220514998 0.61718303 0.266640991 0.423566014 0.566134989 0.361620992 0.983592987 0.680525005 0.194418997 0.203971997 0.0484105013 0.54401499 0.369605988 0.664205015 0.829788029 0.402837008 0.39963001 0.484721005 0.0910425037 0.612294972 0.872368991 0.876537025 0.187487006 0.154109001 0.445542991 0.234303996 0.844323993 0.174879 0.514519989 0.543648005 0.172141001 0.735035002 0.160831004 0.438782007 0.158601001 0.726966023 0.800402999 0.142194003 0.407490999 0.994822025 0.346166998 0.455900997 0.538837016 0.715772986 0.120105997 0.368624985 0.118610002 0.519735992 0.853344977 0.209652007 0.132030994 0.725714028 0.0861890987 0.319518 0.879823029 0.531732023 0.553821981 0.724147022 0.706610978 0.0683422014 0.267794997 0.878751993 0.803376973 0.428626001 0.317532986 0.961978018 0.155591995 0.117936 0.104172997 0.56308198 0.112758003 0.450338989 0.0189836994 0.651593983 0.166112006 0.139090002 0.0202188995 0.284722 0.658825994 0.873564005 0.494374007 0.790857017 0.599277973 0.580563009 0.110375002 0.479101002 0.112295002 0.664197028 0.203247994 0.818906009 0.732538998 0.471042991 0.697658002 0.535916984 0.899667978 0.0151914004 0.497895002 0.0552602001 0.133128002 0.602066994 0.618342996 0.245885 0.052406501 0.637326002 0.897478998 0.218518004 0.776416004 0.917698026 0.503239989 0.435241997 0.791262984 0.99761498 0.226098999 0.390540987 0.578177989 0.336474001 0.869642019 0.69047302 0.000671559013 0.0728897974 0.509379029 0.733210981 0.543932021 0.207037002 0.269127995 0.443601012 0.222228006 0.767022014 0.498861015 0.355356008 0.369089007 0.117204003 0.601240993 0.421496004 0.754530013 0.49871999 0.640013993 0.53094703 0.416418999 0.143253997 0.966188014 0.207681 0.140869007 0.192287996 0.598222017 0.71904701 0.528761983 0.467864007 0.40952 0.529433012 0.54075402 0.918899 0.262643993 0.0846861005 0.125936002 0.531772017 0.528286994 0.348163992 0.298794001 0.0271483008 0.70352 0.667882979 0.144352004 0.304760993 0.0893787965 0.898882985 0.803480983 0.729393005 0.429829001 0.219899997 0.872646987 0.396017998 0.427581012 0.0135164 0.588304996 0.0258026998 0.732563019 0.117067002 0.493665993 0.142083004 0.646499991 0.0344199985 0.0609815009 0.909144998 0.119106002 0.186917007 0.440916985 0.647392988 0.535081029 0.739710987 0.674540997 0.238600999 0.407593995 0.818894029 0.543362021 0.496973008 0.717776 0.346843004 0.226365998 0.147605002 0.566742003 0.0990128964 0.543622971 0.994323015 0.112529002 0.131927997 0.0201255996 0.845091999 0.248995006 0.513791978 0.987174988 0.895494998 0.548211992 0.0481568016 0.804639995 0.667317986 0.235073999 0.245556995 0.314711004 0.770155013 0.985267997 0.989252985 0.00875579007 0.392861009 0.808146 0.55211699 0.889833987 0.525922 0.898959994 0.1162 0.673528016 0.465701997 0.215213001 0.217150003 0.460025012 0.32774201 0.349079013 0.480150998 0.172833994 0.598074019 0.993942976 0.160009995 0.493568987 0.542155027 0.208166003 0.298209012 0.209472999 0.443239987 0.543766022 0.524183989 0.213395 0.529034019 0.513436973 0.222150996 0.921895027 0.321583003 0.774267972 0.811729014 0.847504973 0.673228979 0.927928984 0.521032989 0.138931006 0.143141001 0.738183022 0.598955989 0.470883012 0.0872616023 0.0791067034 0.643718004 0.68533498 0.0730493963 0.803726971 0.178904995 0.615203977 0.0118938005 0.477113992 0.824676991 0.455134004 0.0208803006 0.348861009 0.668528974 0.549914002 0.862298012 0.890681028 0.471809 0.183881 0.664949 0.283538997 0.0313855 0.338178009 0.211467996 0.552417994 0.477108002 0.354609013 0.290600985 0.0760641024 0.825492978 0.37786299 0.155171007 0.469209999 0.0631979033 0.228220001 0.272938013 0.242101997 0.843424022 0.284830987 0.719215989 0.668102026 0.739965022 0.740096986 0.0169628002 0.408495009 0.290010989 0.879261017 0.299174994 0.761820018 0.0631411001 0.964124024 0.0453590006 0.0945265964 0.302302003 0.256826997 0.646945 0.779410005 0.611436009 0.937546015 0.855473995 0.436928004 0.315407991 0.0106450999 0.906139016 0.378605992 0.238865003 0.179076001 0.620707989 0.0822898 0.463907003 0.339924991 0.750391006 0.203872994 0.0800212994 0.767354012 0.612367988 0.370032012 0.646615028 0.911543012 0.131852001 0.709756017 0.875666976 0.177211002 0.80428201 0.177968994 0.434038013 0.451227009 0.957379997 0.0454736985 0.388772994 0.812853992 0.482401997 0.704181015 0.823499024 0.388541013 0.0827867016 0.0623641983 0.567616999 0.703495026 0.144654006 0.0315239988 0.0434198007 0.895044982 0.235396996 0.123441003 0.662400007 0.847764015 0.493472993 0.309013993 0.759307027 0.625325024 0.0187701993 0.634975016 0.802537024 0.823053002 0.812943995 0.236573994 0.274280012 0.770323992 0.282047987 0.663052022 0.583177984 0.764450014 0.367233008 0.406675994 0.152990997 0.450019985 0.46904099 0.720606983 0.153514996 0.613695025 0.752130985 0.196934998 0.508740008 0.987528026 0.320376009 0.171139002 0.835291982 0.813848972 0.480154008 0.594600022 0.439173996 0.498923987 0.229574993 0.241711006 0.32197699 0.0425187983 0.478285015 0.596256018 0.812843025 0.760334015 0.259308994 0.396019995 0.524784029 0.626541972 0.802697003 0.677775025 0.0765616 0.271737009 0.398382008 0.230076 0.885432005 0.150512993 0.427011013 0.394172013 0.138041005 0.747386992 0.565311015 0.973334014 0.561236024 0.0454647988 0.567933977 0.000409795 0.544389009 0.797508001 0.242120996 0.866366029 0.840026975 0.720405996 0.462621987 0.652869999 0.480740011 0.721930981 0.0488895997 0.00552337011 0.348473012 0.851585984 0.683297992 0.425033987 0.123323001 0.081679903 0.655111015 0.00875512045 0.232192993 0.0821217 0.402927011 0.370234996 0.829508007 0.968237996 0.343567997 0.390744001 0.0137026003 0.911502004 0.391153991 0.558090985 0.709010005 0.633274019 0.424457014 0.54903698 0.353680015 0.887079 0.201906994 0.834420025 0.609009981 0.25079599 0.839942992 0.957482994 0.102381997 0.523240983 0.38251701 0.225705996 0.604920983 0.0376277007 0.234460995 0.837113976 0.119749002 0.637387991 0.207349002 0.949258029 0.605624974 0.550917029 0.340002 0.619328022 0.462419003 0.731155992 0.177420005 0.171428993 0.36443001 0.601876974 0.720466018 0.718110025 0.488956004 0.922372997 0.552529991 0.0979655012 0.173169002 0.392473996 0.0554482006 0.275550991 0.915714979 0.437965006 0.501257002 0.520636022 0.475593001 0.735718012 0.357751012 0.59534198 0.373106003 0.565100014 0.54460001 0.978730977 0.116016999 0.88460201 0.598058999 0.578436017 0.615756989 0.775479019 0.749866009 0.980186999 0.377355009 0.470331997 0.698297977 0.866311014 0.392704993 0.250827998 0.964276016 0.565873981 0.643302023 0.0197247006 0.841425002 0.559017003 0.457690001 0.342682004 0.0796535984 0.933282971 0.078400299 0.43740499 0.528625011 0.451505989 0.00250448007 0.073224999 0.430236995 0.118522003 0.957826972 0.0282963999 0.696958005 0.57358402 0.803775012 0.446824014 0.553771019 0.181131005 0.917155981 0.252068996 0.0474415012 0.309861004 0.502897024 0.0117180003 0.875734985 0.146199003 0.0314427018 0.717159986 0.705215991 0.489133 0.0598421991 0.784870028 0.422414988 0.138243005 0.222275004 0.95104003 0.589748979 0.224778995 0.0242650993 0.0199858006 0.343300998 0.982092023 0.0482821018 0.0402589999 0.555675983 0.85205698 0.487082988 0.109448001 0.0331878997 0.404238999 0.361517012 0.0806294009 0.714100003 0.864413977 0.0923473984 0.589834988 0.0106130997 0.123790003 0.306995004 0.715829015 0.612923026 0.366836995 0.500698984 0.0353377014 0.505078971 0.722974002 0.986378014 0.0948280022 0.947753012 0.0106429998 0.114813998 0.29105401 0.992735028 0.163095996 0.331313014 0.548411012 0.0151532004 0.818395972 0.657859027 0.0483409986 0.222635001 0.0193755999 0.128969997 0.936734974 0.883790016 0.221318007 0.526569009 0.894402981 0.345108002 0.833563983 0.610231996 0.958029985 0.200400993 0.110932 0.99336803 0.70547998 0.833905995 0.979745984 0.800307989 0.781657994 0.990388989 0.915121973 0.072712101 0.983124018 0.0782177001 0.404024988 0.531535029 0.0933708027 0.222420007 0.189393997 0.141711995 0.445055008 0.208770007 0.270682007 0.381790012 0.0925592035 0.492000014 0.908358991 0.98696202 0.837108016 0.741922975 0.597194016 0.795138001 0.942323983 0.708126009 0.788505971 0.647804022 0.54203099 0.768252015 0.448112011 0.323689997 0.758641005 0.363234013 0.396402001 0.741765022 0.441451013 0.80042702 0.273299992 0.534821987 0.0228470992 0.462693989 0.676533997 0.467902005 0.671464026 0.947215974 0.849691987 0.764023006 0.439215988 0.758050978 0.750985026 0.276324004 0.499974012 0.348179013 0.0714624003 0.442297012 0.0563049987 0.85996902 0.0901011005 0.598336995 0.628220975 0.538213015 0.922025979 0.38686201 0.901446998 0.318428993 0.128627002 0.342898011 0.118855 0.401928008 0.877719998 0.141701996 0.864621997 0.554255009 0.609604001 0.53608501 0.501470983 0.459295988 0.300107986 0.940687001 0.217346996 0.0510929003 0.217012003 0.717320025 0.399271995 0.288473994 0.159618005 0.455576986 0.148442999 0.249718994 0.0539136007 0.776664019 0.787931979 0.975939989 0.163525999 0.689378023 0.294369012 0.292153001 0.0322766006 0.413224012 0.694081008 0.909996986 0.554925978 0.558701992 0.464251995 0.164531007 0.094787702 0.965722978 0.623826981 0.394896001 0.906409979 0.841172993 0.445989013 0.123421997 0.558493972 0.845260978 0.41189599 0.718110979 0.300837994 0.56033802 0.967830002 0.354750991 0.337002009 0.755761027 0.33069101 0.500527978 0.445140004 0.625060022 0.792680979 0.477416009 0.0382836983 0.486761987 0.387412995 0.593209982 0.045463901 0.85166502 0.757740021 0.140251994 0.817387998 0.381567001 0.535147011 0.723797977 0.222739995 0.981136024 0.84721899 0.781234026 0.826397002 0.25911501 0.499345005 0.127234995 0.819453001 0.467175007 0.481985986 0.156454995 0.222936004 0.812677026 0.656982005 0.668075979 0.437736988 0.449663013 0.145492002 0.476020992 0.936424971 0.532904983 0.0692308992 0.981889009 0.384570003 0.826970994 0.122139998 0.201958001 0.208537996 0.657288015 0.925755978 0.431279004 0.638423979 0.772975028 0.212513 0.464819998 0.0320900008 0.711857021 0.592055023 0.851543009 0.179031998 0.0740410015 0.00799787976 0.401968002 0.886717975 0.664979994 0.0700438991 0.324456006 0.114643998 0.215535998 0.800477028 0.0510682985 0.748440981 0.869708002 0.0329568982 0.133011997 0.696678996 0.155096993 0.334969997 0.905216992 0.812385023 0.260726005 0.336495996 0.450807989 0.0337007008 0.549008012 0.915629029 0.0657906979 0.260865986 0.507683992 0.91733402 0.439898014 0.581725001 0.92533201 0.841866016 0.468443006 0.590312004 0.911909997 0.792899013 0.704954982 0.127445996 0.593375027 0.756024003 0.875886977 0.463082999 0.78898102 0.00889910012 0.159761995 0.944078028 0.343869001 0.0649786964 0.756462991 0.604595006 0.401475012 0.207270995 0.638294995 0.950483024 0.122900002 0.704086006 0.211348996 0.630582988 0.621420026 0.651247025 0.212308004 0.546751022 0.493113011 0.680751026 0.137062997 0.405023009 0.473650008 0.842019022 0.532468975 0.0670249984 0.598042011 0.408356011 0.530107975 0.387023002 0.417255014 0.689868987 0.331101 0.761124015 0.754848003 0.0875632986 0.365718991 0.156323001 0.294833988 0.00401392998 0.106804997 0.417733997 0.708100021 0.318154007 0.0483171009 0.329519987 0.969401002 0.260625005 0.876271009 0.462513 0.941375971 0.0133338002 0.867536008 0.415026009 0.855351985 0.400005013 0.482051015 0.453395009 0.808360994 0.0121587999 0.840417981 0.225615993 0.702027977 0.171517998 0.986739993 0.45687601 0.25908199 0.352459013 0.613198996 0.553915977 0.356472999 0.720004022 0.971650004 0.0645724982 0.0381584018 0.0199666992 0.394091994 0.00755904987 0.280591995 0.270363003 0.470072001 0.221967995 0.283697009 0.33760801 0.636994004 0.139048994 0.737613022 0.119044997 0.592444003 0.545974016 0.131203994 0.432861 0.771589994 0.833231986 0.604380012 0.758329988 0.290109009 0.863461018 0.110788003 0.903307021 0.417376995 0.467260987 0.623311996 0.389026999 0.531834006 0.661469996 0.408993989 0.92592603 0.669028997 0.689585984 0.196288005 0.139101997 0.911553979 0.479984999 0.476709992 		%read{77,344} %write{2147483647,-1}
const	int[4096]	$const29			%read{78,345} %write{2147483647,-1}
temp	int	$tmp34	%read{81,81} %write{80,80}
temp	float	$tmp35	%read{83,83} %write{82,82}
const	float	$const30	9.99999975e-05		%read{83,721} %write{2147483647,-1}
temp	int	$tmp36	%read{85,85} %write{84,84}
const	float	$const31	-100000000		%read{86,539} %write{2147483647,-1}
temp	int	$tmp37	%read{87,87} %write{86,86}
temp	int	$tmp38	%read{90,90} %write{89,89}
const	float	$const32	100000000		%read{91,544} %write{2147483647,-1}
temp	int	$tmp39	%read{92,92} %write{91,91}
temp	int	$tmp40	%read{97,109} %write{97,109}
temp	int	$tmp41	%read{95,109} %write{96,109}
const	int	$const33	12		%read{99,567} %write{2147483647,-1}
temp	int	$tmp42	%read{97,109} %write{97,109}
temp	int	$tmp43	%read{97,109} %write{97,109}
temp	int	$tmp44	%read{97,109} %write{97,109}
temp	int	$tmp45	%read{97,109} %write{97,109}
temp	int	$tmp46	%read{97,109} %write{97,109}
temp	int	$tmp47	%read{2147483647,-1} %write{97,109}
const	int	$const34	7		%read{109,578} %write{2147483647,-1}
temp	int	$tmp48	%read{111,111} %write{110,110}
temp	float	$tmp49	%read{113,113} %write{112,112}
temp	int	$tmp50	%read{115,115} %write{114,114}
temp	int	$tmp51	%read{117,117} %write{116,116}
temp	int	$tmp52	%read{120,120} %write{119,119}
temp	int	$tmp53	%read{122,122} %write{121,121}
temp	float	$tmp54	%read{126,126} %write{125,125}
temp	int	$tmp55	%read{128,128} %write{127,127}
temp	int	$tmp56	%read{130,130} %write{129,129}
temp	int	$tmp57	%read{133,133} %write{132,132}
temp	int	$tmp58	%read{135,135} %write{134,134}
temp	int	$tmp59	%read{140,158} %write{140,158}
temp	int	$tmp60	%read{138,158} %write{139,158}
temp	int	$tmp61	%read{140,158} %write{140,158}
temp	int	$tmp62	%read{140,158} %write{140,158}
temp	int	$tmp63	%read{140,158} %write{140,158}
temp	int	$tmp64	%read{140,158} %write{140,158}
temp	int	$tmp65	%read{140,158} %write{140,158}
temp	int	$tmp66	%read{140,158} %write{140,158}
temp	int	$tmp67	%read{140,158} %write{140,158}
temp	int	$tmp68	%read{140,158} %write{140,158}
temp	float	$tmp69	%read{140,158} %write{140,158}
temp	int	$tmp70	%read{140,158} %write{140,158}
temp	int	$tmp71	%read{2147483647,-1} %write{140,158}
temp	int	$tmp72	%read{160,160} %write{159,159}
temp	float	$tmp73	%read{162,162} %write{161,161}
temp	int	$tmp74	%read{164,164} %write{163,163}
temp	int	$tmp75	%read{166,166} %write{165,165}
temp	int	$tmp76	%read{169,169} %write{168,168}
temp	int	$tmp77	%read{171,171} %write{170,170}
temp	float	$tmp78	%read{175,175} %write{174,174}
temp	int	$tmp79	%read{177,177} %write{176,176}
temp	int	$tmp80	%read{179,179} %write{178,178}
temp	int	$tmp81	%read{182,182} %write{181,181}
temp	int	$tmp82	%read{184,184} %write{183,183}
temp	float	$tmp83	%read{188,188} %write{187,187}
temp	int	$tmp84	%read{190,190} %write{189,189}
temp	int	$tmp85	%read{192,192} %write{191,191}
temp	int	$tmp86	%read{195,195} %write{194,194}
temp	int	$tmp87	%read{197,197} %write{196,196}
temp	int	$tmp88	%read{202,226} %write{202,226}
temp	int	$tmp89	%read{200,226} %write{201,226}
temp	int	$tmp90	%read{202,226} %write{202,226}
temp	int	$tmp91	%read{202,226} %write{202,226}
temp	int	$tmp92	%read{202,226} %write{202,226}
temp	int	$tmp93	%read{202,226} %write{202,226}
temp	int	$tmp94	%read{202,226} %write{202,226}
temp	int	$tmp95	%read{202,226} %write{202,226}
temp	int	$tmp96	%read{202,226} %write{202,226}
temp	int	$tmp97	%read{202,226} %write{202,226}
temp	int	$tmp98	%read{202,226} %write{202,226}
temp	int	$tmp99	%read{202,226} %write{202,226}
temp	int	$tmp100	%read{202,226} %write{202,226}
temp	int	$tmp101	%read{202,226} %write{202,226}
temp	float	$tmp102	%read{202,226} %write{202,226}
temp	int	$tmp103	%read{202,226} %write{202,226}
temp	int	$tmp104	%read{2147483647,-1} %write{202,226}
const	int	$const35	4		%read{227,494} %write{2147483647,-1}
temp	int	$tmp105	%read{228,228} %write{227,227}
temp	float	$tmp106	%read{230,230} %write{229,229}
temp	int	$tmp107	%read{232,232} %write{231,231}
temp	int	$tmp108	%read{234,234} %write{233,233}
temp	int	$tmp109	%read{237,237} %write{236,236}
temp	int	$tmp110	%read{239,239} %write{238,238}
temp	float	$tmp111	%read{243,243} %write{242,242}
temp	int	$tmp112	%read{245,245} %write{244,244}
temp	int	$tmp113	%read{247,247} %write{246,246}
temp	int	$tmp114	%read{250,250} %write{249,249}
temp	int	$tmp115	%read{252,252} %write{251,251}
temp	float	$tmp116	%read{256,256} %write{255,255}
temp	int	$tmp117	%read{258,258} %write{257,257}
temp	int	$tmp118	%read{260,260} %write{259,259}
temp	int	$tmp119	%read{263,263} %write{262,262}
temp	int	$tmp120	%read{265,265} %write{264,264}
temp	float	$tmp121	%read{269,269} %write{268,268}
temp	int	$tmp122	%read{271,271} %write{270,270}
temp	int	$tmp123	%read{273,273} %write{272,272}
temp	int	$tmp124	%read{276,276} %write{275,275}
temp	int	$tmp125	%read{278,278} %write{277,277}
temp	int	$tmp126	%read{283,313} %write{283,313}
temp	int	$tmp127	%read{281,313} %write{282,313}
temp	int	$tmp128	%read{283,313} %write{283,313}
temp	int	$tmp129	%read{283,313} %write{283,313}
temp	int	$tmp130	%read{283,313} %write{283,313}
temp	int	$tmp131	%read{283,313} %write{283,313}
temp	int	$tmp132	%read{283,313} %write{283,313}
temp	int	$tmp133	%read{283,313} %write{283,313}
temp	int	$tmp134	%read{283,313} %write{283,313}
temp	int	$tmp135	%read{283,313} %write{283,313}
temp	int	$tmp136	%read{283,313} %write{283,313}
temp	int	$tmp137	%read{283,313} %write{283,313}
temp	int	$tmp138	%read{283,313} %write{283,313}
temp	int	$tmp139	%read{283,313} %write{283,313}
temp	int	$tmp140	%read{283,313} %write{283,313}
temp	int	$tmp141	%read{283,313} %write{283,313}
temp	int	$tmp142	%read{283,313} %write{283,313}
temp	int	$tmp143	%read{283,313} %write{283,313}
temp	int	$tmp144	%read{283,313} %write{283,313}
temp	float	$tmp145	%read{283,313} %write{283,313}
temp	int	$tmp146	%read{283,313} %write{283,313}
temp	int	$tmp147	%read{2147483647,-1} %write{283,313}
const	int	$const36	15		%read{313,580} %write{2147483647,-1}
const	string	$const37	"cell"		%read{316,588} %write{2147483647,-1}
temp	float	$tmp148	%read{316,316} %write{315,315}
temp	int	$tmp149	%read{318,318} %write{317,317}
const	string	$const38	"vary"		%read{319,319} %write{2147483647,-1}
const	color	$const39	1 0.5 -0.5		%read{320,320} %write{2147483647,-1}
temp	int	$tmp150	%read{322,322} %write{321,321}
temp	point	$tmp151	%read{330,336} %write{326,326}
const	float	$const40	7		%read{324,585} %write{2147483647,-1}
temp	float	$tmp152	%read{326,326} %write{324,324}
const	float	$const41	13		%read{325,586} %write{2147483647,-1}
temp	float	$tmp153	%read{326,326} %write{325,325}
temp	float	$tmp154	%read{332,332} %write{331,331}
temp	float	$tmp155	%read{331,331} %write{330,330}
const	float	$const42	65536		%read{331,337} %write{2147483647,-1}
temp	float	$tmp156	%read{335,335} %write{334,334}
temp	float	$tmp157	%read{334,334} %write{333,333}
temp	float	$tmp158	%read{338,338} %write{337,337}
temp	float	$tmp159	%read{337,337} %write{336,336}
temp	int	$tmp160	%read{348,348} %write{347,347}
temp	float	$tmp161	%read{350,350} %write{349,349}
temp	int	$tmp162	%read{352,352} %write{351,351}
temp	int	$tmp163	%read{354,354} %write{353,353}
temp	int	$tmp164	%read{357,357} %write{356,356}
temp	int	$tmp165	%read{359,359} %write{358,358}
temp	int	$tmp166	%read{364,376} %write{364,376}
temp	int	$tmp167	%read{362,376} %write{363,376}
temp	int	$tmp168	%read{364,376} %write{364,376}
temp	int	$tmp169	%read{364,376} %write{364,376}
temp	int	$tmp170	%read{364,376} %write{364,376}
temp	int	$tmp171	%read{364,376} %write{364,376}
temp	int	$tmp172	%read{364,376} %write{364,376}
temp	int	$tmp173	%read{2147483647,-1} %write{364,376}
temp	int	$tmp174	%read{378,378} %write{377,377}
temp	float	$tmp175	%read{380,380} %write{379,379}
temp	int	$tmp176	%read{382,382} %write{381,381}
temp	int	$tmp177	%read{384,384} %write{383,383}
temp	int	$tmp178	%read{387,387} %write{386,386}
temp	int	$tmp179	%read{389,389} %write{388,388}
temp	float	$tmp180	%read{393,393} %write{392,392}
temp	int	$tmp181	%read{395,395} %write{394,394}
temp	int	$tmp182	%read{397,397} %write{396,396}
temp	int	$tmp183	%read{400,400} %write{399,399}
temp	int	$tmp184	%read{402,402} %write{401,401}
temp	int	$tmp185	%read{407,425} %write{407,425}
temp	int	$tmp186	%read{405,425} %write{406,425}
temp	int	$tmp187	%read{407,425} %write{407,425}
temp	int	$tmp188	%read{407,425} %write{407,425}
temp	int	$tmp189	%read{407,425} %write{407,425}
temp	int	$tmp190	%read{407,425} %write{407,425}
temp	int	$tmp191	%read{407,425} %write{407,425}
temp	int	$tmp192	%read{407,425} %write{407,425}
temp	int	$tmp193	%read{407,425} %write{407,425}
temp	int	$tmp194	%read{407,425} %write{407,425}
temp	float	$tmp195	%read{407,425} %write{407,425}
temp	int	$tmp196	%read{407,425} %write{407,425}
temp	int	$tmp197	%read{2147483647,-1} %write{407,425}
temp	int	$tmp198	%read{427,427} %write{426,426}
temp	float	$tmp199	%read{429,429} %write{428,428}
temp	int	$tmp200	%read{431,431} %write{430,430}
temp	int	$tmp201	%read{433,433} %write{432,432}
temp	int	$tmp202	%read{436,436} %write{435,435}
temp	int	$tmp203	%read{438,438} %write{437,437}
temp	float	$tmp204	%read{442,442} %write{441,441}
temp	int	$tmp205	%read{444,444} %write{443,443}
temp	int	$tmp206	%read{446,446} %write{445,445}
temp	int	$tmp207	%read{449,449} %write{448,448}
temp	int	$tmp208	%read{451,451} %write{450,450}
temp	float	$tmp209	%read{455,455} %write{454,454}
temp	int	$tmp210	%read{457,457} %write{456,456}
temp	int	$tmp211	%read{459,459} %write{458,458}
temp	int	$tmp212	%read{462,462} %write{461,461}
temp	int	$tmp213	%read{464,464} %write{463,463}
temp	int	$tmp214	%read{469,493} %write{469,493}
temp	int	$tmp215	%read{467,493} %write{468,493}
temp	int	$tmp216	%read{469,493} %write{469,493}
temp	int	$tmp217	%read{469,493} %write{469,493}
temp	int	$tmp218	%read{469,493} %write{469,493}
temp	int	$tmp219	%read{469,493} %write{469,493}
temp	int	$tmp220	%read{469,493} %write{469,493}
temp	int	$tmp221	%read{469,493} %write{469,493}
temp	int	$tmp222	%read{469,493} %write{469,493}
temp	int	$tmp223	%read{469,493} %write{469,493}
temp	int	$tmp224	%read{469,493} %write{469,493}
temp	int	$tmp225	%read{469,493} %write{469,493}
temp	int	$tmp226	%read{469,493} %write{469,493}
temp	int	$tmp227	%read{469,493} %write{469,493}
temp	float	$tmp228	%read{469,493} %write{469,493}
temp	int	$tmp229	%read{469,493} %write{469,493}
temp	int	$tmp230	%read{2147483647,-1} %write{469,493}
temp	int	$tmp231	%read{495,495} %write{494,494}
temp	float	$tmp232	%read{497,497} %write{496,496}
temp	int	$tmp233	%read{499,499} %write{498,498}
temp	int	$tmp234	%read{501,501} %write{500,500}
temp	int	$tmp235	%read{504,504} %write{503,503}
temp	int	$tmp236	%read{506,506} %write{505,505}
temp	float	$tmp237	%read{510,510} %write{509,509}
temp	int	$tmp238	%read{512,512} %write{511,511}
temp	int	$tmp239	%read{514,514} %write{513,513}
temp	int	$tmp240	%read{517,517} %write{516,516}
temp	int	$tmp241	%read{519,519} %write{518,518}
temp	float	$tmp242	%read{523,523} %write{522,522}
temp	int	$tmp243	%read{525,525} %write{524,524}
temp	int	$tmp244	%read{527,527} %write{526,526}
temp	int	$tmp245	%read{530,530} %write{529,529}
temp	int	$tmp246	%read{532,532} %write{531,531}
temp	float	$tmp247	%read{536,536} %write{535,535}
temp	int	$tmp248	%read{538,538} %write{537,537}
temp	int	$tmp249	%read{540,540} %write{539,539}
temp	int	$tmp250	%read{543,543} %write{542,542}
temp	int	$tmp251	%read{545,545} %write{544,544}
temp	int	$tmp252	%read{550,580} %write{550,580}
temp	int	$tmp253	%read{548,580} %write{549,580}
temp	int	$tmp254	%read{550,580} %write{550,580}
temp	int	$tmp255	%read{550,580} %write{550,580}
temp	int	$tmp256	%read{550,580} %write{550,580}
temp	int	$tmp257	%read{550,580} %write{550,580}
temp	int	$tmp258	%read{550,580} %write{550,580}
temp	int	$tmp259	%read{550,580} %write{550,580}
temp	int	$tmp260	%read{550,580} %write{550,580}
temp	int	$tmp261	%read{550,580} %write{550,580}
temp	int	$tmp262	%read{550,580} %write{550,580}
temp	int	$tmp263	%read{550,580} %write{550,580}
temp	int	$tmp264	%read{550,580} %write{550,580}
temp	int	$tmp265	%read{550,580} %write{550,580}
temp	int	$tmp266	%read{550,580} %write{550,580}
temp	int	$tmp267	%read{550,580} %write{550,580}
temp	int	$tmp268	%read{550,580} %write{550,580}
temp	int	$tmp269	%read{550,580} %write{550,580}
temp	int	$tmp270	%read{550,580} %write{550,580}
temp	float	$tmp271	%read{550,580} %write{550,580}
temp	int	$tmp272	%read{550,580} %write{550,580}
temp	int	$tmp273	%read{2147483647,-1} %write{550,580}
temp	float	$tmp274	%read{584,584} %write{581,581}
temp	float	$tmp275	%read{584,584} %write{582,582}
temp	float	$tmp276	%read{584,584} %write{583,583}
temp	point	$tmp277	%read{588,588} %write{587,587}
temp	float	$tmp278	%read{587,587} %write{585,585}
temp	float	$tmp279	%read{587,587} %write{586,586}
temp	float	$tmp280	%read{590,590} %write{589,589}
temp	float	$tmp281	%read{592,592} %write{591,591}
temp	float	$tmp282	%read{594,594} %write{593,593}
temp	float	$tmp283	%read{602,602} %write{601,601}
temp	float	$tmp284	%read{597,597} %write{595,595}
temp	float	$tmp285	%read{597,597} %write{596,596}
temp	float	$tmp286	%read{599,599} %write{597,597}
temp	float	$tmp287	%read{599,599} %write{598,598}
temp	float	$tmp288	%read{600,600} %write{599,599}
const	float	$const43	1.5		%read{600,600} %write{2147483647,-1}
temp	float	$tmp289	%read{601,601} %write{600,600}
temp	int	$tmp290	%read{604,604} %write{603,603}
temp	int	$tmp291	%read{608,608} %write{607,607}
temp	float	$tmp292	%read{611,611} %write{609,609}
temp	float	$tmp293	%read{611,611} %write{610,610}
temp	float	$tmp294	%read{612,612} %write{611,611}
temp	float	$tmp295	%read{614,614} %write{613,613}
temp	float	$tmp296	%read{615,615} %write{614,614}
temp	int	$tmp297	%read{617,617} %write{616,616}
temp	int	$tmp298	%read{621,621} %write{620,620}
temp	float	$tmp299	%read{624,624} %write{622,622}
temp	float	$tmp300	%read{624,624} %write{623,623}
temp	float	$tmp301	%read{625,625} %write{624,624}
temp	float	$tmp302	%read{627,627} %write{626,626}
temp	float	$tmp303	%read{628,628} %write{627,627}
temp	int	$tmp304	%read{630,630} %write{629,629}
temp	int	$tmp305	%read{634,634} %write{633,633}
temp	float	$tmp306	%read{637,637} %write{635,635}
temp	float	$tmp307	%read{637,637} %write{636,636}
temp	float	$tmp308	%read{638,638} %write{637,637}
temp	float	$tmp309	%read{640,640} %write{639,639}
temp	float	$tmp310	%read{641,641} %write{640,640}
temp	int	$tmp311	%read{643,643} %write{642,642}
temp	int	$tmp312	%read{647,647} %write{646,646}
temp	float	$tmp313	%read{650,650} %write{648,648}
temp	float	$tmp314	%read{650,650} %write{649,649}
temp	float	$tmp315	%read{651,651} %write{650,650}
temp	float	$tmp316	%read{653,653} %write{652,652}
temp	float	$tmp317	%read{654,654} %write{653,653}
temp	float	$tmp318	%read{660,660} %write{659,659}
temp	int	$tmp319	%read{661,661} %write{660,660}
temp	int	$tmp320	%read{662,667} %write{661,666}
temp	float	$tmp321	%read{664,664} %write{663,663}
temp	int	$tmp322	%read{665,665} %write{664,664}
temp	int	$tmp323	%read{666,666} %write{665,665}
temp	int	$tmp324	%read{668,673} %write{667,672}
temp	float	$tmp325	%read{670,670} %write{669,669}
temp	int	$tmp326	%read{671,671} %write{670,670}
temp	int	$tmp327	%read{672,672} %write{671,671}
temp	int	$tmp328	%read{674,679} %write{673,678}
temp	float	$tmp329	%read{676,676} %write{675,675}
temp	int	$tmp330	%read{677,677} %write{676,676}
temp	int	$tmp331	%read{678,678} %write{677,677}
temp	float	$tmp332	%read{681,681} %write{680,680}
temp	float	$tmp333	%read{690,701} %write{681,681}
temp	float	$tmp334	%read{683,683} %write{682,682}
temp	float	$tmp335	%read{692,705} %write{683,683}
temp	float	$tmp336	%read{685,685} %write{684,684}
temp	float	$tmp337	%read{696,711} %write{685,685}
temp	float	$tmp338	%read{687,687} %write{686,686}
temp	float	$tmp339	%read{718,720} %write{687,687}
const	string	$const44	"varyColor"		%read{688,688} %write{2147483647,-1}
temp	int	$tmp340	%read{691,694} %write{690,693}
temp	int	$tmp341	%read{693,693} %write{692,692}
temp	int	$tmp342	%read{695,698} %write{694,697}
temp	int	$tmp343	%read{697,697} %write{696,696}
const	string	$const45	"rgb"		%read{699,716} %write{2147483647,-1}
const	string	$const46	"hsl"		%read{699,716} %write{2147483647,-1}
temp	float	$tmp344	%read{703,703} %write{702,702}
temp	float	$tmp345	%read{701,701} %write{700,700}
temp	float	$tmp346	%read{702,702} %write{701,701}
temp	float	$tmp347	%read{709,709} %write{708,708}
temp	float	$tmp348	%read{705,705} %write{704,704}
temp	float	$tmp349	%read{707,707} %write{705,705}
const	string	$const47	"clamp"		%read{706,712} %write{2147483647,-1}
temp	float	$tmp350	%read{708,708} %write{707,707}
temp	float	$tmp351	%read{715,715} %write{714,714}
temp	float	$tmp352	%read{711,711} %write{710,710}
temp	float	$tmp353	%read{713,713} %write{711,711}
temp	float	$tmp354	%read{714,714} %write{713,713}
const	color	$const48	0 0 0		%read{717,717} %write{2147483647,-1}
temp	color	$tmp356	%read{717,717} %write{716,716}
temp	int	$tmp357	%read{719,719} %write{718,718}
temp	float	$tmp358	%read{722,722} %write{721,721}
temp	float	$tmp359	%read{721,721} %write{720,720}
temp	float	$tmp360	%read{723,723} %write{722,722}
code ___main___
# PxrVary.osl:272
#     resultRGB = inputRGB;  // init result with no variation
	assign		resultRGB inputRGB 	%filename{"PxrVary.osl"} %line{272} %argrw{"wr"}
# PxrVary.osl:275
#     float fseed = k_srcdefault;  // k_srcdefault is 0
	assign		fseed $const1 	%line{275} %argrw{"wr"}
# PxrVary.osl:277
#     if (varySource == k_identifierid)
	eq		$tmp1 varySource $const2 	%line{277} %argrw{"wrr"}
	if		$tmp1 8 48 	%argrw{"r"}
# PxrVary.osl:282
#         getattribute("builtin", "id", fseed);
	getattribute	$tmp2 $const3 $const4 fseed 	%line{282} %argrw{"wrrw"}
# PxrVary.osl:283
#         if (verbosity > k_warnings)
	gt		$tmp3 verbosity $const5 	%line{283} %argrw{"wrr"}
	if		$tmp3 8 8 	%argrw{"r"}
# PxrVary.osl:285
#             printf("[PxrVary] id: %f", fseed);
	printf		$const6 fseed 	%line{285} %argrw{"rr"}
# PxrVary.osl:288
#     else if (varySource == k_identifiername)
	eq		$tmp4 varySource $const5 	%line{288} %argrw{"wrr"}
	if		$tmp4 23 48 	%argrw{"r"}
# PxrVary.osl:291
#         COMPAT_NAME_HASH(fseed);
	eq		$tmp5 matchCppPattern $const2 	%line{291} %argrw{"wrr"}
	neq		$tmp6 $tmp5 $const2 	%argrw{"wrr"}
	if		$tmp6 13 17 	%argrw{"r"}
	getattribute	$tmp7 $const7 fseed 	%argrw{"wrw"}
	eq		$tmp8 $tmp7 $const2 	%argrw{"wrr"}
	neq		$tmp9 $tmp8 $const2 	%argrw{"wrr"}
	assign		$tmp6 $tmp9 	%argrw{"wr"}
	if		$tmp6 23 23 	%argrw{"r"}
	assign		___564_idname $const8 	%argrw{"wr"}
	getattribute	$tmp10 $const9 ___564_idname 	%argrw{"wrw"}
	hash		$tmp11 ___564_idname 	%argrw{"wr"}
	mod		$tmp12 $tmp11 $const10 	%argrw{"wrr"}
	assign		fseed $tmp12 	%argrw{"wr"}
# PxrVary.osl:293
#     else if (varySource == k_primvar)
	eq		$tmp13 varySource $const11 	%line{293} %argrw{"wrr"}
	if		$tmp13 37 48 	%argrw{"r"}
# PxrVary.osl:295
#         if (!getattribute("primvar", varName, fseed) && verbosity > k_silent)
	getattribute	$tmp14 $const12 varName fseed 	%line{295} %argrw{"wrrw"}
	eq		$tmp15 $tmp14 $const2 	%argrw{"wrr"}
	neq		$tmp16 $tmp15 $const2 	%argrw{"wrr"}
	if		$tmp16 32 32 	%argrw{"r"}
	gt		$tmp17 verbosity $const2 	%argrw{"wrr"}
	neq		$tmp18 $tmp17 $const2 	%argrw{"wrr"}
	assign		$tmp16 $tmp18 	%argrw{"wr"}
	if		$tmp16 34 34 	%argrw{"r"}
# PxrVary.osl:297
#             warning("[PxrVary] Could not find primvar or could not convert to "
	warning		$const13 varName 	%line{297} %argrw{"rr"}
# PxrVary.osl:300
#         if (scaleNormalizedPrimvar)
	if		scaleNormalizedPrimvar 37 37 	%line{300} %argrw{"r"}
# PxrVary.osl:301
#             fseed = (fseed - 0.5) * 65535.0;
	sub		$tmp19 fseed $const14 	%line{301} %argrw{"wrr"}
	mul		fseed $tmp19 $const15 	%argrw{"wrr"}
# PxrVary.osl:303
#     else if (varySource == k_attribute)
	eq		$tmp20 varySource $const16 	%line{303} %argrw{"wrr"}
	if		$tmp20 48 48 	%argrw{"r"}
# PxrVary.osl:305
#         if (!getattribute(varName, fseed) && verbosity > k_silent)
	getattribute	$tmp21 varName fseed 	%line{305} %argrw{"wrw"}
	eq		$tmp22 $tmp21 $const2 	%argrw{"wrr"}
	neq		$tmp23 $tmp22 $const2 	%argrw{"wrr"}
	if		$tmp23 46 46 	%argrw{"r"}
	gt		$tmp24 verbosity $const2 	%argrw{"wrr"}
	neq		$tmp25 $tmp24 $const2 	%argrw{"wrr"}
	assign		$tmp23 $tmp25 	%argrw{"wr"}
	if		$tmp23 48 48 	%argrw{"r"}
# PxrVary.osl:307
#             warning("[PxrVary] Could not find attribute or could not convert "
	warning		$const17 varName 	%line{307} %argrw{"rr"}
# PxrVary.osl:313
#     float instanceId = 0;
	assign		instanceId $const2 	%line{313} %argrw{"wr"}
# PxrVary.osl:314
#     if (getattribute("user:procprimid", instanceId))
	getattribute	$tmp26 $const18 instanceId 	%line{314} %argrw{"wrw"}
	if		$tmp26 57 57 	%argrw{"r"}
# PxrVary.osl:316
#         fseed = mod(fseed + instanceId, 65535);
	add		$tmp27 fseed instanceId 	%line{316} %argrw{"wrr"}
	functioncall	$const20 57 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:154
# float  mod (float  a, float  b) { return a - b*floor(a/b); }
	div		$tmp29 $tmp27 $const15 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{154} %argrw{"wrr"}
	floor		$tmp28 $tmp29 	%argrw{"wr"}
	mul		$tmp30 $const15 $tmp28 	%argrw{"wrr"}
	sub		fseed $tmp27 $tmp30 	%argrw{"wrr"}
# PxrVary.osl:321
#     float prob = 1.0;
	assign		prob $const21 	%filename{"PxrVary.osl"} %line{321} %argrw{"wr"}
# PxrVary.osl:322
#     float rnd[4] = {0.0, 0.0, 0.0, 0.0};
	assign		rnd $const22 	%line{322} %argrw{"wr"}
# PxrVary.osl:324
#     if (fseed != k_srcdefault) fseed += seed;
	neq		$tmp31 fseed $const1 	%line{324} %argrw{"wrr"}
	if		$tmp31 62 62 	%argrw{"r"}
	add		fseed fseed seed 	%argrw{"wrr"}
# PxrVary.osl:325
#     if (probability < 1.0) prob = matchCppPattern ?
	lt		$tmp32 probability $const21 	%line{325} %argrw{"wrr"}
	if		$tmp32 317 317 	%argrw{"r"}
	if		matchCppPattern 315 317 	%argrw{"r"}
# PxrVary.osl:326
#                                     rxcellnoise(fseed + 173.0) :
	add		$tmp33 fseed $const23 	%line{326} %argrw{"wrr"}
	functioncall	$const24 315 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:975
#     noise_parameters np = {1, 1, INPUT1(seed), point(0), NONPERIODIC};
	assign		___541_np.domain $const5 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h"} %line{975} %argrw{"wr"}
	assign		___541_np.range $const5 	%argrw{"wr"}
	aassign		___541_np.input $const2 $tmp33 	%argrw{"wrr"}
	aassign		___541_np.input $const5 $const2 	%argrw{"wrr"}
	aassign		___541_np.input $const11 $const2 	%argrw{"wrr"}
	aassign		___541_np.input $const16 $const2 	%argrw{"wrr"}
	assign		___541_np.result $const25 	%argrw{"wr"}
	assign		___541_np.periodic $const2 	%argrw{"wr"}
	assign		___541_np.period $const26 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:976
#     rx_cell_noise(np);
	functioncall	$const27 314 	%line{976} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:68
#     float rxcellrandtable[4096] = {
	assign		___475_rxcellrandtable $const28 	%line{68} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:582
#     int rxcellpermute[4096] = {
	assign		___475_rxcellpermute $const29 	%line{582} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:904
#     int k = 0;
	assign		___475_k $const2 	%line{904} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:905
#     if (np.domain == 1)
	eq		$tmp34 ___541_np.domain $const5 	%line{905} %argrw{"wrr"}
	if		$tmp34 110 314 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:907
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp35 ___541_np.input $const2 	%line{907} %argrw{"wrr"}
	add		___475_v0 $tmp35 $const30 	%argrw{"wrr"}
	lt		$tmp36 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp36 91 95 	%argrw{"r"}
	lt		$tmp37 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp37 89 91 	%argrw{"r"}
	assign		___475_int00 $const2 	%argrw{"wr"}
	assign		$tmp38 ___475_v0 	%argrw{"wr"}
	sub		___475_int00 $tmp38 $const5 	%argrw{"wrr"}
	gt		$tmp39 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp39 94 95 	%argrw{"r"}
	assign		___475_int00 $const2 	%argrw{"wr"}
	assign		___475_int00 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:908
#         for (i = np.range; i > 0; i--, int00 += 7)
	for		$tmp41 97 99 107 110 	%line{908} %argrw{"r"}
	assign		___475_i ___541_np.range 	%argrw{"wr"}
	gt		$tmp40 ___475_i $const2 	%argrw{"wrr"}
	neq		$tmp41 $tmp40 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:910
#             v0 = rxcellrandtable[CELLPERMUTE(int00)];
	shl		$tmp42 $const5 $const33 	%line{910} %argrw{"wrr"}
	sub		$tmp43 $tmp42 $const5 	%argrw{"wrr"}
	bitand		$tmp44 ___475_int00 $tmp43 	%argrw{"wrr"}
	aref		$tmp45 ___475_rxcellpermute $tmp44 	%argrw{"wrr"}
	aref		___475_v0 ___475_rxcellrandtable $tmp45 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:911
#             np.result[k++] = v0;
	assign		$tmp46 ___475_k 	%line{911} %argrw{"wr"}
	add		___475_k ___475_k $const5 	%argrw{"wrr"}
	compassign	___541_np.result $tmp46 ___475_v0 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:908
#         for (i = np.range; i > 0; i--, int00 += 7)
	assign		$tmp47 ___475_i 	%line{908} %argrw{"wr"}
	sub		___475_i ___475_i $const5 	%argrw{"wrr"}
	add		___475_int00 ___475_int00 $const34 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:914
#     else if (np.domain == 2)
	eq		$tmp48 ___541_np.domain $const11 	%line{914} %argrw{"wrr"}
	if		$tmp48 159 314 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:916
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp49 ___541_np.input $const2 	%line{916} %argrw{"wrr"}
	add		___475_v0 $tmp49 $const30 	%argrw{"wrr"}
	lt		$tmp50 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp50 121 125 	%argrw{"r"}
	lt		$tmp51 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp51 119 121 	%argrw{"r"}
	assign		___475_int00 $const2 	%argrw{"wr"}
	assign		$tmp52 ___475_v0 	%argrw{"wr"}
	sub		___475_int00 $tmp52 $const5 	%argrw{"wrr"}
	gt		$tmp53 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp53 124 125 	%argrw{"r"}
	assign		___475_int00 $const2 	%argrw{"wr"}
	assign		___475_int00 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:917
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp54 ___541_np.input $const5 	%line{917} %argrw{"wrr"}
	add		___475_v0 $tmp54 $const30 	%argrw{"wrr"}
	lt		$tmp55 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp55 134 138 	%argrw{"r"}
	lt		$tmp56 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp56 132 134 	%argrw{"r"}
	assign		___475_int01 $const2 	%argrw{"wr"}
	assign		$tmp57 ___475_v0 	%argrw{"wr"}
	sub		___475_int01 $tmp57 $const5 	%argrw{"wrr"}
	gt		$tmp58 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp58 137 138 	%argrw{"r"}
	assign		___475_int01 $const2 	%argrw{"wr"}
	assign		___475_int01 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:918
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7)
	for		$tmp60 140 142 155 159 	%line{918} %argrw{"r"}
	assign		___475_i ___541_np.range 	%argrw{"wr"}
	gt		$tmp59 ___475_i $const2 	%argrw{"wrr"}
	neq		$tmp60 $tmp59 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:920
#             iy = CELLPERMUTE(int01);
	shl		$tmp61 $const5 $const33 	%line{920} %argrw{"wrr"}
	sub		$tmp62 $tmp61 $const5 	%argrw{"wrr"}
	bitand		$tmp63 ___475_int01 $tmp62 	%argrw{"wrr"}
	aref		___475_iy ___475_rxcellpermute $tmp63 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:921
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(iy + int00)];
	add		$tmp64 ___475_iy ___475_int00 	%line{921} %argrw{"wrr"}
	shl		$tmp65 $const5 $const33 	%argrw{"wrr"}
	sub		$tmp66 $tmp65 $const5 	%argrw{"wrr"}
	bitand		$tmp67 $tmp64 $tmp66 	%argrw{"wrr"}
	aref		$tmp68 ___475_rxcellpermute $tmp67 	%argrw{"wrr"}
	aref		$tmp69 ___475_rxcellrandtable $tmp68 	%argrw{"wrr"}
	assign		$tmp70 ___475_k 	%argrw{"wr"}
	add		___475_k ___475_k $const5 	%argrw{"wrr"}
	compassign	___541_np.result $tmp70 $tmp69 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:918
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7)
	assign		$tmp71 ___475_i 	%line{918} %argrw{"wr"}
	sub		___475_i ___475_i $const5 	%argrw{"wrr"}
	add		___475_int00 ___475_int00 $const34 	%argrw{"wrr"}
	add		___475_int01 ___475_int01 $const34 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:924
#     else if (np.domain == 3)
	eq		$tmp72 ___541_np.domain $const16 	%line{924} %argrw{"wrr"}
	if		$tmp72 227 314 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:926
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp73 ___541_np.input $const2 	%line{926} %argrw{"wrr"}
	add		___475_v0 $tmp73 $const30 	%argrw{"wrr"}
	lt		$tmp74 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp74 170 174 	%argrw{"r"}
	lt		$tmp75 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp75 168 170 	%argrw{"r"}
	assign		___475_int00 $const2 	%argrw{"wr"}
	assign		$tmp76 ___475_v0 	%argrw{"wr"}
	sub		___475_int00 $tmp76 $const5 	%argrw{"wrr"}
	gt		$tmp77 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp77 173 174 	%argrw{"r"}
	assign		___475_int00 $const2 	%argrw{"wr"}
	assign		___475_int00 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:927
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp78 ___541_np.input $const5 	%line{927} %argrw{"wrr"}
	add		___475_v0 $tmp78 $const30 	%argrw{"wrr"}
	lt		$tmp79 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp79 183 187 	%argrw{"r"}
	lt		$tmp80 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp80 181 183 	%argrw{"r"}
	assign		___475_int01 $const2 	%argrw{"wr"}
	assign		$tmp81 ___475_v0 	%argrw{"wr"}
	sub		___475_int01 $tmp81 $const5 	%argrw{"wrr"}
	gt		$tmp82 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp82 186 187 	%argrw{"r"}
	assign		___475_int01 $const2 	%argrw{"wr"}
	assign		___475_int01 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:928
#         SETUP_CELL_DOMAIN(2, int02);
	aref		$tmp83 ___541_np.input $const11 	%line{928} %argrw{"wrr"}
	add		___475_v0 $tmp83 $const30 	%argrw{"wrr"}
	lt		$tmp84 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp84 196 200 	%argrw{"r"}
	lt		$tmp85 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp85 194 196 	%argrw{"r"}
	assign		___475_int02 $const2 	%argrw{"wr"}
	assign		$tmp86 ___475_v0 	%argrw{"wr"}
	sub		___475_int02 $tmp86 $const5 	%argrw{"wrr"}
	gt		$tmp87 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp87 199 200 	%argrw{"r"}
	assign		___475_int02 $const2 	%argrw{"wr"}
	assign		___475_int02 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:929
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3)
	for		$tmp89 202 204 222 227 	%line{929} %argrw{"r"}
	assign		___475_i ___541_np.range 	%argrw{"wr"}
	gt		$tmp88 ___475_i $const2 	%argrw{"wrr"}
	neq		$tmp89 $tmp88 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:931
#             iz = CELLPERMUTE(int02);
	shl		$tmp90 $const5 $const33 	%line{931} %argrw{"wrr"}
	sub		$tmp91 $tmp90 $const5 	%argrw{"wrr"}
	bitand		$tmp92 ___475_int02 $tmp91 	%argrw{"wrr"}
	aref		___475_iz ___475_rxcellpermute $tmp92 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:932
#             iy = CELLPERMUTE(int01 + iz);
	add		$tmp93 ___475_int01 ___475_iz 	%line{932} %argrw{"wrr"}
	shl		$tmp94 $const5 $const33 	%argrw{"wrr"}
	sub		$tmp95 $tmp94 $const5 	%argrw{"wrr"}
	bitand		$tmp96 $tmp93 $tmp95 	%argrw{"wrr"}
	aref		___475_iy ___475_rxcellpermute $tmp96 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:933
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(int00 + iy)];
	add		$tmp97 ___475_int00 ___475_iy 	%line{933} %argrw{"wrr"}
	shl		$tmp98 $const5 $const33 	%argrw{"wrr"}
	sub		$tmp99 $tmp98 $const5 	%argrw{"wrr"}
	bitand		$tmp100 $tmp97 $tmp99 	%argrw{"wrr"}
	aref		$tmp101 ___475_rxcellpermute $tmp100 	%argrw{"wrr"}
	aref		$tmp102 ___475_rxcellrandtable $tmp101 	%argrw{"wrr"}
	assign		$tmp103 ___475_k 	%argrw{"wr"}
	add		___475_k ___475_k $const5 	%argrw{"wrr"}
	compassign	___541_np.result $tmp103 $tmp102 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:929
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3)
	assign		$tmp104 ___475_i 	%line{929} %argrw{"wr"}
	sub		___475_i ___475_i $const5 	%argrw{"wrr"}
	add		___475_int00 ___475_int00 $const34 	%argrw{"wrr"}
	add		___475_int01 ___475_int01 $const34 	%argrw{"wrr"}
	add		___475_int02 ___475_int02 $const16 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:936
#     else if (np.domain == 4)
	eq		$tmp105 ___541_np.domain $const35 	%line{936} %argrw{"wrr"}
	if		$tmp105 314 314 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:938
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp106 ___541_np.input $const2 	%line{938} %argrw{"wrr"}
	add		___475_v0 $tmp106 $const30 	%argrw{"wrr"}
	lt		$tmp107 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp107 238 242 	%argrw{"r"}
	lt		$tmp108 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp108 236 238 	%argrw{"r"}
	assign		___475_int00 $const2 	%argrw{"wr"}
	assign		$tmp109 ___475_v0 	%argrw{"wr"}
	sub		___475_int00 $tmp109 $const5 	%argrw{"wrr"}
	gt		$tmp110 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp110 241 242 	%argrw{"r"}
	assign		___475_int00 $const2 	%argrw{"wr"}
	assign		___475_int00 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:939
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp111 ___541_np.input $const5 	%line{939} %argrw{"wrr"}
	add		___475_v0 $tmp111 $const30 	%argrw{"wrr"}
	lt		$tmp112 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp112 251 255 	%argrw{"r"}
	lt		$tmp113 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp113 249 251 	%argrw{"r"}
	assign		___475_int01 $const2 	%argrw{"wr"}
	assign		$tmp114 ___475_v0 	%argrw{"wr"}
	sub		___475_int01 $tmp114 $const5 	%argrw{"wrr"}
	gt		$tmp115 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp115 254 255 	%argrw{"r"}
	assign		___475_int01 $const2 	%argrw{"wr"}
	assign		___475_int01 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:940
#         SETUP_CELL_DOMAIN(2, int02);
	aref		$tmp116 ___541_np.input $const11 	%line{940} %argrw{"wrr"}
	add		___475_v0 $tmp116 $const30 	%argrw{"wrr"}
	lt		$tmp117 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp117 264 268 	%argrw{"r"}
	lt		$tmp118 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp118 262 264 	%argrw{"r"}
	assign		___475_int02 $const2 	%argrw{"wr"}
	assign		$tmp119 ___475_v0 	%argrw{"wr"}
	sub		___475_int02 $tmp119 $const5 	%argrw{"wrr"}
	gt		$tmp120 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp120 267 268 	%argrw{"r"}
	assign		___475_int02 $const2 	%argrw{"wr"}
	assign		___475_int02 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:941
#         SETUP_CELL_DOMAIN(3, int03);
	aref		$tmp121 ___541_np.input $const16 	%line{941} %argrw{"wrr"}
	add		___475_v0 $tmp121 $const30 	%argrw{"wrr"}
	lt		$tmp122 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp122 277 281 	%argrw{"r"}
	lt		$tmp123 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp123 275 277 	%argrw{"r"}
	assign		___475_int03 $const2 	%argrw{"wr"}
	assign		$tmp124 ___475_v0 	%argrw{"wr"}
	sub		___475_int03 $tmp124 $const5 	%argrw{"wrr"}
	gt		$tmp125 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp125 280 281 	%argrw{"r"}
	assign		___475_int03 $const2 	%argrw{"wr"}
	assign		___475_int03 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:942
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3, int03 += 15)
	for		$tmp127 283 285 308 314 	%line{942} %argrw{"r"}
	assign		___475_i ___541_np.range 	%argrw{"wr"}
	gt		$tmp126 ___475_i $const2 	%argrw{"wrr"}
	neq		$tmp127 $tmp126 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:944
#             iz = CELLPERMUTE(int02 + CELLPERMUTE(int03));
	shl		$tmp128 $const5 $const33 	%line{944} %argrw{"wrr"}
	sub		$tmp129 $tmp128 $const5 	%argrw{"wrr"}
	bitand		$tmp130 ___475_int03 $tmp129 	%argrw{"wrr"}
	aref		$tmp131 ___475_rxcellpermute $tmp130 	%argrw{"wrr"}
	add		$tmp132 ___475_int02 $tmp131 	%argrw{"wrr"}
	shl		$tmp133 $const5 $const33 	%argrw{"wrr"}
	sub		$tmp134 $tmp133 $const5 	%argrw{"wrr"}
	bitand		$tmp135 $tmp132 $tmp134 	%argrw{"wrr"}
	aref		___475_iz ___475_rxcellpermute $tmp135 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:945
#             iy = CELLPERMUTE(int01 + iz);
	add		$tmp136 ___475_int01 ___475_iz 	%line{945} %argrw{"wrr"}
	shl		$tmp137 $const5 $const33 	%argrw{"wrr"}
	sub		$tmp138 $tmp137 $const5 	%argrw{"wrr"}
	bitand		$tmp139 $tmp136 $tmp138 	%argrw{"wrr"}
	aref		___475_iy ___475_rxcellpermute $tmp139 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:946
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(int00 + iy)];
	add		$tmp140 ___475_int00 ___475_iy 	%line{946} %argrw{"wrr"}
	shl		$tmp141 $const5 $const33 	%argrw{"wrr"}
	sub		$tmp142 $tmp141 $const5 	%argrw{"wrr"}
	bitand		$tmp143 $tmp140 $tmp142 	%argrw{"wrr"}
	aref		$tmp144 ___475_rxcellpermute $tmp143 	%argrw{"wrr"}
	aref		$tmp145 ___475_rxcellrandtable $tmp144 	%argrw{"wrr"}
	assign		$tmp146 ___475_k 	%argrw{"wr"}
	add		___475_k ___475_k $const5 	%argrw{"wrr"}
	compassign	___541_np.result $tmp146 $tmp145 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:942
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3, int03 += 15)
	assign		$tmp147 ___475_i 	%line{942} %argrw{"wr"}
	sub		___475_i ___475_i $const5 	%argrw{"wrr"}
	add		___475_int00 ___475_int00 $const34 	%argrw{"wrr"}
	add		___475_int01 ___475_int01 $const34 	%argrw{"wrr"}
	add		___475_int02 ___475_int02 $const16 	%argrw{"wrr"}
	add		___475_int03 ___475_int03 $const36 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:977
#     return np.result[0];
	compref		prob ___541_np.result $const2 	%line{977} %argrw{"wrr"}
# PxrVary.osl:327
#                                     noise("cell", fseed + 173.0);
	add		$tmp148 fseed $const23 	%filename{"PxrVary.osl"} %line{327} %argrw{"wrr"}
	noise		prob $const37 $tmp148 	%argrw{"wrr"}
# PxrVary.osl:329
#     if (prob <= probability)
	le		$tmp149 prob probability 	%line{329} %argrw{"wrr"}
	if		$tmp149 725 725 	%argrw{"r"}
# PxrVary.osl:331
#         vary(fseed, hueMode, saturationMode, luminanceMode, gammaMode,
	functioncall	$const38 659 	%line{331} %argrw{"r"}
# PxrVary.osl:60
#     color rmode = color(1.0, 0.5, -0.5);
	assign		___558_rmode $const39 	%line{60} %argrw{"wr"}
# PxrVary.osl:62
#     if (seed != k_srcdefault)
	neq		$tmp150 fseed $const1 	%line{62} %argrw{"wrr"}
	if		$tmp150 655 659 	%argrw{"r"}
# PxrVary.osl:64
#         color r = matchCppPattern ?
	if		matchCppPattern 585 589 	%line{64} %argrw{"r"}
# PxrVary.osl:65
#                     rxcellnoise(point(seed, seed + 7.0, seed + 13.0)) :
	add		$tmp152 fseed $const40 	%line{65} %argrw{"wrr"}
	add		$tmp153 fseed $const41 	%argrw{"wrr"}
	point		$tmp151 fseed $tmp152 $tmp153 	%argrw{"wrrr"}
	functioncall	$const24 585 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:954
#     noise_parameters np = {3, 3, INPUT3W(seed), point(0), NONPERIODIC};
	assign		___538_np.domain $const16 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h"} %line{954} %argrw{"wr"}
	assign		___538_np.range $const16 	%argrw{"wr"}
	compref		$tmp155 $tmp151 $const2 	%argrw{"wrr"}
	fmod		$tmp154 $tmp155 $const42 	%argrw{"wrr"}
	aassign		___538_np.input $const2 $tmp154 	%argrw{"wrr"}
	compref		$tmp157 $tmp151 $const5 	%argrw{"wrr"}
	fmod		$tmp156 $tmp157 $const42 	%argrw{"wrr"}
	aassign		___538_np.input $const5 $tmp156 	%argrw{"wrr"}
	compref		$tmp159 $tmp151 $const11 	%argrw{"wrr"}
	fmod		$tmp158 $tmp159 $const42 	%argrw{"wrr"}
	aassign		___538_np.input $const11 $tmp158 	%argrw{"wrr"}
	aassign		___538_np.input $const16 $const2 	%argrw{"wrr"}
	assign		___538_np.result $const25 	%argrw{"wr"}
	assign		___538_np.periodic $const2 	%argrw{"wr"}
	assign		___538_np.period $const26 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:955
#     rx_cell_noise(np);
	functioncall	$const27 581 	%line{955} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:68
#     float rxcellrandtable[4096] = {
	assign		___475_rxcellrandtable $const28 	%line{68} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:582
#     int rxcellpermute[4096] = {
	assign		___475_rxcellpermute $const29 	%line{582} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:904
#     int k = 0;
	assign		___475_k $const2 	%line{904} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:905
#     if (np.domain == 1)
	eq		$tmp160 ___538_np.domain $const5 	%line{905} %argrw{"wrr"}
	if		$tmp160 377 581 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:907
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp161 ___538_np.input $const2 	%line{907} %argrw{"wrr"}
	add		___475_v0 $tmp161 $const30 	%argrw{"wrr"}
	lt		$tmp162 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp162 358 362 	%argrw{"r"}
	lt		$tmp163 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp163 356 358 	%argrw{"r"}
	assign		___475_int00 $const2 	%argrw{"wr"}
	assign		$tmp164 ___475_v0 	%argrw{"wr"}
	sub		___475_int00 $tmp164 $const5 	%argrw{"wrr"}
	gt		$tmp165 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp165 361 362 	%argrw{"r"}
	assign		___475_int00 $const2 	%argrw{"wr"}
	assign		___475_int00 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:908
#         for (i = np.range; i > 0; i--, int00 += 7)
	for		$tmp167 364 366 374 377 	%line{908} %argrw{"r"}
	assign		___475_i ___538_np.range 	%argrw{"wr"}
	gt		$tmp166 ___475_i $const2 	%argrw{"wrr"}
	neq		$tmp167 $tmp166 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:910
#             v0 = rxcellrandtable[CELLPERMUTE(int00)];
	shl		$tmp168 $const5 $const33 	%line{910} %argrw{"wrr"}
	sub		$tmp169 $tmp168 $const5 	%argrw{"wrr"}
	bitand		$tmp170 ___475_int00 $tmp169 	%argrw{"wrr"}
	aref		$tmp171 ___475_rxcellpermute $tmp170 	%argrw{"wrr"}
	aref		___475_v0 ___475_rxcellrandtable $tmp171 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:911
#             np.result[k++] = v0;
	assign		$tmp172 ___475_k 	%line{911} %argrw{"wr"}
	add		___475_k ___475_k $const5 	%argrw{"wrr"}
	compassign	___538_np.result $tmp172 ___475_v0 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:908
#         for (i = np.range; i > 0; i--, int00 += 7)
	assign		$tmp173 ___475_i 	%line{908} %argrw{"wr"}
	sub		___475_i ___475_i $const5 	%argrw{"wrr"}
	add		___475_int00 ___475_int00 $const34 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:914
#     else if (np.domain == 2)
	eq		$tmp174 ___538_np.domain $const11 	%line{914} %argrw{"wrr"}
	if		$tmp174 426 581 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:916
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp175 ___538_np.input $const2 	%line{916} %argrw{"wrr"}
	add		___475_v0 $tmp175 $const30 	%argrw{"wrr"}
	lt		$tmp176 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp176 388 392 	%argrw{"r"}
	lt		$tmp177 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp177 386 388 	%argrw{"r"}
	assign		___475_int00 $const2 	%argrw{"wr"}
	assign		$tmp178 ___475_v0 	%argrw{"wr"}
	sub		___475_int00 $tmp178 $const5 	%argrw{"wrr"}
	gt		$tmp179 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp179 391 392 	%argrw{"r"}
	assign		___475_int00 $const2 	%argrw{"wr"}
	assign		___475_int00 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:917
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp180 ___538_np.input $const5 	%line{917} %argrw{"wrr"}
	add		___475_v0 $tmp180 $const30 	%argrw{"wrr"}
	lt		$tmp181 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp181 401 405 	%argrw{"r"}
	lt		$tmp182 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp182 399 401 	%argrw{"r"}
	assign		___475_int01 $const2 	%argrw{"wr"}
	assign		$tmp183 ___475_v0 	%argrw{"wr"}
	sub		___475_int01 $tmp183 $const5 	%argrw{"wrr"}
	gt		$tmp184 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp184 404 405 	%argrw{"r"}
	assign		___475_int01 $const2 	%argrw{"wr"}
	assign		___475_int01 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:918
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7)
	for		$tmp186 407 409 422 426 	%line{918} %argrw{"r"}
	assign		___475_i ___538_np.range 	%argrw{"wr"}
	gt		$tmp185 ___475_i $const2 	%argrw{"wrr"}
	neq		$tmp186 $tmp185 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:920
#             iy = CELLPERMUTE(int01);
	shl		$tmp187 $const5 $const33 	%line{920} %argrw{"wrr"}
	sub		$tmp188 $tmp187 $const5 	%argrw{"wrr"}
	bitand		$tmp189 ___475_int01 $tmp188 	%argrw{"wrr"}
	aref		___475_iy ___475_rxcellpermute $tmp189 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:921
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(iy + int00)];
	add		$tmp190 ___475_iy ___475_int00 	%line{921} %argrw{"wrr"}
	shl		$tmp191 $const5 $const33 	%argrw{"wrr"}
	sub		$tmp192 $tmp191 $const5 	%argrw{"wrr"}
	bitand		$tmp193 $tmp190 $tmp192 	%argrw{"wrr"}
	aref		$tmp194 ___475_rxcellpermute $tmp193 	%argrw{"wrr"}
	aref		$tmp195 ___475_rxcellrandtable $tmp194 	%argrw{"wrr"}
	assign		$tmp196 ___475_k 	%argrw{"wr"}
	add		___475_k ___475_k $const5 	%argrw{"wrr"}
	compassign	___538_np.result $tmp196 $tmp195 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:918
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7)
	assign		$tmp197 ___475_i 	%line{918} %argrw{"wr"}
	sub		___475_i ___475_i $const5 	%argrw{"wrr"}
	add		___475_int00 ___475_int00 $const34 	%argrw{"wrr"}
	add		___475_int01 ___475_int01 $const34 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:924
#     else if (np.domain == 3)
	eq		$tmp198 ___538_np.domain $const16 	%line{924} %argrw{"wrr"}
	if		$tmp198 494 581 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:926
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp199 ___538_np.input $const2 	%line{926} %argrw{"wrr"}
	add		___475_v0 $tmp199 $const30 	%argrw{"wrr"}
	lt		$tmp200 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp200 437 441 	%argrw{"r"}
	lt		$tmp201 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp201 435 437 	%argrw{"r"}
	assign		___475_int00 $const2 	%argrw{"wr"}
	assign		$tmp202 ___475_v0 	%argrw{"wr"}
	sub		___475_int00 $tmp202 $const5 	%argrw{"wrr"}
	gt		$tmp203 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp203 440 441 	%argrw{"r"}
	assign		___475_int00 $const2 	%argrw{"wr"}
	assign		___475_int00 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:927
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp204 ___538_np.input $const5 	%line{927} %argrw{"wrr"}
	add		___475_v0 $tmp204 $const30 	%argrw{"wrr"}
	lt		$tmp205 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp205 450 454 	%argrw{"r"}
	lt		$tmp206 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp206 448 450 	%argrw{"r"}
	assign		___475_int01 $const2 	%argrw{"wr"}
	assign		$tmp207 ___475_v0 	%argrw{"wr"}
	sub		___475_int01 $tmp207 $const5 	%argrw{"wrr"}
	gt		$tmp208 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp208 453 454 	%argrw{"r"}
	assign		___475_int01 $const2 	%argrw{"wr"}
	assign		___475_int01 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:928
#         SETUP_CELL_DOMAIN(2, int02);
	aref		$tmp209 ___538_np.input $const11 	%line{928} %argrw{"wrr"}
	add		___475_v0 $tmp209 $const30 	%argrw{"wrr"}
	lt		$tmp210 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp210 463 467 	%argrw{"r"}
	lt		$tmp211 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp211 461 463 	%argrw{"r"}
	assign		___475_int02 $const2 	%argrw{"wr"}
	assign		$tmp212 ___475_v0 	%argrw{"wr"}
	sub		___475_int02 $tmp212 $const5 	%argrw{"wrr"}
	gt		$tmp213 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp213 466 467 	%argrw{"r"}
	assign		___475_int02 $const2 	%argrw{"wr"}
	assign		___475_int02 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:929
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3)
	for		$tmp215 469 471 489 494 	%line{929} %argrw{"r"}
	assign		___475_i ___538_np.range 	%argrw{"wr"}
	gt		$tmp214 ___475_i $const2 	%argrw{"wrr"}
	neq		$tmp215 $tmp214 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:931
#             iz = CELLPERMUTE(int02);
	shl		$tmp216 $const5 $const33 	%line{931} %argrw{"wrr"}
	sub		$tmp217 $tmp216 $const5 	%argrw{"wrr"}
	bitand		$tmp218 ___475_int02 $tmp217 	%argrw{"wrr"}
	aref		___475_iz ___475_rxcellpermute $tmp218 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:932
#             iy = CELLPERMUTE(int01 + iz);
	add		$tmp219 ___475_int01 ___475_iz 	%line{932} %argrw{"wrr"}
	shl		$tmp220 $const5 $const33 	%argrw{"wrr"}
	sub		$tmp221 $tmp220 $const5 	%argrw{"wrr"}
	bitand		$tmp222 $tmp219 $tmp221 	%argrw{"wrr"}
	aref		___475_iy ___475_rxcellpermute $tmp222 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:933
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(int00 + iy)];
	add		$tmp223 ___475_int00 ___475_iy 	%line{933} %argrw{"wrr"}
	shl		$tmp224 $const5 $const33 	%argrw{"wrr"}
	sub		$tmp225 $tmp224 $const5 	%argrw{"wrr"}
	bitand		$tmp226 $tmp223 $tmp225 	%argrw{"wrr"}
	aref		$tmp227 ___475_rxcellpermute $tmp226 	%argrw{"wrr"}
	aref		$tmp228 ___475_rxcellrandtable $tmp227 	%argrw{"wrr"}
	assign		$tmp229 ___475_k 	%argrw{"wr"}
	add		___475_k ___475_k $const5 	%argrw{"wrr"}
	compassign	___538_np.result $tmp229 $tmp228 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:929
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3)
	assign		$tmp230 ___475_i 	%line{929} %argrw{"wr"}
	sub		___475_i ___475_i $const5 	%argrw{"wrr"}
	add		___475_int00 ___475_int00 $const34 	%argrw{"wrr"}
	add		___475_int01 ___475_int01 $const34 	%argrw{"wrr"}
	add		___475_int02 ___475_int02 $const16 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:936
#     else if (np.domain == 4)
	eq		$tmp231 ___538_np.domain $const35 	%line{936} %argrw{"wrr"}
	if		$tmp231 581 581 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:938
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp232 ___538_np.input $const2 	%line{938} %argrw{"wrr"}
	add		___475_v0 $tmp232 $const30 	%argrw{"wrr"}
	lt		$tmp233 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp233 505 509 	%argrw{"r"}
	lt		$tmp234 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp234 503 505 	%argrw{"r"}
	assign		___475_int00 $const2 	%argrw{"wr"}
	assign		$tmp235 ___475_v0 	%argrw{"wr"}
	sub		___475_int00 $tmp235 $const5 	%argrw{"wrr"}
	gt		$tmp236 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp236 508 509 	%argrw{"r"}
	assign		___475_int00 $const2 	%argrw{"wr"}
	assign		___475_int00 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:939
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp237 ___538_np.input $const5 	%line{939} %argrw{"wrr"}
	add		___475_v0 $tmp237 $const30 	%argrw{"wrr"}
	lt		$tmp238 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp238 518 522 	%argrw{"r"}
	lt		$tmp239 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp239 516 518 	%argrw{"r"}
	assign		___475_int01 $const2 	%argrw{"wr"}
	assign		$tmp240 ___475_v0 	%argrw{"wr"}
	sub		___475_int01 $tmp240 $const5 	%argrw{"wrr"}
	gt		$tmp241 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp241 521 522 	%argrw{"r"}
	assign		___475_int01 $const2 	%argrw{"wr"}
	assign		___475_int01 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:940
#         SETUP_CELL_DOMAIN(2, int02);
	aref		$tmp242 ___538_np.input $const11 	%line{940} %argrw{"wrr"}
	add		___475_v0 $tmp242 $const30 	%argrw{"wrr"}
	lt		$tmp243 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp243 531 535 	%argrw{"r"}
	lt		$tmp244 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp244 529 531 	%argrw{"r"}
	assign		___475_int02 $const2 	%argrw{"wr"}
	assign		$tmp245 ___475_v0 	%argrw{"wr"}
	sub		___475_int02 $tmp245 $const5 	%argrw{"wrr"}
	gt		$tmp246 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp246 534 535 	%argrw{"r"}
	assign		___475_int02 $const2 	%argrw{"wr"}
	assign		___475_int02 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:941
#         SETUP_CELL_DOMAIN(3, int03);
	aref		$tmp247 ___538_np.input $const16 	%line{941} %argrw{"wrr"}
	add		___475_v0 $tmp247 $const30 	%argrw{"wrr"}
	lt		$tmp248 ___475_v0 $const1 	%argrw{"wrr"}
	if		$tmp248 544 548 	%argrw{"r"}
	lt		$tmp249 ___475_v0 $const31 	%argrw{"wrr"}
	if		$tmp249 542 544 	%argrw{"r"}
	assign		___475_int03 $const2 	%argrw{"wr"}
	assign		$tmp250 ___475_v0 	%argrw{"wr"}
	sub		___475_int03 $tmp250 $const5 	%argrw{"wrr"}
	gt		$tmp251 ___475_v0 $const32 	%argrw{"wrr"}
	if		$tmp251 547 548 	%argrw{"r"}
	assign		___475_int03 $const2 	%argrw{"wr"}
	assign		___475_int03 ___475_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:942
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3, int03 += 15)
	for		$tmp253 550 552 575 581 	%line{942} %argrw{"r"}
	assign		___475_i ___538_np.range 	%argrw{"wr"}
	gt		$tmp252 ___475_i $const2 	%argrw{"wrr"}
	neq		$tmp253 $tmp252 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:944
#             iz = CELLPERMUTE(int02 + CELLPERMUTE(int03));
	shl		$tmp254 $const5 $const33 	%line{944} %argrw{"wrr"}
	sub		$tmp255 $tmp254 $const5 	%argrw{"wrr"}
	bitand		$tmp256 ___475_int03 $tmp255 	%argrw{"wrr"}
	aref		$tmp257 ___475_rxcellpermute $tmp256 	%argrw{"wrr"}
	add		$tmp258 ___475_int02 $tmp257 	%argrw{"wrr"}
	shl		$tmp259 $const5 $const33 	%argrw{"wrr"}
	sub		$tmp260 $tmp259 $const5 	%argrw{"wrr"}
	bitand		$tmp261 $tmp258 $tmp260 	%argrw{"wrr"}
	aref		___475_iz ___475_rxcellpermute $tmp261 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:945
#             iy = CELLPERMUTE(int01 + iz);
	add		$tmp262 ___475_int01 ___475_iz 	%line{945} %argrw{"wrr"}
	shl		$tmp263 $const5 $const33 	%argrw{"wrr"}
	sub		$tmp264 $tmp263 $const5 	%argrw{"wrr"}
	bitand		$tmp265 $tmp262 $tmp264 	%argrw{"wrr"}
	aref		___475_iy ___475_rxcellpermute $tmp265 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:946
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(int00 + iy)];
	add		$tmp266 ___475_int00 ___475_iy 	%line{946} %argrw{"wrr"}
	shl		$tmp267 $const5 $const33 	%argrw{"wrr"}
	sub		$tmp268 $tmp267 $const5 	%argrw{"wrr"}
	bitand		$tmp269 $tmp266 $tmp268 	%argrw{"wrr"}
	aref		$tmp270 ___475_rxcellpermute $tmp269 	%argrw{"wrr"}
	aref		$tmp271 ___475_rxcellrandtable $tmp270 	%argrw{"wrr"}
	assign		$tmp272 ___475_k 	%argrw{"wr"}
	add		___475_k ___475_k $const5 	%argrw{"wrr"}
	compassign	___538_np.result $tmp272 $tmp271 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:942
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3, int03 += 15)
	assign		$tmp273 ___475_i 	%line{942} %argrw{"wr"}
	sub		___475_i ___475_i $const5 	%argrw{"wrr"}
	add		___475_int00 ___475_int00 $const34 	%argrw{"wrr"}
	add		___475_int01 ___475_int01 $const34 	%argrw{"wrr"}
	add		___475_int02 ___475_int02 $const16 	%argrw{"wrr"}
	add		___475_int03 ___475_int03 $const36 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:956
#     return point(np.result[0], np.result[1], np.result[2]);
	compref		$tmp274 ___538_np.result $const2 	%line{956} %argrw{"wrr"}
	compref		$tmp275 ___538_np.result $const5 	%argrw{"wrr"}
	compref		$tmp276 ___538_np.result $const11 	%argrw{"wrr"}
	point		___559_r $tmp274 $tmp275 $tmp276 	%argrw{"wrrr"}
# PxrVary.osl:66
#                     noise("cell", point(seed, seed + 7.0, seed + 13.0));
	add		$tmp278 fseed $const40 	%filename{"PxrVary.osl"} %line{66} %argrw{"wrr"}
	add		$tmp279 fseed $const41 	%argrw{"wrr"}
	point		$tmp277 fseed $tmp278 $tmp279 	%argrw{"wrrr"}
	noise		___559_r $const37 $tmp277 	%argrw{"wrr"}
# PxrVary.osl:67
#         random[0] = r[0];
	compref		$tmp280 ___559_r $const2 	%line{67} %argrw{"wrr"}
	aassign		rnd $const2 $tmp280 	%argrw{"wrr"}
# PxrVary.osl:68
#         random[1] = r[1];
	compref		$tmp281 ___559_r $const5 	%line{68} %argrw{"wrr"}
	aassign		rnd $const5 $tmp281 	%argrw{"wrr"}
# PxrVary.osl:69
#         random[2] = r[2];
	compref		$tmp282 ___559_r $const11 	%line{69} %argrw{"wrr"}
	aassign		rnd $const11 $tmp282 	%argrw{"wrr"}
# PxrVary.osl:70
#         random[3] = abs((r[0] + r[1] + r[2]) - 1.5);
	compref		$tmp284 ___559_r $const2 	%line{70} %argrw{"wrr"}
	compref		$tmp285 ___559_r $const5 	%argrw{"wrr"}
	add		$tmp286 $tmp284 $tmp285 	%argrw{"wrr"}
	compref		$tmp287 ___559_r $const11 	%argrw{"wrr"}
	add		$tmp288 $tmp286 $tmp287 	%argrw{"wrr"}
	sub		$tmp289 $tmp288 $const43 	%argrw{"wrr"}
	abs		$tmp283 $tmp289 	%argrw{"wr"}
	aassign		rnd $const16 $tmp283 	%argrw{"wrr"}
# PxrVary.osl:73
#         int m = hueMode > 2 ? k_centered : hueMode;
	gt		$tmp290 hueMode $const11 	%line{73} %argrw{"wrr"}
	if		$tmp290 606 607 	%argrw{"r"}
	assign		___559_m $const2 	%argrw{"wr"}
	assign		___559_m hueMode 	%argrw{"wr"}
# PxrVary.osl:74
#         if (m != k_centered)
	neq		$tmp291 ___559_m $const2 	%line{74} %argrw{"wrr"}
	if		$tmp291 613 616 	%argrw{"r"}
# PxrVary.osl:75
#             random[0] *= rmode[m];
	aref		$tmp292 rnd $const2 	%line{75} %argrw{"wrr"}
	compref		$tmp293 ___558_rmode ___559_m 	%argrw{"wrr"}
	mul		$tmp294 $tmp292 $tmp293 	%argrw{"wrr"}
	aassign		rnd $const2 $tmp294 	%argrw{"wrr"}
# PxrVary.osl:77
#             random[0] -= 0.5;
	aref		$tmp295 rnd $const2 	%line{77} %argrw{"wrr"}
	sub		$tmp296 $tmp295 $const14 	%argrw{"wrr"}
	aassign		rnd $const2 $tmp296 	%argrw{"wrr"}
# PxrVary.osl:79
#         m = saturationMode > 2 ? k_centered : saturationMode;
	gt		$tmp297 saturationMode $const11 	%line{79} %argrw{"wrr"}
	if		$tmp297 619 620 	%argrw{"r"}
	assign		___559_m $const2 	%argrw{"wr"}
	assign		___559_m saturationMode 	%argrw{"wr"}
# PxrVary.osl:80
#         if (m != k_centered)
	neq		$tmp298 ___559_m $const2 	%line{80} %argrw{"wrr"}
	if		$tmp298 626 629 	%argrw{"r"}
# PxrVary.osl:81
#             random[1] *= rmode[m];
	aref		$tmp299 rnd $const5 	%line{81} %argrw{"wrr"}
	compref		$tmp300 ___558_rmode ___559_m 	%argrw{"wrr"}
	mul		$tmp301 $tmp299 $tmp300 	%argrw{"wrr"}
	aassign		rnd $const5 $tmp301 	%argrw{"wrr"}
# PxrVary.osl:83
#             random[1] -= 0.5;
	aref		$tmp302 rnd $const5 	%line{83} %argrw{"wrr"}
	sub		$tmp303 $tmp302 $const14 	%argrw{"wrr"}
	aassign		rnd $const5 $tmp303 	%argrw{"wrr"}
# PxrVary.osl:85
#         m = luminanceMode > 2 ? k_centered : luminanceMode;
	gt		$tmp304 luminanceMode $const11 	%line{85} %argrw{"wrr"}
	if		$tmp304 632 633 	%argrw{"r"}
	assign		___559_m $const2 	%argrw{"wr"}
	assign		___559_m luminanceMode 	%argrw{"wr"}
# PxrVary.osl:86
#         if (m != k_centered)
	neq		$tmp305 ___559_m $const2 	%line{86} %argrw{"wrr"}
	if		$tmp305 639 642 	%argrw{"r"}
# PxrVary.osl:87
#             random[2] *= rmode[m];
	aref		$tmp306 rnd $const11 	%line{87} %argrw{"wrr"}
	compref		$tmp307 ___558_rmode ___559_m 	%argrw{"wrr"}
	mul		$tmp308 $tmp306 $tmp307 	%argrw{"wrr"}
	aassign		rnd $const11 $tmp308 	%argrw{"wrr"}
# PxrVary.osl:89
#             random[2] -= 0.5;
	aref		$tmp309 rnd $const11 	%line{89} %argrw{"wrr"}
	sub		$tmp310 $tmp309 $const14 	%argrw{"wrr"}
	aassign		rnd $const11 $tmp310 	%argrw{"wrr"}
# PxrVary.osl:91
#         m = gammaMode > 2 ? k_centered : gammaMode;
	gt		$tmp311 gammaMode $const11 	%line{91} %argrw{"wrr"}
	if		$tmp311 645 646 	%argrw{"r"}
	assign		___559_m $const2 	%argrw{"wr"}
	assign		___559_m gammaMode 	%argrw{"wr"}
# PxrVary.osl:92
#         if (m != k_centered)
	neq		$tmp312 ___559_m $const2 	%line{92} %argrw{"wrr"}
	if		$tmp312 652 655 	%argrw{"r"}
# PxrVary.osl:93
#             random[3] *= rmode[m];
	aref		$tmp313 rnd $const16 	%line{93} %argrw{"wrr"}
	compref		$tmp314 ___558_rmode ___559_m 	%argrw{"wrr"}
	mul		$tmp315 $tmp313 $tmp314 	%argrw{"wrr"}
	aassign		rnd $const16 $tmp315 	%argrw{"wrr"}
# PxrVary.osl:95
#             random[3] -= 0.5;
	aref		$tmp316 rnd $const16 	%line{95} %argrw{"wrr"}
	sub		$tmp317 $tmp316 $const14 	%argrw{"wrr"}
	aassign		rnd $const16 $tmp317 	%argrw{"wrr"}
# PxrVary.osl:99
#         random[0] = 0.0;
	aassign		rnd $const2 $const1 	%line{99} %argrw{"wrr"}
# PxrVary.osl:100
#         random[1] = 0.0;
	aassign		rnd $const5 $const1 	%line{100} %argrw{"wrr"}
# PxrVary.osl:101
#         random[2] = 0.0;
	aassign		rnd $const11 $const1 	%line{101} %argrw{"wrr"}
# PxrVary.osl:102
#         random[3] = 0.0;
	aassign		rnd $const16 $const1 	%line{102} %argrw{"wrr"}
# PxrVary.osl:334
#         if (rnd[0] != 0.0 && rnd[1] != 0.0 && rnd[2] != 0.0 && rnd[3] != 0.0)
	aref		$tmp318 rnd $const2 	%line{334} %argrw{"wrr"}
	neq		$tmp319 $tmp318 $const1 	%argrw{"wrr"}
	neq		$tmp320 $tmp319 $const2 	%argrw{"wrr"}
	if		$tmp320 667 667 	%argrw{"r"}
	aref		$tmp321 rnd $const5 	%argrw{"wrr"}
	neq		$tmp322 $tmp321 $const1 	%argrw{"wrr"}
	neq		$tmp323 $tmp322 $const2 	%argrw{"wrr"}
	assign		$tmp320 $tmp323 	%argrw{"wr"}
	neq		$tmp324 $tmp320 $const2 	%argrw{"wrr"}
	if		$tmp324 673 673 	%argrw{"r"}
	aref		$tmp325 rnd $const11 	%argrw{"wrr"}
	neq		$tmp326 $tmp325 $const1 	%argrw{"wrr"}
	neq		$tmp327 $tmp326 $const2 	%argrw{"wrr"}
	assign		$tmp324 $tmp327 	%argrw{"wr"}
	neq		$tmp328 $tmp324 $const2 	%argrw{"wrr"}
	if		$tmp328 679 679 	%argrw{"r"}
	aref		$tmp329 rnd $const16 	%argrw{"wrr"}
	neq		$tmp330 $tmp329 $const1 	%argrw{"wrr"}
	neq		$tmp331 $tmp330 $const2 	%argrw{"wrr"}
	assign		$tmp328 $tmp331 	%argrw{"wr"}
	if		$tmp328 725 725 	%argrw{"r"}
# PxrVary.osl:337
#                                   hue * rnd[0],
	aref		$tmp332 rnd $const2 	%line{337} %argrw{"wrr"}
	mul		$tmp333 hue $tmp332 	%argrw{"wrr"}
# PxrVary.osl:338
#                                   saturation * rnd[1],
	aref		$tmp334 rnd $const5 	%line{338} %argrw{"wrr"}
	mul		$tmp335 saturation $tmp334 	%argrw{"wrr"}
# PxrVary.osl:339
#                                   lum * rnd[2],
	aref		$tmp336 rnd $const11 	%line{339} %argrw{"wrr"}
	mul		$tmp337 lum $tmp336 	%argrw{"wrr"}
# PxrVary.osl:340
#                                   gamma * rnd[3]);
	aref		$tmp338 rnd $const16 	%line{340} %argrw{"wrr"}
	mul		$tmp339 gamma $tmp338 	%argrw{"wrr"}
# PxrVary.osl:336
#             resultRGB = varyColor(resultRGB,
	functioncall	$const44 725 	%line{336} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:144
#     color out = in;
	assign		___555_out resultRGB 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h"} %line{144} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:145
#     if (hue || sat || lum)
	neq		$tmp340 $tmp333 $const1 	%line{145} %argrw{"wrr"}
	if		$tmp340 692 694 	%argrw{"r"}
	neq		$tmp341 $tmp335 $const1 	%argrw{"wrr"}
	assign		$tmp340 $tmp341 	%argrw{"wr"}
	neq		$tmp342 $tmp340 $const2 	%argrw{"wrr"}
	if		$tmp342 696 698 	%argrw{"r"}
	neq		$tmp343 $tmp337 $const1 	%argrw{"wrr"}
	assign		$tmp342 $tmp343 	%argrw{"wr"}
	if		$tmp342 718 718 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:147
#         color hsl = transformc("rgb", "hsl", out);
	transformc	___556_hsl $const45 $const46 ___555_out 	%line{147} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:148
#         hsl[0] = fmod(hsl[0] + hue, 1.0);
	compref		$tmp345 ___556_hsl $const2 	%line{148} %argrw{"wrr"}
	add		$tmp346 $tmp345 $tmp333 	%argrw{"wrr"}
	fmod		$tmp344 $tmp346 $const21 	%argrw{"wrr"}
	compassign	___556_hsl $const2 $tmp344 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:149
#         hsl[1] = clamp(hsl[1] + sat, 0.0, 1.0);
	compref		$tmp348 ___556_hsl $const5 	%line{149} %argrw{"wrr"}
	add		$tmp349 $tmp348 $tmp335 	%argrw{"wrr"}
	functioncall	$const47 709 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp350 $tmp349 $const21 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		$tmp347 $tmp350 $const1 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:149
#         hsl[1] = clamp(hsl[1] + sat, 0.0, 1.0);
	compassign	___556_hsl $const5 $tmp347 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h"} %line{149} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:150
#         hsl[2] = clamp(hsl[2] + lum, 0.0, 1.0);
	compref		$tmp352 ___556_hsl $const11 	%line{150} %argrw{"wrr"}
	add		$tmp353 $tmp352 $tmp337 	%argrw{"wrr"}
	functioncall	$const47 715 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp354 $tmp353 $const21 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		$tmp351 $tmp354 $const1 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:150
#         hsl[2] = clamp(hsl[2] + lum, 0.0, 1.0);
	compassign	___556_hsl $const11 $tmp351 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h"} %line{150} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:151
#         out = max(color(0), transformc("hsl", "rgb", hsl));
	transformc	$tmp356 $const46 $const45 ___556_hsl 	%line{151} %argrw{"wrrr"}
	max		___555_out $const48 $tmp356 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:153
#     if (gam)
	neq		$tmp357 $tmp339 $const1 	%line{153} %argrw{"wrr"}
	if		$tmp357 724 724 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:155
#         out = pow(out, 1.0 / max(1.0e-4, 1.0 + gam));
	add		$tmp359 $const21 $tmp339 	%line{155} %argrw{"wrr"}
	max		$tmp358 $const30 $tmp359 	%argrw{"wrr"}
	div		$tmp360 $const21 $tmp358 	%argrw{"wrr"}
	pow		___555_out ___555_out $tmp360 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:157
#     return out;
	assign		resultRGB ___555_out 	%line{157} %argrw{"wr"}
# PxrVary.osl:344
#     resultR = resultRGB[0];
	compref		resultR resultRGB $const2 	%filename{"PxrVary.osl"} %line{344} %argrw{"wrr"}
# PxrVary.osl:345
#     resultG = resultRGB[1];
	compref		resultG resultRGB $const5 	%line{345} %argrw{"wrr"}
# PxrVary.osl:346
#     resultB = resultRGB[2];
	compref		resultB resultRGB $const11 	%line{346} %argrw{"wrr"}
	end
