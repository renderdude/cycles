OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: -DOSX -I/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include -I/data/build/ratbuild/rmanshare/RIS/include -I/data/build/ratbuild/rmanshare/RIS/include/common -I/data/build/ratbuild/rmanshare/RIS/pattern/osl -I/data/build/ratbuild/rmanshare/RIS/include/osl -o /data/build/ratbuild/rmanshare/_built/osxMojave_x86-64_clang10_external_release/osl/PxrBumpRoughness.osl/obj/PxrBumpRoughness.oso
shader PxrBumpRoughness	%meta{int,rfm_nodeid,1233481} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/bump"} %meta{string,rfh_classification,"Pattern/Bump"} %meta{string,help,"Derives roughness values from a bump map."} 
param	string	b2r_texture	""		%meta{string,label,"b2r Texture"} %meta{string,widget,"assetIdInput"} %meta{string,options,"texture"} %meta{int,connectable,0} %meta{string,help,"This expects the first derivative map, let H be a height field, then each channel are defined as r=dH/du, g=dH/dv, b=dontcare"}  %read{119,1265} %write{2147483647,-1}
param	struct Manifold	manifold			%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{48,48} %write{2147483647,-1} %struct{"Manifold"} %structfields{Q,QN,Qradius} %structfieldtypes{"pnf"} %structnfields{3}
param	point	manifold.Q	0 0 0		%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{50,51} %write{2147483647,-1} %mystruct{manifold} %mystructfield{0} %derivs
param	normal	manifold.QN	0 0 1		%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifold} %mystructfield{1}
param	float	manifold.Qradius	0		%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifold} %mystructfield{2}
param	struct PxrManifoldMulti	manifoldMulti			%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{52,52} %write{2147483647,-1} %struct{"PxrManifoldMulti"} %structfields{minNumTextures,numTextures,textureOrder,stAlpha0,stAlpha1,stAlpha2,stAlpha3,tileidRunflag0,tileidRunflag1,tileidRunflag2,tileidRunflag3,Tn,Bn,radius,hextile0,hextile1,hextile2,hextile3} %structfieldtypes{"iiippppppppv[4]v[4]fp[4]p[4]p[4]p[4]"} %structnfields{18}
param	int	manifoldMulti.minNumTextures	0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{357,357} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{0}
param	int	manifoldMulti.numTextures	0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{1}
param	int	manifoldMulti.textureOrder	0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{2}
param	point	manifoldMulti.stAlpha0	-1 -1 -1		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{330,330} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{3} %derivs
param	point	manifoldMulti.stAlpha1	-1 -1 -1		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{331,331} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{4} %derivs
param	point	manifoldMulti.stAlpha2	-1 -1 -1		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{332,332} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{5} %derivs
param	point	manifoldMulti.stAlpha3	-1 -1 -1		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{6}
param	point	manifoldMulti.tileidRunflag0	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{7}
param	point	manifoldMulti.tileidRunflag1	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{8}
param	point	manifoldMulti.tileidRunflag2	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{9}
param	point	manifoldMulti.tileidRunflag3	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{10}
param	vector[4]	manifoldMulti.Tn	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{0,3} %mystruct{manifoldMulti} %mystructfield{11} %initexpr
param	vector[4]	manifoldMulti.Bn	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{4,7} %mystruct{manifoldMulti} %mystructfield{12} %initexpr
param	float	manifoldMulti.radius	0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{13}
param	point[4]	manifoldMulti.hextile0	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{333,339} %write{8,11} %mystruct{manifoldMulti} %mystructfield{14} %derivs %initexpr
param	point[4]	manifoldMulti.hextile1	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{341,347} %write{12,15} %mystruct{manifoldMulti} %mystructfield{15} %derivs %initexpr
param	point[4]	manifoldMulti.hextile2	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{349,355} %write{16,19} %mystruct{manifoldMulti} %mystructfield{16} %derivs %initexpr
param	point[4]	manifoldMulti.hextile3	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{20,23} %mystruct{manifoldMulti} %mystructfield{17} %initexpr
param	float	baseRoughness	0.00100000005		%meta{string,label,"Base Roughness"} %meta{float,min,0.00100000005} %meta{float,max,1} %meta{int,slider,1} %meta{string,page,"Bump Roughness"} %meta{int,page_open,1} %meta{string,help,"This is the roughness of the base surface when fully zoomed into the detail."}  %read{450,1174} %write{2147483647,-1}
param	float	textureRoughness	-1		%meta{string,label,"Texture Roughness"} %meta{float,slidermin,0.00100000005} %meta{float,max,1} %meta{string,page,"Bump Roughness"} %meta{string,help,"Set the texture roughness to be provided by the input textures when fully zoomed out from the detail. It is combined with the base roughness. The default of -1.0 lets the texture provide its natural roughness."}  %read{54,1138} %write{2147483647,-1}
param	float	gain	1		%meta{float,min,0} %meta{float,slidermax,10} %meta{float,slidercenter,1} %meta{string,page,"Bump Roughness"} %meta{string,help,"This is a multiplier to the aggregate roughness"}  %read{35,35} %write{2147483647,-1}
param	float	bumpNormalGain	1		%meta{string,label,"Bump Normal Gain"} %meta{float,min,0} %meta{float,max,10} %meta{float,slidercenter,1} %meta{string,page,"Bump Roughness"} %meta{string,help,"multiplier to the normal map magnitude"}  %read{36,36} %write{2147483647,-1}
param	float	anisotropyGain	1		%meta{string,label,"Anisotropy Gain"} %meta{float,min,0} %meta{float,max,10} %meta{float,slidercenter,1} %meta{string,page,"Bump Roughness"} %meta{string,help,"This is a multiplier to the aggregate anisotropy"}  %read{669,1405} %write{2147483647,-1}
param	int	invertBumpNormal	0		%meta{string,label,"Invert Bump Normal"} %meta{string,widget,"checkBox"} %meta{int,connectable,0} %meta{string,page,"Bump Roughness"} %meta{string,help,"This will invert the Bump Normal"}  %read{575,1299} %write{2147483647,-1}
param	int	invertT	1		%meta{string,label,"Invert T"} %meta{string,widget,"checkBox"} %meta{int,connectable,0} %meta{string,page,"Bump Roughness"} %meta{string,help,"invert t direction if not connected to a manifold."}  %read{39,39} %write{2147483647,-1}
param	float	adjustAmount	1		%meta{string,widget,"default"} %meta{string,page,"Bump Roughness"} %meta{string,help,"Amount to adjust the normals when they are facing away from the camera.<br><br>adjustAmount (float)"} %meta{string,label,"Adjust Amount"} %meta{float,max,1} %meta{float,min,0}  %read{1439,1448} %write{2147483647,-1}
param	float	surfaceNormalMix	0		%meta{string,widget,"default"} %meta{string,page,"Bump Roughness"} %meta{string,help,"The amount to mix the resulting normals with the surface normals.<br><br>surfaceNormalMix (float)"} %meta{string,label,"Surface Normal Mix"} %meta{float,max,1} %meta{float,min,0} %meta{int,slider,1} %meta{float,slidermax,1} %meta{float,slidermin,0}  %read{1454,1456} %write{2147483647,-1}
param	float	blur	0		%meta{string,label,"Blur"} %meta{string,page,"Advanced"} %meta{string,help,"Amount of blur to apply to texture lookup."}  %read{491,1215} %write{2147483647,-1}
param	string	filter	"smartcubic"		%meta{string,label,"Filter"} %meta{string,page,"Advanced"} %meta{string,widget,"mapper"} %meta{string,options,"linear:linear|smartcubic:smartcubic|cubic:cubic|unfiltered:closest"} %meta{string,help,"Which filter to use. (unfiltered/closest not advisable for displacement.)"} %meta{int,connectable,0}  %read{494,1218} %write{2147483647,-1}
param	float	filterScale	1		%meta{string,label,"Filter Scale"} %meta{string,page,"Advanced"} %meta{int,slider,1} %meta{float,min,0} %meta{float,max,2} %meta{string,help,"Multiplies the size of the texture filter, less than one for sharper textures."} %meta{int,connectable,0}  %read{495,1219} %write{2147483647,-1}
param	float	s	0		%meta{int,lockgeom,0} %meta{string,widget,"null"} %meta{int,connectable,0}  %read{38,38} %write{2147483647,-1} %derivs
param	float	t	0		%meta{int,lockgeom,0} %meta{string,widget,"null"} %meta{int,connectable,0}  %read{41,46} %write{2147483647,-1} %derivs
oparam	normal	resultN	0 0 0		%read{1445,1463} %write{1435,1457}
oparam	float	resultRoughness	0		%read{2147483647,-1} %write{1430,1430}
oparam	float	resultAnisotropy	0		%read{1429,1429} %write{1433,1433}
oparam	vector	resultAnisotropyDirection	0 0 0		%read{2147483647,-1} %write{1434,1434}
oparam	vector	resultNG	0 0 0		%read{1458,1458} %write{1466,1466}
global	point	P	%read{418,1142} %write{2147483647,-1} %derivs
global	vector	I	%read{1436,1436} %write{2147483647,-1}
global	normal	N	%read{32,1462} %write{2147483647,-1}
global	normal	Ng	%read{72,1442} %write{2147483647,-1}
global	vector	dPdu	%read{71,881} %write{2147483647,-1}
global	vector	dPdv	%read{71,887} %write{2147483647,-1}
local	float	___636__tt	%read{97,1206} %write{94,1200} %derivs
local	float	___636_coords.s	%read{102,1207} %write{96,1201} %mystruct{___636_coords} %mystructfield{0}
local	float	___636_coords.t	%read{103,1208} %write{97,1202} %mystruct{___636_coords} %mystructfield{1}
local	float	___636_coords.dsdx	%read{104,1209} %write{98,1203} %mystruct{___636_coords} %mystructfield{2}
local	float	___636_coords.dsdy	%read{105,1210} %write{99,1204} %mystruct{___636_coords} %mystructfield{3}
local	float	___636_coords.dtdx	%read{106,1211} %write{100,1205} %mystruct{___636_coords} %mystructfield{4}
local	float	___636_coords.dtdy	%read{107,1212} %write{101,1206} %mystruct{___636_coords} %mystructfield{5}
local	int	___649_success	%read{126,1266} %write{116,1265}
local	int	___649_nchannels	%read{128,1274} %write{117,1265}
local	color	___649_finalResult	%read{144,1284} %write{118,1283}
local	color	___649_result	%read{120,1282} %write{119,1259}
local	float	___687_k	%read{1462,1464} %write{1461,1461}
local	float	___699_VdotN	%read{1446,1449} %write{1445,1445}
local	float	___731_epsilon	%read{183,1384} %write{181,1382}
local	float	___733_w1	%read{371,850} %write{371,850}
local	float	___733_w2	%read{371,850} %write{371,850}
local	vector	___734_Nn	%read{371,850} %write{371,850}
local	vector	___734_Ncross	%read{371,850} %write{371,850}
local	float	___737_Bumprough_Use2016Mode	%read{371,850} %write{371,850}
local	vector	___744_sumv	%read{371,850} %write{371,850}
local	vector	___747_dQdx	%read{371,1156} %write{371,1141}
local	vector	___747_dQdy	%read{371,1155} %write{371,1142}
local	float	___747_A	%read{371,1155} %write{371,1143}
local	float	___747_B	%read{371,1152} %write{371,1144}
local	float	___747_C	%read{371,1156} %write{371,1145}
local	float	___747_D	%read{371,1151} %write{371,1146}
local	float	___747_invdet	%read{371,1158} %write{371,1150}
local	float	___748_del	%read{235,1343} %write{233,1338}
local	float	___765_e_over.l1	%read{371,850} %write{371,850} %mystruct{___765_e_over} %mystructfield{0}
local	float	___765_e_over.l2	%read{371,850} %write{371,850} %mystruct{___765_e_over} %mystructfield{1}
local	vector	___765_e_over.v1	%read{371,850} %write{371,850} %mystruct{___765_e_over} %mystructfield{2}
local	vector	___765_e_over.v2	%read{371,850} %write{371,850} %mystruct{___765_e_over} %mystructfield{3}
local	normal	___765_e_over.n	%read{371,850} %write{371,850} %mystruct{___765_e_over} %mystructfield{4}
local	float	___768_coords.s	%read{119,1259} %write{102,1207} %mystruct{___768_coords} %mystructfield{0}
local	float	___768_coords.t	%read{119,1259} %write{103,1208} %mystruct{___768_coords} %mystructfield{1}
local	float	___768_coords.dsdx	%read{119,1259} %write{104,1209} %mystruct{___768_coords} %mystructfield{2}
local	float	___768_coords.dsdy	%read{119,1259} %write{105,1210} %mystruct{___768_coords} %mystructfield{3}
local	float	___768_coords.dtdx	%read{119,1259} %write{106,1211} %mystruct{___768_coords} %mystructfield{4}
local	float	___768_coords.dtdy	%read{119,1259} %write{107,1212} %mystruct{___768_coords} %mystructfield{5}
local	int	___768_params.firstchannel	%read{119,1259} %write{109,1254} %mystruct{___768_params} %mystructfield{0}
local	float	___768_params.blur	%read{119,1259} %write{110,1215} %mystruct{___768_params} %mystructfield{1}
local	color	___768_params.missingcolor	%read{119,1260} %write{111,1216} %mystruct{___768_params} %mystructfield{2}
local	float	___768_params.missingalpha	%read{2147483647,-1} %write{112,1217} %mystruct{___768_params} %mystructfield{3}
local	string	___768_params.interp	%read{119,1259} %write{113,1218} %mystruct{___768_params} %mystructfield{4}
local	float	___768_params.width	%read{119,1259} %write{114,1219} %mystruct{___768_params} %mystructfield{5}
local	normal	___769_PN	%read{72,1177} %write{71,1176}
local	int	___769_lefthanded	%read{74,1179} %write{73,1178}
local	normal	___769_N_	%read{77,1184} %write{75,1181}
local	float	___770_dx	%read{208,1367} %write{203,1308}
local	float	___770_dy	%read{211,1369} %write{204,1309}
local	float	___770_dxdx	%read{209,1314} %write{205,1310}
local	float	___770_dydy	%read{215,1320} %write{206,1311}
local	float	___770_dxdy	%read{212,1317} %write{207,1312}
local	float	___770_sxx	%read{220,1342} %write{210,1325}
local	float	___770_sxy	%read{221,1350} %write{213,1326}
local	float	___770_syy	%read{222,1349} %write{216,1327}
local	float	___771_varianceGainSqr	%read{220,1327} %write{219,1324}
local	float	___770_l1	%read{240,1353} %write{236,1341}
local	float	___770_l2	%read{244,1354} %write{239,1344}
local	vector	___770_v1	%read{250,1357} %write{243,1348}
local	vector	___770_v2	%read{256,1363} %write{247,1352}
local	float	___772_eps	%read{293,1400} %write{291,1396}
local	float	___772_roughnessU	%read{296,1401} %write{293,1398}
local	float	___772_roughnessV	%read{296,1401} %write{295,1400}
local	float	___772_ratio	%read{297,1403} %write{296,1401}
local	float	___772_anisotropy	%read{300,1410} %write{299,1408}
local	float	___772_alpha	%read{310,1417} %write{308,1413}
local	float	___772_variance	%read{310,1418} %write{309,1414}
local	float	___773_baseRoughnessSqr	%read{81,1391} %write{69,1174}
local	vector	___773_U	%read{79,1368} %write{78,1183}
local	vector	___773_V	%read{84,1370} %write{79,1184}
local	vector	___773_W	%read{85,1372} %write{80,1185}
local	float	___773_result.l1	%read{284,1420} %write{81,1416} %mystruct{___773_result} %mystructfield{0}
local	float	___773_result.l2	%read{286,1421} %write{82,1419} %mystruct{___773_result} %mystructfield{1}
local	vector	___773_result.v1	%read{255,1422} %write{83,1360} %mystruct{___773_result} %mystructfield{2}
local	vector	___773_result.v2	%read{261,1423} %write{84,1366} %mystruct{___773_result} %mystructfield{3}
local	normal	___773_result.n	%read{269,1424} %write{85,1374} %mystruct{___773_result} %mystructfield{4}
local	int	___773_validDs	%read{193,1298} %write{192,1297}
local	float	___778_resultRoughnessU	%read{1428,1430} %write{1426,1426}
local	float	___778_resultRoughnessV	%read{1428,1428} %write{1427,1427}
local	float	___778_rudivrv	%read{1431,1432} %write{1428,1428}
local	float	___780_textureBumpRough.l1	%read{320,1130} %write{57,1125} %mystruct{___780_textureBumpRough} %mystructfield{0}
local	float	___780_textureBumpRough.l2	%read{321,1131} %write{58,1126} %mystruct{___780_textureBumpRough} %mystructfield{1}
local	vector	___780_textureBumpRough.v1	%read{2147483647,-1} %write{59,1127} %mystruct{___780_textureBumpRough} %mystructfield{2}
local	vector	___780_textureBumpRough.v2	%read{2147483647,-1} %write{60,1128} %mystruct{___780_textureBumpRough} %mystructfield{3}
local	normal	___780_textureBumpRough.n	%read{2147483647,-1} %write{61,1129} %mystruct{___780_textureBumpRough} %mystructfield{4}
local	vector	___780_vecD1	%read{145,1014} %write{62,1011}
local	vector	___780_vecD2	%read{188,1017} %write{63,989}
local	float	___780_textureRoughnessU	%read{322,1137} %write{320,1130}
local	float	___780_textureRoughnessV	%read{322,1132} %write{321,1131}
local	float	___780_rudivrv	%read{323,1134} %write{322,1132}
local	float	___780_textureAnisotropy	%read{326,1136} %write{325,1135}
local	float	___780_textureRoughnessGain	%read{329,1139} %write{328,1138}
local	vector	dPds	%read{371,1176} %write{24,1154}
local	vector	dPdt	%read{371,1182} %write{25,1158}
local	vector	vecD1	%read{371,1309} %write{26,1306}
local	vector	vecD2	%read{371,1312} %write{27,1284}
local	float	br.l1	%read{371,1426} %write{28,1420} %mystruct{br} %mystructfield{0}
local	float	br.l2	%read{371,1427} %write{29,1421} %mystruct{br} %mystructfield{1}
local	vector	br.v1	%read{371,1434} %write{30,1422} %mystruct{br} %mystructfield{2}
local	vector	br.v2	%read{371,850} %write{31,1423} %mystruct{br} %mystructfield{3}
local	normal	br.n	%read{371,1435} %write{32,1424} %mystruct{br} %mystructfield{4}
local	float	resultBumpRoughPresence	%read{2147483647,-1} %write{33,33}
local	float	textureRoughnessGain	%read{35,36} %write{34,1139}
local	float	_gainRw	%read{371,1324} %write{35,35}
local	float	_bumpNormalGainRw	%read{371,1369} %write{36,36}
local	int	isMulti	%read{2147483647,-1} %write{37,37}
local	float	inputS	%read{371,1204} %write{38,850} %derivs
local	float	inputT	%read{371,1200} %write{45,850} %derivs
local	float	inputW	%read{371,850} %write{47,850}
local	point[3]	___782_sta	%read{371,850} %write{330,332} %derivs
local	point[3]	___782_hex.s	%read{371,850} %write{334,350} %mystruct{___782_hex} %mystructfield{0} %derivs
local	point[3]	___782_hex.t	%read{371,850} %write{336,352} %mystruct{___782_hex} %mystructfield{1} %derivs
local	point[3]	___782_hex.w	%read{371,850} %write{338,354} %mystruct{___782_hex} %mystructfield{2}
local	point[3]	___782_hex.r	%read{371,850} %write{340,356} %mystruct{___782_hex} %mystructfield{3}
local	int	___782_numProj	%read{371,850} %write{357,357}
local	float	___782_resultBumpRough.l1	%read{371,859} %write{358,850} %mystruct{___782_resultBumpRough} %mystructfield{0}
local	float	___782_resultBumpRough.l2	%read{371,860} %write{359,850} %mystruct{___782_resultBumpRough} %mystructfield{1}
local	vector	___782_resultBumpRough.v1	%read{371,861} %write{360,850} %mystruct{___782_resultBumpRough} %mystructfield{2}
local	vector	___782_resultBumpRough.v2	%read{371,862} %write{361,850} %mystruct{___782_resultBumpRough} %mystructfield{3}
local	normal	___782_resultBumpRough.n	%read{364,863} %write{362,858} %mystruct{___782_resultBumpRough} %mystructfield{4}
local	float	___782_resultBumpRoughPresence	%read{371,850} %write{363,850}
local	vector	___782_Nc	%read{855,855} %write{364,364}
local	float	___782_wvdenom	%read{371,853} %write{367,850}
local	float	___782_sqwaccum	%read{371,850} %write{368,850}
local	int	___784_i	%read{371,850} %write{370,850} %derivs
local	int	___785_do_hextile	%read{371,850} %write{371,850}
local	int	___785_numSamples	%read{371,850} %write{371,850}
local	float	___785_weight	%read{371,850} %write{371,850}
local	float	___785_wmult	%read{2147483647,-1} %write{371,850}
local	int	___787_j	%read{371,850} %write{371,850} %derivs
local	vector	Vn	%read{1442,1450} %write{1437,1437}
const	vector	$const1	0 0 0		%read{0,7} %write{2147483647,-1}
const	int	$const2	0		%read{0,1454} %write{2147483647,-1}
const	int	$const3	1		%read{1,1363} %write{2147483647,-1}
const	int	$const4	2		%read{2,1312} %write{2147483647,-1}
const	int	$const5	3		%read{3,384} %write{2147483647,-1}
const	point	$const6	0 0 0		%read{8,23} %write{2147483647,-1}
const	point	$const7	-1 -1 -1		%read{10,378} %write{2147483647,-1}
const	float	$const8	9.99999975e-06		%read{28,868} %write{2147483647,-1}
const	vector	$const9	1 0 0		%read{30,869} %write{2147483647,-1}
const	vector	$const10	0 1 0		%read{31,870} %write{2147483647,-1}
const	float	$const11	1		%read{33,1432} %write{2147483647,-1}
const	string	$const12	"invertCoord"		%read{40,1194} %write{2147483647,-1}
temp	float	$tmp25	%read{42,42} %write{41,41} %derivs
temp	float	$tmp26	%read{45,45} %write{42,42} %derivs
temp	float	$tmp27	%read{44,44} %write{43,43} %derivs
temp	float	$tmp28	%read{45,45} %write{44,44} %derivs
temp	int	$tmp29	%read{49,49} %write{48,48}
temp	int	$tmp30	%read{53,53} %write{52,52}
const	float	$const13	0		%read{54,1408} %write{2147483647,-1}
temp	int	$tmp31	%read{55,55} %write{54,54}
const	string	$const14	"estimateRoughnessGain"		%read{56,866} %write{2147483647,-1}
const	float	$const15	9.99999975e-05		%read{69,879} %write{2147483647,-1}
temp	float	$tmp32	%read{65,65} %write{64,64} %derivs
const	float	$const16	0.5		%read{65,1344} %write{2147483647,-1}
temp	float	$tmp33	%read{96,99} %write{65,65} %derivs
temp	float	$tmp34	%read{67,67} %write{66,66} %derivs
temp	float	$tmp35	%read{90,95} %write{67,67} %derivs
const	string	$const17	"linear"		%read{113,923} %write{2147483647,-1}
const	float	$const18	1024		%read{110,924} %write{2147483647,-1}
const	string	$const19	"ReadBumpRough"		%read{68,1173} %write{2147483647,-1}
const	string	$const20	"ComputeOrthonormalTangentSpace"		%read{70,1175} %write{2147483647,-1}
temp	float	$tmp36	%read{73,73} %write{72,72}
temp	vector	$tmp37	%read{78,78} %write{77,77}
const	string	$const21	"ReadBumpRoughTextures"		%read{86,1191} %write{2147483647,-1}
const	string	$const22	"initTxCoords"		%read{87,1192} %write{2147483647,-1}
temp	float	$tmp38	%read{91,91} %write{90,90} %derivs
temp	float	$tmp39	%read{94,94} %write{91,91} %derivs
temp	float	$tmp40	%read{93,93} %write{92,92} %derivs
temp	float	$tmp41	%read{94,94} %write{93,93} %derivs
const	color	$const23	0 0 0		%read{111,1216} %write{2147483647,-1}
const	string	$const24	"PxrTextureLookup"		%read{115,1255} %write{2147483647,-1}
const	string	$const25	"firstchannel"		%read{119,1259} %write{2147483647,-1}
const	string	$const26	"blur"		%read{119,1259} %write{2147483647,-1}
const	string	$const27	"missingcolor"		%read{119,1259} %write{2147483647,-1}
const	string	$const28	"interp"		%read{119,1259} %write{2147483647,-1}
const	string	$const29	"width"		%read{119,1259} %write{2147483647,-1}
temp	int	$tmp42	%read{121,121} %write{120,120}
const	string	$const30	"channels"		%read{125,1265} %write{2147483647,-1}
temp	int	$tmp43	%read{127,130} %write{126,129}
temp	int	$tmp44	%read{129,129} %write{128,128}
temp	int	$tmp45	%read{132,132} %write{131,131}
temp	int	$tmp46	%read{133,137} %write{132,136}
temp	int	$tmp47	%read{135,135} %write{134,134}
temp	int	$tmp48	%read{136,136} %write{135,135}
temp	float	$tmp49	%read{139,139} %write{138,138}
temp	float	$tmp50	%read{141,141} %write{140,140}
temp	float	$tmp51	%read{143,143} %write{142,142}
temp	float	$tmp52	%read{148,148} %write{147,147}
temp	float	$tmp53	%read{147,147} %write{145,145}
temp	float	$tmp54	%read{147,147} %write{146,146}
temp	int	$tmp55	%read{156,156} %write{155,155}
temp	int	$tmp56	%read{162,165} %write{161,164}
temp	int	$tmp57	%read{164,164} %write{163,163}
temp	int	$tmp58	%read{167,167} %write{166,166}
temp	int	$tmp59	%read{168,172} %write{167,171}
temp	int	$tmp60	%read{170,170} %write{169,169}
temp	int	$tmp61	%read{171,171} %write{170,170}
temp	float	$tmp62	%read{174,174} %write{173,173}
temp	float	$tmp63	%read{176,176} %write{175,175}
temp	float	$tmp64	%read{178,178} %write{177,177}
temp	int	$tmp65	%read{184,184} %write{183,183}
const	string	$const31	"_IsValidVector"		%read{180,1381} %write{2147483647,-1}
const	float	$const32	9.99999994e-09		%read{181,1465} %write{2147483647,-1}
temp	float	$tmp66	%read{183,183} %write{182,182}
temp	int	$tmp67	%read{185,192} %write{184,191}
temp	int	$tmp68	%read{190,190} %write{189,189}
temp	float	$tmp69	%read{189,189} %write{188,188}
temp	int	$tmp70	%read{191,191} %write{190,190}
temp	int	$tmp71	%read{195,195} %write{194,194}
temp	float	$tmp72	%read{197,197} %write{196,196}
temp	float	$tmp73	%read{198,198} %write{197,197}
temp	float	$tmp74	%read{200,200} %write{199,199}
temp	float	$tmp75	%read{201,201} %write{200,200}
temp	int	$tmp76	%read{283,283} %write{282,282}
const	string	$const33	"ComputeBumpRoughStruct"		%read{202,1307} %write{2147483647,-1}
const	float	$const34	2		%read{210,1412} %write{2147483647,-1}
temp	float	$tmp77	%read{209,209} %write{208,208}
temp	float	$tmp78	%read{210,210} %write{209,209}
temp	float	$tmp79	%read{212,212} %write{211,211}
temp	float	$tmp80	%read{213,213} %write{212,212}
temp	float	$tmp81	%read{215,215} %write{214,214}
temp	float	$tmp82	%read{216,216} %write{215,215}
temp	int	$tmp83	%read{218,218} %write{217,217}
const	string	$const35	"BumpRough_CovarToEigen2D"		%read{223,1328} %write{2147483647,-1}
temp	float	$tmp84	%read{227,227} %write{224,224}
const	float	$const36	4		%read{225,1330} %write{2147483647,-1}
temp	float	$tmp85	%read{226,226} %write{225,225}
temp	float	$tmp86	%read{227,227} %write{226,226}
temp	float	$tmp87	%read{230,230} %write{227,227}
temp	float	$tmp88	%read{229,229} %write{228,228}
temp	float	$tmp89	%read{230,230} %write{229,229}
temp	float	$tmp90	%read{232,232} %write{230,230}
temp	float	$tmp91	%read{232,232} %write{231,231}
temp	float	$tmp92	%read{233,233} %write{232,232}
temp	float	$tmp93	%read{235,235} %write{234,234}
temp	float	$tmp94	%read{236,236} %write{235,235}
temp	float	$tmp95	%read{238,238} %write{237,237}
temp	float	$tmp96	%read{239,239} %write{238,238}
temp	vector	$tmp97	%read{243,243} %write{242,242}
temp	float	$tmp98	%read{241,241} %write{240,240}
temp	float	$tmp99	%read{242,242} %write{241,241}
temp	vector	$tmp100	%read{247,247} %write{246,246}
temp	float	$tmp101	%read{245,245} %write{244,244}
temp	float	$tmp102	%read{246,246} %write{245,245}
temp	float	$tmp103	%read{251,251} %write{250,250}
temp	vector	$tmp104	%read{254,254} %write{251,251}
temp	float	$tmp105	%read{253,253} %write{252,252}
temp	vector	$tmp106	%read{254,254} %write{253,253}
temp	float	$tmp107	%read{257,257} %write{256,256}
temp	vector	$tmp108	%read{260,260} %write{257,257}
temp	float	$tmp109	%read{259,259} %write{258,258}
temp	vector	$tmp110	%read{260,260} %write{259,259}
temp	float	$tmp111	%read{263,263} %write{262,262}
temp	vector	$tmp112	%read{266,266} %write{263,263}
temp	float	$tmp113	%read{265,265} %write{264,264}
temp	vector	$tmp114	%read{266,266} %write{265,265}
temp	vector	$tmp115	%read{267,267} %write{266,266}
temp	vector	$tmp116	%read{268,268} %write{267,267}
temp	int	$tmp117	%read{274,274} %write{273,273}
temp	float	$tmp118	%read{273,273} %write{272,272}
temp	int	$tmp119	%read{275,282} %write{274,281}
temp	int	$tmp120	%read{280,280} %write{279,279}
temp	float	$tmp121	%read{279,279} %write{278,278}
temp	int	$tmp122	%read{281,281} %write{280,280}
temp	int	$tmp123	%read{289,289} %write{288,288}
const	string	$const37	"BumpRoughAnisotropyAdjust"		%read{290,1395} %write{2147483647,-1}
const	float	$const38	9.99999996e-13		%read{291,1396} %write{2147483647,-1}
temp	float	$tmp124	%read{293,293} %write{292,292}
temp	float	$tmp125	%read{295,295} %write{294,294}
temp	float	$tmp126	%read{299,299} %write{297,297}
temp	float	$tmp127	%read{299,299} %write{298,298}
temp	float	$tmp128	%read{302,302} %write{300,300}
const	string	$const39	"clamp"		%read{301,1406} %write{2147483647,-1}
temp	float	$tmp129	%read{303,303} %write{302,302}
temp	float	$tmp130	%read{306,306} %write{304,304}
temp	float	$tmp131	%read{306,306} %write{305,305}
temp	float	$tmp132	%read{307,307} %write{306,306}
temp	float	$tmp133	%read{308,308} %write{307,307}
temp	float	$tmp134	%read{313,313} %write{312,312}
temp	float	$tmp135	%read{325,325} %write{323,323}
temp	float	$tmp136	%read{325,325} %write{324,324}
temp	float	$tmp137	%read{327,327} %write{326,326}
temp	float	$tmp138	%read{328,328} %write{327,327}
temp	point	$tmp139	%read{334,334} %write{333,333} %derivs
temp	point	$tmp140	%read{336,336} %write{335,335} %derivs
temp	point	$tmp141	%read{338,338} %write{337,337}
temp	point	$tmp142	%read{340,340} %write{339,339}
temp	point	$tmp143	%read{342,342} %write{341,341} %derivs
temp	point	$tmp144	%read{344,344} %write{343,343} %derivs
temp	point	$tmp145	%read{346,346} %write{345,345}
temp	point	$tmp146	%read{348,348} %write{347,347}
temp	point	$tmp147	%read{350,350} %write{349,349} %derivs
temp	point	$tmp148	%read{352,352} %write{351,351} %derivs
temp	point	$tmp149	%read{354,354} %write{353,353}
temp	point	$tmp150	%read{356,356} %write{355,355}
temp	int	$tmp151	%read{371,850} %write{371,850}
temp	int	$tmp152	%read{369,850} %write{370,850}
temp	point	$tmp153.s	%read{2147483647,-1} %write{371,850}
temp	point	$tmp153.t	%read{2147483647,-1} %write{371,850}
temp	point	$tmp153.w	%read{371,850} %write{371,850}
temp	point	$tmp153.r	%read{2147483647,-1} %write{371,850}
const	string	$const40	"validHexTileData"		%read{377,377} %write{2147483647,-1}
temp	int	$tmp155	%read{371,850} %write{371,850}
temp	point	$tmp156	%read{371,850} %write{371,850}
const	float	$const41	3		%read{390,390} %write{2147483647,-1}
temp	int	$tmp157	%read{371,850} %write{371,850}
temp	int	$tmp158	%read{371,850} %write{371,850}
temp	int	$tmp159	%read{371,850} %write{371,850}
temp	int	$tmp160	%read{371,850} %write{371,850}
temp	point	$tmp161	%read{371,850} %write{371,850} %derivs
temp	point	$tmp162	%read{371,850} %write{371,850} %derivs
temp	int	$tmp163	%read{371,850} %write{371,850}
temp	point	$tmp164	%read{371,850} %write{371,850} %derivs
temp	point	$tmp165	%read{371,850} %write{371,850} %derivs
temp	int	$tmp166	%read{371,850} %write{371,850}
temp	point	$tmp167	%read{371,850} %write{371,850}
temp	float	$tmp168	%read{371,850} %write{371,850}
temp	int	$tmp169	%read{2147483647,-1} %write{371,850}
const	string	$const42	"BumpRough_PartialDeriv"		%read{417,1140} %write{2147483647,-1}
temp	float	$tmp170	%read{371,850} %write{371,850}
temp	float	$tmp171	%read{371,850} %write{371,850}
temp	float	$tmp172	%read{371,850} %write{371,850}
temp	vector	$tmp173	%read{371,850} %write{371,850}
temp	vector	$tmp174	%read{371,850} %write{371,850}
temp	vector	$tmp175	%read{371,850} %write{371,850}
temp	vector	$tmp176	%read{371,850} %write{371,850}
temp	vector	$tmp177	%read{371,850} %write{371,850}
temp	vector	$tmp178	%read{371,850} %write{371,850}
temp	int	$tmp179	%read{371,850} %write{371,850}
temp	float	$tmp180	%read{371,850} %write{371,850}
temp	int	$tmp181	%read{371,850} %write{371,850}
temp	int	$tmp182	%read{371,850} %write{371,850}
temp	float	$tmp183	%read{371,850} %write{371,850}
temp	int	$tmp184	%read{371,850} %write{371,850}
temp	float	$tmp185	%read{371,850} %write{371,850}
temp	vector	$tmp186	%read{371,850} %write{371,850}
temp	float	$tmp187	%read{371,850} %write{371,850} %derivs
temp	float	$tmp188	%read{371,850} %write{371,850} %derivs
temp	float	$tmp189	%read{371,850} %write{371,850} %derivs
temp	float	$tmp190	%read{371,850} %write{371,850} %derivs
temp	int	$tmp191	%read{371,850} %write{371,850}
temp	int	$tmp192	%read{371,850} %write{371,850}
temp	int	$tmp193	%read{371,850} %write{371,850}
temp	int	$tmp194	%read{371,850} %write{371,850}
temp	int	$tmp195	%read{371,850} %write{371,850}
temp	int	$tmp196	%read{371,850} %write{371,850}
temp	int	$tmp197	%read{371,850} %write{371,850}
temp	float	$tmp198	%read{371,850} %write{371,850}
temp	float	$tmp199	%read{371,850} %write{371,850}
temp	float	$tmp200	%read{371,850} %write{371,850}
temp	float	$tmp201	%read{371,850} %write{371,850}
temp	float	$tmp202	%read{371,850} %write{371,850}
temp	float	$tmp203	%read{371,850} %write{371,850}
temp	int	$tmp204	%read{371,850} %write{371,850}
temp	int	$tmp205	%read{371,850} %write{371,850}
temp	int	$tmp206	%read{371,850} %write{371,850}
temp	int	$tmp207	%read{371,850} %write{371,850}
temp	int	$tmp208	%read{371,850} %write{371,850}
temp	int	$tmp209	%read{371,850} %write{371,850}
temp	int	$tmp210	%read{371,850} %write{371,850}
temp	float	$tmp211	%read{371,850} %write{371,850}
temp	float	$tmp212	%read{371,850} %write{371,850}
temp	float	$tmp213	%read{371,850} %write{371,850}
temp	int	$tmp214	%read{371,850} %write{371,850}
temp	float	$tmp215	%read{371,850} %write{371,850}
temp	int	$tmp216	%read{371,850} %write{371,850}
temp	int	$tmp217	%read{371,850} %write{371,850}
temp	float	$tmp218	%read{371,850} %write{371,850}
temp	int	$tmp219	%read{371,850} %write{371,850}
temp	int	$tmp220	%read{371,850} %write{371,850}
temp	float	$tmp221	%read{371,850} %write{371,850}
temp	float	$tmp222	%read{371,850} %write{371,850}
temp	float	$tmp223	%read{371,850} %write{371,850}
temp	float	$tmp224	%read{371,850} %write{371,850}
temp	int	$tmp225	%read{371,850} %write{371,850}
temp	float	$tmp226	%read{371,850} %write{371,850}
temp	float	$tmp227	%read{371,850} %write{371,850}
temp	float	$tmp228	%read{371,850} %write{371,850}
temp	float	$tmp229	%read{371,850} %write{371,850}
temp	float	$tmp230	%read{371,850} %write{371,850}
temp	float	$tmp231	%read{371,850} %write{371,850}
temp	int	$tmp232	%read{371,850} %write{371,850}
temp	float	$tmp233	%read{371,850} %write{371,850}
temp	float	$tmp234	%read{371,850} %write{371,850}
temp	float	$tmp235	%read{371,850} %write{371,850}
temp	float	$tmp236	%read{371,850} %write{371,850}
temp	float	$tmp237	%read{371,850} %write{371,850}
temp	float	$tmp238	%read{371,850} %write{371,850}
temp	float	$tmp239	%read{371,850} %write{371,850}
temp	float	$tmp240	%read{371,850} %write{371,850}
temp	float	$tmp241	%read{371,850} %write{371,850}
temp	float	$tmp242	%read{371,850} %write{371,850}
temp	float	$tmp243	%read{371,850} %write{371,850}
temp	float	$tmp244	%read{371,850} %write{371,850}
temp	float	$tmp245	%read{371,850} %write{371,850}
temp	vector	$tmp246	%read{371,850} %write{371,850}
temp	float	$tmp247	%read{371,850} %write{371,850}
temp	float	$tmp248	%read{371,850} %write{371,850}
temp	vector	$tmp249	%read{371,850} %write{371,850}
temp	float	$tmp250	%read{371,850} %write{371,850}
temp	float	$tmp251	%read{371,850} %write{371,850}
temp	float	$tmp252	%read{371,850} %write{371,850}
temp	vector	$tmp253	%read{371,850} %write{371,850}
temp	float	$tmp254	%read{371,850} %write{371,850}
temp	vector	$tmp255	%read{371,850} %write{371,850}
temp	float	$tmp256	%read{371,850} %write{371,850}
temp	vector	$tmp257	%read{371,850} %write{371,850}
temp	float	$tmp258	%read{371,850} %write{371,850}
temp	vector	$tmp259	%read{371,850} %write{371,850}
temp	float	$tmp260	%read{371,850} %write{371,850}
temp	vector	$tmp261	%read{371,850} %write{371,850}
temp	float	$tmp262	%read{371,850} %write{371,850}
temp	vector	$tmp263	%read{371,850} %write{371,850}
temp	vector	$tmp264	%read{371,850} %write{371,850}
temp	vector	$tmp265	%read{371,850} %write{371,850}
temp	int	$tmp266	%read{371,850} %write{371,850}
temp	float	$tmp267	%read{371,850} %write{371,850}
temp	int	$tmp268	%read{371,850} %write{371,850}
temp	int	$tmp269	%read{371,850} %write{371,850}
temp	float	$tmp270	%read{371,850} %write{371,850}
temp	int	$tmp271	%read{371,850} %write{371,850}
temp	int	$tmp272	%read{371,850} %write{371,850}
temp	float	$tmp273	%read{371,850} %write{371,850}
temp	float	$tmp274	%read{371,850} %write{371,850}
temp	float	$tmp275	%read{371,850} %write{371,850}
temp	float	$tmp276	%read{371,850} %write{371,850}
temp	float	$tmp277	%read{371,850} %write{371,850}
temp	float	$tmp278	%read{371,850} %write{371,850}
temp	float	$tmp279	%read{371,850} %write{371,850}
temp	float	$tmp280	%read{371,850} %write{371,850}
temp	float	$tmp281	%read{371,850} %write{371,850}
temp	float	$tmp282	%read{371,850} %write{371,850}
temp	float	$tmp283	%read{371,850} %write{371,850}
temp	float	$tmp284	%read{371,850} %write{371,850}
const	string	$const43	"BumpRough_EigenBlend_AddNormalWeightedVariance"		%read{702,702} %write{2147483647,-1}
temp	int	$tmp285	%read{371,850} %write{371,850}
const	string	$const44	"BumpRough_CombineEigens2D"		%read{721,721} %write{2147483647,-1}
temp	int	$tmp286	%read{371,850} %write{371,850}
temp	int	$tmp287	%read{371,850} %write{371,850}
temp	int	$tmp288	%read{371,850} %write{371,850}
temp	int	$tmp289	%read{371,850} %write{371,850}
temp	int	$tmp290	%read{371,850} %write{371,850}
temp	int	$tmp291	%read{371,850} %write{371,850}
temp	int	$tmp292	%read{371,850} %write{371,850}
temp	int	$tmp293	%read{371,850} %write{371,850}
const	string	$const45	"_combineEigens2D"		%read{746,746} %write{2147483647,-1}
const	string	$const46	"_normalizeEigen2D"		%read{747,754} %write{2147483647,-1}
temp	int	$tmp294	%read{371,850} %write{371,850}
const	string	$const47	"_swapEigen2D"		%read{763,770} %write{2147483647,-1}
temp	int	$tmp295	%read{371,850} %write{371,850}
const	string	$const48	"_forceRhandEigen2D"		%read{775,788} %write{2147483647,-1}
temp	normal	$tmp296	%read{371,850} %write{371,850}
temp	vector	$tmp297	%read{371,850} %write{371,850}
temp	float	$tmp298	%read{371,850} %write{371,850}
temp	int	$tmp299	%read{371,850} %write{371,850}
temp	normal	$tmp300	%read{371,850} %write{371,850}
temp	vector	$tmp301	%read{371,850} %write{371,850}
temp	float	$tmp302	%read{371,850} %write{371,850}
temp	int	$tmp303	%read{371,850} %write{371,850}
const	string	$const49	"_alignEigenB2D"		%read{801,801} %write{2147483647,-1}
temp	int	$tmp304	%read{2147483647,-1} %write{371,850}
const	string	$const50	""		%read{803,803} %write{2147483647,-1}
const	string	$const51	"user:Bumprough_Use2016Mode"		%read{803,803} %write{2147483647,-1}
temp	int	$tmp305	%read{371,850} %write{371,850}
temp	float	$tmp306	%read{371,850} %write{371,850}
temp	int	$tmp307	%read{371,850} %write{371,850}
temp	float	$tmp308	%read{371,850} %write{371,850}
temp	int	$tmp309	%read{371,850} %write{371,850}
temp	vector	$tmp310	%read{371,850} %write{371,850}
temp	vector	$tmp311	%read{371,850} %write{371,850}
temp	vector	$tmp312	%read{371,850} %write{371,850}
temp	vector	$tmp313	%read{371,850} %write{371,850}
temp	normal	$tmp314	%read{371,850} %write{371,850}
temp	float	$tmp315	%read{371,850} %write{371,850}
temp	float	$tmp316	%read{371,850} %write{371,850}
temp	int	$tmp317	%read{2147483647,-1} %write{371,850}
temp	float	$tmp318	%read{371,850} %write{371,850}
temp	float	$tmp319	%read{371,850} %write{371,850}
temp	int	$tmp320	%read{2147483647,-1} %write{371,850}
temp	int	$tmp321	%read{852,852} %write{851,851}
temp	float	$tmp322	%read{854,854} %write{853,853}
temp	normal	$tmp323	%read{855,855} %write{854,854}
temp	int	$tmp324	%read{865,865} %write{864,864}
temp	float	$tmp325	%read{875,875} %write{874,874} %derivs
temp	float	$tmp326	%read{906,909} %write{875,875} %derivs
temp	float	$tmp327	%read{877,877} %write{876,876} %derivs
temp	float	$tmp328	%read{900,905} %write{877,877} %derivs
temp	float	$tmp329	%read{883,883} %write{882,882}
temp	vector	$tmp330	%read{888,888} %write{887,887}
temp	float	$tmp331	%read{901,901} %write{900,900} %derivs
temp	float	$tmp332	%read{904,904} %write{901,901} %derivs
temp	float	$tmp333	%read{903,903} %write{902,902} %derivs
temp	float	$tmp334	%read{904,904} %write{903,903} %derivs
temp	int	$tmp335	%read{931,931} %write{930,930}
temp	int	$tmp336	%read{937,940} %write{936,939}
temp	int	$tmp337	%read{939,939} %write{938,938}
temp	int	$tmp338	%read{942,942} %write{941,941}
temp	int	$tmp339	%read{943,947} %write{942,946}
temp	int	$tmp340	%read{945,945} %write{944,944}
temp	int	$tmp341	%read{946,946} %write{945,945}
temp	float	$tmp342	%read{949,949} %write{948,948}
temp	float	$tmp343	%read{951,951} %write{950,950}
temp	float	$tmp344	%read{953,953} %write{952,952}
temp	float	$tmp345	%read{958,958} %write{957,957}
temp	float	$tmp346	%read{957,957} %write{955,955}
temp	float	$tmp347	%read{957,957} %write{956,956}
temp	int	$tmp348	%read{966,966} %write{965,965}
temp	int	$tmp349	%read{972,975} %write{971,974}
temp	int	$tmp350	%read{974,974} %write{973,973}
temp	int	$tmp351	%read{977,977} %write{976,976}
temp	int	$tmp352	%read{978,982} %write{977,981}
temp	int	$tmp353	%read{980,980} %write{979,979}
temp	int	$tmp354	%read{981,981} %write{980,980}
temp	float	$tmp355	%read{984,984} %write{983,983}
temp	float	$tmp356	%read{986,986} %write{985,985}
temp	float	$tmp357	%read{988,988} %write{987,987}
temp	int	$tmp358	%read{994,994} %write{993,993}
temp	float	$tmp359	%read{993,993} %write{992,992}
temp	int	$tmp360	%read{995,1002} %write{994,1001}
temp	int	$tmp361	%read{1000,1000} %write{999,999}
temp	float	$tmp362	%read{999,999} %write{998,998}
temp	int	$tmp363	%read{1001,1001} %write{1000,1000}
temp	int	$tmp364	%read{1005,1005} %write{1004,1004}
temp	float	$tmp365	%read{1007,1007} %write{1006,1006}
temp	float	$tmp366	%read{1008,1008} %write{1007,1007}
temp	float	$tmp367	%read{1010,1010} %write{1009,1009}
temp	float	$tmp368	%read{1011,1011} %write{1010,1010}
temp	int	$tmp369	%read{1093,1093} %write{1092,1092}
temp	float	$tmp370	%read{1019,1019} %write{1018,1018}
temp	float	$tmp371	%read{1020,1020} %write{1019,1019}
temp	float	$tmp372	%read{1022,1022} %write{1021,1021}
temp	float	$tmp373	%read{1023,1023} %write{1022,1022}
temp	float	$tmp374	%read{1025,1025} %write{1024,1024}
temp	float	$tmp375	%read{1026,1026} %write{1025,1025}
temp	int	$tmp376	%read{1028,1028} %write{1027,1027}
temp	float	$tmp377	%read{1037,1037} %write{1034,1034}
temp	float	$tmp378	%read{1036,1036} %write{1035,1035}
temp	float	$tmp379	%read{1037,1037} %write{1036,1036}
temp	float	$tmp380	%read{1040,1040} %write{1037,1037}
temp	float	$tmp381	%read{1039,1039} %write{1038,1038}
temp	float	$tmp382	%read{1040,1040} %write{1039,1039}
temp	float	$tmp383	%read{1042,1042} %write{1040,1040}
temp	float	$tmp384	%read{1042,1042} %write{1041,1041}
temp	float	$tmp385	%read{1043,1043} %write{1042,1042}
temp	float	$tmp386	%read{1045,1045} %write{1044,1044}
temp	float	$tmp387	%read{1046,1046} %write{1045,1045}
temp	float	$tmp388	%read{1048,1048} %write{1047,1047}
temp	float	$tmp389	%read{1049,1049} %write{1048,1048}
temp	vector	$tmp390	%read{1053,1053} %write{1052,1052}
temp	float	$tmp391	%read{1051,1051} %write{1050,1050}
temp	float	$tmp392	%read{1052,1052} %write{1051,1051}
temp	vector	$tmp393	%read{1057,1057} %write{1056,1056}
temp	float	$tmp394	%read{1055,1055} %write{1054,1054}
temp	float	$tmp395	%read{1056,1056} %write{1055,1055}
temp	float	$tmp396	%read{1061,1061} %write{1060,1060}
temp	vector	$tmp397	%read{1064,1064} %write{1061,1061}
temp	float	$tmp398	%read{1063,1063} %write{1062,1062}
temp	vector	$tmp399	%read{1064,1064} %write{1063,1063}
temp	float	$tmp400	%read{1067,1067} %write{1066,1066}
temp	vector	$tmp401	%read{1070,1070} %write{1067,1067}
temp	float	$tmp402	%read{1069,1069} %write{1068,1068}
temp	vector	$tmp403	%read{1070,1070} %write{1069,1069}
temp	float	$tmp404	%read{1073,1073} %write{1072,1072}
temp	vector	$tmp405	%read{1076,1076} %write{1073,1073}
temp	float	$tmp406	%read{1075,1075} %write{1074,1074}
temp	vector	$tmp407	%read{1076,1076} %write{1075,1075}
temp	vector	$tmp408	%read{1077,1077} %write{1076,1076}
temp	vector	$tmp409	%read{1078,1078} %write{1077,1077}
temp	int	$tmp410	%read{1084,1084} %write{1083,1083}
temp	float	$tmp411	%read{1083,1083} %write{1082,1082}
temp	int	$tmp412	%read{1085,1092} %write{1084,1091}
temp	int	$tmp413	%read{1090,1090} %write{1089,1089}
temp	float	$tmp414	%read{1089,1089} %write{1088,1088}
temp	int	$tmp415	%read{1091,1091} %write{1090,1090}
temp	int	$tmp416	%read{1099,1099} %write{1098,1098}
temp	float	$tmp417	%read{1103,1103} %write{1102,1102}
temp	float	$tmp418	%read{1105,1105} %write{1104,1104}
temp	float	$tmp419	%read{1109,1109} %write{1107,1107}
temp	float	$tmp420	%read{1109,1109} %write{1108,1108}
temp	float	$tmp421	%read{1112,1112} %write{1110,1110}
temp	float	$tmp422	%read{1113,1113} %write{1112,1112}
temp	float	$tmp423	%read{1116,1116} %write{1114,1114}
temp	float	$tmp424	%read{1116,1116} %write{1115,1115}
temp	float	$tmp425	%read{1117,1117} %write{1116,1116}
temp	float	$tmp426	%read{1118,1118} %write{1117,1117}
temp	float	$tmp427	%read{1123,1123} %write{1122,1122}
temp	float	$tmp428	%read{1135,1135} %write{1133,1133}
temp	float	$tmp429	%read{1135,1135} %write{1134,1134}
temp	float	$tmp430	%read{1137,1137} %write{1136,1136}
temp	float	$tmp431	%read{1138,1138} %write{1137,1137}
temp	int	$tmp432	%read{1172,1172} %write{1171,1171}
temp	float	$tmp433	%read{1149,1149} %write{1147,1147}
temp	float	$tmp434	%read{1149,1149} %write{1148,1148}
temp	float	$tmp435	%read{1150,1150} %write{1149,1149}
temp	vector	$tmp436	%read{1153,1153} %write{1151,1151}
temp	vector	$tmp437	%read{1153,1153} %write{1152,1152}
temp	vector	$tmp438	%read{1154,1154} %write{1153,1153}
temp	vector	$tmp439	%read{1157,1157} %write{1155,1155}
temp	vector	$tmp440	%read{1157,1157} %write{1156,1156}
temp	vector	$tmp441	%read{1158,1158} %write{1157,1157}
temp	int	$tmp442	%read{1163,1163} %write{1162,1162}
temp	float	$tmp443	%read{1162,1162} %write{1161,1161}
temp	int	$tmp444	%read{1164,1171} %write{1163,1170}
temp	int	$tmp445	%read{1169,1169} %write{1168,1168}
temp	float	$tmp446	%read{1168,1168} %write{1167,1167}
temp	int	$tmp447	%read{1170,1170} %write{1169,1169}
temp	float	$tmp448	%read{1178,1178} %write{1177,1177}
temp	vector	$tmp449	%read{1183,1183} %write{1182,1182}
temp	float	$tmp450	%read{1196,1196} %write{1195,1195} %derivs
temp	float	$tmp451	%read{1199,1199} %write{1196,1196} %derivs
temp	float	$tmp452	%read{1198,1198} %write{1197,1197} %derivs
temp	float	$tmp453	%read{1199,1199} %write{1198,1198} %derivs
temp	int	$tmp454	%read{1226,1226} %write{1225,1225}
temp	int	$tmp455	%read{1232,1235} %write{1231,1234}
temp	int	$tmp456	%read{1234,1234} %write{1233,1233}
temp	int	$tmp457	%read{1237,1237} %write{1236,1236}
temp	int	$tmp458	%read{1238,1242} %write{1237,1241}
temp	int	$tmp459	%read{1240,1240} %write{1239,1239}
temp	int	$tmp460	%read{1241,1241} %write{1240,1240}
temp	float	$tmp461	%read{1244,1244} %write{1243,1243}
temp	float	$tmp462	%read{1246,1246} %write{1245,1245}
temp	float	$tmp463	%read{1248,1248} %write{1247,1247}
temp	float	$tmp464	%read{1253,1253} %write{1252,1252}
temp	float	$tmp465	%read{1252,1252} %write{1250,1250}
temp	float	$tmp466	%read{1252,1252} %write{1251,1251}
temp	int	$tmp467	%read{1261,1261} %write{1260,1260}
temp	int	$tmp468	%read{1267,1270} %write{1266,1269}
temp	int	$tmp469	%read{1269,1269} %write{1268,1268}
temp	int	$tmp470	%read{1272,1272} %write{1271,1271}
temp	int	$tmp471	%read{1273,1277} %write{1272,1276}
temp	int	$tmp472	%read{1275,1275} %write{1274,1274}
temp	int	$tmp473	%read{1276,1276} %write{1275,1275}
temp	float	$tmp474	%read{1279,1279} %write{1278,1278}
temp	float	$tmp475	%read{1281,1281} %write{1280,1280}
temp	float	$tmp476	%read{1283,1283} %write{1282,1282}
temp	int	$tmp477	%read{1289,1289} %write{1288,1288}
temp	float	$tmp478	%read{1288,1288} %write{1287,1287}
temp	int	$tmp479	%read{1290,1297} %write{1289,1296}
temp	int	$tmp480	%read{1295,1295} %write{1294,1294}
temp	float	$tmp481	%read{1294,1294} %write{1293,1293}
temp	int	$tmp482	%read{1296,1296} %write{1295,1295}
temp	int	$tmp483	%read{1300,1300} %write{1299,1299}
temp	float	$tmp484	%read{1302,1302} %write{1301,1301}
temp	float	$tmp485	%read{1303,1303} %write{1302,1302}
temp	float	$tmp486	%read{1305,1305} %write{1304,1304}
temp	float	$tmp487	%read{1306,1306} %write{1305,1305}
temp	int	$tmp488	%read{1388,1388} %write{1387,1387}
temp	float	$tmp489	%read{1314,1314} %write{1313,1313}
temp	float	$tmp490	%read{1315,1315} %write{1314,1314}
temp	float	$tmp491	%read{1317,1317} %write{1316,1316}
temp	float	$tmp492	%read{1318,1318} %write{1317,1317}
temp	float	$tmp493	%read{1320,1320} %write{1319,1319}
temp	float	$tmp494	%read{1321,1321} %write{1320,1320}
temp	int	$tmp495	%read{1323,1323} %write{1322,1322}
temp	float	$tmp496	%read{1332,1332} %write{1329,1329}
temp	float	$tmp497	%read{1331,1331} %write{1330,1330}
temp	float	$tmp498	%read{1332,1332} %write{1331,1331}
temp	float	$tmp499	%read{1335,1335} %write{1332,1332}
temp	float	$tmp500	%read{1334,1334} %write{1333,1333}
temp	float	$tmp501	%read{1335,1335} %write{1334,1334}
temp	float	$tmp502	%read{1337,1337} %write{1335,1335}
temp	float	$tmp503	%read{1337,1337} %write{1336,1336}
temp	float	$tmp504	%read{1338,1338} %write{1337,1337}
temp	float	$tmp505	%read{1340,1340} %write{1339,1339}
temp	float	$tmp506	%read{1341,1341} %write{1340,1340}
temp	float	$tmp507	%read{1343,1343} %write{1342,1342}
temp	float	$tmp508	%read{1344,1344} %write{1343,1343}
temp	vector	$tmp509	%read{1348,1348} %write{1347,1347}
temp	float	$tmp510	%read{1346,1346} %write{1345,1345}
temp	float	$tmp511	%read{1347,1347} %write{1346,1346}
temp	vector	$tmp512	%read{1352,1352} %write{1351,1351}
temp	float	$tmp513	%read{1350,1350} %write{1349,1349}
temp	float	$tmp514	%read{1351,1351} %write{1350,1350}
temp	float	$tmp515	%read{1356,1356} %write{1355,1355}
temp	vector	$tmp516	%read{1359,1359} %write{1356,1356}
temp	float	$tmp517	%read{1358,1358} %write{1357,1357}
temp	vector	$tmp518	%read{1359,1359} %write{1358,1358}
temp	float	$tmp519	%read{1362,1362} %write{1361,1361}
temp	vector	$tmp520	%read{1365,1365} %write{1362,1362}
temp	float	$tmp521	%read{1364,1364} %write{1363,1363}
temp	vector	$tmp522	%read{1365,1365} %write{1364,1364}
temp	float	$tmp523	%read{1368,1368} %write{1367,1367}
temp	vector	$tmp524	%read{1371,1371} %write{1368,1368}
temp	float	$tmp525	%read{1370,1370} %write{1369,1369}
temp	vector	$tmp526	%read{1371,1371} %write{1370,1370}
temp	vector	$tmp527	%read{1372,1372} %write{1371,1371}
temp	vector	$tmp528	%read{1373,1373} %write{1372,1372}
temp	int	$tmp529	%read{1379,1379} %write{1378,1378}
temp	float	$tmp530	%read{1378,1378} %write{1377,1377}
temp	int	$tmp531	%read{1380,1387} %write{1379,1386}
temp	int	$tmp532	%read{1385,1385} %write{1384,1384}
temp	float	$tmp533	%read{1384,1384} %write{1383,1383}
temp	int	$tmp534	%read{1386,1386} %write{1385,1385}
temp	int	$tmp535	%read{1394,1394} %write{1393,1393}
temp	float	$tmp536	%read{1398,1398} %write{1397,1397}
temp	float	$tmp537	%read{1400,1400} %write{1399,1399}
temp	float	$tmp538	%read{1404,1404} %write{1402,1402}
temp	float	$tmp539	%read{1404,1404} %write{1403,1403}
temp	float	$tmp540	%read{1407,1407} %write{1405,1405}
temp	float	$tmp541	%read{1408,1408} %write{1407,1407}
temp	float	$tmp542	%read{1411,1411} %write{1409,1409}
temp	float	$tmp543	%read{1411,1411} %write{1410,1410}
temp	float	$tmp544	%read{1412,1412} %write{1411,1411}
temp	float	$tmp545	%read{1413,1413} %write{1412,1412}
temp	float	$tmp546	%read{1418,1418} %write{1417,1417}
const	string	$const52	"bumpRoughComponents"		%read{1425,1425} %write{2147483647,-1}
temp	float	$tmp547	%read{1430,1430} %write{1429,1429}
temp	float	$tmp548	%read{1433,1433} %write{1431,1431}
temp	float	$tmp549	%read{1433,1433} %write{1432,1432}
temp	vector	$tmp550	%read{1437,1437} %write{1436,1436}
const	string	$const53	"RixAdjustNormal"		%read{1438,1438} %write{2147483647,-1}
temp	int	$tmp551	%read{1440,1440} %write{1439,1439}
temp	float	$tmp552	%read{1443,1443} %write{1442,1442}
temp	int	$tmp553	%read{1444,1444} %write{1443,1443}
temp	int	$tmp554	%read{1447,1447} %write{1446,1446}
const	float	$const54	1.00999999		%read{1448,1448} %write{2147483647,-1}
temp	float	$tmp555	%read{1449,1449} %write{1448,1448}
temp	float	$tmp556	%read{1450,1450} %write{1449,1449}
temp	vector	$tmp557	%read{1451,1451} %write{1450,1450}
const	string	$const55	"RixBlendWithNormal"		%read{1453,1453} %write{2147483647,-1}
temp	int	$tmp558	%read{1455,1455} %write{1454,1454}
temp	normal	$tmp559	%read{1457,1457} %write{1456,1456}
temp	int	$tmp560	%read{1459,1459} %write{1458,1458}
const	string	$const56	"surfgradFromPerturbedNormal"		%read{1460,1460} %write{2147483647,-1}
temp	vector	$tmp561	%read{1463,1463} %write{1462,1462}
temp	vector	$tmp562	%read{1466,1466} %write{1463,1463}
temp	float	$tmp563	%read{1466,1466} %write{1465,1465}
temp	float	$tmp564	%read{1465,1465} %write{1464,1464}
code manifoldMulti.Tn
# PxrBumpRoughness.osl:91
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.Tn $const2 $const1 	%filename{"PxrBumpRoughness.osl"} %line{91} %argrw{"wrr"}
	aassign		manifoldMulti.Tn $const3 $const1 	%argrw{"wrr"}
	aassign		manifoldMulti.Tn $const4 $const1 	%argrw{"wrr"}
	aassign		manifoldMulti.Tn $const5 $const1 	%argrw{"wrr"}
code manifoldMulti.Bn
# PxrBumpRoughness.osl:91
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.Bn $const2 $const1 	%filename{"PxrBumpRoughness.osl"} %line{91} %argrw{"wrr"}
	aassign		manifoldMulti.Bn $const3 $const1 	%argrw{"wrr"}
	aassign		manifoldMulti.Bn $const4 $const1 	%argrw{"wrr"}
	aassign		manifoldMulti.Bn $const5 $const1 	%argrw{"wrr"}
code manifoldMulti.hextile0
# PxrBumpRoughness.osl:91
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.hextile0 $const2 $const6 	%filename{"PxrBumpRoughness.osl"} %line{91} %argrw{"wrr"}
	aassign		manifoldMulti.hextile0 $const3 $const6 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile0 $const4 $const7 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile0 $const5 $const6 	%argrw{"wrr"}
code manifoldMulti.hextile1
# PxrBumpRoughness.osl:91
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.hextile1 $const2 $const6 	%filename{"PxrBumpRoughness.osl"} %line{91} %argrw{"wrr"}
	aassign		manifoldMulti.hextile1 $const3 $const6 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile1 $const4 $const7 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile1 $const5 $const6 	%argrw{"wrr"}
code manifoldMulti.hextile2
# PxrBumpRoughness.osl:91
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.hextile2 $const2 $const6 	%filename{"PxrBumpRoughness.osl"} %line{91} %argrw{"wrr"}
	aassign		manifoldMulti.hextile2 $const3 $const6 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile2 $const4 $const7 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile2 $const5 $const6 	%argrw{"wrr"}
code manifoldMulti.hextile3
# PxrBumpRoughness.osl:91
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.hextile3 $const2 $const6 	%filename{"PxrBumpRoughness.osl"} %line{91} %argrw{"wrr"}
	aassign		manifoldMulti.hextile3 $const3 $const6 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile3 $const4 $const7 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile3 $const5 $const6 	%argrw{"wrr"}
code ___main___
# PxrBumpRoughness.osl:225
#     vector dPds = 0, dPdt = 0;
	assign		dPds $const2 	%filename{"PxrBumpRoughness.osl"} %line{225} %argrw{"wr"}
	assign		dPdt $const2 	%argrw{"wr"}
# PxrBumpRoughness.osl:226
#     vector vecD1 = 0, vecD2 = 0;
	assign		vecD1 $const2 	%line{226} %argrw{"wr"}
	assign		vecD2 $const2 	%argrw{"wr"}
# PxrBumpRoughness.osl:227
#     BumpRough br = NEUTRAL_BUMPROUGH;
	assign		br.l1 $const8 	%line{227} %argrw{"wr"}
	assign		br.l2 $const8 	%argrw{"wr"}
	assign		br.v1 $const9 	%argrw{"wr"}
	assign		br.v2 $const10 	%argrw{"wr"}
	assign		br.n N 	%argrw{"wr"}
# PxrBumpRoughness.osl:228
#     float resultBumpRoughPresence = 1.0;
	assign		resultBumpRoughPresence $const11 	%line{228} %argrw{"wr"}
# PxrBumpRoughness.osl:230
#     float textureRoughnessGain = 1.0;
	assign		textureRoughnessGain $const11 	%line{230} %argrw{"wr"}
# PxrBumpRoughness.osl:231
#     float _gainRw = gain * textureRoughnessGain;
	mul		_gainRw gain textureRoughnessGain 	%line{231} %argrw{"wrr"}
# PxrBumpRoughness.osl:232
#     float _bumpNormalGainRw = bumpNormalGain * textureRoughnessGain;
	mul		_bumpNormalGainRw bumpNormalGain textureRoughnessGain 	%line{232} %argrw{"wrr"}
# PxrBumpRoughness.osl:233
#     int isMulti = 0;
	assign		isMulti $const2 	%line{233} %argrw{"wr"}
# PxrBumpRoughness.osl:236
#     float inputS = s, inputT = invertT ? invertCoord(t) : t, inputW = 0;
	assign		inputS s 	%line{236} %argrw{"wr"}
	if		invertT 46 47 	%argrw{"r"}
	functioncall	$const12 46 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp25 t 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{48} %argrw{"wr"}
	add		$tmp26 $tmp25 $const11 	%argrw{"wrr"}
	floor		$tmp27 t 	%argrw{"wr"}
	sub		$tmp28 t $tmp27 	%argrw{"wrr"}
	sub		inputT $tmp26 $tmp28 	%argrw{"wrr"}
# PxrBumpRoughness.osl:236
#     float inputS = s, inputT = invertT ? invertCoord(t) : t, inputW = 0;
	assign		inputT t 	%filename{"PxrBumpRoughness.osl"} %line{236} %argrw{"wr"}
	assign		inputW $const2 	%argrw{"wr"}
# PxrBumpRoughness.osl:237
#     if (isconnected(manifold))
	isconnected	$tmp29 manifold 	%line{237} %argrw{"wr"}
	if		$tmp29 52 52 	%argrw{"r"}
# PxrBumpRoughness.osl:239
#         inputS = manifold.Q[0];
	compref		inputS manifold.Q $const2 	%line{239} %argrw{"wrr"}
# PxrBumpRoughness.osl:240
#         inputT = manifold.Q[1];
	compref		inputT manifold.Q $const3 	%line{240} %argrw{"wrr"}
# PxrBumpRoughness.osl:243
#     if (isconnected(manifoldMulti))
	isconnected	$tmp30 manifoldMulti 	%line{243} %argrw{"wr"}
	if		$tmp30 864 1425 	%argrw{"r"}
# PxrBumpRoughness.osl:245
#         if (textureRoughness > 0.0)
	gt		$tmp31 textureRoughness $const13 	%line{245} %argrw{"wrr"}
	if		$tmp31 330 330 	%argrw{"r"}
# PxrBumpRoughness.osl:247
#             textureRoughnessGain = estimateRoughnessGain(b2r_texture, 0.0, 0.0,
	functioncall	$const14 330 	%line{247} %argrw{"r"}
# PxrBumpRoughness.osl:46
#     BumpRough textureBumpRough = NEUTRAL_BUMPROUGH;
	assign		___780_textureBumpRough.l1 $const8 	%line{46} %argrw{"wr"}
	assign		___780_textureBumpRough.l2 $const8 	%argrw{"wr"}
	assign		___780_textureBumpRough.v1 $const9 	%argrw{"wr"}
	assign		___780_textureBumpRough.v2 $const10 	%argrw{"wr"}
	assign		___780_textureBumpRough.n N 	%argrw{"wr"}
# PxrBumpRoughness.osl:47
#     vector vecD1 = 0, vecD2 = 0;
	assign		___780_vecD1 $const2 	%line{47} %argrw{"wr"}
	assign		___780_vecD2 $const2 	%argrw{"wr"}
# PxrBumpRoughness.osl:52
#                                         1e-04, floor(ss) + 0.5, floor(tt) + 0.5,
	floor		$tmp32 $const13 	%line{52} %argrw{"wr"}
	add		$tmp33 $tmp32 $const16 	%argrw{"wrr"}
	floor		$tmp34 $const13 	%argrw{"wr"}
	add		$tmp35 $tmp34 $const16 	%argrw{"wrr"}
# PxrBumpRoughness.osl:51
#     textureBumpRough = ReadBumpRough(b2r_texture,
	functioncall	$const19 320 	%line{51} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:624
#     float baseRoughnessSqr = baseRoughness * baseRoughness;
	mul		___773_baseRoughnessSqr $const15 $const15 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{624} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:627
#     ComputeOrthonormalTangentSpace(dPds, dPdt, U, V, W);
	functioncall	$const20 81 	%line{627} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:510
#     normal PN = cross(dPds, dPdt);
	cross		___769_PN dPdu dPdv 	%line{510} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:515
#     int lefthanded = dot(PN, Ng) < 0;
	dot		$tmp36 ___769_PN Ng 	%line{515} %argrw{"wrr"}
	lt		___769_lefthanded $tmp36 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:516
#     normal N_ = lefthanded ? -N : N;
	if		___769_lefthanded 76 77 	%line{516} %argrw{"r"}
	neg		___769_N_ N 	%argrw{"wr"}
	assign		___769_N_ N 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:518
#     U = normalize(cross(dPdt, N_));
	cross		$tmp37 dPdv ___769_N_ 	%line{518} %argrw{"wrr"}
	normalize	___773_U $tmp37 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:519
#     V = cross(N_, U);
	cross		___773_V ___769_N_ ___773_U 	%line{519} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:520
#     W = N;
	assign		___773_W N 	%line{520} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:630
#     BumpRough result = {baseRoughnessSqr, baseRoughnessSqr, U, V, W};
	assign		___773_result.l1 ___773_baseRoughnessSqr 	%line{630} %argrw{"wr"}
	assign		___773_result.l2 ___773_baseRoughnessSqr 	%argrw{"wr"}
	assign		___773_result.v1 ___773_U 	%argrw{"wr"}
	assign		___773_result.v2 ___773_V 	%argrw{"wr"}
	assign		___773_result.n ___773_W 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:632
#     int validDs = ReadBumpRoughTextures(filenameD1D2, inputS, inputT,
	functioncall	$const21 193 	%line{632} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:475
#     TxCoords coords = initTxCoords(inputS, inputT, 0);
	functioncall	$const22 109 	%line{475} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 95 96 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{100} %argrw{"r"}
	functioncall	$const12 95 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp38 $tmp35 	%line{48} %argrw{"wr"}
	add		$tmp39 $tmp38 $const11 	%argrw{"wrr"}
	floor		$tmp40 $tmp35 	%argrw{"wr"}
	sub		$tmp41 $tmp35 $tmp40 	%argrw{"wrr"}
	sub		___636__tt $tmp39 $tmp41 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt $tmp35 	%line{100} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:101
#     TxCoords coords = { ss, _tt, Dx(ss), Dy(ss), Dx(_tt), Dy(_tt) };
	assign		___636_coords.s $tmp33 	%line{101} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx $tmp33 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy $tmp33 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     return coords;
	assign		___768_coords.s ___636_coords.s 	%line{102} %argrw{"wr"}
	assign		___768_coords.t ___636_coords.t 	%argrw{"wr"}
	assign		___768_coords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___768_coords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___768_coords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___768_coords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:476
#     TxParams params = {0, textureBlur, color(0), 0.0, textureFilter, textureFilterScale};
	assign		___768_params.firstchannel $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{476} %argrw{"wr"}
	assign		___768_params.blur $const18 	%argrw{"wr"}
	assign		___768_params.missingcolor $const23 	%argrw{"wr"}
	assign		___768_params.missingalpha $const13 	%argrw{"wr"}
	assign		___768_params.interp $const17 	%argrw{"wr"}
	assign		___768_params.width $const18 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:481
#     d1 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const24 145 	%line{481} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result b2r_texture ___768_coords.s ___768_coords.t ___768_coords.dsdx ___768_coords.dtdx ___768_coords.dsdy ___768_coords.dtdy $const25 ___768_params.firstchannel $const26 ___768_params.blur $const27 ___768_params.missingcolor $const28 ___768_params.interp $const29 ___768_params.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp42 ___649_result ___768_params.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp42 124 124 	%argrw{"r"}
	assign		___780_vecD1 ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success b2r_texture $const30 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp43 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp43 130 130 	%argrw{"r"}
	neq		$tmp44 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp43 $tmp44 	%argrw{"wr"}
	if		$tmp43 144 144 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp45 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp46 $tmp45 $const2 	%argrw{"wrr"}
	if		$tmp46 134 137 	%argrw{"r"}
	eq		$tmp47 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp48 $tmp47 $const2 	%argrw{"wrr"}
	assign		$tmp46 $tmp48 	%argrw{"wr"}
	if		$tmp46 144 144 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp49 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp49 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp50 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp50 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp51 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp51 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		___780_vecD1 ___649_finalResult 	%line{217} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:482
#     d1[2] = max(d1[0], d1[1]);
	compref		$tmp53 ___780_vecD1 $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{482} %argrw{"wrr"}
	compref		$tmp54 ___780_vecD1 $const3 	%argrw{"wrr"}
	max		$tmp52 $tmp53 $tmp54 	%argrw{"wrr"}
	compassign	___780_vecD1 $const4 $tmp52 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:484
#     params.firstchannel = 2;
	assign		___768_params.firstchannel $const4 	%line{484} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:485
#     d2 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const24 180 	%line{485} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result b2r_texture ___768_coords.s ___768_coords.t ___768_coords.dsdx ___768_coords.dtdx ___768_coords.dsdy ___768_coords.dtdy $const25 ___768_params.firstchannel $const26 ___768_params.blur $const27 ___768_params.missingcolor $const28 ___768_params.interp $const29 ___768_params.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp55 ___649_result ___768_params.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp55 159 159 	%argrw{"r"}
	assign		___780_vecD2 ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success b2r_texture $const30 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp56 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp56 165 165 	%argrw{"r"}
	neq		$tmp57 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp56 $tmp57 	%argrw{"wr"}
	if		$tmp56 179 179 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp58 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp59 $tmp58 $const2 	%argrw{"wrr"}
	if		$tmp59 169 172 	%argrw{"r"}
	eq		$tmp60 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp61 $tmp60 $const2 	%argrw{"wrr"}
	assign		$tmp59 $tmp61 	%argrw{"wr"}
	if		$tmp59 179 179 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp62 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp62 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp63 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp63 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp64 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp64 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		___780_vecD2 ___649_finalResult 	%line{217} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:487
#     return _IsValidVector(d1) && _IsValidVector(d2);
	functioncall	$const31 184 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{487} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp66 ___780_vecD1 ___780_vecD1 	%line{62} %argrw{"wrr"}
	ge		$tmp65 $tmp66 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:487
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp67 $tmp65 $const2 	%line{487} %argrw{"wrr"}
	if		$tmp67 192 192 	%argrw{"r"}
	functioncall	$const31 190 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp69 ___780_vecD2 ___780_vecD2 	%line{62} %argrw{"wrr"}
	ge		$tmp68 $tmp69 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:487
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp70 $tmp68 $const2 	%line{487} %argrw{"wrr"}
	assign		$tmp67 $tmp70 	%argrw{"wr"}
	assign		___773_validDs $tmp67 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:635
#     if (validDs)
	if		___773_validDs 315 315 	%line{635} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:639
#         if (invertBumpNormal == 0) {
	eq		$tmp71 $const2 $const2 	%line{639} %argrw{"wrr"}
	if		$tmp71 202 202 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:640
#             d1[0] = -d1[0];
	compref		$tmp72 ___780_vecD1 $const2 	%line{640} %argrw{"wrr"}
	neg		$tmp73 $tmp72 	%argrw{"wr"}
	compassign	___780_vecD1 $const2 $tmp73 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:641
#             d1[1] = -d1[1];
	compref		$tmp74 ___780_vecD1 $const3 	%line{641} %argrw{"wrr"}
	neg		$tmp75 $tmp74 	%argrw{"wr"}
	compassign	___780_vecD1 $const3 $tmp75 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:644
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	functioncall	$const33 283 	%line{644} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:534
#     float dx = d1[0];
	compref		___770_dx ___780_vecD1 $const2 	%line{534} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:535
#     float dy = d1[1];
	compref		___770_dy ___780_vecD1 $const3 	%line{535} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:536
#     float dxdx = d2[0];
	compref		___770_dxdx ___780_vecD2 $const2 	%line{536} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:537
#     float dydy = d2[1];
	compref		___770_dydy ___780_vecD2 $const3 	%line{537} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:538
#     float dxdy = d2[2];
	compref		___770_dxdy ___780_vecD2 $const4 	%line{538} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:546
#     float sxx = 2.0 * (dxdx - dx*dx);
	mul		$tmp77 ___770_dx ___770_dx 	%line{546} %argrw{"wrr"}
	sub		$tmp78 ___770_dxdx $tmp77 	%argrw{"wrr"}
	mul		___770_sxx $const34 $tmp78 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:547
#     float sxy = 2.0 * (dxdy - dx*dy);
	mul		$tmp79 ___770_dx ___770_dy 	%line{547} %argrw{"wrr"}
	sub		$tmp80 ___770_dxdy $tmp79 	%argrw{"wrr"}
	mul		___770_sxy $const34 $tmp80 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:548
#     float syy = 2.0 * (dydy - dy*dy);
	mul		$tmp81 ___770_dy ___770_dy 	%line{548} %argrw{"wrr"}
	sub		$tmp82 ___770_dydy $tmp81 	%argrw{"wrr"}
	mul		___770_syy $const34 $tmp82 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:550
#     if (varianceGain != 1.0) {
	neq		$tmp83 $const11 $const11 	%line{550} %argrw{"wrr"}
	if		$tmp83 223 223 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:551
#         float varianceGainSqr = varianceGain * varianceGain;
	mul		___771_varianceGainSqr $const11 $const11 	%line{551} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:552
#         sxx *= varianceGainSqr;
	mul		___770_sxx ___770_sxx ___771_varianceGainSqr 	%line{552} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:553
#         sxy *= varianceGainSqr;
	mul		___770_sxy ___770_sxy ___771_varianceGainSqr 	%line{553} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:554
#         syy *= varianceGainSqr;
	mul		___770_syy ___770_syy ___771_varianceGainSqr 	%line{554} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:561
#     BumpRough_CovarToEigen2D(sxx, sxy, syy, l1, l2, v1, v2);
	functioncall	$const35 248 	%line{561} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:219
#     float del = sqrt(a*a + 4.0*b*b - 2.0*a*c + c*c);
	mul		$tmp84 ___770_sxx ___770_sxx 	%line{219} %argrw{"wrr"}
	mul		$tmp85 $const36 ___770_sxy 	%argrw{"wrr"}
	mul		$tmp86 $tmp85 ___770_sxy 	%argrw{"wrr"}
	add		$tmp87 $tmp84 $tmp86 	%argrw{"wrr"}
	mul		$tmp88 $const34 ___770_sxx 	%argrw{"wrr"}
	mul		$tmp89 $tmp88 ___770_syy 	%argrw{"wrr"}
	sub		$tmp90 $tmp87 $tmp89 	%argrw{"wrr"}
	mul		$tmp91 ___770_syy ___770_syy 	%argrw{"wrr"}
	add		$tmp92 $tmp90 $tmp91 	%argrw{"wrr"}
	sqrt		___748_del $tmp92 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:222
#     l1 = 0.5 * (a + c + del);
	add		$tmp93 ___770_sxx ___770_syy 	%line{222} %argrw{"wrr"}
	add		$tmp94 $tmp93 ___748_del 	%argrw{"wrr"}
	mul		___770_l1 $const16 $tmp94 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:223
#     l2 = 0.5 * (a + c - del);
	add		$tmp95 ___770_sxx ___770_syy 	%line{223} %argrw{"wrr"}
	sub		$tmp96 $tmp95 ___748_del 	%argrw{"wrr"}
	mul		___770_l2 $const16 $tmp96 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:226
#     v1 = normalize(vector((l1 - c)/b, 1.0, 0.0));
	sub		$tmp98 ___770_l1 ___770_syy 	%line{226} %argrw{"wrr"}
	div		$tmp99 $tmp98 ___770_sxy 	%argrw{"wrr"}
	vector		$tmp97 $tmp99 $const11 $const13 	%argrw{"wrrr"}
	normalize	___770_v1 $tmp97 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:227
#     v2 = normalize(vector((l2 - c)/b, 1.0, 0.0));
	sub		$tmp101 ___770_l2 ___770_syy 	%line{227} %argrw{"wrr"}
	div		$tmp102 $tmp101 ___770_sxy 	%argrw{"wrr"}
	vector		$tmp100 $tmp102 $const11 $const13 	%argrw{"wrrr"}
	normalize	___770_v2 $tmp100 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:564
#     bumpRough.l1 = l1;
	assign		___773_result.l1 ___770_l1 	%line{564} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:565
#     bumpRough.l2 = l2;
	assign		___773_result.l2 ___770_l2 	%line{565} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:570
#     bumpRough.v1 = U * v1[0] + V * v1[1];
	compref		$tmp103 ___770_v1 $const2 	%line{570} %argrw{"wrr"}
	mul		$tmp104 ___773_U $tmp103 	%argrw{"wrr"}
	compref		$tmp105 ___770_v1 $const3 	%argrw{"wrr"}
	mul		$tmp106 ___773_V $tmp105 	%argrw{"wrr"}
	add		___773_result.v1 $tmp104 $tmp106 	%argrw{"wrr"}
	assign		___773_result.v1 ___773_result.v1 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:571
#     bumpRough.v2 = U * v2[0] + V * v2[1];
	compref		$tmp107 ___770_v2 $const2 	%line{571} %argrw{"wrr"}
	mul		$tmp108 ___773_U $tmp107 	%argrw{"wrr"}
	compref		$tmp109 ___770_v2 $const3 	%argrw{"wrr"}
	mul		$tmp110 ___773_V $tmp109 	%argrw{"wrr"}
	add		___773_result.v2 $tmp108 $tmp110 	%argrw{"wrr"}
	assign		___773_result.v2 ___773_result.v2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:574
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	mul		$tmp111 $const11 ___770_dx 	%line{574} %argrw{"wrr"}
	mul		$tmp112 $tmp111 ___773_U 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:575
#                             bumpNormalGain * dy * V +
	mul		$tmp113 $const11 ___770_dy 	%line{575} %argrw{"wrr"}
	mul		$tmp114 $tmp113 ___773_V 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:574
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	add		$tmp115 $tmp112 $tmp114 	%line{574} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:575
#                             bumpNormalGain * dy * V +
	add		$tmp116 $tmp115 ___773_W 	%line{575} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:574
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	normalize	___773_result.n $tmp116 	%line{574} %argrw{"wr"}
	assign		___773_result.n ___773_result.n 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	functioncall	$const31 274 	%line{578} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp118 ___773_result.v1 ___773_result.v1 	%line{62} %argrw{"wrr"}
	ge		$tmp117 $tmp118 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp119 $tmp117 $const2 	%line{578} %argrw{"wrr"}
	if		$tmp119 282 282 	%argrw{"r"}
	functioncall	$const31 280 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp121 ___773_result.v2 ___773_result.v2 	%line{62} %argrw{"wrr"}
	ge		$tmp120 $tmp121 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp122 $tmp120 $const2 	%line{578} %argrw{"wrr"}
	assign		$tmp119 $tmp122 	%argrw{"wr"}
	assign		$tmp76 $tmp119 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:644
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	if		$tmp76 315 315 	%line{644} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:650
#             result.l1 += baseRoughnessSqr;
	add		___773_result.l1 ___773_result.l1 ___773_baseRoughnessSqr 	%line{650} %argrw{"wrr"}
	assign		___773_result.l1 ___773_result.l1 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:651
#             result.l2 += baseRoughnessSqr;
	add		___773_result.l2 ___773_result.l2 ___773_baseRoughnessSqr 	%line{651} %argrw{"wrr"}
	assign		___773_result.l2 ___773_result.l2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#             if (anisotropyGain != 1.0) {
	neq		$tmp123 $const11 $const11 	%line{653} %argrw{"wrr"}
	if		$tmp123 315 315 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:654
#                 BumpRoughAnisotropyAdjust(anisotropyGain, result);
	functioncall	$const37 315 	%line{654} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:588
#     float eps = 1.e-12;
	assign		___772_eps $const38 	%line{588} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:589
#     float roughnessU = sqrt(bumpRough.l1) + eps;
	sqrt		$tmp124 ___773_result.l1 	%line{589} %argrw{"wr"}
	add		___772_roughnessU $tmp124 ___772_eps 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:590
#     float roughnessV = sqrt(bumpRough.l2) + eps;
	sqrt		$tmp125 ___773_result.l2 	%line{590} %argrw{"wr"}
	add		___772_roughnessV $tmp125 ___772_eps 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:592
#     float ratio = roughnessU / roughnessV;
	div		___772_ratio ___772_roughnessU ___772_roughnessV 	%line{592} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:593
#     float anisotropy = (ratio - 1.0) / (ratio + 1.0);
	sub		$tmp126 ___772_ratio $const11 	%line{593} %argrw{"wrr"}
	add		$tmp127 ___772_ratio $const11 	%argrw{"wrr"}
	div		___772_anisotropy $tmp126 $tmp127 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:595
#     anisotropy = clamp(anisotropy * anisotropyGain, 0.0, 1.0);
	mul		$tmp128 ___772_anisotropy $const11 	%line{595} %argrw{"wrr"}
	functioncall	$const39 304 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp129 $tmp128 $const11 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		___772_anisotropy $tmp129 $const13 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:597
#     float alpha = 1.0 / (anisotropy*anisotropy - 2.0 * anisotropy + 2.0);
	mul		$tmp130 ___772_anisotropy ___772_anisotropy 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{597} %argrw{"wrr"}
	mul		$tmp131 $const34 ___772_anisotropy 	%argrw{"wrr"}
	sub		$tmp132 $tmp130 $tmp131 	%argrw{"wrr"}
	add		$tmp133 $tmp132 $const34 	%argrw{"wrr"}
	div		___772_alpha $const11 $tmp133 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:599
#     float variance = bumpRough.l1 + bumpRough.l2;
	add		___772_variance ___773_result.l1 ___773_result.l2 	%line{599} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:601
#     bumpRough.l1 = variance * alpha;
	mul		___773_result.l1 ___772_variance ___772_alpha 	%line{601} %argrw{"wrr"}
	assign		___773_result.l1 ___773_result.l1 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:602
#     bumpRough.l2 = variance * (1.0 - alpha);
	sub		$tmp134 $const11 ___772_alpha 	%line{602} %argrw{"wrr"}
	mul		___773_result.l2 ___772_variance $tmp134 	%argrw{"wrr"}
	assign		___773_result.l2 ___773_result.l2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:659
#     return result;
	assign		___780_textureBumpRough.l1 ___773_result.l1 	%line{659} %argrw{"wr"}
	assign		___780_textureBumpRough.l2 ___773_result.l2 	%argrw{"wr"}
	assign		___780_textureBumpRough.v1 ___773_result.v1 	%argrw{"wr"}
	assign		___780_textureBumpRough.v2 ___773_result.v2 	%argrw{"wr"}
	assign		___780_textureBumpRough.n ___773_result.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:57
#     float textureRoughnessU = sqrt(textureBumpRough.l1);
	sqrt		___780_textureRoughnessU ___780_textureBumpRough.l1 	%filename{"PxrBumpRoughness.osl"} %line{57} %argrw{"wr"}
# PxrBumpRoughness.osl:58
#     float textureRoughnessV = sqrt(textureBumpRough.l2);
	sqrt		___780_textureRoughnessV ___780_textureBumpRough.l2 	%line{58} %argrw{"wr"}
# PxrBumpRoughness.osl:59
#     float rudivrv = textureRoughnessU/textureRoughnessV;
	div		___780_rudivrv ___780_textureRoughnessU ___780_textureRoughnessV 	%line{59} %argrw{"wrr"}
# PxrBumpRoughness.osl:61
#     float textureAnisotropy = (rudivrv-1.0)/(rudivrv+1.0);
	sub		$tmp135 ___780_rudivrv $const11 	%line{61} %argrw{"wrr"}
	add		$tmp136 ___780_rudivrv $const11 	%argrw{"wrr"}
	div		___780_textureAnisotropy $tmp135 $tmp136 	%argrw{"wrr"}
# PxrBumpRoughness.osl:62
#     float textureRoughnessGain = textureRoughness / (textureRoughnessU / (1 + textureAnisotropy));
	add		$tmp137 $const11 ___780_textureAnisotropy 	%line{62} %argrw{"wrr"}
	div		$tmp138 ___780_textureRoughnessU $tmp137 	%argrw{"wrr"}
	div		___780_textureRoughnessGain textureRoughness $tmp138 	%argrw{"wrr"}
# PxrBumpRoughness.osl:67
#     return textureRoughnessGain;
	assign		textureRoughnessGain ___780_textureRoughnessGain 	%line{67} %argrw{"wr"}
# PxrBumpRoughness.osl:250
#         point sta[3] = {manifoldMulti.stAlpha0,
	aassign		___782_sta $const2 manifoldMulti.stAlpha0 	%line{250} %argrw{"wrr"}
	aassign		___782_sta $const3 manifoldMulti.stAlpha1 	%argrw{"wrr"}
	aassign		___782_sta $const4 manifoldMulti.stAlpha2 	%argrw{"wrr"}
# PxrBumpRoughness.osl:253
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aref		$tmp139 manifoldMulti.hextile0 $const2 	%line{253} %argrw{"wrr"}
	aassign		___782_hex.s $const2 $tmp139 	%argrw{"wrr"}
	aref		$tmp140 manifoldMulti.hextile0 $const3 	%argrw{"wrr"}
	aassign		___782_hex.t $const2 $tmp140 	%argrw{"wrr"}
	aref		$tmp141 manifoldMulti.hextile0 $const4 	%argrw{"wrr"}
	aassign		___782_hex.w $const2 $tmp141 	%argrw{"wrr"}
	aref		$tmp142 manifoldMulti.hextile0 $const5 	%argrw{"wrr"}
	aassign		___782_hex.r $const2 $tmp142 	%argrw{"wrr"}
# PxrBumpRoughness.osl:254
#                               FromFlatHexTileData(manifoldMulti.hextile1),
	aref		$tmp143 manifoldMulti.hextile1 $const2 	%line{254} %argrw{"wrr"}
# PxrBumpRoughness.osl:253
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___782_hex.s $const3 $tmp143 	%line{253} %argrw{"wrr"}
# PxrBumpRoughness.osl:254
#                               FromFlatHexTileData(manifoldMulti.hextile1),
	aref		$tmp144 manifoldMulti.hextile1 $const3 	%line{254} %argrw{"wrr"}
# PxrBumpRoughness.osl:253
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___782_hex.t $const3 $tmp144 	%line{253} %argrw{"wrr"}
# PxrBumpRoughness.osl:254
#                               FromFlatHexTileData(manifoldMulti.hextile1),
	aref		$tmp145 manifoldMulti.hextile1 $const4 	%line{254} %argrw{"wrr"}
# PxrBumpRoughness.osl:253
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___782_hex.w $const3 $tmp145 	%line{253} %argrw{"wrr"}
# PxrBumpRoughness.osl:254
#                               FromFlatHexTileData(manifoldMulti.hextile1),
	aref		$tmp146 manifoldMulti.hextile1 $const5 	%line{254} %argrw{"wrr"}
# PxrBumpRoughness.osl:253
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___782_hex.r $const3 $tmp146 	%line{253} %argrw{"wrr"}
# PxrBumpRoughness.osl:255
#                               FromFlatHexTileData(manifoldMulti.hextile2)};
	aref		$tmp147 manifoldMulti.hextile2 $const2 	%line{255} %argrw{"wrr"}
# PxrBumpRoughness.osl:253
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___782_hex.s $const4 $tmp147 	%line{253} %argrw{"wrr"}
# PxrBumpRoughness.osl:255
#                               FromFlatHexTileData(manifoldMulti.hextile2)};
	aref		$tmp148 manifoldMulti.hextile2 $const3 	%line{255} %argrw{"wrr"}
# PxrBumpRoughness.osl:253
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___782_hex.t $const4 $tmp148 	%line{253} %argrw{"wrr"}
# PxrBumpRoughness.osl:255
#                               FromFlatHexTileData(manifoldMulti.hextile2)};
	aref		$tmp149 manifoldMulti.hextile2 $const4 	%line{255} %argrw{"wrr"}
# PxrBumpRoughness.osl:253
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___782_hex.w $const4 $tmp149 	%line{253} %argrw{"wrr"}
# PxrBumpRoughness.osl:255
#                               FromFlatHexTileData(manifoldMulti.hextile2)};
	aref		$tmp150 manifoldMulti.hextile2 $const5 	%line{255} %argrw{"wrr"}
# PxrBumpRoughness.osl:253
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___782_hex.r $const4 $tmp150 	%line{253} %argrw{"wrr"}
# PxrBumpRoughness.osl:256
#         int numProj = manifoldMulti.minNumTextures;
	assign		___782_numProj manifoldMulti.minNumTextures 	%line{256} %argrw{"wr"}
# PxrBumpRoughness.osl:258
#         BumpRough resultBumpRough = NEUTRAL_BUMPROUGH;
	assign		___782_resultBumpRough.l1 $const8 	%line{258} %argrw{"wr"}
	assign		___782_resultBumpRough.l2 $const8 	%argrw{"wr"}
	assign		___782_resultBumpRough.v1 $const9 	%argrw{"wr"}
	assign		___782_resultBumpRough.v2 $const10 	%argrw{"wr"}
	assign		___782_resultBumpRough.n N 	%argrw{"wr"}
# PxrBumpRoughness.osl:259
#         float resultBumpRoughPresence = 1.0;
	assign		___782_resultBumpRoughPresence $const11 	%line{259} %argrw{"wr"}
# PxrBumpRoughness.osl:264
#         vector Nc = resultBumpRough.n;
	assign		___782_Nc ___782_resultBumpRough.n 	%line{264} %argrw{"wr"}
# PxrBumpRoughness.osl:265
#         resultBumpRough.n = -resultBumpRough.n;
	neg		___782_resultBumpRough.n ___782_resultBumpRough.n 	%line{265} %argrw{"wr"}
	assign		___782_resultBumpRough.n ___782_resultBumpRough.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:266
#         float wvdenom = 0.0, sqwaccum = 0.0;
	assign		___782_wvdenom $const13 	%line{266} %argrw{"wr"}
	assign		___782_sqwaccum $const13 	%argrw{"wr"}
# PxrBumpRoughness.osl:268
#         for (int i = 0; i < numProj; i++)
	for		$tmp152 371 373 849 851 	%line{268} %argrw{"r"}
	assign		___784_i $const2 	%argrw{"wr"}
	lt		$tmp151 ___784_i ___782_numProj 	%argrw{"wrr"}
	neq		$tmp152 $tmp151 $const2 	%argrw{"wrr"}
# PxrBumpRoughness.osl:271
#             int do_hextile = validHexTileData(hex[i]);
	aref		$tmp153.s ___782_hex.s ___784_i 	%line{271} %argrw{"wrr"}
	aref		$tmp153.t ___782_hex.t ___784_i 	%argrw{"wrr"}
	aref		$tmp153.w ___782_hex.w ___784_i 	%argrw{"wrr"}
	aref		$tmp153.r ___782_hex.r ___784_i 	%argrw{"wrr"}
	functioncall	$const40 383 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:78
#     return hxt.w == INVALID_HEXTILE_WEIGHT ? 0 : 1;
	eq		$tmp155 $tmp153.w $const7 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{78} %argrw{"wrr"}
	if		$tmp155 381 382 	%argrw{"r"}
	assign		___785_do_hextile $const2 	%argrw{"wr"}
	assign		___785_do_hextile $const3 	%argrw{"wr"}
	return
# PxrBumpRoughness.osl:275
#             int numSamples = do_hextile ? 3 : 1;
	if		___785_do_hextile 385 386 	%filename{"PxrBumpRoughness.osl"} %line{275} %argrw{"r"}
	assign		___785_numSamples $const5 	%argrw{"wr"}
	assign		___785_numSamples $const3 	%argrw{"wr"}
# PxrBumpRoughness.osl:276
#             float weight = sta[i][2];  // hexTile.Weights[i];
	aref		$tmp156 ___782_sta ___784_i 	%line{276} %argrw{"wrr"}
	compref		___785_weight $tmp156 $const4 	%argrw{"wrr"}
# PxrBumpRoughness.osl:277
#             float wmult = do_hextile ? 1.0 : 3.0;
	if		___785_do_hextile 390 391 	%line{277} %argrw{"r"}
	assign		___785_wmult $const11 	%argrw{"wr"}
	assign		___785_wmult $const41 	%argrw{"wr"}
# PxrBumpRoughness.osl:278
#             if (weight > 0.0)
	gt		$tmp157 ___785_weight $const13 	%line{278} %argrw{"wrr"}
	if		$tmp157 849 849 	%argrw{"r"}
# PxrBumpRoughness.osl:280
#                 sqwaccum = 0.0;
	assign		___782_sqwaccum $const13 	%line{280} %argrw{"wr"}
# PxrBumpRoughness.osl:281
#                 for (int j = 0; j < numSamples; j++)
	for		$tmp159 396 398 844 846 	%line{281} %argrw{"r"}
	assign		___787_j $const2 	%argrw{"wr"}
	lt		$tmp158 ___787_j ___785_numSamples 	%argrw{"wrr"}
	neq		$tmp159 $tmp158 $const2 	%argrw{"wrr"}
# PxrBumpRoughness.osl:284
#                     inputS = numSamples == 1 ? sta[i][0] : hex[i].s[j];
	eq		$tmp160 ___785_numSamples $const3 	%line{284} %argrw{"wrr"}
	if		$tmp160 402 404 	%argrw{"r"}
	aref		$tmp161 ___782_sta ___784_i 	%argrw{"wrr"}
	compref		inputS $tmp161 $const2 	%argrw{"wrr"}
	aref		$tmp162 ___782_hex.s ___784_i 	%argrw{"wrr"}
	compref		inputS $tmp162 ___787_j 	%argrw{"wrr"}
# PxrBumpRoughness.osl:285
#                     inputT = numSamples == 1 ? sta[i][1] : hex[i].t[j];
	eq		$tmp163 ___785_numSamples $const3 	%line{285} %argrw{"wrr"}
	if		$tmp163 408 410 	%argrw{"r"}
	aref		$tmp164 ___782_sta ___784_i 	%argrw{"wrr"}
	compref		inputT $tmp164 $const3 	%argrw{"wrr"}
	aref		$tmp165 ___782_hex.t ___784_i 	%argrw{"wrr"}
	compref		inputT $tmp165 ___787_j 	%argrw{"wrr"}
# PxrBumpRoughness.osl:286
#                     inputW = numSamples == 1 ? 1.0       : hex[i].w[j];
	eq		$tmp166 ___785_numSamples $const3 	%line{286} %argrw{"wrr"}
	if		$tmp166 413 415 	%argrw{"r"}
	assign		inputW $const11 	%argrw{"wr"}
	aref		$tmp167 ___782_hex.w ___784_i 	%argrw{"wrr"}
	compref		inputW $tmp167 ___787_j 	%argrw{"wrr"}
# PxrBumpRoughness.osl:290
#                     sqwaccum += inputW * inputW;
	mul		$tmp168 inputW inputW 	%line{290} %argrw{"wrr"}
	add		___782_sqwaccum ___782_sqwaccum $tmp168 	%argrw{"wrr"}
# PxrBumpRoughness.osl:292
#                     BumpRough_PartialDeriv(P, inputS, inputT, dPds, dPdt);
	functioncall	$const42 449 	%line{292} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:192
#     vector dQdx = Dx(Q);
	Dx		___747_dQdx P 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{192} %argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:193
#     vector dQdy = Dy(Q);
	Dy		___747_dQdy P 	%line{193} %argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:195
#     float A = Dx(a);
	Dx		___747_A inputS 	%line{195} %argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:196
#     float B = Dx(b);
	Dx		___747_B inputT 	%line{196} %argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:197
#     float C = Dy(a);
	Dy		___747_C inputS 	%line{197} %argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:198
#     float D = Dy(b);
	Dy		___747_D inputT 	%line{198} %argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:200
#     float invdet = 1./(A*D - B*C);
	mul		$tmp170 ___747_A ___747_D 	%line{200} %argrw{"wrr"}
	mul		$tmp171 ___747_B ___747_C 	%argrw{"wrr"}
	sub		$tmp172 $tmp170 $tmp171 	%argrw{"wrr"}
	div		___747_invdet $const11 $tmp172 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:202
#     dQda = (dQdx*D-dQdy*B)*invdet;
	mul		$tmp173 ___747_dQdx ___747_D 	%line{202} %argrw{"wrr"}
	mul		$tmp174 ___747_dQdy ___747_B 	%argrw{"wrr"}
	sub		$tmp175 $tmp173 $tmp174 	%argrw{"wrr"}
	mul		dPds $tmp175 ___747_invdet 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:203
#     dQdb = (dQdy*A-dQdx*C)*invdet;
	mul		$tmp176 ___747_dQdy ___747_A 	%line{203} %argrw{"wrr"}
	mul		$tmp177 ___747_dQdx ___747_C 	%argrw{"wrr"}
	sub		$tmp178 $tmp176 $tmp177 	%argrw{"wrr"}
	mul		dPdt $tmp178 ___747_invdet 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:205
#     return _IsValidVector(dQda) && _IsValidVector(dQdb);
	functioncall	$const31 440 	%line{205} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp180 dPds dPds 	%line{62} %argrw{"wrr"}
	ge		$tmp179 $tmp180 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:205
#     return _IsValidVector(dQda) && _IsValidVector(dQdb);
	neq		$tmp181 $tmp179 $const2 	%line{205} %argrw{"wrr"}
	if		$tmp181 448 448 	%argrw{"r"}
	functioncall	$const31 446 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp183 dPdt dPdt 	%line{62} %argrw{"wrr"}
	ge		$tmp182 $tmp183 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:205
#     return _IsValidVector(dQda) && _IsValidVector(dQdb);
	neq		$tmp184 $tmp182 $const2 	%line{205} %argrw{"wrr"}
	assign		$tmp181 $tmp184 	%argrw{"wr"}
	assign		$tmp169 $tmp181 	%argrw{"wr"}
# PxrBumpRoughness.osl:293
#                     br = ReadBumpRough(b2r_texture,
	functioncall	$const19 701 	%filename{"PxrBumpRoughness.osl"} %line{293} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:624
#     float baseRoughnessSqr = baseRoughness * baseRoughness;
	mul		___773_baseRoughnessSqr baseRoughness baseRoughness 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{624} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:627
#     ComputeOrthonormalTangentSpace(dPds, dPdt, U, V, W);
	functioncall	$const20 462 	%line{627} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:510
#     normal PN = cross(dPds, dPdt);
	cross		___769_PN dPds dPdt 	%line{510} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:515
#     int lefthanded = dot(PN, Ng) < 0;
	dot		$tmp185 ___769_PN Ng 	%line{515} %argrw{"wrr"}
	lt		___769_lefthanded $tmp185 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:516
#     normal N_ = lefthanded ? -N : N;
	if		___769_lefthanded 457 458 	%line{516} %argrw{"r"}
	neg		___769_N_ N 	%argrw{"wr"}
	assign		___769_N_ N 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:518
#     U = normalize(cross(dPdt, N_));
	cross		$tmp186 dPdt ___769_N_ 	%line{518} %argrw{"wrr"}
	normalize	___773_U $tmp186 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:519
#     V = cross(N_, U);
	cross		___773_V ___769_N_ ___773_U 	%line{519} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:520
#     W = N;
	assign		___773_W N 	%line{520} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:630
#     BumpRough result = {baseRoughnessSqr, baseRoughnessSqr, U, V, W};
	assign		___773_result.l1 ___773_baseRoughnessSqr 	%line{630} %argrw{"wr"}
	assign		___773_result.l2 ___773_baseRoughnessSqr 	%argrw{"wr"}
	assign		___773_result.v1 ___773_U 	%argrw{"wr"}
	assign		___773_result.v2 ___773_V 	%argrw{"wr"}
	assign		___773_result.n ___773_W 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:632
#     int validDs = ReadBumpRoughTextures(filenameD1D2, inputS, inputT,
	functioncall	$const21 574 	%line{632} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:475
#     TxCoords coords = initTxCoords(inputS, inputT, 0);
	functioncall	$const22 490 	%line{475} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 476 477 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{100} %argrw{"r"}
	functioncall	$const12 476 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp187 inputT 	%line{48} %argrw{"wr"}
	add		$tmp188 $tmp187 $const11 	%argrw{"wrr"}
	floor		$tmp189 inputT 	%argrw{"wr"}
	sub		$tmp190 inputT $tmp189 	%argrw{"wrr"}
	sub		___636__tt $tmp188 $tmp190 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt inputT 	%line{100} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:101
#     TxCoords coords = { ss, _tt, Dx(ss), Dy(ss), Dx(_tt), Dy(_tt) };
	assign		___636_coords.s inputS 	%line{101} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx inputS 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy inputS 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     return coords;
	assign		___768_coords.s ___636_coords.s 	%line{102} %argrw{"wr"}
	assign		___768_coords.t ___636_coords.t 	%argrw{"wr"}
	assign		___768_coords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___768_coords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___768_coords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___768_coords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:476
#     TxParams params = {0, textureBlur, color(0), 0.0, textureFilter, textureFilterScale};
	assign		___768_params.firstchannel $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{476} %argrw{"wr"}
	assign		___768_params.blur blur 	%argrw{"wr"}
	assign		___768_params.missingcolor $const23 	%argrw{"wr"}
	assign		___768_params.missingalpha $const13 	%argrw{"wr"}
	assign		___768_params.interp filter 	%argrw{"wr"}
	assign		___768_params.width filterScale 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:481
#     d1 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const24 526 	%line{481} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result b2r_texture ___768_coords.s ___768_coords.t ___768_coords.dsdx ___768_coords.dtdx ___768_coords.dsdy ___768_coords.dtdy $const25 ___768_params.firstchannel $const26 ___768_params.blur $const27 ___768_params.missingcolor $const28 ___768_params.interp $const29 ___768_params.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp191 ___649_result ___768_params.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp191 505 505 	%argrw{"r"}
	assign		vecD1 ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success b2r_texture $const30 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp192 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp192 511 511 	%argrw{"r"}
	neq		$tmp193 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp192 $tmp193 	%argrw{"wr"}
	if		$tmp192 525 525 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp194 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp195 $tmp194 $const2 	%argrw{"wrr"}
	if		$tmp195 515 518 	%argrw{"r"}
	eq		$tmp196 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp197 $tmp196 $const2 	%argrw{"wrr"}
	assign		$tmp195 $tmp197 	%argrw{"wr"}
	if		$tmp195 525 525 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp198 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp198 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp199 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp199 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp200 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp200 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		vecD1 ___649_finalResult 	%line{217} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:482
#     d1[2] = max(d1[0], d1[1]);
	compref		$tmp202 vecD1 $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{482} %argrw{"wrr"}
	compref		$tmp203 vecD1 $const3 	%argrw{"wrr"}
	max		$tmp201 $tmp202 $tmp203 	%argrw{"wrr"}
	compassign	vecD1 $const4 $tmp201 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:484
#     params.firstchannel = 2;
	assign		___768_params.firstchannel $const4 	%line{484} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:485
#     d2 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const24 561 	%line{485} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result b2r_texture ___768_coords.s ___768_coords.t ___768_coords.dsdx ___768_coords.dtdx ___768_coords.dsdy ___768_coords.dtdy $const25 ___768_params.firstchannel $const26 ___768_params.blur $const27 ___768_params.missingcolor $const28 ___768_params.interp $const29 ___768_params.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp204 ___649_result ___768_params.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp204 540 540 	%argrw{"r"}
	assign		vecD2 ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success b2r_texture $const30 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp205 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp205 546 546 	%argrw{"r"}
	neq		$tmp206 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp205 $tmp206 	%argrw{"wr"}
	if		$tmp205 560 560 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp207 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp208 $tmp207 $const2 	%argrw{"wrr"}
	if		$tmp208 550 553 	%argrw{"r"}
	eq		$tmp209 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp210 $tmp209 $const2 	%argrw{"wrr"}
	assign		$tmp208 $tmp210 	%argrw{"wr"}
	if		$tmp208 560 560 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp211 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp211 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp212 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp212 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp213 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp213 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		vecD2 ___649_finalResult 	%line{217} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:487
#     return _IsValidVector(d1) && _IsValidVector(d2);
	functioncall	$const31 565 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{487} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp215 vecD1 vecD1 	%line{62} %argrw{"wrr"}
	ge		$tmp214 $tmp215 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:487
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp216 $tmp214 $const2 	%line{487} %argrw{"wrr"}
	if		$tmp216 573 573 	%argrw{"r"}
	functioncall	$const31 571 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp218 vecD2 vecD2 	%line{62} %argrw{"wrr"}
	ge		$tmp217 $tmp218 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:487
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp219 $tmp217 $const2 	%line{487} %argrw{"wrr"}
	assign		$tmp216 $tmp219 	%argrw{"wr"}
	assign		___773_validDs $tmp216 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:635
#     if (validDs)
	if		___773_validDs 696 696 	%line{635} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:639
#         if (invertBumpNormal == 0) {
	eq		$tmp220 invertBumpNormal $const2 	%line{639} %argrw{"wrr"}
	if		$tmp220 583 583 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:640
#             d1[0] = -d1[0];
	compref		$tmp221 vecD1 $const2 	%line{640} %argrw{"wrr"}
	neg		$tmp222 $tmp221 	%argrw{"wr"}
	compassign	vecD1 $const2 $tmp222 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:641
#             d1[1] = -d1[1];
	compref		$tmp223 vecD1 $const3 	%line{641} %argrw{"wrr"}
	neg		$tmp224 $tmp223 	%argrw{"wr"}
	compassign	vecD1 $const3 $tmp224 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:644
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	functioncall	$const33 664 	%line{644} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:534
#     float dx = d1[0];
	compref		___770_dx vecD1 $const2 	%line{534} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:535
#     float dy = d1[1];
	compref		___770_dy vecD1 $const3 	%line{535} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:536
#     float dxdx = d2[0];
	compref		___770_dxdx vecD2 $const2 	%line{536} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:537
#     float dydy = d2[1];
	compref		___770_dydy vecD2 $const3 	%line{537} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:538
#     float dxdy = d2[2];
	compref		___770_dxdy vecD2 $const4 	%line{538} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:546
#     float sxx = 2.0 * (dxdx - dx*dx);
	mul		$tmp226 ___770_dx ___770_dx 	%line{546} %argrw{"wrr"}
	sub		$tmp227 ___770_dxdx $tmp226 	%argrw{"wrr"}
	mul		___770_sxx $const34 $tmp227 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:547
#     float sxy = 2.0 * (dxdy - dx*dy);
	mul		$tmp228 ___770_dx ___770_dy 	%line{547} %argrw{"wrr"}
	sub		$tmp229 ___770_dxdy $tmp228 	%argrw{"wrr"}
	mul		___770_sxy $const34 $tmp229 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:548
#     float syy = 2.0 * (dydy - dy*dy);
	mul		$tmp230 ___770_dy ___770_dy 	%line{548} %argrw{"wrr"}
	sub		$tmp231 ___770_dydy $tmp230 	%argrw{"wrr"}
	mul		___770_syy $const34 $tmp231 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:550
#     if (varianceGain != 1.0) {
	neq		$tmp232 _gainRw $const11 	%line{550} %argrw{"wrr"}
	if		$tmp232 604 604 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:551
#         float varianceGainSqr = varianceGain * varianceGain;
	mul		___771_varianceGainSqr _gainRw _gainRw 	%line{551} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:552
#         sxx *= varianceGainSqr;
	mul		___770_sxx ___770_sxx ___771_varianceGainSqr 	%line{552} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:553
#         sxy *= varianceGainSqr;
	mul		___770_sxy ___770_sxy ___771_varianceGainSqr 	%line{553} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:554
#         syy *= varianceGainSqr;
	mul		___770_syy ___770_syy ___771_varianceGainSqr 	%line{554} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:561
#     BumpRough_CovarToEigen2D(sxx, sxy, syy, l1, l2, v1, v2);
	functioncall	$const35 629 	%line{561} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:219
#     float del = sqrt(a*a + 4.0*b*b - 2.0*a*c + c*c);
	mul		$tmp233 ___770_sxx ___770_sxx 	%line{219} %argrw{"wrr"}
	mul		$tmp234 $const36 ___770_sxy 	%argrw{"wrr"}
	mul		$tmp235 $tmp234 ___770_sxy 	%argrw{"wrr"}
	add		$tmp236 $tmp233 $tmp235 	%argrw{"wrr"}
	mul		$tmp237 $const34 ___770_sxx 	%argrw{"wrr"}
	mul		$tmp238 $tmp237 ___770_syy 	%argrw{"wrr"}
	sub		$tmp239 $tmp236 $tmp238 	%argrw{"wrr"}
	mul		$tmp240 ___770_syy ___770_syy 	%argrw{"wrr"}
	add		$tmp241 $tmp239 $tmp240 	%argrw{"wrr"}
	sqrt		___748_del $tmp241 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:222
#     l1 = 0.5 * (a + c + del);
	add		$tmp242 ___770_sxx ___770_syy 	%line{222} %argrw{"wrr"}
	add		$tmp243 $tmp242 ___748_del 	%argrw{"wrr"}
	mul		___770_l1 $const16 $tmp243 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:223
#     l2 = 0.5 * (a + c - del);
	add		$tmp244 ___770_sxx ___770_syy 	%line{223} %argrw{"wrr"}
	sub		$tmp245 $tmp244 ___748_del 	%argrw{"wrr"}
	mul		___770_l2 $const16 $tmp245 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:226
#     v1 = normalize(vector((l1 - c)/b, 1.0, 0.0));
	sub		$tmp247 ___770_l1 ___770_syy 	%line{226} %argrw{"wrr"}
	div		$tmp248 $tmp247 ___770_sxy 	%argrw{"wrr"}
	vector		$tmp246 $tmp248 $const11 $const13 	%argrw{"wrrr"}
	normalize	___770_v1 $tmp246 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:227
#     v2 = normalize(vector((l2 - c)/b, 1.0, 0.0));
	sub		$tmp250 ___770_l2 ___770_syy 	%line{227} %argrw{"wrr"}
	div		$tmp251 $tmp250 ___770_sxy 	%argrw{"wrr"}
	vector		$tmp249 $tmp251 $const11 $const13 	%argrw{"wrrr"}
	normalize	___770_v2 $tmp249 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:564
#     bumpRough.l1 = l1;
	assign		___773_result.l1 ___770_l1 	%line{564} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:565
#     bumpRough.l2 = l2;
	assign		___773_result.l2 ___770_l2 	%line{565} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:570
#     bumpRough.v1 = U * v1[0] + V * v1[1];
	compref		$tmp252 ___770_v1 $const2 	%line{570} %argrw{"wrr"}
	mul		$tmp253 ___773_U $tmp252 	%argrw{"wrr"}
	compref		$tmp254 ___770_v1 $const3 	%argrw{"wrr"}
	mul		$tmp255 ___773_V $tmp254 	%argrw{"wrr"}
	add		___773_result.v1 $tmp253 $tmp255 	%argrw{"wrr"}
	assign		___773_result.v1 ___773_result.v1 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:571
#     bumpRough.v2 = U * v2[0] + V * v2[1];
	compref		$tmp256 ___770_v2 $const2 	%line{571} %argrw{"wrr"}
	mul		$tmp257 ___773_U $tmp256 	%argrw{"wrr"}
	compref		$tmp258 ___770_v2 $const3 	%argrw{"wrr"}
	mul		$tmp259 ___773_V $tmp258 	%argrw{"wrr"}
	add		___773_result.v2 $tmp257 $tmp259 	%argrw{"wrr"}
	assign		___773_result.v2 ___773_result.v2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:574
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	mul		$tmp260 _bumpNormalGainRw ___770_dx 	%line{574} %argrw{"wrr"}
	mul		$tmp261 $tmp260 ___773_U 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:575
#                             bumpNormalGain * dy * V +
	mul		$tmp262 _bumpNormalGainRw ___770_dy 	%line{575} %argrw{"wrr"}
	mul		$tmp263 $tmp262 ___773_V 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:574
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	add		$tmp264 $tmp261 $tmp263 	%line{574} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:575
#                             bumpNormalGain * dy * V +
	add		$tmp265 $tmp264 ___773_W 	%line{575} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:574
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	normalize	___773_result.n $tmp265 	%line{574} %argrw{"wr"}
	assign		___773_result.n ___773_result.n 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	functioncall	$const31 655 	%line{578} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp267 ___773_result.v1 ___773_result.v1 	%line{62} %argrw{"wrr"}
	ge		$tmp266 $tmp267 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp268 $tmp266 $const2 	%line{578} %argrw{"wrr"}
	if		$tmp268 663 663 	%argrw{"r"}
	functioncall	$const31 661 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp270 ___773_result.v2 ___773_result.v2 	%line{62} %argrw{"wrr"}
	ge		$tmp269 $tmp270 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp271 $tmp269 $const2 	%line{578} %argrw{"wrr"}
	assign		$tmp268 $tmp271 	%argrw{"wr"}
	assign		$tmp225 $tmp268 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:644
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	if		$tmp225 696 696 	%line{644} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:650
#             result.l1 += baseRoughnessSqr;
	add		___773_result.l1 ___773_result.l1 ___773_baseRoughnessSqr 	%line{650} %argrw{"wrr"}
	assign		___773_result.l1 ___773_result.l1 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:651
#             result.l2 += baseRoughnessSqr;
	add		___773_result.l2 ___773_result.l2 ___773_baseRoughnessSqr 	%line{651} %argrw{"wrr"}
	assign		___773_result.l2 ___773_result.l2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#             if (anisotropyGain != 1.0) {
	neq		$tmp272 anisotropyGain $const11 	%line{653} %argrw{"wrr"}
	if		$tmp272 696 696 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:654
#                 BumpRoughAnisotropyAdjust(anisotropyGain, result);
	functioncall	$const37 696 	%line{654} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:588
#     float eps = 1.e-12;
	assign		___772_eps $const38 	%line{588} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:589
#     float roughnessU = sqrt(bumpRough.l1) + eps;
	sqrt		$tmp273 ___773_result.l1 	%line{589} %argrw{"wr"}
	add		___772_roughnessU $tmp273 ___772_eps 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:590
#     float roughnessV = sqrt(bumpRough.l2) + eps;
	sqrt		$tmp274 ___773_result.l2 	%line{590} %argrw{"wr"}
	add		___772_roughnessV $tmp274 ___772_eps 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:592
#     float ratio = roughnessU / roughnessV;
	div		___772_ratio ___772_roughnessU ___772_roughnessV 	%line{592} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:593
#     float anisotropy = (ratio - 1.0) / (ratio + 1.0);
	sub		$tmp275 ___772_ratio $const11 	%line{593} %argrw{"wrr"}
	add		$tmp276 ___772_ratio $const11 	%argrw{"wrr"}
	div		___772_anisotropy $tmp275 $tmp276 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:595
#     anisotropy = clamp(anisotropy * anisotropyGain, 0.0, 1.0);
	mul		$tmp277 ___772_anisotropy anisotropyGain 	%line{595} %argrw{"wrr"}
	functioncall	$const39 685 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp278 $tmp277 $const11 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		___772_anisotropy $tmp278 $const13 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:597
#     float alpha = 1.0 / (anisotropy*anisotropy - 2.0 * anisotropy + 2.0);
	mul		$tmp279 ___772_anisotropy ___772_anisotropy 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{597} %argrw{"wrr"}
	mul		$tmp280 $const34 ___772_anisotropy 	%argrw{"wrr"}
	sub		$tmp281 $tmp279 $tmp280 	%argrw{"wrr"}
	add		$tmp282 $tmp281 $const34 	%argrw{"wrr"}
	div		___772_alpha $const11 $tmp282 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:599
#     float variance = bumpRough.l1 + bumpRough.l2;
	add		___772_variance ___773_result.l1 ___773_result.l2 	%line{599} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:601
#     bumpRough.l1 = variance * alpha;
	mul		___773_result.l1 ___772_variance ___772_alpha 	%line{601} %argrw{"wrr"}
	assign		___773_result.l1 ___773_result.l1 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:602
#     bumpRough.l2 = variance * (1.0 - alpha);
	sub		$tmp283 $const11 ___772_alpha 	%line{602} %argrw{"wrr"}
	mul		___773_result.l2 ___772_variance $tmp283 	%argrw{"wrr"}
	assign		___773_result.l2 ___773_result.l2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:659
#     return result;
	assign		br.l1 ___773_result.l1 	%line{659} %argrw{"wr"}
	assign		br.l2 ___773_result.l2 	%argrw{"wr"}
	assign		br.v1 ___773_result.v1 	%argrw{"wr"}
	assign		br.v2 ___773_result.v2 	%argrw{"wr"}
	assign		br.n ___773_result.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:299
#                         br, weight * inputW,
	mul		$tmp284 ___785_weight inputW 	%filename{"PxrBumpRoughness.osl"} %line{299} %argrw{"wrr"}
# PxrBumpRoughness.osl:298
#                     BumpRough_EigenBlend_AddNormalWeightedVariance(
	functioncall	$const43 844 	%line{298} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:416
#     if(Oover<=0.){
	le		$tmp285 $tmp284 $const13 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{416} %argrw{"wrr"}
	if		$tmp285 712 712 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:417
#         Eout = Eunder;
	assign		___782_resultBumpRough.l1 ___782_resultBumpRough.l1 	%line{417} %argrw{"wr"}
	assign		___782_resultBumpRough.l2 ___782_resultBumpRough.l2 	%argrw{"wr"}
	assign		___782_resultBumpRough.v1 ___782_resultBumpRough.v1 	%argrw{"wr"}
	assign		___782_resultBumpRough.v2 ___782_resultBumpRough.v2 	%argrw{"wr"}
	assign		___782_resultBumpRough.n ___782_resultBumpRough.n 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:418
#         Oout = Ounder;
	assign		___782_resultBumpRoughPresence ___782_resultBumpRoughPresence 	%line{418} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:419
#         return;
	return	%line{419}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:423
#     BumpRough e_over = Eover;
	assign		___765_e_over.l1 br.l1 	%line{423} %argrw{"wr"}
	assign		___765_e_over.l2 br.l2 	%argrw{"wr"}
	assign		___765_e_over.v1 br.v1 	%argrw{"wr"}
	assign		___765_e_over.v2 br.v2 	%argrw{"wr"}
	assign		___765_e_over.n br.n 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:424
#     e_over.l1 = Oover*Eover.l1;
	mul		___765_e_over.l1 $tmp284 br.l1 	%line{424} %argrw{"wrr"}
	assign		___765_e_over.l1 ___765_e_over.l1 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:425
#     e_over.l2 = Oover*Eover.l2;
	mul		___765_e_over.l2 $tmp284 br.l2 	%line{425} %argrw{"wrr"}
	assign		___765_e_over.l2 ___765_e_over.l2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:426
#     BumpRough_CombineEigens2D(e_over, Eunder, Eout);
	functioncall	$const44 838 	%line{426} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:235
#     if(a.l1==0. && a.l2==0.){
	eq		$tmp286 ___765_e_over.l1 $const13 	%line{235} %argrw{"wrr"}
	neq		$tmp287 $tmp286 $const2 	%argrw{"wrr"}
	if		$tmp287 728 728 	%argrw{"r"}
	eq		$tmp288 ___765_e_over.l2 $const13 	%argrw{"wrr"}
	neq		$tmp289 $tmp288 $const2 	%argrw{"wrr"}
	assign		$tmp287 $tmp289 	%argrw{"wr"}
	if		$tmp287 734 838 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:236
#         c = b;
	assign		___782_resultBumpRough.l1 ___782_resultBumpRough.l1 	%line{236} %argrw{"wr"}
	assign		___782_resultBumpRough.l2 ___782_resultBumpRough.l2 	%argrw{"wr"}
	assign		___782_resultBumpRough.v1 ___782_resultBumpRough.v1 	%argrw{"wr"}
	assign		___782_resultBumpRough.v2 ___782_resultBumpRough.v2 	%argrw{"wr"}
	assign		___782_resultBumpRough.n ___782_resultBumpRough.n 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:237
#     } else if (b.l1==0. && b.l2==0.){
	eq		$tmp290 ___782_resultBumpRough.l1 $const13 	%line{237} %argrw{"wrr"}
	neq		$tmp291 $tmp290 $const2 	%argrw{"wrr"}
	if		$tmp291 740 740 	%argrw{"r"}
	eq		$tmp292 ___782_resultBumpRough.l2 $const13 	%argrw{"wrr"}
	neq		$tmp293 $tmp292 $const2 	%argrw{"wrr"}
	assign		$tmp291 $tmp293 	%argrw{"wr"}
	if		$tmp291 746 838 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:238
#         c = a;
	assign		___782_resultBumpRough.l1 ___765_e_over.l1 	%line{238} %argrw{"wr"}
	assign		___782_resultBumpRough.l2 ___765_e_over.l2 	%argrw{"wr"}
	assign		___782_resultBumpRough.v1 ___765_e_over.v1 	%argrw{"wr"}
	assign		___782_resultBumpRough.v2 ___765_e_over.v2 	%argrw{"wr"}
	assign		___782_resultBumpRough.n ___765_e_over.n 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:240
#         _combineEigens2D(a.l1, a.l2, a.v1, a.v2,
	functioncall	$const45 838 	%line{240} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:157
#     _normalizeEigen2D(al1, al2, av1, av2, al1, al2, av1, av2);
	functioncall	$const46 754 	%line{157} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:81
#     float w1 = length(av1);
	length		___733_w1 ___765_e_over.v1 	%line{81} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:82
#     float w2 = length(av2);
	length		___733_w2 ___765_e_over.v2 	%line{82} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:83
#     ov1 = normalize(av1);
	normalize	___765_e_over.v1 ___765_e_over.v1 	%line{83} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:84
#     ov2 = normalize(av2);
	normalize	___765_e_over.v2 ___765_e_over.v2 	%line{84} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:85
#     ol1 = al1*w1;
	mul		___765_e_over.l1 ___765_e_over.l1 ___733_w1 	%line{85} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:86
#     ol2 = al2*w2;
	mul		___765_e_over.l2 ___765_e_over.l2 ___733_w2 	%line{86} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:158
#     _normalizeEigen2D(bl1, bl2, bv1, bv2, bl1, bl2, bv1, bv2);
	functioncall	$const46 761 	%line{158} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:81
#     float w1 = length(av1);
	length		___733_w1 ___782_resultBumpRough.v1 	%line{81} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:82
#     float w2 = length(av2);
	length		___733_w2 ___782_resultBumpRough.v2 	%line{82} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:83
#     ov1 = normalize(av1);
	normalize	___782_resultBumpRough.v1 ___782_resultBumpRough.v1 	%line{83} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:84
#     ov2 = normalize(av2);
	normalize	___782_resultBumpRough.v2 ___782_resultBumpRough.v2 	%line{84} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:85
#     ol1 = al1*w1;
	mul		___782_resultBumpRough.l1 ___782_resultBumpRough.l1 ___733_w1 	%line{85} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:86
#     ol2 = al2*w2;
	mul		___782_resultBumpRough.l2 ___782_resultBumpRough.l2 ___733_w2 	%line{86} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:159
#     if(al1<al2){
	lt		$tmp294 ___765_e_over.l1 ___765_e_over.l2 	%line{159} %argrw{"wrr"}
	if		$tmp294 768 768 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:160
#         _swapEigen2D(al1, al2, av1, av2, al1, al2, av1, av2);
	functioncall	$const47 768 	%line{160} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:70
#     ol1 = al2;
	assign		___765_e_over.l1 ___765_e_over.l2 	%line{70} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:71
#     ov1 = av2;
	assign		___765_e_over.v1 ___765_e_over.v2 	%line{71} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:72
#     ol2 = al1;
	assign		___765_e_over.l2 ___765_e_over.l1 	%line{72} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:73
#     ov2 = av1;
	assign		___765_e_over.v2 ___765_e_over.v1 	%line{73} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:162
#     if(bl1<bl2){
	lt		$tmp295 ___782_resultBumpRough.l1 ___782_resultBumpRough.l2 	%line{162} %argrw{"wrr"}
	if		$tmp295 775 775 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:163
#         _swapEigen2D(bl1, bl2, bv1, bv2, bl1, bl2, bv1, bv2);
	functioncall	$const47 775 	%line{163} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:70
#     ol1 = al2;
	assign		___782_resultBumpRough.l1 ___782_resultBumpRough.l2 	%line{70} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:71
#     ov1 = av2;
	assign		___782_resultBumpRough.v1 ___782_resultBumpRough.v2 	%line{71} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:72
#     ol2 = al1;
	assign		___782_resultBumpRough.l2 ___782_resultBumpRough.l1 	%line{72} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:73
#     ov2 = av1;
	assign		___782_resultBumpRough.v2 ___782_resultBumpRough.v1 	%line{73} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:165
#     _forceRhandEigen2D(al1, al2, av1, av2, al1, al2, av1, av2);
	functioncall	$const48 788 	%line{165} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:97
#     ol1 = al1;
	assign		___765_e_over.l1 ___765_e_over.l1 	%line{97} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:98
#     ol2 = al2;
	assign		___765_e_over.l2 ___765_e_over.l2 	%line{98} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:99
#     ov1 = av1;
	assign		___765_e_over.v1 ___765_e_over.v1 	%line{99} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:100
#     vector Nn = vector(normalize(N));
	normalize	$tmp296 N 	%line{100} %argrw{"wr"}
	assign		___734_Nn $tmp296 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:101
#     vector Ncross = vector(cross(av1, av2));
	cross		$tmp297 ___765_e_over.v1 ___765_e_over.v2 	%line{101} %argrw{"wrr"}
	assign		___734_Ncross $tmp297 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:102
#     if(dot(Nn,Ncross)<.0){
	dot		$tmp298 ___734_Nn ___734_Ncross 	%line{102} %argrw{"wrr"}
	lt		$tmp299 $tmp298 $const13 	%argrw{"wrr"}
	if		$tmp299 787 788 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:103
#         ov2 = -av2;
	neg		___765_e_over.v2 ___765_e_over.v2 	%line{103} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:105
#         ov2 = av2;
	assign		___765_e_over.v2 ___765_e_over.v2 	%line{105} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:166
#     _forceRhandEigen2D(bl1, bl2, bv1, bv2, bl1, bl2, bv1, bv2);
	functioncall	$const48 801 	%line{166} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:97
#     ol1 = al1;
	assign		___782_resultBumpRough.l1 ___782_resultBumpRough.l1 	%line{97} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:98
#     ol2 = al2;
	assign		___782_resultBumpRough.l2 ___782_resultBumpRough.l2 	%line{98} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:99
#     ov1 = av1;
	assign		___782_resultBumpRough.v1 ___782_resultBumpRough.v1 	%line{99} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:100
#     vector Nn = vector(normalize(N));
	normalize	$tmp300 N 	%line{100} %argrw{"wr"}
	assign		___734_Nn $tmp300 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:101
#     vector Ncross = vector(cross(av1, av2));
	cross		$tmp301 ___782_resultBumpRough.v1 ___782_resultBumpRough.v2 	%line{101} %argrw{"wrr"}
	assign		___734_Ncross $tmp301 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:102
#     if(dot(Nn,Ncross)<.0){
	dot		$tmp302 ___734_Nn ___734_Ncross 	%line{102} %argrw{"wrr"}
	lt		$tmp303 $tmp302 $const13 	%argrw{"wrr"}
	if		$tmp303 800 801 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:103
#         ov2 = -av2;
	neg		___782_resultBumpRough.v2 ___782_resultBumpRough.v2 	%line{103} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:105
#         ov2 = av2;
	assign		___782_resultBumpRough.v2 ___782_resultBumpRough.v2 	%line{105} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:167
#     _alignEigenB2D(al1, al2, av1, av2,
	functioncall	$const49 828 	%line{167} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:120
#     float Bumprough_Use2016Mode = 1.0;
	assign		___737_Bumprough_Use2016Mode $const11 	%line{120} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:121
#     getattribute("", "user:Bumprough_Use2016Mode", Bumprough_Use2016Mode);
	getattribute	$tmp304 $const50 $const51 ___737_Bumprough_Use2016Mode 	%line{121} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:123
#     if (Bumprough_Use2016Mode == 1.0){
	eq		$tmp305 ___737_Bumprough_Use2016Mode $const11 	%line{123} %argrw{"wrr"}
	if		$tmp305 817 828 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:124
#         if (dot(av1,bv1)<.0) {
	dot		$tmp306 ___765_e_over.v1 ___782_resultBumpRough.v1 	%line{124} %argrw{"wrr"}
	lt		$tmp307 $tmp306 $const13 	%argrw{"wrr"}
	if		$tmp307 813 817 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:125
#             ol1 = bl1;
	assign		___782_resultBumpRough.l1 ___782_resultBumpRough.l1 	%line{125} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:126
#             ol2 = bl2;
	assign		___782_resultBumpRough.l2 ___782_resultBumpRough.l2 	%line{126} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:127
#             ov1 = bv1;
	assign		___782_resultBumpRough.v1 ___782_resultBumpRough.v1 	%line{127} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:128
#             ov2 = bv2;
	assign		___782_resultBumpRough.v2 ___782_resultBumpRough.v2 	%line{128} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:130
#             ol1 = bl1;
	assign		___782_resultBumpRough.l1 ___782_resultBumpRough.l1 	%line{130} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:131
#             ol2 = bl2;
	assign		___782_resultBumpRough.l2 ___782_resultBumpRough.l2 	%line{131} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:132
#             ov1 = -bv1;
	neg		___782_resultBumpRough.v1 ___782_resultBumpRough.v1 	%line{132} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:133
#             ov2 = -bv2;
	neg		___782_resultBumpRough.v2 ___782_resultBumpRough.v2 	%line{133} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:136
#         if (dot(av1,bv1)>=.0) {
	dot		$tmp308 ___765_e_over.v1 ___782_resultBumpRough.v1 	%line{136} %argrw{"wrr"}
	ge		$tmp309 $tmp308 $const13 	%argrw{"wrr"}
	if		$tmp309 824 828 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:137
#             ol1 = bl1;
	assign		___782_resultBumpRough.l1 ___782_resultBumpRough.l1 	%line{137} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:138
#             ol2 = bl2;
	assign		___782_resultBumpRough.l2 ___782_resultBumpRough.l2 	%line{138} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:139
#             ov1 = bv1;
	assign		___782_resultBumpRough.v1 ___782_resultBumpRough.v1 	%line{139} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:140
#             ov2 = bv2;
	assign		___782_resultBumpRough.v2 ___782_resultBumpRough.v2 	%line{140} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:142
#             ol1 = bl1;
	assign		___782_resultBumpRough.l1 ___782_resultBumpRough.l1 	%line{142} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:143
#             ol2 = bl2;
	assign		___782_resultBumpRough.l2 ___782_resultBumpRough.l2 	%line{143} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:144
#             ov1 = -bv1;
	neg		___782_resultBumpRough.v1 ___782_resultBumpRough.v1 	%line{144} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:145
#             ov2 = -bv2;
	neg		___782_resultBumpRough.v2 ___782_resultBumpRough.v2 	%line{145} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:171
#     vector sumv = al1*av1+bl1*bv1;
	mul		$tmp310 ___765_e_over.l1 ___765_e_over.v1 	%line{171} %argrw{"wrr"}
	mul		$tmp311 ___782_resultBumpRough.l1 ___782_resultBumpRough.v1 	%argrw{"wrr"}
	add		___744_sumv $tmp310 $tmp311 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:173
#     ol1 = al1+bl1;
	add		___782_resultBumpRough.l1 ___765_e_over.l1 ___782_resultBumpRough.l1 	%line{173} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:174
#     ol2 = al2+bl2;
	add		___782_resultBumpRough.l2 ___765_e_over.l2 ___782_resultBumpRough.l2 	%line{174} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:175
#     ov1 = normalize(sumv);
	normalize	___782_resultBumpRough.v1 ___744_sumv 	%line{175} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:178
#     ov2 = normalize(cross(N, ov1));
	cross		$tmp312 N ___782_resultBumpRough.v1 	%line{178} %argrw{"wrr"}
	normalize	___782_resultBumpRough.v2 $tmp312 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:179
#     ov1 = normalize(cross(ov2, N));
	cross		$tmp313 ___782_resultBumpRough.v2 N 	%line{179} %argrw{"wrr"}
	normalize	___782_resultBumpRough.v1 $tmp313 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:428
#     Eout.n += Oover * e_over.n;
	mul		$tmp314 $tmp284 ___765_e_over.n 	%line{428} %argrw{"wrr"}
	add		___782_resultBumpRough.n ___782_resultBumpRough.n $tmp314 	%argrw{"wrr"}
	assign		___782_resultBumpRough.n ___782_resultBumpRough.n 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:431
#     Oout = Oover + (1.-Oover)*Ounder;
	sub		$tmp315 $const11 $tmp284 	%line{431} %argrw{"wrr"}
	mul		$tmp316 $tmp315 ___782_resultBumpRoughPresence 	%argrw{"wrr"}
	add		___782_resultBumpRoughPresence $tmp284 $tmp316 	%argrw{"wrr"}
# PxrBumpRoughness.osl:281
#                 for (int j = 0; j < numSamples; j++)
	assign		$tmp317 ___787_j 	%filename{"PxrBumpRoughness.osl"} %line{281} %argrw{"wr"}
	add		___787_j ___787_j $const3 	%argrw{"wrr"}
# PxrBumpRoughness.osl:303
#                 wvdenom += weight * weight * sqwaccum;
	mul		$tmp318 ___785_weight ___785_weight 	%line{303} %argrw{"wrr"}
	mul		$tmp319 $tmp318 ___782_sqwaccum 	%argrw{"wrr"}
	add		___782_wvdenom ___782_wvdenom $tmp319 	%argrw{"wrr"}
# PxrBumpRoughness.osl:268
#         for (int i = 0; i < numProj; i++)
	assign		$tmp320 ___784_i 	%line{268} %argrw{"wr"}
	add		___784_i ___784_i $const3 	%argrw{"wrr"}
# PxrBumpRoughness.osl:307
#         if (wvdenom > 0.0)
	gt		$tmp321 ___782_wvdenom $const13 	%line{307} %argrw{"wrr"}
	if		$tmp321 857 857 	%argrw{"r"}
# PxrBumpRoughness.osl:309
#             resultBumpRough.n = resultBumpRough.n / sqrt(wvdenom) + Nc;
	sqrt		$tmp322 ___782_wvdenom 	%line{309} %argrw{"wr"}
	div		$tmp323 ___782_resultBumpRough.n $tmp322 	%argrw{"wrr"}
	add		___782_resultBumpRough.n $tmp323 ___782_Nc 	%argrw{"wrr"}
	assign		___782_resultBumpRough.n ___782_resultBumpRough.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:311
#         resultBumpRough.n = normalize(resultBumpRough.n);
	normalize	___782_resultBumpRough.n ___782_resultBumpRough.n 	%line{311} %argrw{"wr"}
	assign		___782_resultBumpRough.n ___782_resultBumpRough.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:312
#         br = resultBumpRough;
	assign		br.l1 ___782_resultBumpRough.l1 	%line{312} %argrw{"wr"}
	assign		br.l2 ___782_resultBumpRough.l2 	%argrw{"wr"}
	assign		br.v1 ___782_resultBumpRough.v1 	%argrw{"wr"}
	assign		br.v2 ___782_resultBumpRough.v2 	%argrw{"wr"}
	assign		br.n ___782_resultBumpRough.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:316
#         if (textureRoughness > 0.0)
	gt		$tmp324 textureRoughness $const13 	%line{316} %argrw{"wrr"}
	if		$tmp324 1140 1140 	%argrw{"r"}
# PxrBumpRoughness.osl:318
#             textureRoughnessGain = estimateRoughnessGain(b2r_texture, inputS, inputT,
	functioncall	$const14 1140 	%line{318} %argrw{"r"}
# PxrBumpRoughness.osl:46
#     BumpRough textureBumpRough = NEUTRAL_BUMPROUGH;
	assign		___780_textureBumpRough.l1 $const8 	%line{46} %argrw{"wr"}
	assign		___780_textureBumpRough.l2 $const8 	%argrw{"wr"}
	assign		___780_textureBumpRough.v1 $const9 	%argrw{"wr"}
	assign		___780_textureBumpRough.v2 $const10 	%argrw{"wr"}
	assign		___780_textureBumpRough.n N 	%argrw{"wr"}
# PxrBumpRoughness.osl:47
#     vector vecD1 = 0, vecD2 = 0;
	assign		___780_vecD1 $const2 	%line{47} %argrw{"wr"}
	assign		___780_vecD2 $const2 	%argrw{"wr"}
# PxrBumpRoughness.osl:52
#                                         1e-04, floor(ss) + 0.5, floor(tt) + 0.5,
	floor		$tmp325 inputS 	%line{52} %argrw{"wr"}
	add		$tmp326 $tmp325 $const16 	%argrw{"wrr"}
	floor		$tmp327 inputT 	%argrw{"wr"}
	add		$tmp328 $tmp327 $const16 	%argrw{"wrr"}
# PxrBumpRoughness.osl:51
#     textureBumpRough = ReadBumpRough(b2r_texture,
	functioncall	$const19 1130 	%line{51} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:624
#     float baseRoughnessSqr = baseRoughness * baseRoughness;
	mul		___773_baseRoughnessSqr $const15 $const15 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{624} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:627
#     ComputeOrthonormalTangentSpace(dPds, dPdt, U, V, W);
	functioncall	$const20 891 	%line{627} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:510
#     normal PN = cross(dPds, dPdt);
	cross		___769_PN dPdu dPdv 	%line{510} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:515
#     int lefthanded = dot(PN, Ng) < 0;
	dot		$tmp329 ___769_PN Ng 	%line{515} %argrw{"wrr"}
	lt		___769_lefthanded $tmp329 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:516
#     normal N_ = lefthanded ? -N : N;
	if		___769_lefthanded 886 887 	%line{516} %argrw{"r"}
	neg		___769_N_ N 	%argrw{"wr"}
	assign		___769_N_ N 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:518
#     U = normalize(cross(dPdt, N_));
	cross		$tmp330 dPdv ___769_N_ 	%line{518} %argrw{"wrr"}
	normalize	___773_U $tmp330 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:519
#     V = cross(N_, U);
	cross		___773_V ___769_N_ ___773_U 	%line{519} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:520
#     W = N;
	assign		___773_W N 	%line{520} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:630
#     BumpRough result = {baseRoughnessSqr, baseRoughnessSqr, U, V, W};
	assign		___773_result.l1 ___773_baseRoughnessSqr 	%line{630} %argrw{"wr"}
	assign		___773_result.l2 ___773_baseRoughnessSqr 	%argrw{"wr"}
	assign		___773_result.v1 ___773_U 	%argrw{"wr"}
	assign		___773_result.v2 ___773_V 	%argrw{"wr"}
	assign		___773_result.n ___773_W 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:632
#     int validDs = ReadBumpRoughTextures(filenameD1D2, inputS, inputT,
	functioncall	$const21 1003 	%line{632} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:475
#     TxCoords coords = initTxCoords(inputS, inputT, 0);
	functioncall	$const22 919 	%line{475} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 905 906 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{100} %argrw{"r"}
	functioncall	$const12 905 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp331 $tmp328 	%line{48} %argrw{"wr"}
	add		$tmp332 $tmp331 $const11 	%argrw{"wrr"}
	floor		$tmp333 $tmp328 	%argrw{"wr"}
	sub		$tmp334 $tmp328 $tmp333 	%argrw{"wrr"}
	sub		___636__tt $tmp332 $tmp334 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt $tmp328 	%line{100} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:101
#     TxCoords coords = { ss, _tt, Dx(ss), Dy(ss), Dx(_tt), Dy(_tt) };
	assign		___636_coords.s $tmp326 	%line{101} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx $tmp326 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy $tmp326 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     return coords;
	assign		___768_coords.s ___636_coords.s 	%line{102} %argrw{"wr"}
	assign		___768_coords.t ___636_coords.t 	%argrw{"wr"}
	assign		___768_coords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___768_coords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___768_coords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___768_coords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:476
#     TxParams params = {0, textureBlur, color(0), 0.0, textureFilter, textureFilterScale};
	assign		___768_params.firstchannel $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{476} %argrw{"wr"}
	assign		___768_params.blur $const18 	%argrw{"wr"}
	assign		___768_params.missingcolor $const23 	%argrw{"wr"}
	assign		___768_params.missingalpha $const13 	%argrw{"wr"}
	assign		___768_params.interp $const17 	%argrw{"wr"}
	assign		___768_params.width $const18 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:481
#     d1 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const24 955 	%line{481} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result b2r_texture ___768_coords.s ___768_coords.t ___768_coords.dsdx ___768_coords.dtdx ___768_coords.dsdy ___768_coords.dtdy $const25 ___768_params.firstchannel $const26 ___768_params.blur $const27 ___768_params.missingcolor $const28 ___768_params.interp $const29 ___768_params.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp335 ___649_result ___768_params.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp335 934 934 	%argrw{"r"}
	assign		___780_vecD1 ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success b2r_texture $const30 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp336 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp336 940 940 	%argrw{"r"}
	neq		$tmp337 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp336 $tmp337 	%argrw{"wr"}
	if		$tmp336 954 954 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp338 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp339 $tmp338 $const2 	%argrw{"wrr"}
	if		$tmp339 944 947 	%argrw{"r"}
	eq		$tmp340 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp341 $tmp340 $const2 	%argrw{"wrr"}
	assign		$tmp339 $tmp341 	%argrw{"wr"}
	if		$tmp339 954 954 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp342 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp342 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp343 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp343 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp344 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp344 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		___780_vecD1 ___649_finalResult 	%line{217} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:482
#     d1[2] = max(d1[0], d1[1]);
	compref		$tmp346 ___780_vecD1 $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{482} %argrw{"wrr"}
	compref		$tmp347 ___780_vecD1 $const3 	%argrw{"wrr"}
	max		$tmp345 $tmp346 $tmp347 	%argrw{"wrr"}
	compassign	___780_vecD1 $const4 $tmp345 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:484
#     params.firstchannel = 2;
	assign		___768_params.firstchannel $const4 	%line{484} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:485
#     d2 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const24 990 	%line{485} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result b2r_texture ___768_coords.s ___768_coords.t ___768_coords.dsdx ___768_coords.dtdx ___768_coords.dsdy ___768_coords.dtdy $const25 ___768_params.firstchannel $const26 ___768_params.blur $const27 ___768_params.missingcolor $const28 ___768_params.interp $const29 ___768_params.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp348 ___649_result ___768_params.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp348 969 969 	%argrw{"r"}
	assign		___780_vecD2 ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success b2r_texture $const30 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp349 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp349 975 975 	%argrw{"r"}
	neq		$tmp350 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp349 $tmp350 	%argrw{"wr"}
	if		$tmp349 989 989 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp351 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp352 $tmp351 $const2 	%argrw{"wrr"}
	if		$tmp352 979 982 	%argrw{"r"}
	eq		$tmp353 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp354 $tmp353 $const2 	%argrw{"wrr"}
	assign		$tmp352 $tmp354 	%argrw{"wr"}
	if		$tmp352 989 989 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp355 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp355 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp356 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp356 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp357 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp357 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		___780_vecD2 ___649_finalResult 	%line{217} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:487
#     return _IsValidVector(d1) && _IsValidVector(d2);
	functioncall	$const31 994 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{487} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp359 ___780_vecD1 ___780_vecD1 	%line{62} %argrw{"wrr"}
	ge		$tmp358 $tmp359 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:487
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp360 $tmp358 $const2 	%line{487} %argrw{"wrr"}
	if		$tmp360 1002 1002 	%argrw{"r"}
	functioncall	$const31 1000 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp362 ___780_vecD2 ___780_vecD2 	%line{62} %argrw{"wrr"}
	ge		$tmp361 $tmp362 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:487
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp363 $tmp361 $const2 	%line{487} %argrw{"wrr"}
	assign		$tmp360 $tmp363 	%argrw{"wr"}
	assign		___773_validDs $tmp360 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:635
#     if (validDs)
	if		___773_validDs 1125 1125 	%line{635} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:639
#         if (invertBumpNormal == 0) {
	eq		$tmp364 $const2 $const2 	%line{639} %argrw{"wrr"}
	if		$tmp364 1012 1012 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:640
#             d1[0] = -d1[0];
	compref		$tmp365 ___780_vecD1 $const2 	%line{640} %argrw{"wrr"}
	neg		$tmp366 $tmp365 	%argrw{"wr"}
	compassign	___780_vecD1 $const2 $tmp366 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:641
#             d1[1] = -d1[1];
	compref		$tmp367 ___780_vecD1 $const3 	%line{641} %argrw{"wrr"}
	neg		$tmp368 $tmp367 	%argrw{"wr"}
	compassign	___780_vecD1 $const3 $tmp368 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:644
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	functioncall	$const33 1093 	%line{644} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:534
#     float dx = d1[0];
	compref		___770_dx ___780_vecD1 $const2 	%line{534} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:535
#     float dy = d1[1];
	compref		___770_dy ___780_vecD1 $const3 	%line{535} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:536
#     float dxdx = d2[0];
	compref		___770_dxdx ___780_vecD2 $const2 	%line{536} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:537
#     float dydy = d2[1];
	compref		___770_dydy ___780_vecD2 $const3 	%line{537} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:538
#     float dxdy = d2[2];
	compref		___770_dxdy ___780_vecD2 $const4 	%line{538} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:546
#     float sxx = 2.0 * (dxdx - dx*dx);
	mul		$tmp370 ___770_dx ___770_dx 	%line{546} %argrw{"wrr"}
	sub		$tmp371 ___770_dxdx $tmp370 	%argrw{"wrr"}
	mul		___770_sxx $const34 $tmp371 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:547
#     float sxy = 2.0 * (dxdy - dx*dy);
	mul		$tmp372 ___770_dx ___770_dy 	%line{547} %argrw{"wrr"}
	sub		$tmp373 ___770_dxdy $tmp372 	%argrw{"wrr"}
	mul		___770_sxy $const34 $tmp373 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:548
#     float syy = 2.0 * (dydy - dy*dy);
	mul		$tmp374 ___770_dy ___770_dy 	%line{548} %argrw{"wrr"}
	sub		$tmp375 ___770_dydy $tmp374 	%argrw{"wrr"}
	mul		___770_syy $const34 $tmp375 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:550
#     if (varianceGain != 1.0) {
	neq		$tmp376 $const11 $const11 	%line{550} %argrw{"wrr"}
	if		$tmp376 1033 1033 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:551
#         float varianceGainSqr = varianceGain * varianceGain;
	mul		___771_varianceGainSqr $const11 $const11 	%line{551} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:552
#         sxx *= varianceGainSqr;
	mul		___770_sxx ___770_sxx ___771_varianceGainSqr 	%line{552} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:553
#         sxy *= varianceGainSqr;
	mul		___770_sxy ___770_sxy ___771_varianceGainSqr 	%line{553} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:554
#         syy *= varianceGainSqr;
	mul		___770_syy ___770_syy ___771_varianceGainSqr 	%line{554} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:561
#     BumpRough_CovarToEigen2D(sxx, sxy, syy, l1, l2, v1, v2);
	functioncall	$const35 1058 	%line{561} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:219
#     float del = sqrt(a*a + 4.0*b*b - 2.0*a*c + c*c);
	mul		$tmp377 ___770_sxx ___770_sxx 	%line{219} %argrw{"wrr"}
	mul		$tmp378 $const36 ___770_sxy 	%argrw{"wrr"}
	mul		$tmp379 $tmp378 ___770_sxy 	%argrw{"wrr"}
	add		$tmp380 $tmp377 $tmp379 	%argrw{"wrr"}
	mul		$tmp381 $const34 ___770_sxx 	%argrw{"wrr"}
	mul		$tmp382 $tmp381 ___770_syy 	%argrw{"wrr"}
	sub		$tmp383 $tmp380 $tmp382 	%argrw{"wrr"}
	mul		$tmp384 ___770_syy ___770_syy 	%argrw{"wrr"}
	add		$tmp385 $tmp383 $tmp384 	%argrw{"wrr"}
	sqrt		___748_del $tmp385 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:222
#     l1 = 0.5 * (a + c + del);
	add		$tmp386 ___770_sxx ___770_syy 	%line{222} %argrw{"wrr"}
	add		$tmp387 $tmp386 ___748_del 	%argrw{"wrr"}
	mul		___770_l1 $const16 $tmp387 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:223
#     l2 = 0.5 * (a + c - del);
	add		$tmp388 ___770_sxx ___770_syy 	%line{223} %argrw{"wrr"}
	sub		$tmp389 $tmp388 ___748_del 	%argrw{"wrr"}
	mul		___770_l2 $const16 $tmp389 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:226
#     v1 = normalize(vector((l1 - c)/b, 1.0, 0.0));
	sub		$tmp391 ___770_l1 ___770_syy 	%line{226} %argrw{"wrr"}
	div		$tmp392 $tmp391 ___770_sxy 	%argrw{"wrr"}
	vector		$tmp390 $tmp392 $const11 $const13 	%argrw{"wrrr"}
	normalize	___770_v1 $tmp390 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:227
#     v2 = normalize(vector((l2 - c)/b, 1.0, 0.0));
	sub		$tmp394 ___770_l2 ___770_syy 	%line{227} %argrw{"wrr"}
	div		$tmp395 $tmp394 ___770_sxy 	%argrw{"wrr"}
	vector		$tmp393 $tmp395 $const11 $const13 	%argrw{"wrrr"}
	normalize	___770_v2 $tmp393 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:564
#     bumpRough.l1 = l1;
	assign		___773_result.l1 ___770_l1 	%line{564} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:565
#     bumpRough.l2 = l2;
	assign		___773_result.l2 ___770_l2 	%line{565} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:570
#     bumpRough.v1 = U * v1[0] + V * v1[1];
	compref		$tmp396 ___770_v1 $const2 	%line{570} %argrw{"wrr"}
	mul		$tmp397 ___773_U $tmp396 	%argrw{"wrr"}
	compref		$tmp398 ___770_v1 $const3 	%argrw{"wrr"}
	mul		$tmp399 ___773_V $tmp398 	%argrw{"wrr"}
	add		___773_result.v1 $tmp397 $tmp399 	%argrw{"wrr"}
	assign		___773_result.v1 ___773_result.v1 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:571
#     bumpRough.v2 = U * v2[0] + V * v2[1];
	compref		$tmp400 ___770_v2 $const2 	%line{571} %argrw{"wrr"}
	mul		$tmp401 ___773_U $tmp400 	%argrw{"wrr"}
	compref		$tmp402 ___770_v2 $const3 	%argrw{"wrr"}
	mul		$tmp403 ___773_V $tmp402 	%argrw{"wrr"}
	add		___773_result.v2 $tmp401 $tmp403 	%argrw{"wrr"}
	assign		___773_result.v2 ___773_result.v2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:574
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	mul		$tmp404 $const11 ___770_dx 	%line{574} %argrw{"wrr"}
	mul		$tmp405 $tmp404 ___773_U 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:575
#                             bumpNormalGain * dy * V +
	mul		$tmp406 $const11 ___770_dy 	%line{575} %argrw{"wrr"}
	mul		$tmp407 $tmp406 ___773_V 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:574
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	add		$tmp408 $tmp405 $tmp407 	%line{574} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:575
#                             bumpNormalGain * dy * V +
	add		$tmp409 $tmp408 ___773_W 	%line{575} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:574
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	normalize	___773_result.n $tmp409 	%line{574} %argrw{"wr"}
	assign		___773_result.n ___773_result.n 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	functioncall	$const31 1084 	%line{578} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp411 ___773_result.v1 ___773_result.v1 	%line{62} %argrw{"wrr"}
	ge		$tmp410 $tmp411 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp412 $tmp410 $const2 	%line{578} %argrw{"wrr"}
	if		$tmp412 1092 1092 	%argrw{"r"}
	functioncall	$const31 1090 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp414 ___773_result.v2 ___773_result.v2 	%line{62} %argrw{"wrr"}
	ge		$tmp413 $tmp414 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp415 $tmp413 $const2 	%line{578} %argrw{"wrr"}
	assign		$tmp412 $tmp415 	%argrw{"wr"}
	assign		$tmp369 $tmp412 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:644
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	if		$tmp369 1125 1125 	%line{644} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:650
#             result.l1 += baseRoughnessSqr;
	add		___773_result.l1 ___773_result.l1 ___773_baseRoughnessSqr 	%line{650} %argrw{"wrr"}
	assign		___773_result.l1 ___773_result.l1 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:651
#             result.l2 += baseRoughnessSqr;
	add		___773_result.l2 ___773_result.l2 ___773_baseRoughnessSqr 	%line{651} %argrw{"wrr"}
	assign		___773_result.l2 ___773_result.l2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#             if (anisotropyGain != 1.0) {
	neq		$tmp416 $const11 $const11 	%line{653} %argrw{"wrr"}
	if		$tmp416 1125 1125 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:654
#                 BumpRoughAnisotropyAdjust(anisotropyGain, result);
	functioncall	$const37 1125 	%line{654} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:588
#     float eps = 1.e-12;
	assign		___772_eps $const38 	%line{588} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:589
#     float roughnessU = sqrt(bumpRough.l1) + eps;
	sqrt		$tmp417 ___773_result.l1 	%line{589} %argrw{"wr"}
	add		___772_roughnessU $tmp417 ___772_eps 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:590
#     float roughnessV = sqrt(bumpRough.l2) + eps;
	sqrt		$tmp418 ___773_result.l2 	%line{590} %argrw{"wr"}
	add		___772_roughnessV $tmp418 ___772_eps 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:592
#     float ratio = roughnessU / roughnessV;
	div		___772_ratio ___772_roughnessU ___772_roughnessV 	%line{592} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:593
#     float anisotropy = (ratio - 1.0) / (ratio + 1.0);
	sub		$tmp419 ___772_ratio $const11 	%line{593} %argrw{"wrr"}
	add		$tmp420 ___772_ratio $const11 	%argrw{"wrr"}
	div		___772_anisotropy $tmp419 $tmp420 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:595
#     anisotropy = clamp(anisotropy * anisotropyGain, 0.0, 1.0);
	mul		$tmp421 ___772_anisotropy $const11 	%line{595} %argrw{"wrr"}
	functioncall	$const39 1114 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp422 $tmp421 $const11 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		___772_anisotropy $tmp422 $const13 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:597
#     float alpha = 1.0 / (anisotropy*anisotropy - 2.0 * anisotropy + 2.0);
	mul		$tmp423 ___772_anisotropy ___772_anisotropy 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{597} %argrw{"wrr"}
	mul		$tmp424 $const34 ___772_anisotropy 	%argrw{"wrr"}
	sub		$tmp425 $tmp423 $tmp424 	%argrw{"wrr"}
	add		$tmp426 $tmp425 $const34 	%argrw{"wrr"}
	div		___772_alpha $const11 $tmp426 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:599
#     float variance = bumpRough.l1 + bumpRough.l2;
	add		___772_variance ___773_result.l1 ___773_result.l2 	%line{599} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:601
#     bumpRough.l1 = variance * alpha;
	mul		___773_result.l1 ___772_variance ___772_alpha 	%line{601} %argrw{"wrr"}
	assign		___773_result.l1 ___773_result.l1 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:602
#     bumpRough.l2 = variance * (1.0 - alpha);
	sub		$tmp427 $const11 ___772_alpha 	%line{602} %argrw{"wrr"}
	mul		___773_result.l2 ___772_variance $tmp427 	%argrw{"wrr"}
	assign		___773_result.l2 ___773_result.l2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:659
#     return result;
	assign		___780_textureBumpRough.l1 ___773_result.l1 	%line{659} %argrw{"wr"}
	assign		___780_textureBumpRough.l2 ___773_result.l2 	%argrw{"wr"}
	assign		___780_textureBumpRough.v1 ___773_result.v1 	%argrw{"wr"}
	assign		___780_textureBumpRough.v2 ___773_result.v2 	%argrw{"wr"}
	assign		___780_textureBumpRough.n ___773_result.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:57
#     float textureRoughnessU = sqrt(textureBumpRough.l1);
	sqrt		___780_textureRoughnessU ___780_textureBumpRough.l1 	%filename{"PxrBumpRoughness.osl"} %line{57} %argrw{"wr"}
# PxrBumpRoughness.osl:58
#     float textureRoughnessV = sqrt(textureBumpRough.l2);
	sqrt		___780_textureRoughnessV ___780_textureBumpRough.l2 	%line{58} %argrw{"wr"}
# PxrBumpRoughness.osl:59
#     float rudivrv = textureRoughnessU/textureRoughnessV;
	div		___780_rudivrv ___780_textureRoughnessU ___780_textureRoughnessV 	%line{59} %argrw{"wrr"}
# PxrBumpRoughness.osl:61
#     float textureAnisotropy = (rudivrv-1.0)/(rudivrv+1.0);
	sub		$tmp428 ___780_rudivrv $const11 	%line{61} %argrw{"wrr"}
	add		$tmp429 ___780_rudivrv $const11 	%argrw{"wrr"}
	div		___780_textureAnisotropy $tmp428 $tmp429 	%argrw{"wrr"}
# PxrBumpRoughness.osl:62
#     float textureRoughnessGain = textureRoughness / (textureRoughnessU / (1 + textureAnisotropy));
	add		$tmp430 $const11 ___780_textureAnisotropy 	%line{62} %argrw{"wrr"}
	div		$tmp431 ___780_textureRoughnessU $tmp430 	%argrw{"wrr"}
	div		___780_textureRoughnessGain textureRoughness $tmp431 	%argrw{"wrr"}
# PxrBumpRoughness.osl:67
#     return textureRoughnessGain;
	assign		textureRoughnessGain ___780_textureRoughnessGain 	%line{67} %argrw{"wr"}
# PxrBumpRoughness.osl:321
#         if (BumpRough_PartialDeriv(P, inputS, inputT, dPds, dPdt))
	functioncall	$const42 1172 	%line{321} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:192
#     vector dQdx = Dx(Q);
	Dx		___747_dQdx P 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{192} %argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:193
#     vector dQdy = Dy(Q);
	Dy		___747_dQdy P 	%line{193} %argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:195
#     float A = Dx(a);
	Dx		___747_A inputS 	%line{195} %argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:196
#     float B = Dx(b);
	Dx		___747_B inputT 	%line{196} %argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:197
#     float C = Dy(a);
	Dy		___747_C inputS 	%line{197} %argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:198
#     float D = Dy(b);
	Dy		___747_D inputT 	%line{198} %argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:200
#     float invdet = 1./(A*D - B*C);
	mul		$tmp433 ___747_A ___747_D 	%line{200} %argrw{"wrr"}
	mul		$tmp434 ___747_B ___747_C 	%argrw{"wrr"}
	sub		$tmp435 $tmp433 $tmp434 	%argrw{"wrr"}
	div		___747_invdet $const11 $tmp435 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:202
#     dQda = (dQdx*D-dQdy*B)*invdet;
	mul		$tmp436 ___747_dQdx ___747_D 	%line{202} %argrw{"wrr"}
	mul		$tmp437 ___747_dQdy ___747_B 	%argrw{"wrr"}
	sub		$tmp438 $tmp436 $tmp437 	%argrw{"wrr"}
	mul		dPds $tmp438 ___747_invdet 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:203
#     dQdb = (dQdy*A-dQdx*C)*invdet;
	mul		$tmp439 ___747_dQdy ___747_A 	%line{203} %argrw{"wrr"}
	mul		$tmp440 ___747_dQdx ___747_C 	%argrw{"wrr"}
	sub		$tmp441 $tmp439 $tmp440 	%argrw{"wrr"}
	mul		dPdt $tmp441 ___747_invdet 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:205
#     return _IsValidVector(dQda) && _IsValidVector(dQdb);
	functioncall	$const31 1163 	%line{205} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp443 dPds dPds 	%line{62} %argrw{"wrr"}
	ge		$tmp442 $tmp443 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:205
#     return _IsValidVector(dQda) && _IsValidVector(dQdb);
	neq		$tmp444 $tmp442 $const2 	%line{205} %argrw{"wrr"}
	if		$tmp444 1171 1171 	%argrw{"r"}
	functioncall	$const31 1169 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp446 dPdt dPdt 	%line{62} %argrw{"wrr"}
	ge		$tmp445 $tmp446 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:205
#     return _IsValidVector(dQda) && _IsValidVector(dQdb);
	neq		$tmp447 $tmp445 $const2 	%line{205} %argrw{"wrr"}
	assign		$tmp444 $tmp447 	%argrw{"wr"}
	assign		$tmp432 $tmp444 	%argrw{"wr"}
# PxrBumpRoughness.osl:321
#         if (BumpRough_PartialDeriv(P, inputS, inputT, dPds, dPdt))
	if		$tmp432 1425 1425 	%filename{"PxrBumpRoughness.osl"} %line{321} %argrw{"r"}
# PxrBumpRoughness.osl:323
#             br = ReadBumpRough(b2r_texture,
	functioncall	$const19 1425 	%line{323} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:624
#     float baseRoughnessSqr = baseRoughness * baseRoughness;
	mul		___773_baseRoughnessSqr baseRoughness baseRoughness 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{624} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:627
#     ComputeOrthonormalTangentSpace(dPds, dPdt, U, V, W);
	functioncall	$const20 1186 	%line{627} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:510
#     normal PN = cross(dPds, dPdt);
	cross		___769_PN dPds dPdt 	%line{510} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:515
#     int lefthanded = dot(PN, Ng) < 0;
	dot		$tmp448 ___769_PN Ng 	%line{515} %argrw{"wrr"}
	lt		___769_lefthanded $tmp448 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:516
#     normal N_ = lefthanded ? -N : N;
	if		___769_lefthanded 1181 1182 	%line{516} %argrw{"r"}
	neg		___769_N_ N 	%argrw{"wr"}
	assign		___769_N_ N 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:518
#     U = normalize(cross(dPdt, N_));
	cross		$tmp449 dPdt ___769_N_ 	%line{518} %argrw{"wrr"}
	normalize	___773_U $tmp449 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:519
#     V = cross(N_, U);
	cross		___773_V ___769_N_ ___773_U 	%line{519} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:520
#     W = N;
	assign		___773_W N 	%line{520} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:630
#     BumpRough result = {baseRoughnessSqr, baseRoughnessSqr, U, V, W};
	assign		___773_result.l1 ___773_baseRoughnessSqr 	%line{630} %argrw{"wr"}
	assign		___773_result.l2 ___773_baseRoughnessSqr 	%argrw{"wr"}
	assign		___773_result.v1 ___773_U 	%argrw{"wr"}
	assign		___773_result.v2 ___773_V 	%argrw{"wr"}
	assign		___773_result.n ___773_W 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:632
#     int validDs = ReadBumpRoughTextures(filenameD1D2, inputS, inputT,
	functioncall	$const21 1298 	%line{632} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:475
#     TxCoords coords = initTxCoords(inputS, inputT, 0);
	functioncall	$const22 1214 	%line{475} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 1200 1201 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{100} %argrw{"r"}
	functioncall	$const12 1200 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp450 inputT 	%line{48} %argrw{"wr"}
	add		$tmp451 $tmp450 $const11 	%argrw{"wrr"}
	floor		$tmp452 inputT 	%argrw{"wr"}
	sub		$tmp453 inputT $tmp452 	%argrw{"wrr"}
	sub		___636__tt $tmp451 $tmp453 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt inputT 	%line{100} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:101
#     TxCoords coords = { ss, _tt, Dx(ss), Dy(ss), Dx(_tt), Dy(_tt) };
	assign		___636_coords.s inputS 	%line{101} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx inputS 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy inputS 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     return coords;
	assign		___768_coords.s ___636_coords.s 	%line{102} %argrw{"wr"}
	assign		___768_coords.t ___636_coords.t 	%argrw{"wr"}
	assign		___768_coords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___768_coords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___768_coords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___768_coords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:476
#     TxParams params = {0, textureBlur, color(0), 0.0, textureFilter, textureFilterScale};
	assign		___768_params.firstchannel $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{476} %argrw{"wr"}
	assign		___768_params.blur blur 	%argrw{"wr"}
	assign		___768_params.missingcolor $const23 	%argrw{"wr"}
	assign		___768_params.missingalpha $const13 	%argrw{"wr"}
	assign		___768_params.interp filter 	%argrw{"wr"}
	assign		___768_params.width filterScale 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:481
#     d1 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const24 1250 	%line{481} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result b2r_texture ___768_coords.s ___768_coords.t ___768_coords.dsdx ___768_coords.dtdx ___768_coords.dsdy ___768_coords.dtdy $const25 ___768_params.firstchannel $const26 ___768_params.blur $const27 ___768_params.missingcolor $const28 ___768_params.interp $const29 ___768_params.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp454 ___649_result ___768_params.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp454 1229 1229 	%argrw{"r"}
	assign		vecD1 ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success b2r_texture $const30 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp455 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp455 1235 1235 	%argrw{"r"}
	neq		$tmp456 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp455 $tmp456 	%argrw{"wr"}
	if		$tmp455 1249 1249 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp457 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp458 $tmp457 $const2 	%argrw{"wrr"}
	if		$tmp458 1239 1242 	%argrw{"r"}
	eq		$tmp459 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp460 $tmp459 $const2 	%argrw{"wrr"}
	assign		$tmp458 $tmp460 	%argrw{"wr"}
	if		$tmp458 1249 1249 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp461 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp461 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp462 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp462 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp463 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp463 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		vecD1 ___649_finalResult 	%line{217} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:482
#     d1[2] = max(d1[0], d1[1]);
	compref		$tmp465 vecD1 $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{482} %argrw{"wrr"}
	compref		$tmp466 vecD1 $const3 	%argrw{"wrr"}
	max		$tmp464 $tmp465 $tmp466 	%argrw{"wrr"}
	compassign	vecD1 $const4 $tmp464 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:484
#     params.firstchannel = 2;
	assign		___768_params.firstchannel $const4 	%line{484} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:485
#     d2 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const24 1285 	%line{485} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result b2r_texture ___768_coords.s ___768_coords.t ___768_coords.dsdx ___768_coords.dtdx ___768_coords.dsdy ___768_coords.dtdy $const25 ___768_params.firstchannel $const26 ___768_params.blur $const27 ___768_params.missingcolor $const28 ___768_params.interp $const29 ___768_params.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp467 ___649_result ___768_params.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp467 1264 1264 	%argrw{"r"}
	assign		vecD2 ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success b2r_texture $const30 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp468 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp468 1270 1270 	%argrw{"r"}
	neq		$tmp469 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp468 $tmp469 	%argrw{"wr"}
	if		$tmp468 1284 1284 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp470 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp471 $tmp470 $const2 	%argrw{"wrr"}
	if		$tmp471 1274 1277 	%argrw{"r"}
	eq		$tmp472 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp473 $tmp472 $const2 	%argrw{"wrr"}
	assign		$tmp471 $tmp473 	%argrw{"wr"}
	if		$tmp471 1284 1284 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp474 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp474 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp475 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp475 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp476 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp476 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		vecD2 ___649_finalResult 	%line{217} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:487
#     return _IsValidVector(d1) && _IsValidVector(d2);
	functioncall	$const31 1289 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{487} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp478 vecD1 vecD1 	%line{62} %argrw{"wrr"}
	ge		$tmp477 $tmp478 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:487
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp479 $tmp477 $const2 	%line{487} %argrw{"wrr"}
	if		$tmp479 1297 1297 	%argrw{"r"}
	functioncall	$const31 1295 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp481 vecD2 vecD2 	%line{62} %argrw{"wrr"}
	ge		$tmp480 $tmp481 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:487
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp482 $tmp480 $const2 	%line{487} %argrw{"wrr"}
	assign		$tmp479 $tmp482 	%argrw{"wr"}
	assign		___773_validDs $tmp479 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:635
#     if (validDs)
	if		___773_validDs 1420 1420 	%line{635} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:639
#         if (invertBumpNormal == 0) {
	eq		$tmp483 invertBumpNormal $const2 	%line{639} %argrw{"wrr"}
	if		$tmp483 1307 1307 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:640
#             d1[0] = -d1[0];
	compref		$tmp484 vecD1 $const2 	%line{640} %argrw{"wrr"}
	neg		$tmp485 $tmp484 	%argrw{"wr"}
	compassign	vecD1 $const2 $tmp485 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:641
#             d1[1] = -d1[1];
	compref		$tmp486 vecD1 $const3 	%line{641} %argrw{"wrr"}
	neg		$tmp487 $tmp486 	%argrw{"wr"}
	compassign	vecD1 $const3 $tmp487 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:644
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	functioncall	$const33 1388 	%line{644} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:534
#     float dx = d1[0];
	compref		___770_dx vecD1 $const2 	%line{534} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:535
#     float dy = d1[1];
	compref		___770_dy vecD1 $const3 	%line{535} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:536
#     float dxdx = d2[0];
	compref		___770_dxdx vecD2 $const2 	%line{536} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:537
#     float dydy = d2[1];
	compref		___770_dydy vecD2 $const3 	%line{537} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:538
#     float dxdy = d2[2];
	compref		___770_dxdy vecD2 $const4 	%line{538} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:546
#     float sxx = 2.0 * (dxdx - dx*dx);
	mul		$tmp489 ___770_dx ___770_dx 	%line{546} %argrw{"wrr"}
	sub		$tmp490 ___770_dxdx $tmp489 	%argrw{"wrr"}
	mul		___770_sxx $const34 $tmp490 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:547
#     float sxy = 2.0 * (dxdy - dx*dy);
	mul		$tmp491 ___770_dx ___770_dy 	%line{547} %argrw{"wrr"}
	sub		$tmp492 ___770_dxdy $tmp491 	%argrw{"wrr"}
	mul		___770_sxy $const34 $tmp492 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:548
#     float syy = 2.0 * (dydy - dy*dy);
	mul		$tmp493 ___770_dy ___770_dy 	%line{548} %argrw{"wrr"}
	sub		$tmp494 ___770_dydy $tmp493 	%argrw{"wrr"}
	mul		___770_syy $const34 $tmp494 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:550
#     if (varianceGain != 1.0) {
	neq		$tmp495 _gainRw $const11 	%line{550} %argrw{"wrr"}
	if		$tmp495 1328 1328 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:551
#         float varianceGainSqr = varianceGain * varianceGain;
	mul		___771_varianceGainSqr _gainRw _gainRw 	%line{551} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:552
#         sxx *= varianceGainSqr;
	mul		___770_sxx ___770_sxx ___771_varianceGainSqr 	%line{552} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:553
#         sxy *= varianceGainSqr;
	mul		___770_sxy ___770_sxy ___771_varianceGainSqr 	%line{553} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:554
#         syy *= varianceGainSqr;
	mul		___770_syy ___770_syy ___771_varianceGainSqr 	%line{554} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:561
#     BumpRough_CovarToEigen2D(sxx, sxy, syy, l1, l2, v1, v2);
	functioncall	$const35 1353 	%line{561} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:219
#     float del = sqrt(a*a + 4.0*b*b - 2.0*a*c + c*c);
	mul		$tmp496 ___770_sxx ___770_sxx 	%line{219} %argrw{"wrr"}
	mul		$tmp497 $const36 ___770_sxy 	%argrw{"wrr"}
	mul		$tmp498 $tmp497 ___770_sxy 	%argrw{"wrr"}
	add		$tmp499 $tmp496 $tmp498 	%argrw{"wrr"}
	mul		$tmp500 $const34 ___770_sxx 	%argrw{"wrr"}
	mul		$tmp501 $tmp500 ___770_syy 	%argrw{"wrr"}
	sub		$tmp502 $tmp499 $tmp501 	%argrw{"wrr"}
	mul		$tmp503 ___770_syy ___770_syy 	%argrw{"wrr"}
	add		$tmp504 $tmp502 $tmp503 	%argrw{"wrr"}
	sqrt		___748_del $tmp504 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:222
#     l1 = 0.5 * (a + c + del);
	add		$tmp505 ___770_sxx ___770_syy 	%line{222} %argrw{"wrr"}
	add		$tmp506 $tmp505 ___748_del 	%argrw{"wrr"}
	mul		___770_l1 $const16 $tmp506 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:223
#     l2 = 0.5 * (a + c - del);
	add		$tmp507 ___770_sxx ___770_syy 	%line{223} %argrw{"wrr"}
	sub		$tmp508 $tmp507 ___748_del 	%argrw{"wrr"}
	mul		___770_l2 $const16 $tmp508 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:226
#     v1 = normalize(vector((l1 - c)/b, 1.0, 0.0));
	sub		$tmp510 ___770_l1 ___770_syy 	%line{226} %argrw{"wrr"}
	div		$tmp511 $tmp510 ___770_sxy 	%argrw{"wrr"}
	vector		$tmp509 $tmp511 $const11 $const13 	%argrw{"wrrr"}
	normalize	___770_v1 $tmp509 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:227
#     v2 = normalize(vector((l2 - c)/b, 1.0, 0.0));
	sub		$tmp513 ___770_l2 ___770_syy 	%line{227} %argrw{"wrr"}
	div		$tmp514 $tmp513 ___770_sxy 	%argrw{"wrr"}
	vector		$tmp512 $tmp514 $const11 $const13 	%argrw{"wrrr"}
	normalize	___770_v2 $tmp512 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:564
#     bumpRough.l1 = l1;
	assign		___773_result.l1 ___770_l1 	%line{564} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:565
#     bumpRough.l2 = l2;
	assign		___773_result.l2 ___770_l2 	%line{565} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:570
#     bumpRough.v1 = U * v1[0] + V * v1[1];
	compref		$tmp515 ___770_v1 $const2 	%line{570} %argrw{"wrr"}
	mul		$tmp516 ___773_U $tmp515 	%argrw{"wrr"}
	compref		$tmp517 ___770_v1 $const3 	%argrw{"wrr"}
	mul		$tmp518 ___773_V $tmp517 	%argrw{"wrr"}
	add		___773_result.v1 $tmp516 $tmp518 	%argrw{"wrr"}
	assign		___773_result.v1 ___773_result.v1 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:571
#     bumpRough.v2 = U * v2[0] + V * v2[1];
	compref		$tmp519 ___770_v2 $const2 	%line{571} %argrw{"wrr"}
	mul		$tmp520 ___773_U $tmp519 	%argrw{"wrr"}
	compref		$tmp521 ___770_v2 $const3 	%argrw{"wrr"}
	mul		$tmp522 ___773_V $tmp521 	%argrw{"wrr"}
	add		___773_result.v2 $tmp520 $tmp522 	%argrw{"wrr"}
	assign		___773_result.v2 ___773_result.v2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:574
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	mul		$tmp523 _bumpNormalGainRw ___770_dx 	%line{574} %argrw{"wrr"}
	mul		$tmp524 $tmp523 ___773_U 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:575
#                             bumpNormalGain * dy * V +
	mul		$tmp525 _bumpNormalGainRw ___770_dy 	%line{575} %argrw{"wrr"}
	mul		$tmp526 $tmp525 ___773_V 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:574
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	add		$tmp527 $tmp524 $tmp526 	%line{574} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:575
#                             bumpNormalGain * dy * V +
	add		$tmp528 $tmp527 ___773_W 	%line{575} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:574
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	normalize	___773_result.n $tmp528 	%line{574} %argrw{"wr"}
	assign		___773_result.n ___773_result.n 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	functioncall	$const31 1379 	%line{578} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp530 ___773_result.v1 ___773_result.v1 	%line{62} %argrw{"wrr"}
	ge		$tmp529 $tmp530 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp531 $tmp529 $const2 	%line{578} %argrw{"wrr"}
	if		$tmp531 1387 1387 	%argrw{"r"}
	functioncall	$const31 1385 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___731_epsilon $const32 	%line{61} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp533 ___773_result.v2 ___773_result.v2 	%line{62} %argrw{"wrr"}
	ge		$tmp532 $tmp533 ___731_epsilon 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp534 $tmp532 $const2 	%line{578} %argrw{"wrr"}
	assign		$tmp531 $tmp534 	%argrw{"wr"}
	assign		$tmp488 $tmp531 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:644
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	if		$tmp488 1420 1420 	%line{644} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:650
#             result.l1 += baseRoughnessSqr;
	add		___773_result.l1 ___773_result.l1 ___773_baseRoughnessSqr 	%line{650} %argrw{"wrr"}
	assign		___773_result.l1 ___773_result.l1 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:651
#             result.l2 += baseRoughnessSqr;
	add		___773_result.l2 ___773_result.l2 ___773_baseRoughnessSqr 	%line{651} %argrw{"wrr"}
	assign		___773_result.l2 ___773_result.l2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#             if (anisotropyGain != 1.0) {
	neq		$tmp535 anisotropyGain $const11 	%line{653} %argrw{"wrr"}
	if		$tmp535 1420 1420 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:654
#                 BumpRoughAnisotropyAdjust(anisotropyGain, result);
	functioncall	$const37 1420 	%line{654} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:588
#     float eps = 1.e-12;
	assign		___772_eps $const38 	%line{588} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:589
#     float roughnessU = sqrt(bumpRough.l1) + eps;
	sqrt		$tmp536 ___773_result.l1 	%line{589} %argrw{"wr"}
	add		___772_roughnessU $tmp536 ___772_eps 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:590
#     float roughnessV = sqrt(bumpRough.l2) + eps;
	sqrt		$tmp537 ___773_result.l2 	%line{590} %argrw{"wr"}
	add		___772_roughnessV $tmp537 ___772_eps 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:592
#     float ratio = roughnessU / roughnessV;
	div		___772_ratio ___772_roughnessU ___772_roughnessV 	%line{592} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:593
#     float anisotropy = (ratio - 1.0) / (ratio + 1.0);
	sub		$tmp538 ___772_ratio $const11 	%line{593} %argrw{"wrr"}
	add		$tmp539 ___772_ratio $const11 	%argrw{"wrr"}
	div		___772_anisotropy $tmp538 $tmp539 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:595
#     anisotropy = clamp(anisotropy * anisotropyGain, 0.0, 1.0);
	mul		$tmp540 ___772_anisotropy anisotropyGain 	%line{595} %argrw{"wrr"}
	functioncall	$const39 1409 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp541 $tmp540 $const11 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		___772_anisotropy $tmp541 $const13 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:597
#     float alpha = 1.0 / (anisotropy*anisotropy - 2.0 * anisotropy + 2.0);
	mul		$tmp542 ___772_anisotropy ___772_anisotropy 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{597} %argrw{"wrr"}
	mul		$tmp543 $const34 ___772_anisotropy 	%argrw{"wrr"}
	sub		$tmp544 $tmp542 $tmp543 	%argrw{"wrr"}
	add		$tmp545 $tmp544 $const34 	%argrw{"wrr"}
	div		___772_alpha $const11 $tmp545 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:599
#     float variance = bumpRough.l1 + bumpRough.l2;
	add		___772_variance ___773_result.l1 ___773_result.l2 	%line{599} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:601
#     bumpRough.l1 = variance * alpha;
	mul		___773_result.l1 ___772_variance ___772_alpha 	%line{601} %argrw{"wrr"}
	assign		___773_result.l1 ___773_result.l1 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:602
#     bumpRough.l2 = variance * (1.0 - alpha);
	sub		$tmp546 $const11 ___772_alpha 	%line{602} %argrw{"wrr"}
	mul		___773_result.l2 ___772_variance $tmp546 	%argrw{"wrr"}
	assign		___773_result.l2 ___773_result.l2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:659
#     return result;
	assign		br.l1 ___773_result.l1 	%line{659} %argrw{"wr"}
	assign		br.l2 ___773_result.l2 	%argrw{"wr"}
	assign		br.v1 ___773_result.v1 	%argrw{"wr"}
	assign		br.v2 ___773_result.v2 	%argrw{"wr"}
	assign		br.n ___773_result.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:331
#     bumpRoughComponents(br, resultRoughness, resultAnisotropy,
	functioncall	$const52 1436 	%filename{"PxrBumpRoughness.osl"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:668
#     float resultRoughnessU = sqrt(br.l1);
	sqrt		___778_resultRoughnessU br.l1 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{668} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:669
#     float resultRoughnessV = sqrt(br.l2);
	sqrt		___778_resultRoughnessV br.l2 	%line{669} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:670
#     float rudivrv = resultRoughnessU/resultRoughnessV;
	div		___778_rudivrv ___778_resultRoughnessU ___778_resultRoughnessV 	%line{670} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:672
#     roughness = resultRoughnessU / (1.0 + anisotropy);
	add		$tmp547 $const11 resultAnisotropy 	%line{672} %argrw{"wrr"}
	div		resultRoughness ___778_resultRoughnessU $tmp547 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:673
#     anisotropy = (rudivrv - 1.0) / (rudivrv + 1.0);
	sub		$tmp548 ___778_rudivrv $const11 	%line{673} %argrw{"wrr"}
	add		$tmp549 ___778_rudivrv $const11 	%argrw{"wrr"}
	div		resultAnisotropy $tmp548 $tmp549 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:674
#     anisotropyDirection = br.v1;
	assign		resultAnisotropyDirection br.v1 	%line{674} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:675
#     bumpN = normalize(br.n);
	normalize	resultN br.n 	%line{675} %argrw{"wr"}
# PxrBumpRoughness.osl:335
#     vector Vn = normalize(-I);
	neg		$tmp550 I 	%filename{"PxrBumpRoughness.osl"} %line{335} %argrw{"wr"}
	normalize	Vn $tmp550 	%argrw{"wr"}
# PxrBumpRoughness.osl:336
#     RixAdjustNormal(adjustAmount, Vn, Ng, resultN);
	functioncall	$const53 1453 	%line{336} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:198
#     if (amount == 0) return;
	eq		$tmp551 adjustAmount $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{198} %argrw{"wrr"}
	if		$tmp551 1442 1442 	%argrw{"r"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:200
#     if (dot(Vn, Ngn) >= 0)
	dot		$tmp552 Vn Ng 	%line{200} %argrw{"wrr"}
	ge		$tmp553 $tmp552 $const2 	%argrw{"wrr"}
	if		$tmp553 1453 1453 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:202
#         float VdotN = dot(Vn, Nn);
	dot		___699_VdotN Vn resultN 	%line{202} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:203
#         if (VdotN <= 0)
	le		$tmp554 ___699_VdotN $const2 	%line{203} %argrw{"wrr"}
	if		$tmp554 1453 1453 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:207
#             Nn -= amount * 1.01 * VdotN * Vn;
	mul		$tmp555 adjustAmount $const54 	%line{207} %argrw{"wrr"}
	mul		$tmp556 $tmp555 ___699_VdotN 	%argrw{"wrr"}
	mul		$tmp557 $tmp556 Vn 	%argrw{"wrr"}
	sub		resultN resultN $tmp557 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:208
#             Nn = normalize(Nn);
	normalize	resultN resultN 	%line{208} %argrw{"wr"}
# PxrBumpRoughness.osl:337
#     RixBlendWithNormal(surfaceNormalMix, N, resultN);
	functioncall	$const55 1458 	%filename{"PxrBumpRoughness.osl"} %line{337} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:215
#     if (surfaceNormalMix > 0)
	gt		$tmp558 surfaceNormalMix $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{215} %argrw{"wrr"}
	if		$tmp558 1458 1458 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:216
#         bumpN = normalize(mix(bumpN, Nn, surfaceNormalMix));
	mix		$tmp559 resultN N surfaceNormalMix 	%line{216} %argrw{"wrrr"}
	normalize	resultN $tmp559 	%argrw{"wr"}
# PxrBumpRoughness.osl:339
#     if (isconnected(resultNG))
	isconnected	$tmp560 resultNG 	%filename{"PxrBumpRoughness.osl"} %line{339} %argrw{"wr"}
	if		$tmp560 1467 1467 	%argrw{"r"}
# PxrBumpRoughness.osl:341
#         resultNG = surfgradFromPerturbedNormal(resultN, N);
	functioncall	$const56 1467 	%line{341} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:100
# 	float k = dot(Nn, bN);
	dot		___687_k N resultN 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{100} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:101
# 	return (k * Nn - bN) / max(1.0e-8, abs(k));
	mul		$tmp561 ___687_k N 	%line{101} %argrw{"wrr"}
	sub		$tmp562 $tmp561 resultN 	%argrw{"wrr"}
	abs		$tmp564 ___687_k 	%argrw{"wr"}
	max		$tmp563 $const32 $tmp564 	%argrw{"wrr"}
	div		resultNG $tmp562 $tmp563 	%argrw{"wrr"}
	end
