OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: -DOSX -I/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include -I/data/build/ratbuild/rmanshare/RIS/include -I/data/build/ratbuild/rmanshare/RIS/include/common -I/data/build/ratbuild/rmanshare/RIS/pattern/osl -I/data/build/ratbuild/rmanshare/RIS/include/osl -o /data/build/ratbuild/rmanshare/_built/osxMojave_x86-64_clang10_external_release/osl/PxrSetRange.osl/obj/PxrSetRange.oso
shader PxrSetRange	%meta{int,rfm_nodeid,1233493} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/color"} %meta{string,rfh_classification,"Pattern/Color"} 
param	int	operation	1		%meta{string,label,"Operation"} %meta{string,widget,"mapper"} %meta{string,options,"No operation:0|Compress:1|Expand:2|Fit:3"} %meta{int,connectable,0} %meta{string,help,"Compress: Remaps input in [0,1] to [outputMin, outputMax]<br>Expand: Remaps input in [inputMin, inputMax] to [0,1]<br>Fit: Remaps input from the range [inputMin, inputMax] to the range [outputMin, outputMax]<br>"}  %read{2,78} %write{2147483647,-1}
param	color	input	0 0 0		%meta{string,label,"Input"} %meta{int,color_enableFilmlookVis,0}  %read{5,126} %write{2147483647,-1} %derivs
param	color	inputMin	0 0 0		%meta{string,label,"Input Min"} %meta{int,color_enableFilmlookVis,0} %meta{string,conditionalVis1Path,"../operation"} %meta{string,conditionalVis1Op,"equalTo"} %meta{string,conditionalVis1Value,"2"} %meta{string,conditionalVis2Path,"../operation"} %meta{string,conditionalVis2Op,"equalTo"} %meta{string,conditionalVis2Value,"3"} %meta{string,conditionalVisLeft,"conditionalVis1"} %meta{string,conditionalVisOp,"or"} %meta{string,conditionalVisRight,"conditionalVis2"}  %read{33,110} %write{2147483647,-1} %derivs
param	color	inputMax	1 1 1		%meta{string,label,"Input Max"} %meta{int,color_enableFilmlookVis,0} %meta{string,conditionalVis1Path,"../operation"} %meta{string,conditionalVis1Op,"equalTo"} %meta{string,conditionalVis1Value,"2"} %meta{string,conditionalVis2Path,"../operation"} %meta{string,conditionalVis2Op,"equalTo"} %meta{string,conditionalVis2Value,"3"} %meta{string,conditionalVisLeft,"conditionalVis1"} %meta{string,conditionalVisOp,"or"} %meta{string,conditionalVisRight,"conditionalVis2"}  %read{34,111} %write{2147483647,-1} %derivs
param	color	outputMin	0 0 0		%meta{string,label,"Output Min"} %meta{int,color_enableFilmlookVis,0} %meta{string,conditionalVis1Path,"../operation"} %meta{string,conditionalVis1Op,"equalTo"} %meta{string,conditionalVis1Value,"1"} %meta{string,conditionalVis2Path,"../operation"} %meta{string,conditionalVis2Op,"equalTo"} %meta{string,conditionalVis2Value,"3"} %meta{string,conditionalVisLeft,"conditionalVis1"} %meta{string,conditionalVisOp,"or"} %meta{string,conditionalVisRight,"conditionalVis2"}  %read{6,124} %write{2147483647,-1} %derivs
param	color	outputMax	1 1 1		%meta{string,label,"Output Max"} %meta{int,color_enableFilmlookVis,0} %meta{string,conditionalVis1Path,"../operation"} %meta{string,conditionalVis1Op,"equalTo"} %meta{string,conditionalVis1Value,"1"} %meta{string,conditionalVis2Path,"../operation"} %meta{string,conditionalVis2Op,"equalTo"} %meta{string,conditionalVis2Value,"3"} %meta{string,conditionalVisLeft,"conditionalVis1"} %meta{string,conditionalVisOp,"or"} %meta{string,conditionalVisRight,"conditionalVis2"}  %read{7,125} %write{2147483647,-1} %derivs
param	int	clampResult	0		%meta{string,label,"Clamp"} %meta{string,widget,"checkBox"} %meta{string,help,"Clamp to the output range:<br>- Compress: [outputMin, outputMax]<br>- Expand: [0, 1]<br>- Fit: [outputMin, outputMax]"}  %read{127,127} %write{2147483647,-1}
param	float	clampFilterWidth	0		%meta{string,label,"Clamp Filter Width"} %meta{string,help,"When set to a non-zero value, the clamping operation will be filtered, which is more expensive."} %meta{string,conditionalVisPath,"../clampResult"} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisValue,"1"}  %read{129,182} %write{2147483647,-1} %derivs
oparam	color	resultRGB	0 0 0		%meta{string,match,"output"}  %read{132,192} %write{26,189} %derivs
oparam	float	resultR	0		%meta{string,match,"outputX"}  %read{2147483647,-1} %write{190,190}
oparam	float	resultG	0		%meta{string,match,"outputY"}  %read{2147483647,-1} %write{191,191}
oparam	float	resultB	0		%meta{string,match,"outputZ"}  %read{2147483647,-1} %write{192,192}
local	float	___387_w	%read{147,186} %write{146,182} %derivs
local	color	cmin	%read{133,172} %write{0,124} %derivs
local	color	cmax	%read{132,173} %write{1,125} %derivs
const	color	$const1	0 0 0		%read{0,0} %write{2147483647,-1}
const	color	$const2	1 1 1		%read{1,1} %write{2147483647,-1}
const	int	$const3	1		%read{2,191} %write{2147483647,-1}
temp	int	$tmp1	%read{3,3} %write{2,2}
const	string	$const4	"compress"		%read{4,22} %write{2147483647,-1}
temp	float	$tmp2	%read{26,26} %write{11,11} %derivs
const	int	$const5	0		%read{5,190} %write{2147483647,-1}
temp	float	$tmp3	%read{10,10} %write{5,5} %derivs
temp	float	$tmp4	%read{9,11} %write{6,6} %derivs
temp	float	$tmp5	%read{9,9} %write{7,7} %derivs
temp	float	$tmp6	%read{10,10} %write{9,9} %derivs
temp	float	$tmp7	%read{11,11} %write{10,10} %derivs
temp	float	$tmp8	%read{26,26} %write{18,18} %derivs
temp	float	$tmp9	%read{17,17} %write{12,12} %derivs
temp	float	$tmp10	%read{16,18} %write{13,13} %derivs
temp	float	$tmp11	%read{16,16} %write{14,14} %derivs
temp	float	$tmp12	%read{17,17} %write{16,16} %derivs
temp	float	$tmp13	%read{18,18} %write{17,17} %derivs
temp	float	$tmp14	%read{26,26} %write{25,25} %derivs
const	int	$const6	2		%read{19,192} %write{2147483647,-1}
temp	float	$tmp15	%read{24,24} %write{19,19} %derivs
temp	float	$tmp16	%read{23,25} %write{20,20} %derivs
temp	float	$tmp17	%read{23,23} %write{21,21} %derivs
temp	float	$tmp18	%read{24,24} %write{23,23} %derivs
temp	float	$tmp19	%read{25,25} %write{24,24} %derivs
temp	int	$tmp20	%read{30,30} %write{29,29}
const	string	$const7	"expand"		%read{31,65} %write{2147483647,-1}
temp	float	$tmp21	%read{77,77} %write{40,45} %derivs
temp	float	$tmp22	%read{38,43} %write{32,32} %derivs
temp	float	$tmp23	%read{36,44} %write{33,33} %derivs
temp	float	$tmp24	%read{36,44} %write{34,34} %derivs
temp	int	$tmp25	%read{37,37} %write{36,36}
temp	int	$tmp26	%read{39,39} %write{38,38}
const	float	$const8	0		%read{40,175} %write{2147483647,-1}
const	float	$const9	1		%read{41,71} %write{2147483647,-1}
temp	float	$tmp27	%read{45,45} %write{43,43} %derivs
temp	float	$tmp28	%read{45,45} %write{44,44} %derivs
temp	float	$tmp29	%read{77,77} %write{55,60} %derivs
temp	float	$tmp30	%read{53,58} %write{47,47} %derivs
temp	float	$tmp31	%read{51,59} %write{48,48} %derivs
temp	float	$tmp32	%read{51,59} %write{49,49} %derivs
temp	int	$tmp33	%read{52,52} %write{51,51}
temp	int	$tmp34	%read{54,54} %write{53,53}
temp	float	$tmp35	%read{60,60} %write{58,58} %derivs
temp	float	$tmp36	%read{60,60} %write{59,59} %derivs
temp	float	$tmp37	%read{77,77} %write{70,75} %derivs
temp	float	$tmp38	%read{68,73} %write{62,62} %derivs
temp	float	$tmp39	%read{66,74} %write{63,63} %derivs
temp	float	$tmp40	%read{66,74} %write{64,64} %derivs
temp	int	$tmp41	%read{67,67} %write{66,66}
temp	int	$tmp42	%read{69,69} %write{68,68}
temp	float	$tmp43	%read{75,75} %write{73,73} %derivs
temp	float	$tmp44	%read{75,75} %write{74,74} %derivs
const	int	$const10	3		%read{78,78} %write{2147483647,-1}
temp	int	$tmp45	%read{79,79} %write{78,78}
const	string	$const11	"fit"		%read{80,114} %write{2147483647,-1}
temp	float	$tmp46	%read{123,123} %write{94,94} %derivs
temp	float	$tmp47	%read{88,88} %write{81,81} %derivs
temp	float	$tmp48	%read{89,93} %write{82,82} %derivs
temp	float	$tmp49	%read{91,93} %write{83,83} %derivs
temp	float	$tmp50	%read{87,91} %write{84,84} %derivs
temp	float	$tmp51	%read{87,89} %write{85,85} %derivs
temp	float	$tmp52	%read{88,88} %write{87,87} %derivs
temp	float	$tmp53	%read{90,90} %write{88,88} %derivs
temp	float	$tmp54	%read{90,90} %write{89,89} %derivs
temp	float	$tmp55	%read{92,92} %write{90,90} %derivs
temp	float	$tmp56	%read{92,92} %write{91,91} %derivs
temp	float	$tmp57	%read{94,94} %write{92,92} %derivs
temp	float	$tmp58	%read{94,94} %write{93,93} %derivs
temp	float	$tmp59	%read{123,123} %write{108,108} %derivs
temp	float	$tmp60	%read{102,102} %write{95,95} %derivs
temp	float	$tmp61	%read{103,107} %write{96,96} %derivs
temp	float	$tmp62	%read{105,107} %write{97,97} %derivs
temp	float	$tmp63	%read{101,105} %write{98,98} %derivs
temp	float	$tmp64	%read{101,103} %write{99,99} %derivs
temp	float	$tmp65	%read{102,102} %write{101,101} %derivs
temp	float	$tmp66	%read{104,104} %write{102,102} %derivs
temp	float	$tmp67	%read{104,104} %write{103,103} %derivs
temp	float	$tmp68	%read{106,106} %write{104,104} %derivs
temp	float	$tmp69	%read{106,106} %write{105,105} %derivs
temp	float	$tmp70	%read{108,108} %write{106,106} %derivs
temp	float	$tmp71	%read{108,108} %write{107,107} %derivs
temp	float	$tmp72	%read{123,123} %write{122,122} %derivs
temp	float	$tmp73	%read{116,116} %write{109,109} %derivs
temp	float	$tmp74	%read{117,121} %write{110,110} %derivs
temp	float	$tmp75	%read{119,121} %write{111,111} %derivs
temp	float	$tmp76	%read{115,119} %write{112,112} %derivs
temp	float	$tmp77	%read{115,117} %write{113,113} %derivs
temp	float	$tmp78	%read{116,116} %write{115,115} %derivs
temp	float	$tmp79	%read{118,118} %write{116,116} %derivs
temp	float	$tmp80	%read{118,118} %write{117,117} %derivs
temp	float	$tmp81	%read{120,120} %write{118,118} %derivs
temp	float	$tmp82	%read{120,120} %write{119,119} %derivs
temp	float	$tmp83	%read{122,122} %write{120,120} %derivs
temp	float	$tmp84	%read{122,122} %write{121,121} %derivs
const	string	$const12	"Color_filteredClamp"		%read{128,128} %write{2147483647,-1}
temp	int	$tmp85	%read{130,130} %write{129,129}
const	string	$const13	"clamp"		%read{131,177} %write{2147483647,-1}
temp	color	$tmp86	%read{133,133} %write{132,132} %derivs
temp	float	$tmp87	%read{189,189} %write{143,152} %derivs
temp	float	$tmp88	%read{142,151} %write{135,135} %derivs
temp	float	$tmp89	%read{143,152} %write{136,136} %derivs
temp	float	$tmp90	%read{142,149} %write{137,137} %derivs
const	string	$const14	"Math_FilteredClamp"		%read{138,174} %write{2147483647,-1}
temp	int	$tmp91	%read{140,140} %write{139,139}
temp	float	$tmp92	%read{143,143} %write{142,142} %derivs
temp	float	$tmp93	%read{146,146} %write{145,145} %derivs
temp	float	$tmp94	%read{152,152} %write{149,149} %derivs
temp	float	$tmp95	%read{149,149} %write{148,148} %derivs
temp	float	$tmp96	%read{148,148} %write{147,147} %derivs
temp	float	$tmp97	%read{152,152} %write{151,151} %derivs
temp	float	$tmp98	%read{151,151} %write{150,150} %derivs
temp	float	$tmp99	%read{189,189} %write{161,170} %derivs
temp	float	$tmp100	%read{160,169} %write{153,153} %derivs
temp	float	$tmp101	%read{161,170} %write{154,154} %derivs
temp	float	$tmp102	%read{160,167} %write{155,155} %derivs
temp	int	$tmp103	%read{158,158} %write{157,157}
temp	float	$tmp104	%read{161,161} %write{160,160} %derivs
temp	float	$tmp105	%read{164,164} %write{163,163} %derivs
temp	float	$tmp106	%read{170,170} %write{167,167} %derivs
temp	float	$tmp107	%read{167,167} %write{166,166} %derivs
temp	float	$tmp108	%read{166,166} %write{165,165} %derivs
temp	float	$tmp109	%read{170,170} %write{169,169} %derivs
temp	float	$tmp110	%read{169,169} %write{168,168} %derivs
temp	float	$tmp111	%read{189,189} %write{179,188} %derivs
temp	float	$tmp112	%read{178,187} %write{171,171} %derivs
temp	float	$tmp113	%read{179,188} %write{172,172} %derivs
temp	float	$tmp114	%read{178,185} %write{173,173} %derivs
temp	int	$tmp115	%read{176,176} %write{175,175}
temp	float	$tmp116	%read{179,179} %write{178,178} %derivs
temp	float	$tmp117	%read{182,182} %write{181,181} %derivs
temp	float	$tmp118	%read{188,188} %write{185,185} %derivs
temp	float	$tmp119	%read{185,185} %write{184,184} %derivs
temp	float	$tmp120	%read{184,184} %write{183,183} %derivs
temp	float	$tmp121	%read{188,188} %write{187,187} %derivs
temp	float	$tmp122	%read{187,187} %write{186,186} %derivs
code ___main___
# PxrSetRange.osl:234
#     color cmin = BLACK;
	assign		cmin $const1 	%filename{"PxrSetRange.osl"} %line{234} %argrw{"wr"}
# PxrSetRange.osl:235
#     color cmax = WHITE;
	assign		cmax $const2 	%line{235} %argrw{"wr"}
# PxrSetRange.osl:236
#     if (operation == k_compress)
	eq		$tmp1 operation $const3 	%line{236} %argrw{"wrr"}
	if		$tmp1 29 127 	%argrw{"r"}
# PxrSetRange.osl:238
#         resultRGB = compress(input, outputMin, outputMax);
	functioncall	$const4 27 	%line{238} %argrw{"r"}
# PxrSetRange.osl:69
#     return color(compress(x[0], lo[0], hi[0]),
	compref		$tmp3 input $const5 	%line{69} %argrw{"wrr"}
	compref		$tmp4 outputMin $const5 	%argrw{"wrr"}
	compref		$tmp5 outputMax $const5 	%argrw{"wrr"}
	functioncall	$const4 12 	%argrw{"r"}
# PxrSetRange.osl:64
#     return (hi - lo) * x + lo;
	sub		$tmp6 $tmp5 $tmp4 	%line{64} %argrw{"wrr"}
	mul		$tmp7 $tmp6 $tmp3 	%argrw{"wrr"}
	add		$tmp2 $tmp7 $tmp4 	%argrw{"wrr"}
# PxrSetRange.osl:70
#                  compress(x[1], lo[1], hi[1]),
	compref		$tmp9 input $const3 	%line{70} %argrw{"wrr"}
	compref		$tmp10 outputMin $const3 	%argrw{"wrr"}
	compref		$tmp11 outputMax $const3 	%argrw{"wrr"}
	functioncall	$const4 19 	%argrw{"r"}
# PxrSetRange.osl:64
#     return (hi - lo) * x + lo;
	sub		$tmp12 $tmp11 $tmp10 	%line{64} %argrw{"wrr"}
	mul		$tmp13 $tmp12 $tmp9 	%argrw{"wrr"}
	add		$tmp8 $tmp13 $tmp10 	%argrw{"wrr"}
# PxrSetRange.osl:71
#                  compress(x[2], lo[2], hi[2]));
	compref		$tmp15 input $const6 	%line{71} %argrw{"wrr"}
	compref		$tmp16 outputMin $const6 	%argrw{"wrr"}
	compref		$tmp17 outputMax $const6 	%argrw{"wrr"}
	functioncall	$const4 26 	%argrw{"r"}
# PxrSetRange.osl:64
#     return (hi - lo) * x + lo;
	sub		$tmp18 $tmp17 $tmp16 	%line{64} %argrw{"wrr"}
	mul		$tmp19 $tmp18 $tmp15 	%argrw{"wrr"}
	add		$tmp14 $tmp19 $tmp16 	%argrw{"wrr"}
# PxrSetRange.osl:69
#     return color(compress(x[0], lo[0], hi[0]),
	color		resultRGB $tmp2 $tmp8 $tmp14 	%line{69} %argrw{"wrrr"}
# PxrSetRange.osl:239
#         cmin = outputMin;
	assign		cmin outputMin 	%line{239} %argrw{"wr"}
# PxrSetRange.osl:240
#         cmax = outputMax;
	assign		cmax outputMax 	%line{240} %argrw{"wr"}
# PxrSetRange.osl:242
#     else if (operation == k_expand)
	eq		$tmp20 operation $const6 	%line{242} %argrw{"wrr"}
	if		$tmp20 78 127 	%argrw{"r"}
# PxrSetRange.osl:244
#         resultRGB = expand(input, inputMin, inputMax);
	functioncall	$const7 78 	%line{244} %argrw{"r"}
# PxrSetRange.osl:84
#     return color(expand(x[0], lo[0], hi[0]),
	compref		$tmp22 input $const5 	%line{84} %argrw{"wrr"}
	compref		$tmp23 inputMin $const5 	%argrw{"wrr"}
	compref		$tmp24 inputMax $const5 	%argrw{"wrr"}
	functioncall	$const7 47 	%argrw{"r"}
# PxrSetRange.osl:78
# 	if (lo == hi) return x < lo ? 0.0 : 1.0;
	eq		$tmp25 $tmp23 $tmp24 	%line{78} %argrw{"wrr"}
	if		$tmp25 43 43 	%argrw{"r"}
	lt		$tmp26 $tmp22 $tmp23 	%argrw{"wrr"}
	if		$tmp26 41 42 	%argrw{"r"}
	assign		$tmp21 $const8 	%argrw{"wr"}
	assign		$tmp21 $const9 	%argrw{"wr"}
	return
# PxrSetRange.osl:79
# 	return (x - lo) / (hi - lo);
	sub		$tmp27 $tmp22 $tmp23 	%line{79} %argrw{"wrr"}
	sub		$tmp28 $tmp24 $tmp23 	%argrw{"wrr"}
	div		$tmp21 $tmp27 $tmp28 	%argrw{"wrr"}
	return
# PxrSetRange.osl:85
#                  expand(x[1], lo[1], hi[1]),
	compref		$tmp30 input $const3 	%line{85} %argrw{"wrr"}
	compref		$tmp31 inputMin $const3 	%argrw{"wrr"}
	compref		$tmp32 inputMax $const3 	%argrw{"wrr"}
	functioncall	$const7 62 	%argrw{"r"}
# PxrSetRange.osl:78
# 	if (lo == hi) return x < lo ? 0.0 : 1.0;
	eq		$tmp33 $tmp31 $tmp32 	%line{78} %argrw{"wrr"}
	if		$tmp33 58 58 	%argrw{"r"}
	lt		$tmp34 $tmp30 $tmp31 	%argrw{"wrr"}
	if		$tmp34 56 57 	%argrw{"r"}
	assign		$tmp29 $const8 	%argrw{"wr"}
	assign		$tmp29 $const9 	%argrw{"wr"}
	return
# PxrSetRange.osl:79
# 	return (x - lo) / (hi - lo);
	sub		$tmp35 $tmp30 $tmp31 	%line{79} %argrw{"wrr"}
	sub		$tmp36 $tmp32 $tmp31 	%argrw{"wrr"}
	div		$tmp29 $tmp35 $tmp36 	%argrw{"wrr"}
	return
# PxrSetRange.osl:86
#                  expand(x[2], lo[2], hi[2]));
	compref		$tmp38 input $const6 	%line{86} %argrw{"wrr"}
	compref		$tmp39 inputMin $const6 	%argrw{"wrr"}
	compref		$tmp40 inputMax $const6 	%argrw{"wrr"}
	functioncall	$const7 77 	%argrw{"r"}
# PxrSetRange.osl:78
# 	if (lo == hi) return x < lo ? 0.0 : 1.0;
	eq		$tmp41 $tmp39 $tmp40 	%line{78} %argrw{"wrr"}
	if		$tmp41 73 73 	%argrw{"r"}
	lt		$tmp42 $tmp38 $tmp39 	%argrw{"wrr"}
	if		$tmp42 71 72 	%argrw{"r"}
	assign		$tmp37 $const8 	%argrw{"wr"}
	assign		$tmp37 $const9 	%argrw{"wr"}
	return
# PxrSetRange.osl:79
# 	return (x - lo) / (hi - lo);
	sub		$tmp43 $tmp38 $tmp39 	%line{79} %argrw{"wrr"}
	sub		$tmp44 $tmp40 $tmp39 	%argrw{"wrr"}
	div		$tmp37 $tmp43 $tmp44 	%argrw{"wrr"}
	return
# PxrSetRange.osl:84
#     return color(expand(x[0], lo[0], hi[0]),
	color		resultRGB $tmp21 $tmp29 $tmp37 	%line{84} %argrw{"wrrr"}
# PxrSetRange.osl:246
#     else if (operation == k_fit)
	eq		$tmp45 operation $const10 	%line{246} %argrw{"wrr"}
	if		$tmp45 126 127 	%argrw{"r"}
# PxrSetRange.osl:248
#         resultRGB = fit(input, inputMin, inputMax, outputMin, outputMax);
	functioncall	$const11 124 	%line{248} %argrw{"r"}
# PxrSetRange.osl:100
#     return color(fit(x[0], a1[0], b1[0], a2[0], b2[0]),
	compref		$tmp47 input $const5 	%line{100} %argrw{"wrr"}
	compref		$tmp48 inputMin $const5 	%argrw{"wrr"}
	compref		$tmp49 inputMax $const5 	%argrw{"wrr"}
	compref		$tmp50 outputMin $const5 	%argrw{"wrr"}
	compref		$tmp51 outputMax $const5 	%argrw{"wrr"}
	functioncall	$const11 95 	%argrw{"r"}
# PxrSetRange.osl:95
# 	return (x * (b2 - a2) - a1 * b2 + b1 * a2) / (b1 - a1);
	sub		$tmp52 $tmp51 $tmp50 	%line{95} %argrw{"wrr"}
	mul		$tmp53 $tmp47 $tmp52 	%argrw{"wrr"}
	mul		$tmp54 $tmp48 $tmp51 	%argrw{"wrr"}
	sub		$tmp55 $tmp53 $tmp54 	%argrw{"wrr"}
	mul		$tmp56 $tmp49 $tmp50 	%argrw{"wrr"}
	add		$tmp57 $tmp55 $tmp56 	%argrw{"wrr"}
	sub		$tmp58 $tmp49 $tmp48 	%argrw{"wrr"}
	div		$tmp46 $tmp57 $tmp58 	%argrw{"wrr"}
# PxrSetRange.osl:101
#                  fit(x[1], a1[1], b1[1], a2[1], b2[1]),
	compref		$tmp60 input $const3 	%line{101} %argrw{"wrr"}
	compref		$tmp61 inputMin $const3 	%argrw{"wrr"}
	compref		$tmp62 inputMax $const3 	%argrw{"wrr"}
	compref		$tmp63 outputMin $const3 	%argrw{"wrr"}
	compref		$tmp64 outputMax $const3 	%argrw{"wrr"}
	functioncall	$const11 109 	%argrw{"r"}
# PxrSetRange.osl:95
# 	return (x * (b2 - a2) - a1 * b2 + b1 * a2) / (b1 - a1);
	sub		$tmp65 $tmp64 $tmp63 	%line{95} %argrw{"wrr"}
	mul		$tmp66 $tmp60 $tmp65 	%argrw{"wrr"}
	mul		$tmp67 $tmp61 $tmp64 	%argrw{"wrr"}
	sub		$tmp68 $tmp66 $tmp67 	%argrw{"wrr"}
	mul		$tmp69 $tmp62 $tmp63 	%argrw{"wrr"}
	add		$tmp70 $tmp68 $tmp69 	%argrw{"wrr"}
	sub		$tmp71 $tmp62 $tmp61 	%argrw{"wrr"}
	div		$tmp59 $tmp70 $tmp71 	%argrw{"wrr"}
# PxrSetRange.osl:102
#                  fit(x[2], a1[2], b1[2], a2[2], b2[2]));
	compref		$tmp73 input $const6 	%line{102} %argrw{"wrr"}
	compref		$tmp74 inputMin $const6 	%argrw{"wrr"}
	compref		$tmp75 inputMax $const6 	%argrw{"wrr"}
	compref		$tmp76 outputMin $const6 	%argrw{"wrr"}
	compref		$tmp77 outputMax $const6 	%argrw{"wrr"}
	functioncall	$const11 123 	%argrw{"r"}
# PxrSetRange.osl:95
# 	return (x * (b2 - a2) - a1 * b2 + b1 * a2) / (b1 - a1);
	sub		$tmp78 $tmp77 $tmp76 	%line{95} %argrw{"wrr"}
	mul		$tmp79 $tmp73 $tmp78 	%argrw{"wrr"}
	mul		$tmp80 $tmp74 $tmp77 	%argrw{"wrr"}
	sub		$tmp81 $tmp79 $tmp80 	%argrw{"wrr"}
	mul		$tmp82 $tmp75 $tmp76 	%argrw{"wrr"}
	add		$tmp83 $tmp81 $tmp82 	%argrw{"wrr"}
	sub		$tmp84 $tmp75 $tmp74 	%argrw{"wrr"}
	div		$tmp72 $tmp83 $tmp84 	%argrw{"wrr"}
# PxrSetRange.osl:100
#     return color(fit(x[0], a1[0], b1[0], a2[0], b2[0]),
	color		resultRGB $tmp46 $tmp59 $tmp72 	%line{100} %argrw{"wrrr"}
# PxrSetRange.osl:249
#         cmin = outputMin;
	assign		cmin outputMin 	%line{249} %argrw{"wr"}
# PxrSetRange.osl:250
#         cmax = outputMax;
	assign		cmax outputMax 	%line{250} %argrw{"wr"}
# PxrSetRange.osl:254
#         resultRGB = input;
	assign		resultRGB input 	%line{254} %argrw{"wr"}
# PxrSetRange.osl:257
#     if (clampResult)
	if		clampResult 190 190 	%line{257} %argrw{"r"}
# PxrSetRange.osl:259
#         resultRGB = Color_filteredClamp(resultRGB, cmin, cmax, clampFilterWidth);
	functioncall	$const12 190 	%line{259} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:210
#     if (fwidth <= 0.0) return clamp(c, cmin, cmax);
	le		$tmp85 clampFilterWidth $const8 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{210} %argrw{"wrr"}
	if		$tmp85 135 135 	%argrw{"r"}
	functioncall	$const13 134 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:162
# color  clamp (color x, color minval, color maxval) { return max(min(x,maxval),minval); }
	min		$tmp86 resultRGB cmax 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{162} %argrw{"wrr"}
	max		resultRGB $tmp86 cmin 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:210
#     if (fwidth <= 0.0) return clamp(c, cmin, cmax);
	return	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{210}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:211
#     return color(Math_FilteredClamp(c[0], cmin[0], cmax[0], fwidth),
	compref		$tmp88 resultRGB $const5 	%line{211} %argrw{"wrr"}
	compref		$tmp89 cmin $const5 	%argrw{"wrr"}
	compref		$tmp90 cmax $const5 	%argrw{"wrr"}
	functioncall	$const14 153 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:615
#     if (fwidth <= 0.0) return clamp(x, fmin, fmax);
	le		$tmp91 clampFilterWidth $const8 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{615} %argrw{"wrr"}
	if		$tmp91 145 145 	%argrw{"r"}
	functioncall	$const13 144 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp92 $tmp88 $tmp90 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		$tmp87 $tmp92 $tmp89 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:615
#     if (fwidth <= 0.0) return clamp(x, fmin, fmax);
	return	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{615}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:616
#     float w = filterwidth(x) * fwidth;
	filterwidth	$tmp93 $tmp88 	%line{616} %argrw{"wr"} %argderivs{1}
	mul		___387_w $tmp93 clampFilterWidth 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:617
#     return mix(fmin, mix(x, fmax, smoothstep(fmax - w, fmax, x)), smoothstep(fmin, fmin + w, x));
	sub		$tmp96 $tmp90 ___387_w 	%line{617} %argrw{"wrr"}
	smoothstep	$tmp95 $tmp96 $tmp90 $tmp88 	%argrw{"wrrr"}
	mix		$tmp94 $tmp88 $tmp90 $tmp95 	%argrw{"wrrr"}
	add		$tmp98 $tmp89 ___387_w 	%argrw{"wrr"}
	smoothstep	$tmp97 $tmp89 $tmp98 $tmp88 	%argrw{"wrrr"}
	mix		$tmp87 $tmp89 $tmp94 $tmp97 	%argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:212
#                  Math_FilteredClamp(c[1], cmin[1], cmax[1], fwidth),
	compref		$tmp100 resultRGB $const3 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{212} %argrw{"wrr"}
	compref		$tmp101 cmin $const3 	%argrw{"wrr"}
	compref		$tmp102 cmax $const3 	%argrw{"wrr"}
	functioncall	$const14 171 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:615
#     if (fwidth <= 0.0) return clamp(x, fmin, fmax);
	le		$tmp103 clampFilterWidth $const8 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{615} %argrw{"wrr"}
	if		$tmp103 163 163 	%argrw{"r"}
	functioncall	$const13 162 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp104 $tmp100 $tmp102 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		$tmp99 $tmp104 $tmp101 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:615
#     if (fwidth <= 0.0) return clamp(x, fmin, fmax);
	return	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{615}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:616
#     float w = filterwidth(x) * fwidth;
	filterwidth	$tmp105 $tmp100 	%line{616} %argrw{"wr"} %argderivs{1}
	mul		___387_w $tmp105 clampFilterWidth 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:617
#     return mix(fmin, mix(x, fmax, smoothstep(fmax - w, fmax, x)), smoothstep(fmin, fmin + w, x));
	sub		$tmp108 $tmp102 ___387_w 	%line{617} %argrw{"wrr"}
	smoothstep	$tmp107 $tmp108 $tmp102 $tmp100 	%argrw{"wrrr"}
	mix		$tmp106 $tmp100 $tmp102 $tmp107 	%argrw{"wrrr"}
	add		$tmp110 $tmp101 ___387_w 	%argrw{"wrr"}
	smoothstep	$tmp109 $tmp101 $tmp110 $tmp100 	%argrw{"wrrr"}
	mix		$tmp99 $tmp101 $tmp106 $tmp109 	%argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:213
#                  Math_FilteredClamp(c[2], cmin[2], cmax[2], fwidth));
	compref		$tmp112 resultRGB $const6 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{213} %argrw{"wrr"}
	compref		$tmp113 cmin $const6 	%argrw{"wrr"}
	compref		$tmp114 cmax $const6 	%argrw{"wrr"}
	functioncall	$const14 189 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:615
#     if (fwidth <= 0.0) return clamp(x, fmin, fmax);
	le		$tmp115 clampFilterWidth $const8 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{615} %argrw{"wrr"}
	if		$tmp115 181 181 	%argrw{"r"}
	functioncall	$const13 180 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp116 $tmp112 $tmp114 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		$tmp111 $tmp116 $tmp113 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:615
#     if (fwidth <= 0.0) return clamp(x, fmin, fmax);
	return	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{615}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:616
#     float w = filterwidth(x) * fwidth;
	filterwidth	$tmp117 $tmp112 	%line{616} %argrw{"wr"} %argderivs{1}
	mul		___387_w $tmp117 clampFilterWidth 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:617
#     return mix(fmin, mix(x, fmax, smoothstep(fmax - w, fmax, x)), smoothstep(fmin, fmin + w, x));
	sub		$tmp120 $tmp114 ___387_w 	%line{617} %argrw{"wrr"}
	smoothstep	$tmp119 $tmp120 $tmp114 $tmp112 	%argrw{"wrrr"}
	mix		$tmp118 $tmp112 $tmp114 $tmp119 	%argrw{"wrrr"}
	add		$tmp122 $tmp113 ___387_w 	%argrw{"wrr"}
	smoothstep	$tmp121 $tmp113 $tmp122 $tmp112 	%argrw{"wrrr"}
	mix		$tmp111 $tmp113 $tmp118 $tmp121 	%argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:211
#     return color(Math_FilteredClamp(c[0], cmin[0], cmax[0], fwidth),
	color		resultRGB $tmp87 $tmp99 $tmp111 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{211} %argrw{"wrrr"}
# PxrSetRange.osl:262
#     resultR = resultRGB[0];
	compref		resultR resultRGB $const5 	%filename{"PxrSetRange.osl"} %line{262} %argrw{"wrr"}
# PxrSetRange.osl:263
#     resultG = resultRGB[1];
	compref		resultG resultRGB $const3 	%line{263} %argrw{"wrr"}
# PxrSetRange.osl:264
#     resultB = resultRGB[2];
	compref		resultB resultRGB $const6 	%line{264} %argrw{"wrr"}
	end
