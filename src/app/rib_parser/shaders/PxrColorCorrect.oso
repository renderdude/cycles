OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: -DOSX -I/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include -I/data/build/ratbuild/rmanshare/RIS/include -I/data/build/ratbuild/rmanshare/RIS/include/common -I/data/build/ratbuild/rmanshare/RIS/pattern/osl -I/data/build/ratbuild/rmanshare/RIS/include/osl -o /data/build/ratbuild/rmanshare/_built/osxMojave_x86-64_clang10_external_release/osl/PxrColorCorrect.osl/obj/PxrColorCorrect.oso
shader PxrColorCorrect	%meta{int,rfm_nodeid,1200405} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/color"} %meta{string,rfh_classification,"Pattern/Color"} %meta{string,help,"PxrColorCorrect combines a number of classic remapping and color correction methods. "} 
param	color	inputRGB	0 0 0		%meta{string,widget,"color"} %meta{string,help,"Plug an input color pattern here."} %meta{string,label,"Input Color"}  %read{0,195} %write{2147483647,-1}
param	float	inputMask	1		%meta{string,widget,"default"} %meta{string,page,"Mask"} %meta{int,page_open,1} %meta{string,help,"A mask defining the color-corrected areas."} %meta{string,label,"Input Mask"} %meta{int,slider,1} %meta{float,slidermax,1} %meta{float,slidermin,0}  %read{3,4} %write{2147483647,-1}
param	int	invertMask	0		%meta{string,widget,"checkBox"} %meta{string,page,"Mask"} %meta{string,help,"Inverts the mask's influence."} %meta{int,connectable,0} %meta{string,label,"Invert Mask"}  %read{1,1} %write{2147483647,-1}
param	float	mixMask	1		%meta{string,widget,"default"} %meta{string,page,"Mask"} %meta{string,help,"Blend in the mask. When set to 0.0, there is no color correction at all."} %meta{int,connectable,0} %meta{string,label,"Mix Mask"} %meta{int,slider,1} %meta{float,slidermax,1} %meta{float,slidermin,0}  %read{5,5} %write{2147483647,-1}
param	vector	inputMin	0 0 0		%meta{string,widget,"default"} %meta{string,page,"Input Range"} %meta{int,page_open,1} %meta{string,help,"InputMin will remap the 0.0 value to a value of your choice. When set to 0.0, nothing changes. This is equivalent to the black point in Photoshop's Levels dialog. "} %meta{string,label,"Input Min"}  %read{14,14} %write{2147483647,-1}
param	vector	inputMax	1 1 1		%meta{string,widget,"default"} %meta{string,page,"Input Range"} %meta{string,help,"InputMax will remap the 1.0 value to a value of your choice. When set to 1.0, nothing changes. "} %meta{string,label,"Input Max"}  %read{15,15} %write{2147483647,-1}
param	vector	gamma	1 1 1		%meta{string,widget,"default"} %meta{string,page,"Color Correct"} %meta{int,page_open,1} %meta{string,help,"Applies a per-channel gamma correction. Values lower than 0.0 are ignored, 1.0 is neutral. "} %meta{string,label,"Gamma"}  %read{43,67} %write{2147483647,-1}
param	vector	contrast	0 0 0		%meta{string,widget,"default"} %meta{string,page,"Color Correct"} %meta{string,help,"Applies a per-channel contrast. The valid range is -1 to +1. 0.0 is neutral"} %meta{string,label,"Contrast"}  %read{85,85} %write{2147483647,-1}
param	vector	contrastPivot	0.5 0.5 0.5		%meta{string,widget,"default"} %meta{string,page,"Color Correct"} %meta{string,help,"Specifies the per-channel pivot of the contrast curve. By default, it is centered at 0.5 to mimic classic photoshop-style operation. "} %meta{string,label,"Contrast Pivot"}  %read{86,86} %write{2147483647,-1}
param	color	rgbGain	1 1 1		%meta{string,widget,"color"} %meta{string,page,"Color Correct"} %meta{string,help,"Use rgbGain to tint your input. This color will simply multiply your input color. 1.0 is neutral. "} %meta{string,label,"RGB Gain"}  %read{126,126} %write{2147483647,-1}
param	vector	hsv	0 1 1		%meta{string,widget,"default"} %meta{string,page,"Color Correct"} %meta{string,help,"Apply a Hue, Saturation, Value color correction. Hue is an offset. Saturation and Value are multipliers. "} %meta{string,label,"HSV"}  %read{130,142} %write{2147483647,-1}
param	float	exposure	0		%meta{string,widget,"default"} %meta{string,page,"Color Correct"} %meta{string,help,"Adjust the exposure of the input color by the given stops. Each positive stop will double the input's intensity.  Each negative stop will halve the input's intensity.  Often it is preferable to use Exposure instead of a straight multiplication (like rgbGain), as it is perceptually linear. "} %meta{string,label,"Exposure"} %meta{int,slider,1} %meta{float,slidermax,4} %meta{float,slidermin,-4}  %read{152,154} %write{2147483647,-1}
param	vector	outputMin	0 0 0		%meta{string,widget,"default"} %meta{string,page,"Output Range"} %meta{int,page_open,1} %meta{string,help,"outputMin will remap the final color's 0.0 value to a value of your choice."} %meta{string,label,"Output Min"}  %read{171,171} %write{2147483647,-1}
param	vector	outputMax	1 1 1		%meta{string,widget,"default"} %meta{string,page,"Output Range"} %meta{string,help,"outputMax will remap the final color's 1.0 value to a value of your choice."} %meta{string,label,"Output Max"}  %read{172,172} %write{2147483647,-1}
param	int	clampOutput	0		%meta{string,widget,"checkBox"} %meta{string,page,"Clamp Output"} %meta{string,help,"The final color can optionaly be clamped to make sure it sits within a user- defined range. "} %meta{int,connectable,0} %meta{string,label,"Clamp Output"}  %read{190,190} %write{2147483647,-1}
param	vector	clampMin	0 0 0		%meta{string,widget,"default"} %meta{string,page,"Clamp Output"} %meta{string,help,"This is the lowest value output by PxrColorCorrect"} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisPath,"clampOutput"} %meta{string,conditionalVisValue,"1"} %meta{string,label,"Clamp Min"}  %read{194,194} %write{2147483647,-1}
param	vector	clampMax	1 1 1		%meta{string,widget,"default"} %meta{string,page,"Clamp Output"} %meta{string,help,"This is the highest value output by PxrColorCorrect"} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisPath,"clampOutput"} %meta{string,conditionalVisValue,"1"} %meta{string,label,"Clamp Max"}  %read{193,193} %write{2147483647,-1}
oparam	color	resultRGB	0 0 0		%read{11,198} %write{0,195}
oparam	float	resultR	0		%read{2147483647,-1} %write{196,196}
oparam	float	resultG	0		%read{2147483647,-1} %write{197,197}
oparam	float	resultB	0		%read{2147483647,-1} %write{198,198}
local	color	___328_result	%read{40,40} %write{11,39}
local	int	___329_i	%read{11,39} %write{10,39}
local	color	___333_result	%read{189,189} %write{168,188}
local	int	___334_i	%read{168,188} %write{167,188}
local	color	___338_result	%read{78,78} %write{53,77}
local	float	___339_result	%read{82,124} %write{82,124}
local	float	___339_C	%read{82,124} %write{82,124}
local	float	___339_power	%read{82,124} %write{82,124}
local	color	___343_result	%read{125,125} %write{82,124}
local	int	___344_i	%read{82,124} %write{81,124}
local	color	___346_tmp	%read{129,148} %write{128,147}
local	color	___346_result	%read{149,149} %write{148,148}
local	color	___347_result	%read{155,164} %write{151,163}
local	float	___348_exposure	%read{156,162} %write{154,154}
local	float	maskValue	%read{5,195} %write{3,5}
const	int	$const1	0		%read{1,196} %write{2147483647,-1}
temp	int	$tmp1	%read{2,2} %write{1,1}
const	float	$const2	1		%read{3,177} %write{2147483647,-1}
const	float	$const3	0		%read{5,174} %write{2147483647,-1}
temp	int	$tmp2	%read{7,7} %write{6,6}
const	string	$const4	"RixInputRange"		%read{8,16} %write{2147483647,-1}
const	int	$const5	3		%read{11,168} %write{2147483647,-1}
temp	int	$tmp3	%read{11,39} %write{11,39}
temp	int	$tmp4	%read{9,39} %write{10,39}
temp	float	$tmp5	%read{11,39} %write{11,39}
temp	float	$tmp6	%read{11,39} %write{11,39}
temp	float	$tmp7	%read{11,39} %write{11,39}
temp	float	$tmp8	%read{11,39} %write{11,39}
temp	int	$tmp9	%read{11,39} %write{11,39}
temp	int	$tmp10	%read{11,39} %write{11,39}
temp	int	$tmp11	%read{11,39} %write{11,39}
temp	int	$tmp12	%read{11,39} %write{11,39}
temp	int	$tmp13	%read{11,39} %write{11,39}
temp	int	$tmp14	%read{11,39} %write{11,39}
temp	float	$tmp15	%read{11,39} %write{11,39}
temp	float	$tmp16	%read{11,39} %write{11,39}
const	int	$const6	1		%read{39,197} %write{2147483647,-1}
temp	int	$tmp17	%read{2147483647,-1} %write{11,39}
const	string	$const7	"RixGamma"		%read{41,68} %write{2147483647,-1}
temp	float	$tmp18	%read{53,53} %write{50,52}
temp	float	$tmp19	%read{47,52} %write{42,42}
temp	float	$tmp20	%read{45,48} %write{43,43}
temp	int	$tmp21	%read{46,46} %write{45,45}
temp	float	$tmp22	%read{50,50} %write{47,47}
temp	float	$tmp23	%read{49,49} %write{48,48}
const	float	$const8	9.99999975e-06		%read{48,72} %write{2147483647,-1}
temp	float	$tmp24	%read{50,50} %write{49,49}
temp	float	$tmp25	%read{65,65} %write{62,64}
temp	float	$tmp26	%read{59,64} %write{54,54}
temp	float	$tmp27	%read{57,60} %write{55,55}
temp	int	$tmp28	%read{58,58} %write{57,57}
temp	float	$tmp29	%read{62,62} %write{59,59}
temp	float	$tmp30	%read{61,61} %write{60,60}
temp	float	$tmp31	%read{62,62} %write{61,61}
temp	float	$tmp32	%read{77,77} %write{74,76}
const	int	$const9	2		%read{66,198} %write{2147483647,-1}
temp	float	$tmp33	%read{71,76} %write{66,66}
temp	float	$tmp34	%read{69,72} %write{67,67}
temp	int	$tmp35	%read{70,70} %write{69,69}
temp	float	$tmp36	%read{74,74} %write{71,71}
temp	float	$tmp37	%read{73,73} %write{72,72}
temp	float	$tmp38	%read{74,74} %write{73,73}
const	string	$const10	"RixContrast"		%read{79,87} %write{2147483647,-1}
temp	int	$tmp39	%read{82,124} %write{82,124}
temp	int	$tmp40	%read{80,124} %write{81,124}
temp	float	$tmp41	%read{82,124} %write{82,124}
temp	float	$tmp42	%read{82,124} %write{82,124}
temp	float	$tmp43	%read{82,124} %write{82,124}
temp	float	$tmp44	%read{82,124} %write{82,124}
temp	int	$tmp45	%read{82,124} %write{82,124}
temp	int	$tmp46	%read{82,124} %write{82,124}
temp	int	$tmp47	%read{82,124} %write{82,124}
temp	int	$tmp48	%read{82,124} %write{82,124}
temp	float	$tmp49	%read{82,124} %write{82,124}
const	float	$const11	-1		%read{100,100} %write{2147483647,-1}
const	string	$const12	"clamp"		%read{98,192} %write{2147483647,-1}
temp	float	$tmp50	%read{82,124} %write{82,124}
const	float	$const13	0.5		%read{101,102} %write{2147483647,-1}
temp	float	$tmp51	%read{82,124} %write{82,124}
const	float	$const14	0.999000013		%read{103,103} %write{2147483647,-1}
temp	float	$tmp52	%read{82,124} %write{82,124}
temp	float	$tmp53	%read{82,124} %write{82,124}
const	float	$const15	-0.30103001		%read{106,106} %write{2147483647,-1}
temp	int	$tmp54	%read{82,124} %write{82,124}
temp	float	$tmp55	%read{82,124} %write{82,124}
temp	float	$tmp56	%read{82,124} %write{82,124}
temp	float	$tmp57	%read{82,124} %write{82,124}
temp	float	$tmp58	%read{82,124} %write{82,124}
temp	float	$tmp59	%read{82,124} %write{82,124}
temp	float	$tmp60	%read{82,124} %write{82,124}
temp	int	$tmp61	%read{2147483647,-1} %write{82,124}
const	string	$const16	"RixHsvCorrect"		%read{127,127} %write{2147483647,-1}
const	string	$const17	"rgb"		%read{128,148} %write{2147483647,-1}
const	string	$const18	"hsv"		%read{128,148} %write{2147483647,-1}
temp	float	$tmp62	%read{133,133} %write{132,132}
temp	float	$tmp63	%read{131,131} %write{129,129}
temp	float	$tmp64	%read{131,131} %write{130,130}
temp	float	$tmp65	%read{132,132} %write{131,131}
temp	float	$tmp66	%read{140,140} %write{139,139}
temp	float	$tmp67	%read{136,136} %write{134,134}
temp	float	$tmp68	%read{136,136} %write{135,135}
temp	float	$tmp69	%read{138,138} %write{136,136}
temp	float	$tmp70	%read{139,139} %write{138,138}
temp	float	$tmp71	%read{147,147} %write{146,146}
temp	float	$tmp72	%read{143,143} %write{141,141}
temp	float	$tmp73	%read{143,143} %write{142,142}
temp	float	$tmp74	%read{145,145} %write{143,143}
temp	float	$tmp75	%read{146,146} %write{145,145}
const	string	$const19	"RixExposure"		%read{150,150} %write{2147483647,-1}
temp	int	$tmp76	%read{153,153} %write{152,152}
const	float	$const20	2		%read{154,154} %write{2147483647,-1}
temp	float	$tmp77	%read{156,156} %write{155,155}
temp	float	$tmp78	%read{157,157} %write{156,156}
temp	float	$tmp79	%read{159,159} %write{158,158}
temp	float	$tmp80	%read{160,160} %write{159,159}
temp	float	$tmp81	%read{162,162} %write{161,161}
temp	float	$tmp82	%read{163,163} %write{162,162}
const	string	$const21	"RixOutputRange"		%read{165,173} %write{2147483647,-1}
temp	int	$tmp83	%read{168,188} %write{168,188}
temp	int	$tmp84	%read{166,188} %write{167,188}
temp	float	$tmp85	%read{168,188} %write{168,188}
temp	float	$tmp86	%read{168,188} %write{168,188}
temp	float	$tmp87	%read{168,188} %write{168,188}
temp	float	$tmp88	%read{168,188} %write{168,188}
temp	int	$tmp89	%read{168,188} %write{168,188}
temp	int	$tmp90	%read{168,188} %write{168,188}
temp	int	$tmp91	%read{168,188} %write{168,188}
temp	int	$tmp92	%read{168,188} %write{168,188}
temp	float	$tmp93	%read{168,188} %write{168,188}
temp	float	$tmp94	%read{168,188} %write{168,188}
temp	int	$tmp95	%read{2147483647,-1} %write{168,188}
temp	int	$tmp96	%read{191,191} %write{190,190}
temp	vector	$tmp97	%read{194,194} %write{193,193}
code ___main___
# PxrColorCorrect.osl:325
#     resultRGB = inputRGB;
	assign		resultRGB inputRGB 	%filename{"PxrColorCorrect.osl"} %line{325} %argrw{"wr"}
# PxrColorCorrect.osl:327
#     float maskValue = (invertMask != 0) ? 1.0 - inputMask : inputMask;
	neq		$tmp1 invertMask $const1 	%line{327} %argrw{"wrr"}
	if		$tmp1 4 5 	%argrw{"r"}
	sub		maskValue $const2 inputMask 	%argrw{"wrr"}
	assign		maskValue inputMask 	%argrw{"wr"}
# PxrColorCorrect.osl:328
#     maskValue = mix(0.0, maskValue, mixMask);
	mix		maskValue $const3 maskValue mixMask 	%line{328} %argrw{"wrrr"}
# PxrColorCorrect.osl:330
#     if (maskValue > 0.0)
	gt		$tmp2 maskValue $const3 	%line{330} %argrw{"wrr"}
	if		$tmp2 196 196 	%argrw{"r"}
# PxrColorCorrect.osl:332
#         resultRGB = RixInputRange(resultRGB, inputMin, inputMax);
	functioncall	$const4 41 	%line{332} %argrw{"r"}
# PxrColorCorrect.osl:55
#     for (int i = 0; i < 3; i++)
	for		$tmp4 11 13 38 40 	%line{55} %argrw{"r"}
	assign		___329_i $const1 	%argrw{"wr"}
	lt		$tmp3 ___329_i $const5 	%argrw{"wrr"}
	neq		$tmp4 $tmp3 $const1 	%argrw{"wrr"}
# PxrColorCorrect.osl:57
#         result[i] = RixInputRange(rgb[i], min[i], max[i]);
	compref		$tmp6 resultRGB ___329_i 	%line{57} %argrw{"wrr"}
	compref		$tmp7 inputMin ___329_i 	%argrw{"wrr"}
	compref		$tmp8 inputMax ___329_i 	%argrw{"wrr"}
	functioncall	$const4 37 	%argrw{"r"}
# PxrColorCorrect.osl:41
#     if (min == 0.0 && max == 1.0)
	eq		$tmp9 $tmp7 $const3 	%line{41} %argrw{"wrr"}
	neq		$tmp10 $tmp9 $const1 	%argrw{"wrr"}
	if		$tmp10 23 23 	%argrw{"r"}
	eq		$tmp11 $tmp8 $const2 	%argrw{"wrr"}
	neq		$tmp12 $tmp11 $const1 	%argrw{"wrr"}
	assign		$tmp10 $tmp12 	%argrw{"wr"}
	if		$tmp10 26 26 	%argrw{"r"}
# PxrColorCorrect.osl:43
#         return f;
	assign		$tmp5 $tmp6 	%line{43} %argrw{"wr"}
	return
# PxrColorCorrect.osl:45
#     if (min == max)
	eq		$tmp13 $tmp7 $tmp8 	%line{45} %argrw{"wrr"}
	if		$tmp13 33 33 	%argrw{"r"}
# PxrColorCorrect.osl:47
#         return ((f < min) ? 0.0 : 1.0);
	lt		$tmp14 $tmp6 $tmp7 	%line{47} %argrw{"wrr"}
	if		$tmp14 31 32 	%argrw{"r"}
	assign		$tmp5 $const3 	%argrw{"wr"}
	assign		$tmp5 $const2 	%argrw{"wr"}
	return
# PxrColorCorrect.osl:49
#     return ((f - min) / (max - min));
	sub		$tmp15 $tmp6 $tmp7 	%line{49} %argrw{"wrr"}
	sub		$tmp16 $tmp8 $tmp7 	%argrw{"wrr"}
	div		$tmp5 $tmp15 $tmp16 	%argrw{"wrr"}
	return
# PxrColorCorrect.osl:57
#         result[i] = RixInputRange(rgb[i], min[i], max[i]);
	compassign	___328_result ___329_i $tmp5 	%line{57} %argrw{"wrr"}
# PxrColorCorrect.osl:55
#     for (int i = 0; i < 3; i++)
	assign		$tmp17 ___329_i 	%line{55} %argrw{"wr"}
	add		___329_i ___329_i $const6 	%argrw{"wrr"}
# PxrColorCorrect.osl:59
#     return result;
	assign		resultRGB ___328_result 	%line{59} %argrw{"wr"}
# PxrColorCorrect.osl:333
#         resultRGB = RixGamma(resultRGB, gamma);
	functioncall	$const7 79 	%line{333} %argrw{"r"}
# PxrColorCorrect.osl:93
#     result[0] = RixGamma(rgb[0], g[0]);
	compref		$tmp19 resultRGB $const1 	%line{93} %argrw{"wrr"}
	compref		$tmp20 gamma $const1 	%argrw{"wrr"}
	functioncall	$const7 53 	%argrw{"r"}
# PxrColorCorrect.osl:83
#     if (g != 1.0)
	neq		$tmp21 $tmp20 $const2 	%line{83} %argrw{"wrr"}
	if		$tmp21 52 52 	%argrw{"r"}
# PxrColorCorrect.osl:85
#         return pow(max(f, 0.0), 1.0 / max(g, 1e-5));
	max		$tmp22 $tmp19 $const3 	%line{85} %argrw{"wrr"}
	max		$tmp23 $tmp20 $const8 	%argrw{"wrr"}
	div		$tmp24 $const2 $tmp23 	%argrw{"wrr"}
	pow		$tmp18 $tmp22 $tmp24 	%argrw{"wrr"}
	return
# PxrColorCorrect.osl:87
#     return f;
	assign		$tmp18 $tmp19 	%line{87} %argrw{"wr"}
# PxrColorCorrect.osl:93
#     result[0] = RixGamma(rgb[0], g[0]);
	compassign	___338_result $const1 $tmp18 	%line{93} %argrw{"wrr"}
# PxrColorCorrect.osl:94
#     result[1] = RixGamma(rgb[1], g[1]);
	compref		$tmp26 resultRGB $const6 	%line{94} %argrw{"wrr"}
	compref		$tmp27 gamma $const6 	%argrw{"wrr"}
	functioncall	$const7 65 	%argrw{"r"}
# PxrColorCorrect.osl:83
#     if (g != 1.0)
	neq		$tmp28 $tmp27 $const2 	%line{83} %argrw{"wrr"}
	if		$tmp28 64 64 	%argrw{"r"}
# PxrColorCorrect.osl:85
#         return pow(max(f, 0.0), 1.0 / max(g, 1e-5));
	max		$tmp29 $tmp26 $const3 	%line{85} %argrw{"wrr"}
	max		$tmp30 $tmp27 $const8 	%argrw{"wrr"}
	div		$tmp31 $const2 $tmp30 	%argrw{"wrr"}
	pow		$tmp25 $tmp29 $tmp31 	%argrw{"wrr"}
	return
# PxrColorCorrect.osl:87
#     return f;
	assign		$tmp25 $tmp26 	%line{87} %argrw{"wr"}
# PxrColorCorrect.osl:94
#     result[1] = RixGamma(rgb[1], g[1]);
	compassign	___338_result $const6 $tmp25 	%line{94} %argrw{"wrr"}
# PxrColorCorrect.osl:95
#     result[2] = RixGamma(rgb[2], g[2]);
	compref		$tmp33 resultRGB $const9 	%line{95} %argrw{"wrr"}
	compref		$tmp34 gamma $const9 	%argrw{"wrr"}
	functioncall	$const7 77 	%argrw{"r"}
# PxrColorCorrect.osl:83
#     if (g != 1.0)
	neq		$tmp35 $tmp34 $const2 	%line{83} %argrw{"wrr"}
	if		$tmp35 76 76 	%argrw{"r"}
# PxrColorCorrect.osl:85
#         return pow(max(f, 0.0), 1.0 / max(g, 1e-5));
	max		$tmp36 $tmp33 $const3 	%line{85} %argrw{"wrr"}
	max		$tmp37 $tmp34 $const8 	%argrw{"wrr"}
	div		$tmp38 $const2 $tmp37 	%argrw{"wrr"}
	pow		$tmp32 $tmp36 $tmp38 	%argrw{"wrr"}
	return
# PxrColorCorrect.osl:87
#     return f;
	assign		$tmp32 $tmp33 	%line{87} %argrw{"wr"}
# PxrColorCorrect.osl:95
#     result[2] = RixGamma(rgb[2], g[2]);
	compassign	___338_result $const9 $tmp32 	%line{95} %argrw{"wrr"}
# PxrColorCorrect.osl:96
#     return result;
	assign		resultRGB ___338_result 	%line{96} %argrw{"wr"}
# PxrColorCorrect.osl:334
#         resultRGB = RixContrast(resultRGB, contrast, contrastPivot);
	functioncall	$const10 126 	%line{334} %argrw{"r"}
# PxrColorCorrect.osl:128
#     for (int i = 0; i < 3; i++)
	for		$tmp40 82 84 123 125 	%line{128} %argrw{"r"}
	assign		___344_i $const1 	%argrw{"wr"}
	lt		$tmp39 ___344_i $const5 	%argrw{"wrr"}
	neq		$tmp40 $tmp39 $const1 	%argrw{"wrr"}
# PxrColorCorrect.osl:130
#         result[i] = RixContrast(rgb[i], contrast[i], pivot[i]);
	compref		$tmp42 resultRGB ___344_i 	%line{130} %argrw{"wrr"}
	compref		$tmp43 contrast ___344_i 	%argrw{"wrr"}
	compref		$tmp44 contrastPivot ___344_i 	%argrw{"wrr"}
	functioncall	$const10 122 	%argrw{"r"}
# PxrColorCorrect.osl:101
#     if (contrast == 0.0 || f == pivot)
	eq		$tmp45 $tmp43 $const3 	%line{101} %argrw{"wrr"}
	neq		$tmp46 $tmp45 $const1 	%argrw{"wrr"}
	if		$tmp46 91 94 	%argrw{"r"}
	eq		$tmp47 $tmp42 $tmp44 	%argrw{"wrr"}
	neq		$tmp48 $tmp47 $const1 	%argrw{"wrr"}
	assign		$tmp46 $tmp48 	%argrw{"wr"}
	if		$tmp46 97 97 	%argrw{"r"}
# PxrColorCorrect.osl:103
#         return f;
	assign		$tmp41 $tmp42 	%line{103} %argrw{"wr"}
	return
# PxrColorCorrect.osl:106
#     float result = f;
	assign		___339_result $tmp42 	%line{106} %argrw{"wr"}
# PxrColorCorrect.osl:107
#     float C = (clamp(contrast, -1.0, 1.0) * 0.5) + 0.5;
	functioncall	$const12 101 	%line{107} %argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp50 $tmp43 $const2 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		$tmp49 $tmp50 $const11 	%argrw{"wrr"}
# PxrColorCorrect.osl:107
#     float C = (clamp(contrast, -1.0, 1.0) * 0.5) + 0.5;
	mul		$tmp51 $tmp49 $const13 	%filename{"PxrColorCorrect.osl"} %line{107} %argrw{"wrr"}
	add		___339_C $tmp51 $const13 	%argrw{"wrr"}
# PxrColorCorrect.osl:108
#     C = min(C, 0.999);
	min		___339_C ___339_C $const14 	%line{108} %argrw{"wrr"}
# PxrColorCorrect.osl:109
#     float power = log(1.0 - C) / F_LOGDOTFIVE;
	sub		$tmp53 $const2 ___339_C 	%line{109} %argrw{"wrr"}
	log		$tmp52 $tmp53 	%argrw{"wr"}
	div		___339_power $tmp52 $const15 	%argrw{"wrr"}
# PxrColorCorrect.osl:110
#     if (f < pivot)
	lt		$tmp54 $tmp42 $tmp44 	%line{110} %argrw{"wrr"}
	if		$tmp54 112 121 	%argrw{"r"}
# PxrColorCorrect.osl:112
#         result = f / pivot;
	div		___339_result $tmp42 $tmp44 	%line{112} %argrw{"wrr"}
# PxrColorCorrect.osl:113
#         result = pow(result, power);
	pow		___339_result ___339_result ___339_power 	%line{113} %argrw{"wrr"}
# PxrColorCorrect.osl:114
#         result *= pivot;
	mul		___339_result ___339_result $tmp44 	%line{114} %argrw{"wrr"}
# PxrColorCorrect.osl:118
#         result = (f - pivot) / (1.0 - pivot);
	sub		$tmp55 $tmp42 $tmp44 	%line{118} %argrw{"wrr"}
	sub		$tmp56 $const2 $tmp44 	%argrw{"wrr"}
	div		___339_result $tmp55 $tmp56 	%argrw{"wrr"}
# PxrColorCorrect.osl:119
#         result = 1.0 - pow(1.0 - result, power);
	sub		$tmp58 $const2 ___339_result 	%line{119} %argrw{"wrr"}
	pow		$tmp57 $tmp58 ___339_power 	%argrw{"wrr"}
	sub		___339_result $const2 $tmp57 	%argrw{"wrr"}
# PxrColorCorrect.osl:120
#         result *= (1.0 - pivot) + pivot;
	sub		$tmp59 $const2 $tmp44 	%line{120} %argrw{"wrr"}
	add		$tmp60 $tmp59 $tmp44 	%argrw{"wrr"}
	mul		___339_result ___339_result $tmp60 	%argrw{"wrr"}
# PxrColorCorrect.osl:122
#     return result;
	assign		$tmp41 ___339_result 	%line{122} %argrw{"wr"}
# PxrColorCorrect.osl:130
#         result[i] = RixContrast(rgb[i], contrast[i], pivot[i]);
	compassign	___343_result ___344_i $tmp41 	%line{130} %argrw{"wrr"}
# PxrColorCorrect.osl:128
#     for (int i = 0; i < 3; i++)
	assign		$tmp61 ___344_i 	%line{128} %argrw{"wr"}
	add		___344_i ___344_i $const6 	%argrw{"wrr"}
# PxrColorCorrect.osl:132
#     return result;
	assign		resultRGB ___343_result 	%line{132} %argrw{"wr"}
# PxrColorCorrect.osl:335
#         resultRGB *= rgbGain;
	mul		resultRGB resultRGB rgbGain 	%line{335} %argrw{"wrr"}
# PxrColorCorrect.osl:336
#         resultRGB = RixHsvCorrect(resultRGB, hsv);
	functioncall	$const16 150 	%line{336} %argrw{"r"}
# PxrColorCorrect.osl:138
#     tmp = transformc("rgb", "hsv", rgb);
	transformc	___346_tmp $const17 $const18 resultRGB 	%line{138} %argrw{"wrrr"}
# PxrColorCorrect.osl:140
#     tmp[0] = fmod(tmp[0] + hsv[0], 1.0);
	compref		$tmp63 ___346_tmp $const1 	%line{140} %argrw{"wrr"}
	compref		$tmp64 hsv $const1 	%argrw{"wrr"}
	add		$tmp65 $tmp63 $tmp64 	%argrw{"wrr"}
	fmod		$tmp62 $tmp65 $const2 	%argrw{"wrr"}
	compassign	___346_tmp $const1 $tmp62 	%argrw{"wrr"}
# PxrColorCorrect.osl:141
#     tmp[1] = clamp(tmp[1] * hsv[1], 0.0, 1.0);
	compref		$tmp67 ___346_tmp $const6 	%line{141} %argrw{"wrr"}
	compref		$tmp68 hsv $const6 	%argrw{"wrr"}
	mul		$tmp69 $tmp67 $tmp68 	%argrw{"wrr"}
	functioncall	$const12 140 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp70 $tmp69 $const2 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		$tmp66 $tmp70 $const3 	%argrw{"wrr"}
# PxrColorCorrect.osl:141
#     tmp[1] = clamp(tmp[1] * hsv[1], 0.0, 1.0);
	compassign	___346_tmp $const6 $tmp66 	%filename{"PxrColorCorrect.osl"} %line{141} %argrw{"wrr"}
# PxrColorCorrect.osl:142
#     tmp[2] = clamp(tmp[2] * hsv[2], 0.0, 1.0);
	compref		$tmp72 ___346_tmp $const9 	%line{142} %argrw{"wrr"}
	compref		$tmp73 hsv $const9 	%argrw{"wrr"}
	mul		$tmp74 $tmp72 $tmp73 	%argrw{"wrr"}
	functioncall	$const12 147 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp75 $tmp74 $const2 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		$tmp71 $tmp75 $const3 	%argrw{"wrr"}
# PxrColorCorrect.osl:142
#     tmp[2] = clamp(tmp[2] * hsv[2], 0.0, 1.0);
	compassign	___346_tmp $const9 $tmp71 	%filename{"PxrColorCorrect.osl"} %line{142} %argrw{"wrr"}
# PxrColorCorrect.osl:143
#     result = transformc("hsv", "rgb", tmp);
	transformc	___346_result $const18 $const17 ___346_tmp 	%line{143} %argrw{"wrrr"}
# PxrColorCorrect.osl:145
#     return result;
	assign		resultRGB ___346_result 	%line{145} %argrw{"wr"}
# PxrColorCorrect.osl:337
#         resultRGB = RixExposure(resultRGB, exposure);
	functioncall	$const19 165 	%line{337} %argrw{"r"}
# PxrColorCorrect.osl:150
#     color result = rgb;
	assign		___347_result resultRGB 	%line{150} %argrw{"wr"}
# PxrColorCorrect.osl:151
#     if (e != 0.0)
	neq		$tmp76 exposure $const3 	%line{151} %argrw{"wrr"}
	if		$tmp76 164 164 	%argrw{"r"}
# PxrColorCorrect.osl:153
#         float exposure = pow(2.0, e);
	pow		___348_exposure $const20 exposure 	%line{153} %argrw{"wrr"}
# PxrColorCorrect.osl:154
#         result[0] *= exposure;
	compref		$tmp77 ___347_result $const1 	%line{154} %argrw{"wrr"}
	mul		$tmp78 $tmp77 ___348_exposure 	%argrw{"wrr"}
	compassign	___347_result $const1 $tmp78 	%argrw{"wrr"}
# PxrColorCorrect.osl:155
#         result[1] *= exposure;
	compref		$tmp79 ___347_result $const6 	%line{155} %argrw{"wrr"}
	mul		$tmp80 $tmp79 ___348_exposure 	%argrw{"wrr"}
	compassign	___347_result $const6 $tmp80 	%argrw{"wrr"}
# PxrColorCorrect.osl:156
#         result[2] *= exposure;
	compref		$tmp81 ___347_result $const9 	%line{156} %argrw{"wrr"}
	mul		$tmp82 $tmp81 ___348_exposure 	%argrw{"wrr"}
	compassign	___347_result $const9 $tmp82 	%argrw{"wrr"}
# PxrColorCorrect.osl:158
#     return result;
	assign		resultRGB ___347_result 	%line{158} %argrw{"wr"}
# PxrColorCorrect.osl:338
#         resultRGB = RixOutputRange(resultRGB, outputMin, outputMax);
	functioncall	$const21 190 	%line{338} %argrw{"r"}
# PxrColorCorrect.osl:74
#     for (int i = 0; i < 3; i++)
	for		$tmp84 168 170 187 189 	%line{74} %argrw{"r"}
	assign		___334_i $const1 	%argrw{"wr"}
	lt		$tmp83 ___334_i $const5 	%argrw{"wrr"}
	neq		$tmp84 $tmp83 $const1 	%argrw{"wrr"}
# PxrColorCorrect.osl:76
#         result[i] = RixOutputRange(rgb[i], min[i], max[i]);
	compref		$tmp86 resultRGB ___334_i 	%line{76} %argrw{"wrr"}
	compref		$tmp87 outputMin ___334_i 	%argrw{"wrr"}
	compref		$tmp88 outputMax ___334_i 	%argrw{"wrr"}
	functioncall	$const21 186 	%argrw{"r"}
# PxrColorCorrect.osl:64
#     if (min == 0.0 && max == 1.0)
	eq		$tmp89 $tmp87 $const3 	%line{64} %argrw{"wrr"}
	neq		$tmp90 $tmp89 $const1 	%argrw{"wrr"}
	if		$tmp90 180 180 	%argrw{"r"}
	eq		$tmp91 $tmp88 $const2 	%argrw{"wrr"}
	neq		$tmp92 $tmp91 $const1 	%argrw{"wrr"}
	assign		$tmp90 $tmp92 	%argrw{"wr"}
	if		$tmp90 183 183 	%argrw{"r"}
# PxrColorCorrect.osl:66
#         return f;
	assign		$tmp85 $tmp86 	%line{66} %argrw{"wr"}
	return
# PxrColorCorrect.osl:68
#     return ((max - min) * f + min);
	sub		$tmp93 $tmp88 $tmp87 	%line{68} %argrw{"wrr"}
	mul		$tmp94 $tmp93 $tmp86 	%argrw{"wrr"}
	add		$tmp85 $tmp94 $tmp87 	%argrw{"wrr"}
# PxrColorCorrect.osl:76
#         result[i] = RixOutputRange(rgb[i], min[i], max[i]);
	compassign	___333_result ___334_i $tmp85 	%line{76} %argrw{"wrr"}
# PxrColorCorrect.osl:74
#     for (int i = 0; i < 3; i++)
	assign		$tmp95 ___334_i 	%line{74} %argrw{"wr"}
	add		___334_i ___334_i $const6 	%argrw{"wrr"}
# PxrColorCorrect.osl:78
#     return result;
	assign		resultRGB ___333_result 	%line{78} %argrw{"wr"}
# PxrColorCorrect.osl:340
#         if (clampOutput != 0)
	neq		$tmp96 clampOutput $const1 	%line{340} %argrw{"wrr"}
	if		$tmp96 195 195 	%argrw{"r"}
# PxrColorCorrect.osl:342
#             resultRGB = clamp(resultRGB, clampMin, clampMax);
	functioncall	$const12 195 	%line{342} %argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:160
# vector clamp (vector x, vector minval, vector maxval) { return max(min(x,maxval),minval); }
	min		$tmp97 resultRGB clampMax 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{160} %argrw{"wrr"}
	max		resultRGB $tmp97 clampMin 	%argrw{"wrr"}
# PxrColorCorrect.osl:347
#         resultRGB = mix(inputRGB, resultRGB, maskValue);
	mix		resultRGB inputRGB resultRGB maskValue 	%filename{"PxrColorCorrect.osl"} %line{347} %argrw{"wrrr"}
# PxrColorCorrect.osl:350
#     resultR = resultRGB[0];
	compref		resultR resultRGB $const1 	%line{350} %argrw{"wrr"}
# PxrColorCorrect.osl:351
#     resultG = resultRGB[1];
	compref		resultG resultRGB $const6 	%line{351} %argrw{"wrr"}
# PxrColorCorrect.osl:352
#     resultB = resultRGB[2];
	compref		resultB resultRGB $const9 	%line{352} %argrw{"wrr"}
	end
