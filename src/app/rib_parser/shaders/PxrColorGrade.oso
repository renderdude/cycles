OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: -DOSX -I/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include -I/data/build/ratbuild/rmanshare/RIS/include -I/data/build/ratbuild/rmanshare/RIS/include/common -I/data/build/ratbuild/rmanshare/RIS/pattern/osl -I/data/build/ratbuild/rmanshare/RIS/include/osl -o /data/build/ratbuild/rmanshare/_built/osxMojave_x86-64_clang10_external_release/osl/PxrColorGrade.osl/obj/PxrColorGrade.oso
shader PxrColorGrade	%meta{int,rfm_nodeid,1233474} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/color"} %meta{string,rfh_classification,"Pattern/Color"} %meta{string,help,"A classic color grading node."} 
param	color	inputColor	1 1 1		%read{0,77} %write{2147483647,-1}
param	int	Global	1		%meta{string,widget,"checkBox"} %meta{int,connectable,0}  %read{114,114} %write{2147483647,-1}
param	color	globalSaturation	1 1 1		%meta{string,label,"Saturation"} %meta{int,color_enableFilmlookVis,0}  %read{116,120} %write{2147483647,-1}
param	color	globalContrast	1 1 1		%meta{string,label,"Contrast"} %meta{int,color_enableFilmlookVis,0}  %read{124,127} %write{2147483647,-1}
param	color	globalGamma	1 1 1		%meta{string,label,"Gamma"} %meta{int,color_enableFilmlookVis,0}  %read{132,134} %write{2147483647,-1}
param	color	globalGain	1 1 1		%meta{string,label,"Gain"} %meta{int,color_enableFilmlookVis,0}  %read{139,139} %write{2147483647,-1}
param	color	globalOffset	0 0 0		%meta{string,label,"Offset"} %meta{int,color_enableFilmlookVis,0}  %read{141,141} %write{2147483647,-1}
param	int	shadows	1		%meta{string,widget,"checkBox"} %meta{string,label,"Shadows"} %meta{string,page,"Shadows"} %meta{int,connectable,0}  %read{8,8} %write{2147483647,-1}
param	color	shadowsSaturation	1 1 1		%meta{string,label,"Saturation"} %meta{string,page,"Shadows"} %meta{int,color_enableFilmlookVis,0}  %read{15,19} %write{2147483647,-1}
param	color	shadowsContrast	1 1 1		%meta{string,label,"Contrast"} %meta{string,page,"Shadows"} %meta{int,color_enableFilmlookVis,0}  %read{23,26} %write{2147483647,-1}
param	color	shadowsGamma	1 1 1		%meta{string,label,"Gamma"} %meta{string,page,"Shadows"} %meta{int,color_enableFilmlookVis,0}  %read{31,33} %write{2147483647,-1}
param	color	shadowsGain	1 1 1		%meta{string,label,"Gain"} %meta{string,page,"Shadows"} %meta{int,color_enableFilmlookVis,0}  %read{38,38} %write{2147483647,-1}
param	color	shadowsOffset	0 0 0		%meta{string,label,"Offset"} %meta{string,page,"Shadows"} %meta{int,color_enableFilmlookVis,0}  %read{40,40} %write{2147483647,-1}
param	int	mid	1		%meta{string,widget,"checkBox"} %meta{string,label,"Mid Tones"} %meta{string,page,"Mid-Tones"} %meta{int,connectable,0}  %read{43,43} %write{2147483647,-1}
param	color	midSaturation	1 1 1		%meta{string,label,"Saturation"} %meta{string,page,"Mid-Tones"} %meta{int,color_enableFilmlookVis,0}  %read{50,54} %write{2147483647,-1}
param	color	midContrast	1 1 1		%meta{string,label,"Contrast"} %meta{string,page,"Mid-Tones"} %meta{int,color_enableFilmlookVis,0}  %read{58,61} %write{2147483647,-1}
param	color	midGamma	1 1 1		%meta{string,label,"Gamma"} %meta{string,page,"Mid-Tones"} %meta{int,color_enableFilmlookVis,0}  %read{66,68} %write{2147483647,-1}
param	color	midGain	1 1 1		%meta{string,label,"Gain"} %meta{string,page,"Mid-Tones"} %meta{int,color_enableFilmlookVis,0}  %read{73,73} %write{2147483647,-1}
param	color	midOffset	0 0 0		%meta{string,label,"Offset"} %meta{string,page,"Mid-Tones"} %meta{int,color_enableFilmlookVis,0}  %read{75,75} %write{2147483647,-1}
param	int	high	1		%meta{string,widget,"checkBox"} %meta{string,label,"Highlights"} %meta{string,page,"Highlights"} %meta{int,connectable,0}  %read{78,78} %write{2147483647,-1}
param	color	highSaturation	1 1 1		%meta{string,label,"Saturation"} %meta{string,page,"Highlights"} %meta{int,color_enableFilmlookVis,0}  %read{85,89} %write{2147483647,-1}
param	color	highContrast	1 1 1		%meta{string,label,"Contrast"} %meta{string,page,"Highlights"} %meta{int,color_enableFilmlookVis,0}  %read{93,96} %write{2147483647,-1}
param	color	highGamma	1 1 1		%meta{string,label,"Gamma"} %meta{string,page,"Highlights"} %meta{int,color_enableFilmlookVis,0}  %read{101,103} %write{2147483647,-1}
param	color	highGain	1 1 1		%meta{string,label,"Gain"} %meta{string,page,"Highlights"} %meta{int,color_enableFilmlookVis,0}  %read{108,108} %write{2147483647,-1}
param	color	highOffset	0 0 0		%meta{string,label,"Offset"} %meta{string,page,"Highlights"} %meta{int,color_enableFilmlookVis,0}  %read{110,110} %write{2147483647,-1}
param	int	clampBlack	1		%meta{string,widget,"checkBox"} %meta{string,label,"Clamp Black"} %meta{string,page,"Clamp"} %meta{int,connectable,0}  %read{142,142} %write{2147483647,-1}
param	int	clampWhite	0		%meta{string,widget,"checkBox"} %meta{string,label,"Clamp White"} %meta{string,page,"Clamp"} %meta{int,connectable,0}  %read{144,144} %write{2147483647,-1}
param	float	contrastPivot	0.180000007		%meta{float,min,0} %meta{string,label,"Contrast Pivot"} %meta{string,page,"Advanced"}  %read{25,128} %write{2147483647,-1}
param	float	shadowsRangeMin	0		%meta{float,min,0} %meta{string,label,"Shadows Range Min"} %meta{string,page,"Advanced"}  %read{1,1} %write{2147483647,-1}
param	float	shadowsRangeMax	0.0900000036		%meta{float,min,0} %meta{string,label,"Shadows Range Max"} %meta{string,page,"Advanced"}  %read{1,1} %write{2147483647,-1}
param	float	highlightsRangeMin	0.5		%meta{float,min,0} %meta{string,label,"Highlights Range Min"} %meta{string,page,"Advanced"}  %read{3,3} %write{2147483647,-1}
param	float	highlightsRangeMax	1		%meta{float,min,0} %meta{string,label,"Highlights Range Max"} %meta{string,page,"Advanced"}  %read{3,3} %write{2147483647,-1}
oparam	color	resultRGB	0 0 0		%read{118,145} %write{113,145}
local	float	lum	%read{1,3} %write{0,0}
local	float	shadWeight	%read{4,41} %write{2,2}
local	float	highWeight	%read{5,111} %write{3,3}
local	float	midWeight	%read{45,76} %write{6,6}
local	color	shadC	%read{17,112} %write{7,41}
local	color	midC	%read{52,112} %write{42,76}
local	color	highC	%read{87,113} %write{77,111}
temp	float	$tmp1	%read{2,2} %write{1,1}
const	float	$const2	1		%read{2,134} %write{2147483647,-1}
temp	float	$tmp2	%read{6,6} %write{4,4}
temp	float	$tmp3	%read{6,6} %write{5,5}
temp	int	$tmp4	%read{9,13} %write{8,12}
const	int	$const3	0		%read{8,81} %write{2147483647,-1}
temp	int	$tmp5	%read{11,11} %write{10,10}
temp	int	$tmp6	%read{12,12} %write{11,11}
const	string	$const4	"saturation"		%read{14,115} %write{2147483647,-1}
temp	int	$tmp7	%read{16,16} %write{15,15}
temp	float	$tmp8	%read{18,18} %write{17,17}
temp	color	$tmp9	%read{19,19} %write{18,18}
const	string	$const5	"contrast"		%read{22,123} %write{2147483647,-1}
temp	int	$tmp10	%read{24,24} %write{23,23}
temp	color	$tmp11	%read{27,27} %write{26,26}
temp	color	$tmp12	%read{26,26} %write{25,25}
const	string	$const6	"gamma"		%read{30,131} %write{2147483647,-1}
temp	int	$tmp13	%read{32,32} %write{31,31}
temp	color	$tmp14	%read{34,34} %write{33,33}
const	string	$const7	"gain"		%read{37,138} %write{2147483647,-1}
const	string	$const8	"offset"		%read{39,140} %write{2147483647,-1}
temp	int	$tmp15	%read{44,48} %write{43,47}
temp	int	$tmp16	%read{46,46} %write{45,45}
temp	int	$tmp17	%read{47,47} %write{46,46}
temp	int	$tmp18	%read{51,51} %write{50,50}
temp	float	$tmp19	%read{53,53} %write{52,52}
temp	color	$tmp20	%read{54,54} %write{53,53}
temp	int	$tmp21	%read{59,59} %write{58,58}
temp	color	$tmp22	%read{62,62} %write{61,61}
temp	color	$tmp23	%read{61,61} %write{60,60}
temp	int	$tmp24	%read{67,67} %write{66,66}
temp	color	$tmp25	%read{69,69} %write{68,68}
temp	int	$tmp26	%read{79,83} %write{78,82}
temp	int	$tmp27	%read{81,81} %write{80,80}
temp	int	$tmp28	%read{82,82} %write{81,81}
temp	int	$tmp29	%read{86,86} %write{85,85}
temp	float	$tmp30	%read{88,88} %write{87,87}
temp	color	$tmp31	%read{89,89} %write{88,88}
temp	int	$tmp32	%read{94,94} %write{93,93}
temp	color	$tmp33	%read{97,97} %write{96,96}
temp	color	$tmp34	%read{96,96} %write{95,95}
temp	int	$tmp35	%read{102,102} %write{101,101}
temp	color	$tmp36	%read{104,104} %write{103,103}
temp	color	$tmp37	%read{113,113} %write{112,112}
temp	int	$tmp38	%read{117,117} %write{116,116}
temp	float	$tmp39	%read{119,119} %write{118,118}
temp	color	$tmp40	%read{120,120} %write{119,119}
temp	int	$tmp41	%read{125,125} %write{124,124}
temp	color	$tmp42	%read{128,128} %write{127,127}
temp	color	$tmp43	%read{127,127} %write{126,126}
temp	int	$tmp44	%read{133,133} %write{132,132}
temp	color	$tmp45	%read{135,135} %write{134,134}
const	color	$const9	0 0 0		%read{143,143} %write{2147483647,-1}
const	color	$const10	1 1 1		%read{145,145} %write{2147483647,-1}
code ___main___
# PxrColorGrade.osl:269
#     float lum = luminance(inputColor);
	luminance	lum inputColor 	%filename{"PxrColorGrade.osl"} %line{269} %argrw{"wr"}
# PxrColorGrade.osl:270
#     float shadWeight = 1 - smoothstep(shadowsRangeMin, shadowsRangeMax, lum);
	smoothstep	$tmp1 shadowsRangeMin shadowsRangeMax lum 	%line{270} %argrw{"wrrr"}
	sub		shadWeight $const2 $tmp1 	%argrw{"wrr"}
# PxrColorGrade.osl:271
#     float highWeight = smoothstep(highlightsRangeMin, highlightsRangeMax, lum);
	smoothstep	highWeight highlightsRangeMin highlightsRangeMax lum 	%line{271} %argrw{"wrrr"}
# PxrColorGrade.osl:272
#     float midWeight = (1 - shadWeight) * (1 - highWeight);
	sub		$tmp2 $const2 shadWeight 	%line{272} %argrw{"wrr"}
	sub		$tmp3 $const2 highWeight 	%argrw{"wrr"}
	mul		midWeight $tmp2 $tmp3 	%argrw{"wrr"}
# PxrColorGrade.osl:274
#     color shadC = inputColor;
	assign		shadC inputColor 	%line{274} %argrw{"wr"}
# PxrColorGrade.osl:275
#     if (shadows && shadWeight > 0)
	neq		$tmp4 shadows $const3 	%line{275} %argrw{"wrr"}
	if		$tmp4 13 13 	%argrw{"r"}
	gt		$tmp5 shadWeight $const3 	%argrw{"wrr"}
	neq		$tmp6 $tmp5 $const3 	%argrw{"wrr"}
	assign		$tmp4 $tmp6 	%argrw{"wr"}
	if		$tmp4 41 41 	%argrw{"r"}
# PxrColorGrade.osl:277
#         shadC = saturation(shadC, shadowsSaturation);
	functioncall	$const4 22 	%line{277} %argrw{"r"}
# PxrColorGrade.osl:40
#     return sat != 1.0 ? mix(luminance(in), in, sat) : in;
	neq		$tmp7 shadowsSaturation $const2 	%line{40} %argrw{"wrr"}
	if		$tmp7 20 21 	%argrw{"r"}
	luminance	$tmp8 shadC 	%argrw{"wr"}
	assign		$tmp9 $tmp8 	%argrw{"wr"}
	mix		shadC $tmp9 shadC shadowsSaturation 	%argrw{"wrrr"}
	assign		shadC shadC 	%argrw{"wr"}
	return
# PxrColorGrade.osl:278
#         shadC = contrast(shadC,  contrastPivot, shadowsContrast);
	functioncall	$const5 30 	%line{278} %argrw{"r"}
# PxrColorGrade.osl:45
#     return con != 1.0 ? pow(in / pivot, con) * pivot : in;
	neq		$tmp10 shadowsContrast $const2 	%line{45} %argrw{"wrr"}
	if		$tmp10 28 29 	%argrw{"r"}
	div		$tmp12 shadC contrastPivot 	%argrw{"wrr"}
	pow		$tmp11 $tmp12 shadowsContrast 	%argrw{"wrr"}
	mul		shadC $tmp11 contrastPivot 	%argrw{"wrr"}
	assign		shadC shadC 	%argrw{"wr"}
	return
# PxrColorGrade.osl:279
#         shadC = gamma(shadC, shadowsGamma);
	functioncall	$const6 37 	%line{279} %argrw{"r"}
# PxrColorGrade.osl:50
#     return gam != 1.0 ? pow(in, 1.0/gam) : in;
	neq		$tmp13 shadowsGamma $const2 	%line{50} %argrw{"wrr"}
	if		$tmp13 35 36 	%argrw{"r"}
	div		$tmp14 $const2 shadowsGamma 	%argrw{"wrr"}
	pow		shadC shadC $tmp14 	%argrw{"wrr"}
	assign		shadC shadC 	%argrw{"wr"}
	return
# PxrColorGrade.osl:280
#         shadC = gain(shadC, shadowsGain);
	functioncall	$const7 39 	%line{280} %argrw{"r"}
# PxrColorGrade.osl:55
#     return in * gn;
	mul		shadC shadC shadowsGain 	%line{55} %argrw{"wrr"}
# PxrColorGrade.osl:281
#         shadC = offset(shadC, shadowsOffset);
	functioncall	$const8 41 	%line{281} %argrw{"r"}
# PxrColorGrade.osl:60
#     return in + ofst;
	add		shadC shadC shadowsOffset 	%line{60} %argrw{"wrr"}
# PxrColorGrade.osl:283
#     shadC *= shadWeight;
	mul		shadC shadC shadWeight 	%line{283} %argrw{"wrr"}
# PxrColorGrade.osl:285
#     color midC = inputColor;
	assign		midC inputColor 	%line{285} %argrw{"wr"}
# PxrColorGrade.osl:286
#     if (mid && midWeight > 0)
	neq		$tmp15 mid $const3 	%line{286} %argrw{"wrr"}
	if		$tmp15 48 48 	%argrw{"r"}
	gt		$tmp16 midWeight $const3 	%argrw{"wrr"}
	neq		$tmp17 $tmp16 $const3 	%argrw{"wrr"}
	assign		$tmp15 $tmp17 	%argrw{"wr"}
	if		$tmp15 76 76 	%argrw{"r"}
# PxrColorGrade.osl:288
#         midC = saturation(midC, midSaturation);
	functioncall	$const4 57 	%line{288} %argrw{"r"}
# PxrColorGrade.osl:40
#     return sat != 1.0 ? mix(luminance(in), in, sat) : in;
	neq		$tmp18 midSaturation $const2 	%line{40} %argrw{"wrr"}
	if		$tmp18 55 56 	%argrw{"r"}
	luminance	$tmp19 midC 	%argrw{"wr"}
	assign		$tmp20 $tmp19 	%argrw{"wr"}
	mix		midC $tmp20 midC midSaturation 	%argrw{"wrrr"}
	assign		midC midC 	%argrw{"wr"}
	return
# PxrColorGrade.osl:289
#         midC = contrast(midC,  contrastPivot, midContrast);
	functioncall	$const5 65 	%line{289} %argrw{"r"}
# PxrColorGrade.osl:45
#     return con != 1.0 ? pow(in / pivot, con) * pivot : in;
	neq		$tmp21 midContrast $const2 	%line{45} %argrw{"wrr"}
	if		$tmp21 63 64 	%argrw{"r"}
	div		$tmp23 midC contrastPivot 	%argrw{"wrr"}
	pow		$tmp22 $tmp23 midContrast 	%argrw{"wrr"}
	mul		midC $tmp22 contrastPivot 	%argrw{"wrr"}
	assign		midC midC 	%argrw{"wr"}
	return
# PxrColorGrade.osl:290
#         midC = gamma(midC, midGamma);
	functioncall	$const6 72 	%line{290} %argrw{"r"}
# PxrColorGrade.osl:50
#     return gam != 1.0 ? pow(in, 1.0/gam) : in;
	neq		$tmp24 midGamma $const2 	%line{50} %argrw{"wrr"}
	if		$tmp24 70 71 	%argrw{"r"}
	div		$tmp25 $const2 midGamma 	%argrw{"wrr"}
	pow		midC midC $tmp25 	%argrw{"wrr"}
	assign		midC midC 	%argrw{"wr"}
	return
# PxrColorGrade.osl:291
#         midC = gain(midC, midGain);
	functioncall	$const7 74 	%line{291} %argrw{"r"}
# PxrColorGrade.osl:55
#     return in * gn;
	mul		midC midC midGain 	%line{55} %argrw{"wrr"}
# PxrColorGrade.osl:292
#         midC = offset(midC, midOffset);
	functioncall	$const8 76 	%line{292} %argrw{"r"}
# PxrColorGrade.osl:60
#     return in + ofst;
	add		midC midC midOffset 	%line{60} %argrw{"wrr"}
# PxrColorGrade.osl:294
#     midC *= midWeight;
	mul		midC midC midWeight 	%line{294} %argrw{"wrr"}
# PxrColorGrade.osl:296
#     color highC = inputColor;
	assign		highC inputColor 	%line{296} %argrw{"wr"}
# PxrColorGrade.osl:297
#     if (high && highWeight > 0)
	neq		$tmp26 high $const3 	%line{297} %argrw{"wrr"}
	if		$tmp26 83 83 	%argrw{"r"}
	gt		$tmp27 highWeight $const3 	%argrw{"wrr"}
	neq		$tmp28 $tmp27 $const3 	%argrw{"wrr"}
	assign		$tmp26 $tmp28 	%argrw{"wr"}
	if		$tmp26 111 111 	%argrw{"r"}
# PxrColorGrade.osl:299
#         highC = saturation(highC, highSaturation);
	functioncall	$const4 92 	%line{299} %argrw{"r"}
# PxrColorGrade.osl:40
#     return sat != 1.0 ? mix(luminance(in), in, sat) : in;
	neq		$tmp29 highSaturation $const2 	%line{40} %argrw{"wrr"}
	if		$tmp29 90 91 	%argrw{"r"}
	luminance	$tmp30 highC 	%argrw{"wr"}
	assign		$tmp31 $tmp30 	%argrw{"wr"}
	mix		highC $tmp31 highC highSaturation 	%argrw{"wrrr"}
	assign		highC highC 	%argrw{"wr"}
	return
# PxrColorGrade.osl:300
#         highC = contrast(highC,  contrastPivot, highContrast);
	functioncall	$const5 100 	%line{300} %argrw{"r"}
# PxrColorGrade.osl:45
#     return con != 1.0 ? pow(in / pivot, con) * pivot : in;
	neq		$tmp32 highContrast $const2 	%line{45} %argrw{"wrr"}
	if		$tmp32 98 99 	%argrw{"r"}
	div		$tmp34 highC contrastPivot 	%argrw{"wrr"}
	pow		$tmp33 $tmp34 highContrast 	%argrw{"wrr"}
	mul		highC $tmp33 contrastPivot 	%argrw{"wrr"}
	assign		highC highC 	%argrw{"wr"}
	return
# PxrColorGrade.osl:301
#         highC = gamma(highC, highGamma);
	functioncall	$const6 107 	%line{301} %argrw{"r"}
# PxrColorGrade.osl:50
#     return gam != 1.0 ? pow(in, 1.0/gam) : in;
	neq		$tmp35 highGamma $const2 	%line{50} %argrw{"wrr"}
	if		$tmp35 105 106 	%argrw{"r"}
	div		$tmp36 $const2 highGamma 	%argrw{"wrr"}
	pow		highC highC $tmp36 	%argrw{"wrr"}
	assign		highC highC 	%argrw{"wr"}
	return
# PxrColorGrade.osl:302
#         highC = gain(highC, highGain);
	functioncall	$const7 109 	%line{302} %argrw{"r"}
# PxrColorGrade.osl:55
#     return in * gn;
	mul		highC highC highGain 	%line{55} %argrw{"wrr"}
# PxrColorGrade.osl:303
#         highC = offset(highC, highOffset);
	functioncall	$const8 111 	%line{303} %argrw{"r"}
# PxrColorGrade.osl:60
#     return in + ofst;
	add		highC highC highOffset 	%line{60} %argrw{"wrr"}
# PxrColorGrade.osl:305
#     highC *= highWeight;
	mul		highC highC highWeight 	%line{305} %argrw{"wrr"}
# PxrColorGrade.osl:307
#     resultRGB = shadC + midC + highC;
	add		$tmp37 shadC midC 	%line{307} %argrw{"wrr"}
	add		resultRGB $tmp37 highC 	%argrw{"wrr"}
# PxrColorGrade.osl:308
#     if (Global)
	if		Global 142 142 	%line{308} %argrw{"r"}
# PxrColorGrade.osl:310
#         resultRGB = saturation(resultRGB, globalSaturation);
	functioncall	$const4 123 	%line{310} %argrw{"r"}
# PxrColorGrade.osl:40
#     return sat != 1.0 ? mix(luminance(in), in, sat) : in;
	neq		$tmp38 globalSaturation $const2 	%line{40} %argrw{"wrr"}
	if		$tmp38 121 122 	%argrw{"r"}
	luminance	$tmp39 resultRGB 	%argrw{"wr"}
	assign		$tmp40 $tmp39 	%argrw{"wr"}
	mix		resultRGB $tmp40 resultRGB globalSaturation 	%argrw{"wrrr"}
	assign		resultRGB resultRGB 	%argrw{"wr"}
	return
# PxrColorGrade.osl:311
#         resultRGB = contrast(resultRGB,  contrastPivot, globalContrast);
	functioncall	$const5 131 	%line{311} %argrw{"r"}
# PxrColorGrade.osl:45
#     return con != 1.0 ? pow(in / pivot, con) * pivot : in;
	neq		$tmp41 globalContrast $const2 	%line{45} %argrw{"wrr"}
	if		$tmp41 129 130 	%argrw{"r"}
	div		$tmp43 resultRGB contrastPivot 	%argrw{"wrr"}
	pow		$tmp42 $tmp43 globalContrast 	%argrw{"wrr"}
	mul		resultRGB $tmp42 contrastPivot 	%argrw{"wrr"}
	assign		resultRGB resultRGB 	%argrw{"wr"}
	return
# PxrColorGrade.osl:312
#         resultRGB = gamma(resultRGB, globalGamma);
	functioncall	$const6 138 	%line{312} %argrw{"r"}
# PxrColorGrade.osl:50
#     return gam != 1.0 ? pow(in, 1.0/gam) : in;
	neq		$tmp44 globalGamma $const2 	%line{50} %argrw{"wrr"}
	if		$tmp44 136 137 	%argrw{"r"}
	div		$tmp45 $const2 globalGamma 	%argrw{"wrr"}
	pow		resultRGB resultRGB $tmp45 	%argrw{"wrr"}
	assign		resultRGB resultRGB 	%argrw{"wr"}
	return
# PxrColorGrade.osl:313
#         resultRGB = gain(resultRGB, globalGain);
	functioncall	$const7 140 	%line{313} %argrw{"r"}
# PxrColorGrade.osl:55
#     return in * gn;
	mul		resultRGB resultRGB globalGain 	%line{55} %argrw{"wrr"}
# PxrColorGrade.osl:314
#         resultRGB = offset(resultRGB, globalOffset);
	functioncall	$const8 142 	%line{314} %argrw{"r"}
# PxrColorGrade.osl:60
#     return in + ofst;
	add		resultRGB resultRGB globalOffset 	%line{60} %argrw{"wrr"}
# PxrColorGrade.osl:317
#     if (clampBlack) resultRGB = max(color(0), resultRGB);
	if		clampBlack 144 144 	%line{317} %argrw{"r"}
	max		resultRGB $const9 resultRGB 	%argrw{"wrr"}
# PxrColorGrade.osl:318
#     if (clampWhite) resultRGB = min(color(1), resultRGB);
	if		clampWhite 146 146 	%line{318} %argrw{"r"}
	min		resultRGB $const10 resultRGB 	%argrw{"wrr"}
	end
