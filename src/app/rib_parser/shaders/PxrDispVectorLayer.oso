OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: -DOSX -I/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include -I/data/build/ratbuild/rmanshare/RIS/include -I/data/build/ratbuild/rmanshare/RIS/include/common -I/data/build/ratbuild/rmanshare/RIS/pattern/osl -I/data/build/ratbuild/rmanshare/RIS/include/osl -o /data/build/ratbuild/rmanshare/_built/osxMojave_x86-64_clang10_external_release/osl/PxrDispVectorLayer.osl/obj/PxrDispVectorLayer.oso
shader PxrDispVectorLayer	%meta{int,rfm_nodeid,1053342} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/displace"} %meta{string,rfh_classification,"Pattern/Displace"} %meta{string,help,"Layer vector displacement textures/values."} 
param	float	overallAmount	1		%meta{string,widget,"default"} %meta{string,help,"Controls the gain amount of the final layered result. This is handy when we<br>want to layer several layered displacement textures by adjusting the amount that<br>controls each group of layered displacements.<br><br>overallAmount (float)"} %meta{string,label,"Overall Gain"}  %read{215,215} %write{2147483647,-1}
param	int	baseLayerEnabled	1		%meta{string,widget,"checkBox"} %meta{string,page,"Base Layer"} %meta{int,page_open,1} %meta{string,help,"Enable the base layer.  By default, this is on.  But for some case such as<br>debugging, we can disable the base layer.  It if is off, it won't be<br>contributing to the layered displacement result.<br><br>baseLayerEnabled (int)"} %meta{int,connectable,0} %meta{string,label,"Enabled"}  %read{20,20} %write{2147483647,-1}
param	float	baseLayerAmount	1		%meta{string,widget,"default"} %meta{string,page,"Base Layer"} %meta{string,help,"Gain amount for the base displacement layer.<br><br>baseLayerAmount (float)"} %meta{string,label,"Base Layer Gain"}  %read{22,22} %write{2147483647,-1}
param	vector	baseLayerDispVector	0 0 0		%meta{string,widget,"default"} %meta{string,page,"Base Layer"} %meta{string,help,"Connection to the vector displacement.<br><br>baseLayerDispVector (vector)"} %meta{string,label,"Base Layer Vector"}  %read{22,22} %write{2147483647,-1}
param	int	layer1Enabled	1		%meta{string,widget,"checkBox"} %meta{string,page,"Layer 1"} %meta{int,page_open,1} %meta{string,help,"Enable this layer.<br><br>layer1Enabled (int)"} %meta{int,connectable,0} %meta{string,label,"Enabled"}  %read{0,0} %write{2147483647,-1}
param	float	layer1Amount	1		%meta{string,widget,"default"} %meta{string,page,"Layer 1"} %meta{string,help,"Gain amount for each displacement layer.<br><br>layer1Amount (float)"} %meta{string,label,"Layer 1 Gain"}  %read{4,4} %write{2147483647,-1}
param	vector	layer1DispVector	0 0 0		%meta{string,widget,"default"} %meta{string,page,"Layer 1"} %meta{string,help,"Connection to the vector displacement.<br><br>layer1DispVector (vector)"} %meta{string,label,"Layer 1 Vector"}  %read{8,8} %write{2147483647,-1}
param	float	layer1Mask	1		%meta{string,widget,"default"} %meta{string,page,"Layer 1"} %meta{string,help,"Mask for this layer.<br><br>layer1Mask (float)"} %meta{string,label,"Layer 1 Mask"}  %read{12,12} %write{2147483647,-1}
param	int	layer1Comp	1		%meta{string,widget,"mapper"} %meta{string,page,"Layer 1"} %meta{string,help,"Choose how this layer's displacement combines with the base layer.<br><br>layer1Comp (int)"} %meta{string,options,"Add:1|Over:2|Subtract:3|Multiply:4|Average:5|Min:6|Max:7"} %meta{int,connectable,0} %meta{string,label,"Layer 1 Operation"}  %read{16,16} %write{2147483647,-1}
param	int	layer2Enabled	0		%meta{string,widget,"checkBox"} %meta{string,page,"Layer 2"} %meta{string,help,"Enable this layer.<br><br>layer2Enabled (int)"} %meta{int,connectable,0} %meta{string,label,"Enabled"}  %read{1,1} %write{2147483647,-1}
param	float	layer2Amount	1		%meta{string,widget,"default"} %meta{string,page,"Layer 2"} %meta{string,help,"Gain amount for each displacement layer.<br><br>layer2Amount (float)"} %meta{string,label,"Layer 2 Gain"}  %read{5,5} %write{2147483647,-1}
param	vector	layer2DispVector	0 0 0		%meta{string,widget,"default"} %meta{string,page,"Layer 2"} %meta{string,help,"Connection to the vector displacement.<br><br>layer2DispVector (vector)"} %meta{string,label,"Layer 2 Vector"}  %read{9,9} %write{2147483647,-1}
param	float	layer2Mask	1		%meta{string,widget,"default"} %meta{string,page,"Layer 2"} %meta{string,help,"Mask for this layer.<br><br>layer2Mask (float)"} %meta{string,label,"Layer 2 Mask"}  %read{13,13} %write{2147483647,-1}
param	int	layer2Comp	1		%meta{string,widget,"mapper"} %meta{string,page,"Layer 2"} %meta{string,help,"Choose how this layer's displacement combines with the layer 1.<br>If layer 1 is disabled, it will combine with the previous layer.<br><br>layer2Comp (int)"} %meta{string,options,"Add:1|Over:2|Subtract:3|Multiply:4|Average:5|Min:6|Max:7"} %meta{int,connectable,0} %meta{string,label,"Layer 2 Operation"}  %read{17,17} %write{2147483647,-1}
param	int	layer3Enabled	0		%meta{string,widget,"checkBox"} %meta{string,page,"Layer 3"} %meta{string,help,"Enable this layer.<br><br>layer3Enabled (int)"} %meta{int,connectable,0} %meta{string,label,"Enabled"}  %read{2,2} %write{2147483647,-1}
param	float	layer3Amount	1		%meta{string,widget,"default"} %meta{string,page,"Layer 3"} %meta{string,help,"Gain amount for each displacement layer.<br><br>layer3Amount (float)"} %meta{string,label,"Layer 3 Gain"}  %read{6,6} %write{2147483647,-1}
param	vector	layer3DispVector	0 0 0		%meta{string,widget,"default"} %meta{string,page,"Layer 3"} %meta{string,help,"Connection to the vector displacement.<br><br>layer3DispVector (vector)"} %meta{string,label,"Layer 3 Vector"}  %read{10,10} %write{2147483647,-1}
param	float	layer3Mask	1		%meta{string,widget,"default"} %meta{string,page,"Layer 3"} %meta{string,help,"Mask for this layer.<br><br>layer3Mask (float)"} %meta{string,label,"Layer 3 Mask"}  %read{14,14} %write{2147483647,-1}
param	int	layer3Comp	1		%meta{string,widget,"mapper"} %meta{string,page,"Layer 3"} %meta{string,help,"Choose how this layer's displacement combines with the layer 2.<br>If layer 2 is disabled, it will combine with the previous layer.<br><br>layer3Comp (int)"} %meta{string,options,"Add:1|Over:2|Subtract:3|Multiply:4|Average:5|Min:6|Max:7"} %meta{int,connectable,0} %meta{string,label,"Layer 3 Operation"}  %read{18,18} %write{2147483647,-1}
param	int	layer4Enabled	0		%meta{string,widget,"checkBox"} %meta{string,page,"Layer 4"} %meta{string,help,"Enable this layer.<br><br>layer4Enabled (int)"} %meta{int,connectable,0} %meta{string,label,"Enabled"}  %read{3,3} %write{2147483647,-1}
param	float	layer4Amount	1		%meta{string,widget,"default"} %meta{string,page,"Layer 4"} %meta{string,help,"Gain amount for each displacement layer.<br><br>layer4Amount (float)"} %meta{string,label,"Layer 4 Gain"}  %read{7,7} %write{2147483647,-1}
param	vector	layer4DispVector	0 0 0		%meta{string,widget,"default"} %meta{string,page,"Layer 4"} %meta{string,help,"Connection to the vector displacement.<br><br>layer4DispVector (vector)"} %meta{string,label,"Layer 4 Vector"}  %read{11,11} %write{2147483647,-1}
param	float	layer4Mask	1		%meta{string,widget,"default"} %meta{string,page,"Layer 4"} %meta{string,help,"Mask for this layer.<br><br>layer4Mask (float)"} %meta{string,label,"Layer 4 Mask"}  %read{15,15} %write{2147483647,-1}
param	int	layer4Comp	1		%meta{string,widget,"mapper"} %meta{string,page,"Layer 4"} %meta{string,help,"Choose how this layer's displacement combines with the layer 3.<br>If layer 3 is disabled, it will combine with the previous layer.<br><br>layer4Comp (int)"} %meta{string,options,"Add:1|Over:2|Multiply:3|Average:4|Min:5|Max:6"} %meta{int,connectable,0} %meta{string,label,"Layer 4 Operation"}  %read{19,19} %write{2147483647,-1}
oparam	vector	resultXYZ	0 0 0		%meta{string,help,"resultXYZ (vector)"}  %read{26,220} %write{22,215}
oparam	float	resultX	0		%meta{string,help,"resultX (float)"}  %read{217,217} %write{217,217}
oparam	float	resultY	0		%meta{string,help,"resultY (float)"}  %read{219,219} %write{219,219}
oparam	float	resultZ	0		%meta{string,help,"resultZ (float)"}  %read{221,221} %write{221,221}
local	vector	___326_outputVector	%read{26,214} %write{26,214}
local	int[4]	enabled	%read{26,214} %write{0,3}
local	float[4]	amounts	%read{26,214} %write{4,7}
local	vector[4]	dispVectors	%read{26,214} %write{8,11}
local	float[4]	masks	%read{26,214} %write{12,15}
local	int[4]	comps	%read{26,214} %write{16,19}
local	int	___335_l	%read{26,214} %write{25,214}
const	int	$const1	0		%read{0,216} %write{2147483647,-1}
const	int	$const2	1		%read{1,218} %write{2147483647,-1}
const	int	$const3	2		%read{2,220} %write{2147483647,-1}
const	int	$const4	3		%read{3,76} %write{2147483647,-1}
temp	int	$tmp1	%read{21,21} %write{20,20}
const	float	$const5	0		%read{23,23} %write{2147483647,-1}
const	int	$const6	4		%read{26,99} %write{2147483647,-1}
temp	int	$tmp2	%read{26,214} %write{26,214}
temp	int	$tmp3	%read{24,214} %write{25,214}
temp	int	$tmp4	%read{26,214} %write{26,214}
temp	vector	$tmp5	%read{26,214} %write{26,214}
temp	float	$tmp6	%read{26,214} %write{26,214}
temp	int	$tmp7	%read{26,214} %write{26,214}
temp	float	$tmp8	%read{26,214} %write{26,214}
const	string	$const7	"computeLayerDispVectors"		%read{34,34} %write{2147483647,-1}
const	vector	$const8	1 1 1		%read{35,35} %write{2147483647,-1}
temp	int	$tmp9	%read{26,214} %write{26,214}
temp	float	$tmp10	%read{26,214} %write{26,214}
temp	float	$tmp11	%read{26,214} %write{26,214}
temp	float	$tmp12	%read{26,214} %write{26,214}
temp	float	$tmp13	%read{26,214} %write{26,214}
temp	float	$tmp14	%read{26,214} %write{26,214}
temp	float	$tmp15	%read{26,214} %write{26,214}
temp	float	$tmp16	%read{26,214} %write{26,214}
temp	float	$tmp17	%read{26,214} %write{26,214}
temp	float	$tmp18	%read{26,214} %write{26,214}
temp	float	$tmp19	%read{26,214} %write{26,214}
temp	float	$tmp20	%read{26,214} %write{26,214}
temp	float	$tmp21	%read{26,214} %write{26,214}
temp	float	$tmp22	%read{26,214} %write{26,214}
temp	float	$tmp23	%read{26,214} %write{26,214}
temp	float	$tmp24	%read{26,214} %write{26,214}
temp	float	$tmp25	%read{26,214} %write{26,214}
temp	float	$tmp26	%read{26,214} %write{26,214}
temp	float	$tmp27	%read{26,214} %write{26,214}
temp	int	$tmp28	%read{26,214} %write{26,214}
temp	float	$tmp29	%read{26,214} %write{26,214}
temp	float	$tmp30	%read{26,214} %write{26,214}
temp	float	$tmp31	%read{26,214} %write{26,214}
temp	float	$tmp32	%read{26,214} %write{26,214}
temp	float	$tmp33	%read{26,214} %write{26,214}
temp	float	$tmp34	%read{26,214} %write{26,214}
temp	float	$tmp35	%read{26,214} %write{26,214}
temp	float	$tmp36	%read{26,214} %write{26,214}
temp	float	$tmp37	%read{26,214} %write{26,214}
temp	float	$tmp38	%read{26,214} %write{26,214}
temp	float	$tmp39	%read{26,214} %write{26,214}
temp	float	$tmp40	%read{26,214} %write{26,214}
temp	int	$tmp41	%read{26,214} %write{26,214}
temp	float	$tmp42	%read{26,214} %write{26,214}
temp	float	$tmp43	%read{26,214} %write{26,214}
temp	float	$tmp44	%read{26,214} %write{26,214}
temp	float	$tmp45	%read{26,214} %write{26,214}
temp	float	$tmp46	%read{26,214} %write{26,214}
temp	float	$tmp47	%read{26,214} %write{26,214}
temp	float	$tmp48	%read{26,214} %write{26,214}
temp	float	$tmp49	%read{26,214} %write{26,214}
temp	float	$tmp50	%read{26,214} %write{26,214}
temp	float	$tmp51	%read{26,214} %write{26,214}
temp	float	$tmp52	%read{26,214} %write{26,214}
temp	float	$tmp53	%read{26,214} %write{26,214}
temp	float	$tmp54	%read{26,214} %write{26,214}
temp	float	$tmp55	%read{26,214} %write{26,214}
temp	float	$tmp56	%read{26,214} %write{26,214}
temp	float	$tmp57	%read{26,214} %write{26,214}
temp	float	$tmp58	%read{26,214} %write{26,214}
temp	float	$tmp59	%read{26,214} %write{26,214}
temp	int	$tmp60	%read{26,214} %write{26,214}
temp	float	$tmp61	%read{26,214} %write{26,214}
temp	float	$tmp62	%read{26,214} %write{26,214}
const	float	$const9	1		%read{104,116} %write{2147483647,-1}
temp	float	$tmp63	%read{26,214} %write{26,214}
temp	float	$tmp64	%read{26,214} %write{26,214}
temp	float	$tmp65	%read{26,214} %write{26,214}
temp	float	$tmp66	%read{26,214} %write{26,214}
temp	float	$tmp67	%read{26,214} %write{26,214}
temp	float	$tmp68	%read{26,214} %write{26,214}
temp	float	$tmp69	%read{26,214} %write{26,214}
temp	float	$tmp70	%read{26,214} %write{26,214}
temp	float	$tmp71	%read{26,214} %write{26,214}
temp	float	$tmp72	%read{26,214} %write{26,214}
temp	float	$tmp73	%read{26,214} %write{26,214}
temp	float	$tmp74	%read{26,214} %write{26,214}
temp	float	$tmp75	%read{26,214} %write{26,214}
const	int	$const10	5		%read{119,119} %write{2147483647,-1}
temp	int	$tmp76	%read{26,214} %write{26,214}
temp	float	$tmp77	%read{26,214} %write{26,214}
temp	float	$tmp78	%read{26,214} %write{26,214}
const	float	$const11	0.5		%read{126,142} %write{2147483647,-1}
temp	float	$tmp79	%read{26,214} %write{26,214}
temp	float	$tmp80	%read{26,214} %write{26,214}
temp	float	$tmp81	%read{26,214} %write{26,214}
temp	float	$tmp82	%read{26,214} %write{26,214}
temp	float	$tmp83	%read{26,214} %write{26,214}
temp	float	$tmp84	%read{26,214} %write{26,214}
temp	float	$tmp85	%read{26,214} %write{26,214}
temp	float	$tmp86	%read{26,214} %write{26,214}
temp	float	$tmp87	%read{26,214} %write{26,214}
temp	float	$tmp88	%read{26,214} %write{26,214}
temp	float	$tmp89	%read{26,214} %write{26,214}
temp	float	$tmp90	%read{26,214} %write{26,214}
temp	float	$tmp91	%read{26,214} %write{26,214}
temp	float	$tmp92	%read{26,214} %write{26,214}
temp	float	$tmp93	%read{26,214} %write{26,214}
temp	float	$tmp94	%read{26,214} %write{26,214}
temp	float	$tmp95	%read{26,214} %write{26,214}
temp	float	$tmp96	%read{26,214} %write{26,214}
temp	float	$tmp97	%read{26,214} %write{26,214}
const	int	$const12	6		%read{145,145} %write{2147483647,-1}
temp	int	$tmp98	%read{26,214} %write{26,214}
temp	float	$tmp99	%read{26,214} %write{26,214}
temp	float	$tmp100	%read{26,214} %write{26,214}
temp	float	$tmp101	%read{26,214} %write{26,214}
temp	float	$tmp102	%read{26,214} %write{26,214}
temp	float	$tmp103	%read{26,214} %write{26,214}
temp	float	$tmp104	%read{26,214} %write{26,214}
temp	float	$tmp105	%read{26,214} %write{26,214}
temp	float	$tmp106	%read{26,214} %write{26,214}
temp	float	$tmp107	%read{26,214} %write{26,214}
temp	float	$tmp108	%read{26,214} %write{26,214}
temp	float	$tmp109	%read{26,214} %write{26,214}
temp	float	$tmp110	%read{26,214} %write{26,214}
temp	float	$tmp111	%read{26,214} %write{26,214}
temp	float	$tmp112	%read{26,214} %write{26,214}
temp	float	$tmp113	%read{26,214} %write{26,214}
temp	float	$tmp114	%read{26,214} %write{26,214}
temp	float	$tmp115	%read{26,214} %write{26,214}
temp	float	$tmp116	%read{26,214} %write{26,214}
const	int	$const13	7		%read{168,168} %write{2147483647,-1}
temp	int	$tmp117	%read{26,214} %write{26,214}
temp	float	$tmp118	%read{26,214} %write{26,214}
temp	float	$tmp119	%read{26,214} %write{26,214}
temp	float	$tmp120	%read{26,214} %write{26,214}
temp	float	$tmp121	%read{26,214} %write{26,214}
temp	float	$tmp122	%read{26,214} %write{26,214}
temp	float	$tmp123	%read{26,214} %write{26,214}
temp	float	$tmp124	%read{26,214} %write{26,214}
temp	float	$tmp125	%read{26,214} %write{26,214}
temp	float	$tmp126	%read{26,214} %write{26,214}
temp	float	$tmp127	%read{26,214} %write{26,214}
temp	float	$tmp128	%read{26,214} %write{26,214}
temp	float	$tmp129	%read{26,214} %write{26,214}
temp	float	$tmp130	%read{26,214} %write{26,214}
temp	float	$tmp131	%read{26,214} %write{26,214}
temp	float	$tmp132	%read{26,214} %write{26,214}
temp	float	$tmp133	%read{26,214} %write{26,214}
temp	float	$tmp134	%read{26,214} %write{26,214}
temp	float	$tmp135	%read{26,214} %write{26,214}
temp	float	$tmp136	%read{26,214} %write{26,214}
temp	float	$tmp137	%read{26,214} %write{26,214}
temp	float	$tmp138	%read{26,214} %write{26,214}
temp	float	$tmp139	%read{26,214} %write{26,214}
temp	float	$tmp140	%read{26,214} %write{26,214}
temp	float	$tmp141	%read{26,214} %write{26,214}
temp	float	$tmp142	%read{26,214} %write{26,214}
temp	float	$tmp143	%read{26,214} %write{26,214}
temp	float	$tmp144	%read{26,214} %write{26,214}
temp	float	$tmp145	%read{26,214} %write{26,214}
temp	float	$tmp146	%read{26,214} %write{26,214}
temp	float	$tmp147	%read{26,214} %write{26,214}
temp	float	$tmp148	%read{26,214} %write{26,214}
temp	float	$tmp149	%read{26,214} %write{26,214}
temp	float	$tmp150	%read{26,214} %write{26,214}
temp	float	$tmp151	%read{26,214} %write{26,214}
temp	float	$tmp152	%read{26,214} %write{26,214}
temp	float	$tmp153	%read{26,214} %write{26,214}
temp	int	$tmp154	%read{2147483647,-1} %write{26,214}
temp	float	$tmp155	%read{217,217} %write{216,216}
temp	float	$tmp156	%read{219,219} %write{218,218}
temp	float	$tmp157	%read{221,221} %write{220,220}
code ___main___
# PxrDispVectorLayer.osl:346
#     int enabled[MAXLAYERS] = {layer1Enabled, layer2Enabled,
	aassign		enabled $const1 layer1Enabled 	%filename{"PxrDispVectorLayer.osl"} %line{346} %argrw{"wrr"}
	aassign		enabled $const2 layer2Enabled 	%argrw{"wrr"}
	aassign		enabled $const3 layer3Enabled 	%argrw{"wrr"}
	aassign		enabled $const4 layer4Enabled 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:348
#     float amounts[MAXLAYERS] = {layer1Amount, layer2Amount,
	aassign		amounts $const1 layer1Amount 	%line{348} %argrw{"wrr"}
	aassign		amounts $const2 layer2Amount 	%argrw{"wrr"}
	aassign		amounts $const3 layer3Amount 	%argrw{"wrr"}
	aassign		amounts $const4 layer4Amount 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:350
#     vector dispVectors[MAXLAYERS] = {layer1DispVector, layer2DispVector,
	aassign		dispVectors $const1 layer1DispVector 	%line{350} %argrw{"wrr"}
	aassign		dispVectors $const2 layer2DispVector 	%argrw{"wrr"}
	aassign		dispVectors $const3 layer3DispVector 	%argrw{"wrr"}
	aassign		dispVectors $const4 layer4DispVector 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:352
#     float masks[MAXLAYERS] = {layer1Mask, layer2Mask, layer3Mask, layer4Mask};
	aassign		masks $const1 layer1Mask 	%line{352} %argrw{"wrr"}
	aassign		masks $const2 layer2Mask 	%argrw{"wrr"}
	aassign		masks $const3 layer3Mask 	%argrw{"wrr"}
	aassign		masks $const4 layer4Mask 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:353
#     int comps[MAXLAYERS] = {layer1Comp, layer2Comp, layer3Comp, layer4Comp};
	aassign		comps $const1 layer1Comp 	%line{353} %argrw{"wrr"}
	aassign		comps $const2 layer2Comp 	%argrw{"wrr"}
	aassign		comps $const3 layer3Comp 	%argrw{"wrr"}
	aassign		comps $const4 layer4Comp 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:356
#     if (baseLayerEnabled == 1)
	eq		$tmp1 baseLayerEnabled $const2 	%line{356} %argrw{"wrr"}
	if		$tmp1 23 24 	%argrw{"r"}
# PxrDispVectorLayer.osl:357
#         resultXYZ = baseLayerAmount * baseLayerDispVector;
	mul		resultXYZ baseLayerAmount baseLayerDispVector 	%line{357} %argrw{"wrr"}
# PxrDispVectorLayer.osl:359
#         resultXYZ = 0.0;
	assign		resultXYZ $const5 	%line{359} %argrw{"wr"}
# PxrDispVectorLayer.osl:362
#     for (int l=0; l < MAXLAYERS; l++)
	for		$tmp3 26 28 213 215 	%line{362} %argrw{"r"}
	assign		___335_l $const1 	%argrw{"wr"}
	lt		$tmp2 ___335_l $const6 	%argrw{"wrr"}
	neq		$tmp3 $tmp2 $const1 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:364
#         if (enabled[l])
	aref		$tmp4 enabled ___335_l 	%line{364} %argrw{"wrr"}
	if		$tmp4 213 213 	%argrw{"r"}
# PxrDispVectorLayer.osl:367
#                                               dispVectors[l],
	aref		$tmp5 dispVectors ___335_l 	%line{367} %argrw{"wrr"}
# PxrDispVectorLayer.osl:368
#                                               amounts[l],
	aref		$tmp6 amounts ___335_l 	%line{368} %argrw{"wrr"}
# PxrDispVectorLayer.osl:369
#                                               comps[l], masks[l]);
	aref		$tmp7 comps ___335_l 	%line{369} %argrw{"wrr"}
	aref		$tmp8 masks ___335_l 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:366
#             resultXYZ = computeLayerDispVectors(resultXYZ,
	functioncall	$const7 213 	%line{366} %argrw{"r"}
# PxrDispVectorLayer.osl:58
#     vector outputVector = vector(1.0);
	assign		___326_outputVector $const8 	%line{58} %argrw{"wr"}
# PxrDispVectorLayer.osl:60
#     if (comp == C_ADD)
	eq		$tmp9 $tmp7 $const2 	%line{60} %argrw{"wrr"}
	if		$tmp9 59 212 	%argrw{"r"}
# PxrDispVectorLayer.osl:62
#         outputVector[0] = mix(bottom[0], bottom[0] + amount * top[0], mask);
	compref		$tmp11 resultXYZ $const1 	%line{62} %argrw{"wrr"}
	compref		$tmp12 resultXYZ $const1 	%argrw{"wrr"}
	compref		$tmp13 $tmp5 $const1 	%argrw{"wrr"}
	mul		$tmp14 $tmp6 $tmp13 	%argrw{"wrr"}
	add		$tmp15 $tmp12 $tmp14 	%argrw{"wrr"}
	mix		$tmp10 $tmp11 $tmp15 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const1 $tmp10 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:63
#         outputVector[1] = mix(bottom[1], bottom[1] + amount * top[1], mask);
	compref		$tmp17 resultXYZ $const2 	%line{63} %argrw{"wrr"}
	compref		$tmp18 resultXYZ $const2 	%argrw{"wrr"}
	compref		$tmp19 $tmp5 $const2 	%argrw{"wrr"}
	mul		$tmp20 $tmp6 $tmp19 	%argrw{"wrr"}
	add		$tmp21 $tmp18 $tmp20 	%argrw{"wrr"}
	mix		$tmp16 $tmp17 $tmp21 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const2 $tmp16 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:64
#         outputVector[2] = mix(bottom[2], bottom[2] + amount * top[2], mask);
	compref		$tmp23 resultXYZ $const3 	%line{64} %argrw{"wrr"}
	compref		$tmp24 resultXYZ $const3 	%argrw{"wrr"}
	compref		$tmp25 $tmp5 $const3 	%argrw{"wrr"}
	mul		$tmp26 $tmp6 $tmp25 	%argrw{"wrr"}
	add		$tmp27 $tmp24 $tmp26 	%argrw{"wrr"}
	mix		$tmp22 $tmp23 $tmp27 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const3 $tmp22 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:66
#     else if (comp == C_OVER)
	eq		$tmp28 $tmp7 $const3 	%line{66} %argrw{"wrr"}
	if		$tmp28 76 212 	%argrw{"r"}
# PxrDispVectorLayer.osl:68
#         outputVector[0] = mix(bottom[0], amount * top[0], mask);
	compref		$tmp30 resultXYZ $const1 	%line{68} %argrw{"wrr"}
	compref		$tmp31 $tmp5 $const1 	%argrw{"wrr"}
	mul		$tmp32 $tmp6 $tmp31 	%argrw{"wrr"}
	mix		$tmp29 $tmp30 $tmp32 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const1 $tmp29 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:69
#         outputVector[1] = mix(bottom[1], amount * top[1], mask);
	compref		$tmp34 resultXYZ $const2 	%line{69} %argrw{"wrr"}
	compref		$tmp35 $tmp5 $const2 	%argrw{"wrr"}
	mul		$tmp36 $tmp6 $tmp35 	%argrw{"wrr"}
	mix		$tmp33 $tmp34 $tmp36 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const2 $tmp33 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:70
#         outputVector[2] = mix(bottom[2], amount * top[2], mask);
	compref		$tmp38 resultXYZ $const3 	%line{70} %argrw{"wrr"}
	compref		$tmp39 $tmp5 $const3 	%argrw{"wrr"}
	mul		$tmp40 $tmp6 $tmp39 	%argrw{"wrr"}
	mix		$tmp37 $tmp38 $tmp40 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const3 $tmp37 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:72
#     else if (comp == C_SUBTRACT)
	eq		$tmp41 $tmp7 $const4 	%line{72} %argrw{"wrr"}
	if		$tmp41 99 212 	%argrw{"r"}
# PxrDispVectorLayer.osl:74
#         outputVector[0] = mix(bottom[0], bottom[0] - amount * top[0], mask);
	compref		$tmp43 resultXYZ $const1 	%line{74} %argrw{"wrr"}
	compref		$tmp44 resultXYZ $const1 	%argrw{"wrr"}
	compref		$tmp45 $tmp5 $const1 	%argrw{"wrr"}
	mul		$tmp46 $tmp6 $tmp45 	%argrw{"wrr"}
	sub		$tmp47 $tmp44 $tmp46 	%argrw{"wrr"}
	mix		$tmp42 $tmp43 $tmp47 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const1 $tmp42 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:75
#         outputVector[1] = mix(bottom[1], bottom[1] - amount * top[1], mask);
	compref		$tmp49 resultXYZ $const2 	%line{75} %argrw{"wrr"}
	compref		$tmp50 resultXYZ $const2 	%argrw{"wrr"}
	compref		$tmp51 $tmp5 $const2 	%argrw{"wrr"}
	mul		$tmp52 $tmp6 $tmp51 	%argrw{"wrr"}
	sub		$tmp53 $tmp50 $tmp52 	%argrw{"wrr"}
	mix		$tmp48 $tmp49 $tmp53 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const2 $tmp48 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:76
#         outputVector[2] = mix(bottom[2], bottom[2] - amount * top[2], mask);
	compref		$tmp55 resultXYZ $const3 	%line{76} %argrw{"wrr"}
	compref		$tmp56 resultXYZ $const3 	%argrw{"wrr"}
	compref		$tmp57 $tmp5 $const3 	%argrw{"wrr"}
	mul		$tmp58 $tmp6 $tmp57 	%argrw{"wrr"}
	sub		$tmp59 $tmp56 $tmp58 	%argrw{"wrr"}
	mix		$tmp54 $tmp55 $tmp59 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const3 $tmp54 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:78
#     else if (comp == C_MULTIPLY)
	eq		$tmp60 $tmp7 $const6 	%line{78} %argrw{"wrr"}
	if		$tmp60 119 212 	%argrw{"r"}
# PxrDispVectorLayer.osl:80
#         outputVector[0] = bottom[0] * mix(1.0, amount * top[0], mask);
	compref		$tmp61 resultXYZ $const1 	%line{80} %argrw{"wrr"}
	compref		$tmp63 $tmp5 $const1 	%argrw{"wrr"}
	mul		$tmp64 $tmp6 $tmp63 	%argrw{"wrr"}
	mix		$tmp62 $const9 $tmp64 $tmp8 	%argrw{"wrrr"}
	mul		$tmp65 $tmp61 $tmp62 	%argrw{"wrr"}
	compassign	___326_outputVector $const1 $tmp65 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:81
#         outputVector[1] = bottom[1] * mix(1.0, amount * top[1], mask);
	compref		$tmp66 resultXYZ $const2 	%line{81} %argrw{"wrr"}
	compref		$tmp68 $tmp5 $const2 	%argrw{"wrr"}
	mul		$tmp69 $tmp6 $tmp68 	%argrw{"wrr"}
	mix		$tmp67 $const9 $tmp69 $tmp8 	%argrw{"wrrr"}
	mul		$tmp70 $tmp66 $tmp67 	%argrw{"wrr"}
	compassign	___326_outputVector $const2 $tmp70 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:82
#         outputVector[2] = bottom[2] * mix(1.0, amount * top[2], mask);
	compref		$tmp71 resultXYZ $const3 	%line{82} %argrw{"wrr"}
	compref		$tmp73 $tmp5 $const3 	%argrw{"wrr"}
	mul		$tmp74 $tmp6 $tmp73 	%argrw{"wrr"}
	mix		$tmp72 $const9 $tmp74 $tmp8 	%argrw{"wrrr"}
	mul		$tmp75 $tmp71 $tmp72 	%argrw{"wrr"}
	compassign	___326_outputVector $const3 $tmp75 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:84
#     else if (comp == C_AVERAGE)
	eq		$tmp76 $tmp7 $const10 	%line{84} %argrw{"wrr"}
	if		$tmp76 145 212 	%argrw{"r"}
# PxrDispVectorLayer.osl:86
#         outputVector[0] = mix(bottom[0], 0.5*(bottom[0]+amount * top[0]), mask);
	compref		$tmp78 resultXYZ $const1 	%line{86} %argrw{"wrr"}
	compref		$tmp79 resultXYZ $const1 	%argrw{"wrr"}
	compref		$tmp80 $tmp5 $const1 	%argrw{"wrr"}
	mul		$tmp81 $tmp6 $tmp80 	%argrw{"wrr"}
	add		$tmp82 $tmp79 $tmp81 	%argrw{"wrr"}
	mul		$tmp83 $const11 $tmp82 	%argrw{"wrr"}
	mix		$tmp77 $tmp78 $tmp83 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const1 $tmp77 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:87
#         outputVector[1] = mix(bottom[1], 0.5*(bottom[1]+amount * top[1]), mask);
	compref		$tmp85 resultXYZ $const2 	%line{87} %argrw{"wrr"}
	compref		$tmp86 resultXYZ $const2 	%argrw{"wrr"}
	compref		$tmp87 $tmp5 $const2 	%argrw{"wrr"}
	mul		$tmp88 $tmp6 $tmp87 	%argrw{"wrr"}
	add		$tmp89 $tmp86 $tmp88 	%argrw{"wrr"}
	mul		$tmp90 $const11 $tmp89 	%argrw{"wrr"}
	mix		$tmp84 $tmp85 $tmp90 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const2 $tmp84 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:88
#         outputVector[2] = mix(bottom[2], 0.5*(bottom[2]+amount * top[2]), mask);
	compref		$tmp92 resultXYZ $const3 	%line{88} %argrw{"wrr"}
	compref		$tmp93 resultXYZ $const3 	%argrw{"wrr"}
	compref		$tmp94 $tmp5 $const3 	%argrw{"wrr"}
	mul		$tmp95 $tmp6 $tmp94 	%argrw{"wrr"}
	add		$tmp96 $tmp93 $tmp95 	%argrw{"wrr"}
	mul		$tmp97 $const11 $tmp96 	%argrw{"wrr"}
	mix		$tmp91 $tmp92 $tmp97 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const3 $tmp91 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:90
#     else if (comp == C_MIN)
	eq		$tmp98 $tmp7 $const12 	%line{90} %argrw{"wrr"}
	if		$tmp98 168 212 	%argrw{"r"}
# PxrDispVectorLayer.osl:92
#         outputVector[0] = mix(bottom[0], min(bottom[0], amount * top[0]), mask);
	compref		$tmp100 resultXYZ $const1 	%line{92} %argrw{"wrr"}
	compref		$tmp102 resultXYZ $const1 	%argrw{"wrr"}
	compref		$tmp103 $tmp5 $const1 	%argrw{"wrr"}
	mul		$tmp104 $tmp6 $tmp103 	%argrw{"wrr"}
	min		$tmp101 $tmp102 $tmp104 	%argrw{"wrr"}
	mix		$tmp99 $tmp100 $tmp101 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const1 $tmp99 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:93
#         outputVector[1] = mix(bottom[1], min(bottom[1], amount * top[1]), mask);
	compref		$tmp106 resultXYZ $const2 	%line{93} %argrw{"wrr"}
	compref		$tmp108 resultXYZ $const2 	%argrw{"wrr"}
	compref		$tmp109 $tmp5 $const2 	%argrw{"wrr"}
	mul		$tmp110 $tmp6 $tmp109 	%argrw{"wrr"}
	min		$tmp107 $tmp108 $tmp110 	%argrw{"wrr"}
	mix		$tmp105 $tmp106 $tmp107 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const2 $tmp105 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:94
#         outputVector[2] = mix(bottom[2], min(bottom[2], amount * top[2]), mask);
	compref		$tmp112 resultXYZ $const3 	%line{94} %argrw{"wrr"}
	compref		$tmp114 resultXYZ $const3 	%argrw{"wrr"}
	compref		$tmp115 $tmp5 $const3 	%argrw{"wrr"}
	mul		$tmp116 $tmp6 $tmp115 	%argrw{"wrr"}
	min		$tmp113 $tmp114 $tmp116 	%argrw{"wrr"}
	mix		$tmp111 $tmp112 $tmp113 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const3 $tmp111 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:96
#     else if (comp == C_MAX)
	eq		$tmp117 $tmp7 $const13 	%line{96} %argrw{"wrr"}
	if		$tmp117 191 212 	%argrw{"r"}
# PxrDispVectorLayer.osl:98
#         outputVector[0] = mix(bottom[0], max(bottom[0], amount * top[0]), mask);
	compref		$tmp119 resultXYZ $const1 	%line{98} %argrw{"wrr"}
	compref		$tmp121 resultXYZ $const1 	%argrw{"wrr"}
	compref		$tmp122 $tmp5 $const1 	%argrw{"wrr"}
	mul		$tmp123 $tmp6 $tmp122 	%argrw{"wrr"}
	max		$tmp120 $tmp121 $tmp123 	%argrw{"wrr"}
	mix		$tmp118 $tmp119 $tmp120 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const1 $tmp118 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:99
#         outputVector[1] = mix(bottom[1], max(bottom[1], amount * top[1]), mask);
	compref		$tmp125 resultXYZ $const2 	%line{99} %argrw{"wrr"}
	compref		$tmp127 resultXYZ $const2 	%argrw{"wrr"}
	compref		$tmp128 $tmp5 $const2 	%argrw{"wrr"}
	mul		$tmp129 $tmp6 $tmp128 	%argrw{"wrr"}
	max		$tmp126 $tmp127 $tmp129 	%argrw{"wrr"}
	mix		$tmp124 $tmp125 $tmp126 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const2 $tmp124 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:100
#         outputVector[2] = mix(bottom[2], max(bottom[2], amount * top[2]), mask);
	compref		$tmp131 resultXYZ $const3 	%line{100} %argrw{"wrr"}
	compref		$tmp133 resultXYZ $const3 	%argrw{"wrr"}
	compref		$tmp134 $tmp5 $const3 	%argrw{"wrr"}
	mul		$tmp135 $tmp6 $tmp134 	%argrw{"wrr"}
	max		$tmp132 $tmp133 $tmp135 	%argrw{"wrr"}
	mix		$tmp130 $tmp131 $tmp132 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const3 $tmp130 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:104
#         outputVector[0] = mix(bottom[0], bottom[0] + amount * top[0], mask);
	compref		$tmp137 resultXYZ $const1 	%line{104} %argrw{"wrr"}
	compref		$tmp138 resultXYZ $const1 	%argrw{"wrr"}
	compref		$tmp139 $tmp5 $const1 	%argrw{"wrr"}
	mul		$tmp140 $tmp6 $tmp139 	%argrw{"wrr"}
	add		$tmp141 $tmp138 $tmp140 	%argrw{"wrr"}
	mix		$tmp136 $tmp137 $tmp141 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const1 $tmp136 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:105
#         outputVector[1] = mix(bottom[1], bottom[1] + amount * top[1], mask);
	compref		$tmp143 resultXYZ $const2 	%line{105} %argrw{"wrr"}
	compref		$tmp144 resultXYZ $const2 	%argrw{"wrr"}
	compref		$tmp145 $tmp5 $const2 	%argrw{"wrr"}
	mul		$tmp146 $tmp6 $tmp145 	%argrw{"wrr"}
	add		$tmp147 $tmp144 $tmp146 	%argrw{"wrr"}
	mix		$tmp142 $tmp143 $tmp147 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const2 $tmp142 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:106
#         outputVector[2] = mix(bottom[2], bottom[2] + amount * top[2], mask);
	compref		$tmp149 resultXYZ $const3 	%line{106} %argrw{"wrr"}
	compref		$tmp150 resultXYZ $const3 	%argrw{"wrr"}
	compref		$tmp151 $tmp5 $const3 	%argrw{"wrr"}
	mul		$tmp152 $tmp6 $tmp151 	%argrw{"wrr"}
	add		$tmp153 $tmp150 $tmp152 	%argrw{"wrr"}
	mix		$tmp148 $tmp149 $tmp153 $tmp8 	%argrw{"wrrr"}
	compassign	___326_outputVector $const3 $tmp148 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:109
#     return outputVector;
	assign		resultXYZ ___326_outputVector 	%line{109} %argrw{"wr"}
# PxrDispVectorLayer.osl:362
#     for (int l=0; l < MAXLAYERS; l++)
	assign		$tmp154 ___335_l 	%line{362} %argrw{"wr"}
	add		___335_l ___335_l $const2 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:374
#     resultXYZ *= overallAmount;
	mul		resultXYZ resultXYZ overallAmount 	%line{374} %argrw{"wrr"}
# PxrDispVectorLayer.osl:377
#     resultX *= resultXYZ[0];
	compref		$tmp155 resultXYZ $const1 	%line{377} %argrw{"wrr"}
	mul		resultX resultX $tmp155 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:378
#     resultY *= resultXYZ[1];
	compref		$tmp156 resultXYZ $const2 	%line{378} %argrw{"wrr"}
	mul		resultY resultY $tmp156 	%argrw{"wrr"}
# PxrDispVectorLayer.osl:379
#     resultZ *= resultXYZ[2];
	compref		$tmp157 resultXYZ $const3 	%line{379} %argrw{"wrr"}
	mul		resultZ resultZ $tmp157 	%argrw{"wrr"}
	end
