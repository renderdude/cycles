OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: -DOSX -I/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include -I/data/build/ratbuild/rmanshare/RIS/include -I/data/build/ratbuild/rmanshare/RIS/include/common -I/data/build/ratbuild/rmanshare/RIS/pattern/osl -I/data/build/ratbuild/rmanshare/RIS/include/osl -o /data/build/ratbuild/rmanshare/_built/osxMojave_x86-64_clang10_external_release/osl/PxrMultiTexture.osl/obj/PxrMultiTexture.oso
shader PxrMultiTexture	%meta{int,rfm_nodeid,1200402} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/texture"} %meta{string,rfh_classification,"Pattern/Texture"} %meta{string,help,"Read a texture file."} 
param	struct PxrManifoldMulti	manifoldMulti			%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{50,50} %write{2147483647,-1} %struct{"PxrManifoldMulti"} %structfields{minNumTextures,numTextures,textureOrder,stAlpha0,stAlpha1,stAlpha2,stAlpha3,tileidRunflag0,tileidRunflag1,tileidRunflag2,tileidRunflag3,Tn,Bn,radius,hextile0,hextile1,hextile2,hextile3} %structfieldtypes{"iiippppppppv[4]v[4]fp[4]p[4]p[4]p[4]"} %structnfields{18}
param	int	manifoldMulti.minNumTextures	0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{236,236} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{0}
param	int	manifoldMulti.numTextures	0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{237,1157} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{1}
param	int	manifoldMulti.textureOrder	0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{1127,1170} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{2}
param	point	manifoldMulti.stAlpha0	-1 -1 -1		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{134,134} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{3} %derivs
param	point	manifoldMulti.stAlpha1	-1 -1 -1		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{135,135} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{4} %derivs
param	point	manifoldMulti.stAlpha2	-1 -1 -1		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{136,136} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{5} %derivs
param	point	manifoldMulti.stAlpha3	-1 -1 -1		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{137,137} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{6} %derivs
param	point	manifoldMulti.tileidRunflag0	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{138,138} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{7} %derivs
param	point	manifoldMulti.tileidRunflag1	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{139,139} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{8} %derivs
param	point	manifoldMulti.tileidRunflag2	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{140,140} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{9} %derivs
param	point	manifoldMulti.tileidRunflag3	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{141,141} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{10} %derivs
param	vector[4]	manifoldMulti.Tn	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{1106,5916} %write{0,3} %mystruct{manifoldMulti} %mystructfield{11} %initexpr
param	vector[4]	manifoldMulti.Bn	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{1106,5916} %write{4,7} %mystruct{manifoldMulti} %mystructfield{12} %initexpr
param	float	manifoldMulti.radius	0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{142,142} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{13}
param	point[4]	manifoldMulti.hextile0	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{153,159} %write{8,11} %mystruct{manifoldMulti} %mystructfield{14} %derivs %initexpr
param	point[4]	manifoldMulti.hextile1	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{161,167} %write{12,15} %mystruct{manifoldMulti} %mystructfield{15} %derivs %initexpr
param	point[4]	manifoldMulti.hextile2	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{169,175} %write{16,19} %mystruct{manifoldMulti} %mystructfield{16} %derivs %initexpr
param	point[4]	manifoldMulti.hextile3	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{177,183} %write{20,23} %mystruct{manifoldMulti} %mystructfield{17} %derivs %initexpr
param	float	blendingContrast	0		%meta{string,label,"Blending Contrast"} %meta{float,min,0} %meta{float,max,1}  %read{1447,5967} %write{2147483647,-1} %derivs
param	string	filename0	""		%meta{string,widget,"assetIdInput"} %meta{string,page,"Textures"} %meta{int,page_open,1} %meta{string,help,"filename0 (string)"} %meta{string,options,"texture"} %meta{int,connectable,0} %meta{string,label,"Filename 0"}  %read{83,5496} %write{2147483647,-1} %derivs
param	string	filename1	""		%meta{string,widget,"assetIdInput"} %meta{string,page,"Textures"} %meta{string,help,"filename1 (string)"} %meta{string,options,"texture"} %meta{int,connectable,0} %meta{string,label,"Filename 1"}  %read{144,5502} %write{2147483647,-1} %derivs
param	string	filename2	""		%meta{string,widget,"assetIdInput"} %meta{string,page,"Textures"} %meta{string,help,"filename2 (string)"} %meta{string,options,"texture"} %meta{int,connectable,0} %meta{string,label,"Filename 2"}  %read{145,5508} %write{2147483647,-1} %derivs
param	string	filename3	""		%meta{string,widget,"assetIdInput"} %meta{string,page,"Textures"} %meta{string,help,"filename3 (string)"} %meta{string,options,"texture"} %meta{int,connectable,0} %meta{string,label,"Filename 3"}  %read{146,5514} %write{2147483647,-1} %derivs
param	string	filename4	""		%meta{string,widget,"assetIdInput"} %meta{string,page,"Textures"} %meta{string,help,"filename4 (string)"} %meta{string,options,"texture"} %meta{int,connectable,0} %meta{string,label,"Filename 4"}  %read{147,5520} %write{2147483647,-1} %derivs
param	string	filename5	""		%meta{string,widget,"assetIdInput"} %meta{string,page,"Textures"} %meta{string,help,"filename5 (string)"} %meta{string,options,"texture"} %meta{int,connectable,0} %meta{string,label,"Filename 5"}  %read{148,5526} %write{2147483647,-1} %derivs
param	string	filename6	""		%meta{string,widget,"assetIdInput"} %meta{string,page,"Textures"} %meta{string,help,"filename6 (string)"} %meta{string,options,"texture"} %meta{int,connectable,0} %meta{string,label,"Filename 6"}  %read{149,5532} %write{2147483647,-1} %derivs
param	string	filename7	""		%meta{string,widget,"assetIdInput"} %meta{string,page,"Textures"} %meta{string,help,"filename7 (string)"} %meta{string,options,"texture"} %meta{int,connectable,0} %meta{string,label,"Filename 7"}  %read{150,5538} %write{2147483647,-1} %derivs
param	string	filename8	""		%meta{string,widget,"assetIdInput"} %meta{string,page,"Textures"} %meta{string,help,"filename8 (string)"} %meta{string,options,"texture"} %meta{int,connectable,0} %meta{string,label,"Filename 8"}  %read{151,5544} %write{2147483647,-1} %derivs
param	string	filename9	""		%meta{string,widget,"assetIdInput"} %meta{string,page,"Textures"} %meta{string,help,"filename9 (string)"} %meta{string,options,"texture"} %meta{int,connectable,0} %meta{string,label,"Filename 9"}  %read{152,5550} %write{2147483647,-1} %derivs
param	int	firstChannel	0		%meta{string,widget,"default"} %meta{string,page,"Texture params"} %meta{string,help,"First channel offset to be looked up for Filename.<br><br>firstChannel (int)"} %meta{int,connectable,0} %meta{string,label,"First Channel Offset"}  %read{37,37} %write{2147483647,-1} %derivs
param	int	invertT	1		%meta{string,widget,"checkBox"} %meta{string,page,"Texture params"} %meta{int,page_open,1} %meta{string,help,"invertT (int)"} %meta{int,connectable,0} %meta{string,label,"Invert T"}  %read{58,4979} %write{2147483647,-1}
param	int	filter	1		%meta{string,widget,"mapper"} %meta{string,page,"Texture params"} %meta{string,help,"filter (int)"} %meta{string,options,"Nearest:0|Box:1|Bilinear:2|Bspline:3|Gaussian:6|Lagrangian:7"} %meta{int,connectable,0} %meta{string,label,"Filter"}  %read{30,33} %write{2147483647,-1}
param	float	blur	0		%meta{string,widget,"default"} %meta{string,page,"Texture params"} %meta{string,help,"blur (float)"} %meta{string,label,"Blur"}  %read{38,38} %write{2147483647,-1} %derivs
param	int	lerp	1		%meta{string,widget,"checkBox"} %meta{string,page,"Texture params"} %meta{string,help,"lerp (int)"} %meta{int,connectable,0} %meta{string,label,"Mip Interpolate"}  %read{2147483647,-1} %write{2147483647,-1}
param	color	missingColor	1 0 1		%meta{string,widget,"color"} %meta{string,page,"Texture params"} %meta{string,help,"missingColor (color)"} %meta{string,label,"Missing Color"}  %read{39,39} %write{2147483647,-1} %derivs
param	float	missingAlpha	1		%meta{string,widget,"default"} %meta{string,page,"Texture params"} %meta{string,help,"missingAlpha (float)"} %meta{string,label,"Missing Alpha"}  %read{40,40} %write{2147483647,-1}
param	int	linearize	0		%meta{string,widget,"checkBox"} %meta{string,page,"Texture params"} %meta{string,help,"linearize (int)"} %meta{int,connectable,0} %meta{string,label,"Linearize"}  %read{109,5391} %write{2147483647,-1}
param	int	mipBias	0		%meta{string,page,"Texture params.Advanced Texture Settings"} %meta{int,page_open,1} %meta{string,help,"Offset the selected MIP level picked by the renderer.<br>Positive values will bias toward lower resolution MIPs.<br>Negative values will bias toward higher resolution MIPs.<br><br>mipBias (int)"} %meta{int,connectable,0} %meta{string,label,"MIP bias"} %meta{int,slidermax,10} %meta{int,slidermin,-10}  %read{1895,5010} %write{2147483647,-1} %derivs
param	float	maxResolution	0		%meta{string,widget,"mapper"} %meta{string,page,"Texture params.Advanced Texture Settings"} %meta{string,help,"Clamp the resolution to a maximum value.<br><br>maxResolution (float)"} %meta{string,options,"Unlimited:0|32:32|64:64|128:128|256:256|512:512|1024:1024|2048:2048|4096:4096|8192:8192"} %meta{string,label,"Max Resolution"}  %read{1898,5019} %write{2147483647,-1} %derivs
param	int	optimizeIndirect	1		%meta{string,widget,"checkBox"} %meta{string,page,"Texture params.Advanced Texture Settings"} %meta{string,help,"Make indirect hits use a box filter rather than the selected one.<br><br>optimizeIndirect (int)"} %meta{int,connectable,0} %meta{string,label,"Optimize Indirect"}  %read{2147483647,-1} %write{2147483647,-1}
param	int	randomSource	0		%meta{string,widget,"mapper"} %meta{string,page,"Randomize"} %meta{int,page_open,1} %meta{string,help,"randomSource (int)"} %meta{string,options,"Object Id:0|Object Name:1"} %meta{int,connectable,0} %meta{string,label,"Random Source"}  %read{243,267} %write{2147483647,-1}
param	float	randomSeed	0		%meta{string,widget,"default"} %meta{string,page,"Randomize"} %meta{string,help,"randomSeed (float)"} %meta{int,connectable,0} %meta{string,label,"Seed"}  %read{283,1079} %write{2147483647,-1} %derivs
param	float	randomHue	0		%meta{string,widget,"default"} %meta{string,page,"Randomize"} %meta{string,help,"randomHue (float)"} %meta{int,connectable,0} %meta{string,label,"Hue"} %meta{float,max,1} %meta{float,min,0}  %read{1083,1100} %write{2147483647,-1} %derivs
param	float	randomSaturation	0		%meta{string,widget,"default"} %meta{string,page,"Randomize"} %meta{string,help,"randomSaturation (float)"} %meta{int,connectable,0} %meta{string,label,"Saturation"} %meta{float,max,1} %meta{float,min,0}  %read{1085,1101} %write{2147483647,-1} %derivs
param	float	randomLuminance	0		%meta{string,widget,"default"} %meta{string,page,"Randomize"} %meta{string,help,"randomLuminance (float)"} %meta{int,connectable,0} %meta{string,label,"Luminance"} %meta{float,max,1} %meta{float,min,0}  %read{1089,1102} %write{2147483647,-1} %derivs
param	float	randomGamma	0		%meta{string,widget,"default"} %meta{string,page,"Randomize"} %meta{string,help,"randomGamma (float)"} %meta{int,connectable,0} %meta{string,label,"Gamma"} %meta{float,max,1} %meta{float,min,0}  %read{1093,1103} %write{2147483647,-1} %derivs
param	int	hueMode	0		%meta{string,widget,"mapper"} %meta{string,page,"Randomize"} %meta{string,help,"Centered: The amount of variation will be centered around the current value.<br><br>hueMode (int)"} %meta{string,options,"Centered:0|Additive:1|Subtractive:2"} %meta{int,connectable,0} %meta{string,label,"Hue Mode"}  %read{5833,5837} %write{2147483647,-1}
param	int	saturationMode	0		%meta{string,widget,"mapper"} %meta{string,page,"Randomize"} %meta{string,help,"Centered: The amount of variation will be centered around the current value.<br><br>saturationMode (int)"} %meta{string,options,"Centered:0|Additive:1|Subtractive:2"} %meta{int,connectable,0} %meta{string,label,"Saturation Mode"}  %read{5843,5847} %write{2147483647,-1}
param	int	luminanceMode	0		%meta{string,widget,"mapper"} %meta{string,page,"Randomize"} %meta{string,help,"Centered: The amount of variation will be centered around the current value.<br><br>luminanceMode (int)"} %meta{string,options,"Centered:0|Additive:1|Subtractive:2"} %meta{int,connectable,0} %meta{string,label,"Luminance Mode"}  %read{5853,5857} %write{2147483647,-1}
param	int	gammaMode	0		%meta{string,widget,"mapper"} %meta{string,page,"Randomize"} %meta{string,help,"Centered: The amount of variation will be centered around the current value.<br><br>gammaMode (int)"} %meta{string,options,"Centered:0|Additive:1|Subtractive:2"} %meta{int,connectable,0} %meta{string,label,"Gamma Mode"}  %read{5863,5866} %write{2147483647,-1}
param	int	texturesAreNormalMaps	0		%meta{string,page,"Bump Output"} %meta{int,page_open,1} %meta{string,label,"Textures Are Normal Maps"} %meta{string,widget,"checkBox"} %meta{int,connectable,0}  %read{24,6073} %write{2147483647,-1}
param	int	orientation	2		%meta{string,widget,"mapper"} %meta{string,page,"Bump Output"} %meta{string,help,"Some texturing applications offer different orientations,<br>like OpenGL or DirectX. You can also go manual to try to<br>fix your normal map's appearance.<br><br>orientation (int)"} %meta{string,options,"OpenGL:0|DirectX:1|Custom:2"} %meta{int,connectable,0} %meta{string,label,"Orientation"}  %read{25,25} %write{2147483647,-1}
param	int	flipX	0		%meta{string,widget,"checkBox"} %meta{string,page,"Bump Output"} %meta{string,help,"Invert the bump orientation.<br>Concave becomes convex and vice versa.<br><br>flipX (int)"} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisPath,"../orientation"} %meta{string,conditionalVisValue,"2"} %meta{int,connectable,0} %meta{string,label,"Flip X"}  %read{26,26} %write{2147483647,-1}
param	int	flipY	0		%meta{string,widget,"checkBox"} %meta{string,page,"Bump Output"} %meta{string,help,"Invert the bump orientation.<br>Concave becomes convex and vice versa.<br><br>flipY (int)"} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisPath,"../orientation"} %meta{string,conditionalVisValue,"2"} %meta{int,connectable,0} %meta{string,label,"Flip Y"}  %read{27,27} %write{2147483647,-1}
param	color	colorScale	1 1 1		%meta{string,page,"Adjust Output"} %meta{int,page_open,1} %meta{string,help,"colorScale (color)"} %meta{string,label,"Color Scale"}  %read{6095,6095} %write{2147483647,-1} %derivs
param	color	colorOffset	0 0 0		%meta{string,page,"Adjust Output"} %meta{string,help,"colorOffset (color)"} %meta{string,label,"Color Offset"}  %read{6096,6096} %write{2147483647,-1} %derivs
param	float	saturation	1		%meta{string,page,"Adjust Output"} %meta{string,help,"saturation (float)"} %meta{string,label,"Saturation"} %meta{float,min,0} %meta{float,slidermax,2}  %read{6094,6094} %write{2147483647,-1} %derivs
param	float	alphaScale	1		%meta{string,page,"Adjust Output"} %meta{string,help,"alphaScale (float)"} %meta{string,label,"Alpha Scale"}  %read{6097,6097} %write{2147483647,-1}
param	float	alphaOffset	0		%meta{string,page,"Adjust Output"} %meta{string,help,"alphaOffset (float)"} %meta{string,label,"Alpha Offset"}  %read{6098,6098} %write{2147483647,-1}
param	int	showGrid	0		%meta{string,page,"Hexagonal Tiling"} %meta{string,label,"Show Grid"} %meta{string,widget,"checkBox"} %meta{int,connectable,0}  %read{6012,6012} %write{2147483647,-1}
param	color	gridColor	0.899999976 0.899999976 0.899999976		%meta{string,page,"Hexagonal Tiling"} %meta{string,label,"Grid Color"}  %read{6069,6069} %write{2147483647,-1} %derivs
param	int	matchCppPattern	0		%meta{string,widget,"checkBox"} %meta{string,label,"Match C++ patterns"} %meta{int,connectable,0} %meta{string,help,"Match RenderMan 23 C++ scenes but may slow down your render. Use only when necessary."}  %read{251,5566} %write{2147483647,-1}
oparam	color	resultRGB	0 0 0		%meta{string,help,"resultRGB (color)"}  %read{119,6101} %write{86,6096} %derivs
oparam	float	resultR	0		%meta{string,help,"resultR (float)"}  %read{2147483647,-1} %write{6099,6099}
oparam	float	resultG	0		%meta{string,help,"resultG (float)"}  %read{2147483647,-1} %write{6100,6100}
oparam	float	resultB	0		%meta{string,help,"resultB (float)"}  %read{2147483647,-1} %write{6101,6101}
oparam	float	resultA	0		%meta{string,help,"resultA (float)"}  %read{49,6097} %write{5995,6098}
oparam	color	resultMask	0 0 0		%meta{string,help,"resultMask (color)"}  %read{2147483647,-1} %write{2147483647,-1}
oparam	vector	resultNG	0 0 0		%meta{string,help,"Surface gradient from bump map.<br>resultSGB (vector)"}  %read{5417,6070} %write{5970,6089}
global	point	P	%read{6080,6080} %write{2147483647,-1} %derivs
global	normal	N	%read{1992,6085} %write{2147483647,-1} %derivs
global	vector	dPdu	%read{1992,4813} %write{2147483647,-1}
global	vector	dPdv	%read{1995,4814} %write{2147483647,-1}
local	float[4096]	___538_rxcellrandtable	%read{322,5916} %write{302,5916} %derivs
local	int[4096]	___538_rxcellpermute	%read{322,5916} %write{303,5916} %derivs
local	int	___538_i	%read{322,5916} %write{321,5916}
local	int	___538_iz	%read{427,5916} %write{427,5916} %derivs
local	int	___538_iy	%read{365,5916} %write{365,5916} %derivs
local	float	___538_v0	%read{309,5916} %write{308,5916} %derivs
local	int	___538_int00	%read{322,5916} %write{313,5916} %derivs
local	int	___538_int01	%read{365,5916} %write{356,5916} %derivs
local	int	___538_int02	%read{427,5916} %write{418,5916} %derivs
local	int	___538_int03	%read{508,5916} %write{499,5916} %derivs
local	int	___538_k	%read{322,5916} %write{304,5916} %derivs
local	int	___601_np.domain	%read{305,5916} %write{286,5916} %mystruct{___601_np} %mystructfield{0}
local	int	___601_np.range	%read{321,5916} %write{287,5916} %mystruct{___601_np} %mystructfield{1}
local	float[4]	___601_np.input	%read{307,5916} %write{290,5916} %mystruct{___601_np} %mystructfield{2} %derivs
local	point	___601_np.result	%read{539,5916} %write{298,5916} %mystruct{___601_np} %mystructfield{3} %derivs
local	int	___601_np.periodic	%read{2147483647,-1} %write{299,5916} %mystruct{___601_np} %mystructfield{4}
local	int[4]	___601_np.period	%read{2147483647,-1} %write{300,5916} %mystruct{___601_np} %mystructfield{5}
local	int	___602_np.domain	%read{1106,5916} %write{1106,5916} %mystruct{___602_np} %mystructfield{0}
local	int	___602_np.range	%read{1106,5916} %write{1106,5916} %mystruct{___602_np} %mystructfield{1}
local	float[4]	___602_np.input	%read{1106,5916} %write{1106,5916} %mystruct{___602_np} %mystructfield{2} %derivs
local	point	___602_np.result	%read{1106,5916} %write{1106,5916} %mystruct{___602_np} %mystructfield{3}
local	int	___602_np.periodic	%read{2147483647,-1} %write{1106,5916} %mystruct{___602_np} %mystructfield{4}
local	int[4]	___602_np.period	%read{2147483647,-1} %write{1106,5916} %mystruct{___602_np} %mystructfield{5}
local	int	___604_np.domain	%read{844,991} %write{831,831} %mystruct{___604_np} %mystructfield{0}
local	int	___604_np.range	%read{860,1077} %write{832,832} %mystruct{___604_np} %mystructfield{1}
local	float[4]	___604_np.input	%read{846,1032} %write{833,836} %mystruct{___604_np} %mystructfield{2} %derivs
local	point	___604_np.result	%read{1078,1078} %write{837,1077} %mystruct{___604_np} %mystructfield{3} %derivs
local	int	___604_np.periodic	%read{2147483647,-1} %write{838,838} %mystruct{___604_np} %mystructfield{4}
local	int[4]	___604_np.period	%read{2147483647,-1} %write{839,839} %mystruct{___604_np} %mystructfield{5}
local	string	___634_interp	%read{41,41} %write{32,36} %derivs
local	int	___634_params.firstchannel	%read{43,43} %write{37,37} %mystruct{___634_params} %mystructfield{0} %derivs
local	float	___634_params.blur	%read{44,44} %write{38,38} %mystruct{___634_params} %mystructfield{1} %derivs
local	color	___634_params.missingcolor	%read{45,45} %write{39,39} %mystruct{___634_params} %mystructfield{2} %derivs
local	float	___634_params.missingalpha	%read{46,46} %write{40,40} %mystruct{___634_params} %mystructfield{3}
local	string	___634_params.interp	%read{47,47} %write{41,41} %mystruct{___634_params} %mystructfield{4} %derivs
local	float	___634_params.width	%read{48,48} %write{42,42} %mystruct{___634_params} %mystructfield{5} %derivs
local	float	___636__tt	%read{67,5916} %write{64,5916} %derivs
local	float	___636_coords.s	%read{72,5916} %write{66,5916} %mystruct{___636_coords} %mystructfield{0} %derivs
local	float	___636_coords.t	%read{73,5916} %write{67,5916} %mystruct{___636_coords} %mystructfield{1} %derivs
local	float	___636_coords.dsdx	%read{74,5916} %write{68,5916} %mystruct{___636_coords} %mystructfield{2} %derivs
local	float	___636_coords.dsdy	%read{75,5916} %write{69,5916} %mystruct{___636_coords} %mystructfield{3} %derivs
local	float	___636_coords.dtdx	%read{76,5916} %write{70,5916} %mystruct{___636_coords} %mystructfield{4} %derivs
local	float	___636_coords.dtdy	%read{77,5916} %write{71,5916} %mystruct{___636_coords} %mystructfield{5} %derivs
local	string	___638_foo	%read{114,5916} %write{112,5916}
local	int	___641_i	%read{119,5916} %write{118,5916} %derivs
local	float	___645_bias	%read{1106,5916} %write{1106,5916} %derivs
local	float	___647_minRadius	%read{1106,5916} %write{1106,5916} %derivs
local	float	___647_dsdx	%read{1106,5916} %write{1106,5916} %derivs
local	float	___647_dtdx	%read{1106,5916} %write{1106,5916} %derivs
local	float	___647_dsdy	%read{1106,5916} %write{1106,5916} %derivs
local	float	___647_dtdy	%read{1106,5916} %write{1106,5916} %derivs
local	vector	___647_v0	%read{1106,5916} %write{1106,5916} %derivs
local	vector	___647_v1	%read{1106,5916} %write{1106,5916} %derivs
local	int	___649_success	%read{90,5916} %write{80,5916}
local	int	___649_nchannels	%read{92,5916} %write{81,5916}
local	color	___649_finalResult	%read{108,5916} %write{82,5916} %derivs
local	color	___649_result	%read{84,5916} %write{83,5916} %derivs
local	color	___652_missingalpha	%read{1106,5916} %write{1106,5916}
local	float	___678_b_inv	%read{1106,5916} %write{1106,5916}
local	vector	___684_sigmaX	%read{1106,5916} %write{1106,5916}
local	vector	___684_sigmaY	%read{1106,5916} %write{1106,5916}
local	float	___684_flip_sign	%read{1106,5916} %write{1106,5916}
local	float	___684_dSTdx.x	%read{1106,5916} %write{1106,5916} %mystruct{___684_dSTdx} %mystructfield{0}
local	float	___684_dSTdx.y	%read{1106,5916} %write{1106,5916} %mystruct{___684_dSTdx} %mystructfield{1}
local	float	___684_dSTdy.x	%read{1106,5916} %write{1106,5916} %mystruct{___684_dSTdy} %mystructfield{0}
local	float	___684_dSTdy.y	%read{1106,5916} %write{1106,5916} %mystruct{___684_dSTdy} %mystructfield{1}
local	float	___684_det	%read{1106,5916} %write{1106,5916}
local	float	___684_sign_det	%read{1106,5916} %write{1106,5916}
local	float	___684_invC0.x	%read{1106,5916} %write{1106,5916} %mystruct{___684_invC0} %mystructfield{0}
local	float	___684_invC0.y	%read{1106,5916} %write{1106,5916} %mystruct{___684_invC0} %mystructfield{1}
local	float	___685_scale	%read{1106,5916} %write{1106,5916}
local	color	___685_vMa	%read{1106,5916} %write{1106,5916}
local	float	___685_z_ma	%read{1106,5916} %write{1106,5916}
local	int	___685_gFlipVertDeriv	%read{1106,5916} %write{1106,5916}
local	float	___685_s	%read{1106,5916} %write{1106,5916}
local	float	___687_k	%read{6085,6087} %write{6084,6084}
local	color	___690_tsNormal	%read{1106,5916} %write{1106,5916}
local	color	___694_tsNormal	%read{1106,5916} %write{1106,5916} %derivs
local	float	___710_minw	%read{6016,6068} %write{6016,6068} %derivs
local	float	___710_grid	%read{6016,6068} %write{6016,6068} %derivs
local	color	___711_Tcenter	%read{1106,5916} %write{1106,5916} %derivs
local	color	___711_result.powerTtoG	%read{1106,5916} %write{1106,5916} %mystruct{___711_result} %mystructfield{0} %derivs
local	color	___711_result.powerGtoT	%read{1106,5916} %write{1106,5916} %mystruct{___711_result} %mystructfield{1} %derivs
local	float	___713_norm	%read{1106,5962} %write{1106,5960} %derivs
local	color	___713_result	%read{1106,5966} %write{1106,5965} %derivs
local	color	___714_hexCol.value	%read{1106,5916} %write{1106,5916} %mystruct{___714_hexCol} %mystructfield{0} %derivs
local	float	___714_hexCol.norm	%read{1106,5916} %write{1106,5916} %mystruct{___714_hexCol} %mystructfield{1} %derivs
local	color	___714_hexCol.powerGtoT	%read{1106,5916} %write{1106,5916} %mystruct{___714_hexCol} %mystructfield{2} %derivs
local	color	___714_co	%read{1106,5916} %write{1106,5916} %derivs
local	color	___714_cc	%read{1106,5916} %write{1106,5916} %derivs
local	color	___714_c	%read{1106,5916} %write{1106,5916} %derivs
local	float	___714_a	%read{1106,5916} %write{1106,5916}
local	int	___715_i	%read{1106,5916} %write{1106,5916} %derivs
local	float	___716_w	%read{1106,5916} %write{1106,5916} %derivs
local	float	___716_txcoords.s	%read{1106,5916} %write{1106,5916} %mystruct{___716_txcoords} %mystructfield{0} %derivs
local	float	___716_txcoords.t	%read{1106,5916} %write{1106,5916} %mystruct{___716_txcoords} %mystructfield{1} %derivs
local	float	___716_txcoords.dsdx	%read{1106,5916} %write{1106,5916} %mystruct{___716_txcoords} %mystructfield{2} %derivs
local	float	___716_txcoords.dsdy	%read{1106,5916} %write{1106,5916} %mystruct{___716_txcoords} %mystructfield{3} %derivs
local	float	___716_txcoords.dtdx	%read{1106,5916} %write{1106,5916} %mystruct{___716_txcoords} %mystructfield{4} %derivs
local	float	___716_txcoords.dtdy	%read{1106,5916} %write{1106,5916} %mystruct{___716_txcoords} %mystructfield{5} %derivs
local	vector	___717_Tn	%read{1106,5916} %write{1106,5916}
local	vector	___717_Bn	%read{1106,5916} %write{1106,5916}
local	int	___718_alphaParams.firstchannel	%read{1106,5916} %write{1106,5916} %mystruct{___718_alphaParams} %mystructfield{0}
local	float	___718_alphaParams.blur	%read{1106,5916} %write{1106,5916} %mystruct{___718_alphaParams} %mystructfield{1}
local	color	___718_alphaParams.missingcolor	%read{2147483647,-1} %write{1106,5916} %mystruct{___718_alphaParams} %mystructfield{2}
local	float	___718_alphaParams.missingalpha	%read{1106,5916} %write{1106,5916} %mystruct{___718_alphaParams} %mystructfield{3}
local	string	___718_alphaParams.interp	%read{1106,5916} %write{1106,5916} %mystruct{___718_alphaParams} %mystructfield{4}
local	float	___718_alphaParams.width	%read{1106,5916} %write{1106,5916} %mystruct{___718_alphaParams} %mystructfield{5}
local	float	___720_seed	%read{271,1079} %write{242,279} %derivs
local	int	___721_itmp	%read{246,246} %write{245,245} %derivs
local	string	___723_idname	%read{261,261} %write{259,260} %derivs
local	float	___720_procPrimId	%read{271,271} %write{268,269} %derivs
local	color	___734_tmpColor	%read{6092,6094} %write{6091,6091} %derivs
local	float	___734_intensity	%read{6093,6093} %write{6092,6092} %derivs
local	float	___767_g	%read{1106,5916} %write{1106,5916} %derivs
local	color	___768_out	%read{1106,5916} %write{1106,5916} %derivs
local	color	___769_hsl	%read{1106,5916} %write{1106,5916} %derivs
local	float	___771_n	%read{1106,5916} %write{1106,5916}
local	float	___771_result	%read{1106,5916} %write{1106,5916}
local	int	nMap.enabled	%read{1106,5916} %write{24,24} %mystruct{nMap} %mystructfield{0}
local	int	nMap.orientation	%read{1106,5916} %write{25,25} %mystruct{nMap} %mystructfield{1}
local	int	nMap.flipX	%read{1106,5916} %write{26,26} %mystruct{nMap} %mystructfield{2}
local	int	nMap.flipY	%read{1106,5916} %write{27,27} %mystruct{nMap} %mystructfield{3}
local	int	txparams.firstchannel	%read{83,5916} %write{43,5916} %mystruct{txparams} %mystructfield{0} %derivs
local	float	txparams.blur	%read{83,5916} %write{44,44} %mystruct{txparams} %mystructfield{1} %derivs
local	color	txparams.missingcolor	%read{83,5916} %write{45,45} %mystruct{txparams} %mystructfield{2} %derivs
local	float	txparams.missingalpha	%read{1106,5916} %write{46,46} %mystruct{txparams} %mystructfield{3}
local	string	txparams.interp	%read{83,5916} %write{47,47} %mystruct{txparams} %mystructfield{4} %derivs
local	float	txparams.width	%read{83,5916} %write{48,5916} %mystruct{txparams} %mystructfield{5} %derivs
local	int	needAlpha	%read{1106,5994} %write{49,49}
local	int	noManifold	%read{52,52} %write{51,51}
local	float[2]	___772_st	%read{55,56} %write{53,54} %derivs
local	float	___772_txcoords.s	%read{83,83} %write{72,72} %mystruct{___772_txcoords} %mystructfield{0} %derivs
local	float	___772_txcoords.t	%read{83,83} %write{73,73} %mystruct{___772_txcoords} %mystructfield{1} %derivs
local	float	___772_txcoords.dsdx	%read{83,83} %write{74,74} %mystruct{___772_txcoords} %mystructfield{2} %derivs
local	float	___772_txcoords.dsdy	%read{83,83} %write{75,75} %mystruct{___772_txcoords} %mystructfield{3} %derivs
local	float	___772_txcoords.dtdx	%read{83,83} %write{76,76} %mystruct{___772_txcoords} %mystructfield{4} %derivs
local	float	___772_txcoords.dtdy	%read{83,83} %write{77,77} %mystruct{___772_txcoords} %mystructfield{5} %derivs
local	point[4]	sta	%read{1106,6068} %write{134,137} %derivs
local	point[4]	idf	%read{1106,5993} %write{138,141} %derivs
local	float	stRadius	%read{2147483647,-1} %write{142,142}
local	string[10]	textures	%read{2147483647,-1} %write{143,152}
local	color[4]	colors	%read{1106,5993} %write{1106,5916} %derivs
local	float[4]	alphas	%read{1106,6008} %write{1106,5916}
local	int[4]	enable	%read{1106,6008} %write{1106,5916}
local	color[4]	grads	%read{1106,5993} %write{1106,5916}
local	point[4]	hexData.s	%read{193,6068} %write{154,178} %mystruct{hexData} %mystructfield{0} %derivs
local	point[4]	hexData.t	%read{194,6068} %write{156,180} %mystruct{hexData} %mystructfield{1} %derivs
local	point[4]	hexData.w	%read{195,6068} %write{158,182} %mystruct{hexData} %mystructfield{2} %derivs
local	point[4]	hexData.r	%read{196,6068} %write{160,184} %mystruct{hexData} %mystructfield{3}
local	color[4]	hexTex.powerTtoG	%read{1106,5957} %write{185,5916} %mystruct{hexTex} %mystructfield{0} %derivs
local	color[4]	hexTex.powerGtoT	%read{1106,5957} %write{186,5916} %mystruct{hexTex} %mystructfield{1} %derivs
local	int	doHexTile	%read{6016,6068} %write{235,235}
local	int	minNumTex	%read{237,5916} %write{236,236}
local	int	numRequested	%read{5998,6008} %write{237,237}
local	float	numTexturesF	%read{1106,5916} %write{238,238}
local	float	objSeed	%read{820,5916} %write{239,1082} %derivs
local	vector	nullvec	%read{280,827} %write{240,819} %derivs
local	int	randomize	%read{1106,5916} %write{1095,1095}
local	int	doHue	%read{2147483647,-1} %write{1096,1096}
local	int	doSat	%read{2147483647,-1} %write{1097,1097}
local	int	doLum	%read{2147483647,-1} %write{1098,1098}
local	int	doGam	%read{2147483647,-1} %write{1099,1099}
local	float	rHue	%read{1106,5916} %write{1100,5916} %derivs
local	float	rSat	%read{1106,5916} %write{1101,5916} %derivs
local	float	rLum	%read{1106,5916} %write{1102,5916} %derivs
local	float	rGam	%read{1106,5916} %write{1103,5916} %derivs
local	int	___773_g	%read{1106,5916} %write{1105,5916} %derivs
local	int	___775_texId	%read{1106,5916} %write{1106,5916}
local	float	___775_tx	%read{1106,5916} %write{1106,5916} %derivs
local	float	___775_ty	%read{1106,5916} %write{1106,5916} %derivs
local	float	___778_m	%read{1106,5916} %write{1106,5916}
local	point	___779_p	%read{1106,5916} %write{1106,5916} %derivs
local	float	___779_rnd	%read{1106,5916} %write{1106,5916}
local	float	___803_txcoords.s	%read{1106,5916} %write{1106,5916} %mystruct{___803_txcoords} %mystructfield{0} %derivs
local	float	___803_txcoords.t	%read{1106,5916} %write{1106,5916} %mystruct{___803_txcoords} %mystructfield{1} %derivs
local	float	___803_txcoords.dsdx	%read{1106,5916} %write{1106,5916} %mystruct{___803_txcoords} %mystructfield{2} %derivs
local	float	___803_txcoords.dsdy	%read{1106,5916} %write{1106,5916} %mystruct{___803_txcoords} %mystructfield{3} %derivs
local	float	___803_txcoords.dtdx	%read{1106,5916} %write{1106,5916} %mystruct{___803_txcoords} %mystructfield{4} %derivs
local	float	___803_txcoords.dtdy	%read{1106,5916} %write{1106,5916} %mystruct{___803_txcoords} %mystructfield{5} %derivs
local	vector	___814_tbn	%read{1106,5916} %write{1106,5916}
local	point	___826_ps	%read{1106,5916} %write{1106,5916} %derivs
local	point	___826_r	%read{1106,5916} %write{1106,5916} %derivs
local	color	___828_hcol.value	%read{5925,5961} %write{5920,5957} %mystruct{___828_hcol} %mystructfield{0} %derivs
local	float	___828_hcol.norm	%read{5925,5959} %write{5921,5957} %mystruct{___828_hcol} %mystructfield{1} %derivs
local	color	___828_hcol.powerGtoT	%read{5925,5965} %write{5922,5957} %mystruct{___828_hcol} %mystructfield{2} %derivs
local	int	___829_g	%read{5925,5957} %write{5924,5957} %derivs
local	color	___828_corrected	%read{5967,5967} %write{5966,5966} %derivs
local	int	___833_g	%read{5970,5993} %write{5969,5993} %derivs
local	int	___837_g	%read{5998,6008} %write{5997,6008}
local	float	___839_mask	%read{6016,6069} %write{6013,6068} %derivs
local	int	___840_i	%read{6016,6068} %write{6015,6068} %derivs
local	int	___844_j	%read{6016,6068} %write{6016,6068} %derivs
local	float	___845_f	%read{6016,6068} %write{6016,6068} %derivs
local	float	___845_fw	%read{6016,6068} %write{6016,6068} %derivs
local	normal	___846_bumpN	%read{6084,6086} %write{6082,6082}
const	vector	$const1	0 0 0		%read{0,240} %write{2147483647,-1}
const	int	$const2	0		%read{0,6099} %write{2147483647,-1}
const	int	$const3	1		%read{1,6100} %write{2147483647,-1}
const	int	$const4	2		%read{2,6101} %write{2147483647,-1}
const	int	$const5	3		%read{3,5819} %write{2147483647,-1}
const	point	$const6	0 0 0		%read{8,5580} %write{2147483647,-1}
const	point	$const7	-1 -1 -1		%read{10,6024} %write{2147483647,-1}
const	string	$const8	"initTxParams"		%read{28,29} %write{2147483647,-1}
const	float	$const9	1		%read{42,6059} %write{2147483647,-1}
temp	int	$tmp25	%read{31,31} %write{30,30}
const	string	$const10	"closest"		%read{32,32} %write{2147483647,-1}
temp	int	$tmp26	%read{34,34} %write{33,33}
const	string	$const11	"linear"		%read{35,35} %write{2147483647,-1}
const	string	$const12	"smartcubic"		%read{36,36} %write{2147483647,-1}
temp	int	$tmp27	%read{51,51} %write{50,50}
const	float[2]	$const13	0 0 		%read{53,53} %write{2147483647,-1}
temp	int	$tmp28	%read{2147483647,-1} %write{54,54}
const	string	$const14	"primvar"		%read{54,54} %write{2147483647,-1}
const	string	$const15	"st"		%read{54,54} %write{2147483647,-1}
temp	float	$tmp29	%read{66,69} %write{55,55} %derivs
temp	float	$tmp30	%read{60,65} %write{56,56} %derivs
const	string	$const16	"initTxCoords"		%read{57,4978} %write{2147483647,-1}
const	string	$const17	"invertCoord"		%read{59,4980} %write{2147483647,-1}
temp	float	$tmp31	%read{61,61} %write{60,60} %derivs
temp	float	$tmp32	%read{64,64} %write{61,61} %derivs
temp	float	$tmp33	%read{63,63} %write{62,62} %derivs
temp	float	$tmp34	%read{64,64} %write{63,63} %derivs
const	string	$const18	"PxrTextureLookup"		%read{79,5548} %write{2147483647,-1}
const	string	$const19	"firstchannel"		%read{83,5550} %write{2147483647,-1}
const	string	$const20	"blur"		%read{83,5550} %write{2147483647,-1}
const	string	$const21	"missingcolor"		%read{83,5550} %write{2147483647,-1}
const	string	$const22	"interp"		%read{83,5550} %write{2147483647,-1}
const	string	$const23	"width"		%read{83,5550} %write{2147483647,-1}
temp	int	$tmp35	%read{85,85} %write{84,84}
const	string	$const24	"channels"		%read{89,5370} %write{2147483647,-1}
temp	int	$tmp36	%read{91,94} %write{90,93}
temp	int	$tmp37	%read{93,93} %write{92,92}
temp	int	$tmp38	%read{96,96} %write{95,95}
temp	int	$tmp39	%read{97,101} %write{96,100}
temp	int	$tmp40	%read{99,99} %write{98,98}
temp	int	$tmp41	%read{100,100} %write{99,99}
temp	float	$tmp42	%read{103,103} %write{102,102} %derivs
temp	float	$tmp43	%read{105,105} %write{104,104} %derivs
temp	float	$tmp44	%read{107,107} %write{106,106} %derivs
const	string	$const25	"PxrLinearizeSRGB"		%read{110,5393} %write{2147483647,-1}
temp	int	$tmp45	%read{116,116} %write{115,115}
const	string	$const26	"ocioDisabled"		%read{111,5394} %write{2147483647,-1}
const	string	$const27	""		%read{112,5397} %write{2147483647,-1}
temp	int	$tmp46	%read{2147483647,-1} %write{113,113}
const	string	$const28	"user:ociocolorspacename"		%read{113,5396} %write{2147483647,-1}
temp	int	$tmp47	%read{115,115} %write{114,114}
temp	int	$tmp48	%read{119,132} %write{119,132}
temp	int	$tmp49	%read{117,132} %write{118,132}
temp	float	$tmp50	%read{119,132} %write{119,132}
const	float	$const29	0.0404499993		%read{122,5405} %write{2147483647,-1}
temp	int	$tmp51	%read{119,132} %write{119,132}
temp	float	$tmp52	%read{119,132} %write{119,132} %derivs
const	float	$const30	0.0773993805		%read{125,5408} %write{2147483647,-1}
temp	float	$tmp53	%read{119,132} %write{119,132} %derivs
temp	float	$tmp54	%read{119,132} %write{119,132} %derivs
temp	float	$tmp55	%read{119,132} %write{119,132} %derivs
const	float	$const31	0.0549999997		%read{128,5411} %write{2147483647,-1}
temp	float	$tmp56	%read{119,132} %write{119,132} %derivs
const	float	$const32	0.947867274		%read{129,5412} %write{2147483647,-1}
temp	float	$tmp57	%read{119,132} %write{119,132} %derivs
const	float	$const33	2.4000001		%read{130,5413} %write{2147483647,-1}
const	int	$const34	4		%read{147,6016} %write{2147483647,-1}
const	int	$const35	5		%read{148,5522} %write{2147483647,-1}
const	int	$const36	6		%read{149,5528} %write{2147483647,-1}
const	int	$const37	7		%read{150,5818} %write{2147483647,-1}
const	int	$const38	8		%read{151,5540} %write{2147483647,-1}
const	int	$const39	9		%read{152,5546} %write{2147483647,-1}
temp	point	$tmp58	%read{154,154} %write{153,153} %derivs
temp	point	$tmp59	%read{156,156} %write{155,155} %derivs
temp	point	$tmp60	%read{158,158} %write{157,157} %derivs
temp	point	$tmp61	%read{160,160} %write{159,159}
temp	point	$tmp62	%read{162,162} %write{161,161} %derivs
temp	point	$tmp63	%read{164,164} %write{163,163} %derivs
temp	point	$tmp64	%read{166,166} %write{165,165} %derivs
temp	point	$tmp65	%read{168,168} %write{167,167}
temp	point	$tmp66	%read{170,170} %write{169,169} %derivs
temp	point	$tmp67	%read{172,172} %write{171,171} %derivs
temp	point	$tmp68	%read{174,174} %write{173,173} %derivs
temp	point	$tmp69	%read{176,176} %write{175,175}
temp	point	$tmp70	%read{178,178} %write{177,177} %derivs
temp	point	$tmp71	%read{180,180} %write{179,179} %derivs
temp	point	$tmp72	%read{182,182} %write{181,181} %derivs
temp	point	$tmp73	%read{184,184} %write{183,183}
const	color	$const40	0 0 0		%read{185,5964} %write{2147483647,-1}
temp	int	$tmp82	%read{213,213} %write{200,201}
temp	point	$tmp83.s	%read{2147483647,-1} %write{193,193}
temp	point	$tmp83.t	%read{2147483647,-1} %write{194,194}
temp	point	$tmp83.w	%read{198,198} %write{195,195}
temp	point	$tmp83.r	%read{2147483647,-1} %write{196,196}
const	string	$const41	"validHexTileData"		%read{197,6023} %write{2147483647,-1}
temp	int	$tmp85	%read{199,199} %write{198,198}
temp	int	$tmp86	%read{213,213} %write{210,211}
temp	point	$tmp87.s	%read{2147483647,-1} %write{203,203}
temp	point	$tmp87.t	%read{2147483647,-1} %write{204,204}
temp	point	$tmp87.w	%read{208,208} %write{205,205}
temp	point	$tmp87.r	%read{2147483647,-1} %write{206,206}
temp	int	$tmp89	%read{209,209} %write{208,208}
temp	int	$tmp90	%read{224,224} %write{213,213}
temp	int	$tmp91	%read{224,224} %write{221,222}
temp	point	$tmp92.s	%read{2147483647,-1} %write{214,214}
temp	point	$tmp92.t	%read{2147483647,-1} %write{215,215}
temp	point	$tmp92.w	%read{219,219} %write{216,216}
temp	point	$tmp92.r	%read{2147483647,-1} %write{217,217}
temp	int	$tmp94	%read{220,220} %write{219,219}
temp	int	$tmp95	%read{235,235} %write{224,224}
temp	int	$tmp96	%read{235,235} %write{232,233}
temp	point	$tmp97.s	%read{2147483647,-1} %write{225,225}
temp	point	$tmp97.t	%read{2147483647,-1} %write{226,226}
temp	point	$tmp97.w	%read{230,230} %write{227,227}
temp	point	$tmp97.r	%read{2147483647,-1} %write{228,228}
temp	int	$tmp99	%read{231,231} %write{230,230}
const	int	$const42	10		%read{236,236} %write{2147483647,-1}
const	string	$const43	"getRandomVector"		%read{241,241} %write{2147483647,-1}
const	float	$const44	0		%read{242,6011} %write{2147483647,-1}
temp	int	$tmp100	%read{244,244} %write{243,243}
temp	int	$tmp101	%read{2147483647,-1} %write{245,245}
const	string	$const45	"builtin"		%read{245,245} %write{2147483647,-1}
const	string	$const46	"id"		%read{245,245} %write{2147483647,-1}
temp	int	$tmp102	%read{247,247} %write{246,246} %derivs
temp	int	$tmp103	%read{248,248} %write{247,247} %derivs
temp	int	$tmp104	%read{250,250} %write{249,249}
temp	int	$tmp105	%read{252,252} %write{251,251}
temp	int	$tmp106	%read{253,258} %write{252,257}
temp	int	$tmp107	%read{255,255} %write{254,254}
const	string	$const47	"user:rixhash"		%read{254,254} %write{2147483647,-1}
temp	int	$tmp108	%read{256,256} %write{255,255}
temp	int	$tmp109	%read{257,257} %write{256,256}
temp	int	$tmp110	%read{2147483647,-1} %write{260,260}
const	string	$const48	"identifier:name"		%read{260,260} %write{2147483647,-1}
temp	int	$tmp111	%read{262,262} %write{261,261} %derivs
const	int	$const49	65536		%read{262,262} %write{2147483647,-1}
temp	int	$tmp112	%read{263,263} %write{262,262} %derivs
temp	int	$tmp113	%read{265,265} %write{264,264}
const	string	$const50	"PxrMultiTex::getRandomVector : Unknow random source -> %d"		%read{267,267} %write{2147483647,-1}
temp	int	$tmp114	%read{270,270} %write{269,269}
const	string	$const51	"user:procprimid"		%read{269,269} %write{2147483647,-1}
temp	float	$tmp115	%read{273,276} %write{271,271} %derivs
const	float	$const53	65535		%read{273,275} %write{2147483647,-1}
const	string	$const54	"mod"		%read{272,272} %write{2147483647,-1}
temp	float	$tmp116	%read{275,275} %write{274,274} %derivs
temp	float	$tmp117	%read{274,274} %write{273,273} %derivs
temp	float	$tmp118	%read{276,276} %write{275,275} %derivs
temp	int	$tmp119	%read{278,278} %write{277,277}
const	float	$const55	65536		%read{279,5577} %write{2147483647,-1}
temp	int	$tmp120	%read{281,281} %write{280,280}
temp	vector	$tmp121	%read{288,294} %write{284,284} %derivs
temp	float	$tmp122	%read{284,284} %write{283,283} %derivs
const	string	$const56	"rxcellnoise"		%read{285,5567} %write{2147483647,-1}
temp	float	$tmp123	%read{290,290} %write{289,289} %derivs
temp	float	$tmp124	%read{289,289} %write{288,288} %derivs
temp	float	$tmp125	%read{293,293} %write{292,292} %derivs
temp	float	$tmp126	%read{292,292} %write{291,291} %derivs
temp	float	$tmp127	%read{296,296} %write{295,295} %derivs
temp	float	$tmp128	%read{295,295} %write{294,294} %derivs
const	int[4]	$const57	0 0 0 0 		%read{300,5582} %write{2147483647,-1}
const	string	$const58	"rx_cell_noise"		%read{301,5583} %write{2147483647,-1}
const	float[4096]	$const59	0.266395003 0.633545995 0.973936975 0.910194993 0.264102995 0.354968995 0.315187991 0.871517003 0.0166095998 0.229700997 0.948787987 0.383789986 0.297724009 0.723987997 0.269015014 0.209977999 0.588165998 0.171146005 0.401838988 0.687545002 0.512377977 0.566577017 0.736636996 0.636132002 0.501501024 0.211778998 0.748574018 0.351062 0.119280003 0.856431007 0.313887 0.385675013 0.489977002 0.287824988 0.295870006 0.754079998 0.642794013 0.611057997 0.625597 0.65940398 0.840758979 0.574384987 0.0431938991 0.138483003 0.298373014 0.312207997 0.348461002 0.886538029 0.483354986 0.75029999 0.574082971 0.995732009 0.316877007 0.310719997 0.631864011 0.818377972 0.522499979 0.380438 0.169440001 0.641780019 0.236869007 0.483327001 0.0274548996 0.726846993 0.77115202 0.323325008 0.480926991 0.413946003 0.934382975 0.106523 0.0733494982 0.775143027 0.680908024 0.116543002 0.913626015 0.979281008 0.428752005 0.262086987 0.865818977 0.912106991 0.0123869004 0.439902991 0.907839 0.329263985 0.750622988 0.539703012 0.147642002 0.273122996 0.920140982 0.317081988 0.914902985 0.157011002 0.800409019 0.942357004 0.883857012 0.571560979 0.265682995 0.364784002 0.985507011 0.200066 0.471307009 0.0588560998 0.975208998 0.152215004 0.175400004 0.888834 0.131495997 0.604151011 0.150921002 0.99731499 0.516258001 0.163307995 0.43721801 0.424097002 0.49257201 0.187840998 0.963801026 0.640214026 0.460963011 0.883942008 0.957296014 0.375865996 0.0409528017 0.757704973 0.318223 0.924809992 0.329266012 0.583905995 0.289593995 0.31477201 0.783972025 0.760900974 0.37362799 0.759180009 0.913115025 0.549027979 0.648015022 0.0446113013 0.153179005 0.798936009 0.0419264995 0.669438004 0.962243974 0.479144007 0.0935349986 0.454816014 0.666984975 0.0573357008 0.095029898 0.127948999 0.941277981 0.0523258001 0.503814995 0.982230008 0.810030997 0.822037995 0.90704 0.139295995 0.40594399 0.196633995 0.454068005 0.189916 0.957535028 0.827696979 0.949096024 0.870649993 0.376724005 0.597110987 0.915261984 0.529904008 0.396046013 0.95718801 0.199340999 0.358289987 0.436331987 0.292876005 0.813106 0.103317 0.350212008 0.90813601 0.231266007 0.291489989 0.960461974 0.735081017 0.273719996 0.770492017 0.557119012 0.180760995 0.909788013 0.963063002 0.377395004 0.363857001 0.152978003 0.334930003 0.191552997 0.102073997 0.205579996 0.568278015 0.699185014 0.120840997 0.0981817022 0.0952309966 0.0780292973 0.297522992 0.453521013 0.514361978 0.590399981 0.266627014 0.617679 0.940612018 0.174762994 0.848945022 0.232100993 0.135224 0.584025979 0.505822003 0.905716002 0.141145006 0.686582029 0.815505028 0.104207002 0.0639773011 0.179361999 0.257185012 0.398907006 0.370914996 0.359259009 0.604487002 0.93919301 0.0584441014 0.725328028 0.0373747014 0.153675005 0.803358018 0.334897995 0.607195973 0.317719012 0.925297022 0.873822987 0.935397983 0.86590898 0.0485858992 0.784344018 0.0980103016 0.183809996 0.368369997 0.603832006 0.0895266011 0.509513974 0.290414006 0.905031979 0.613721013 0.354391992 0.084393099 0.870907009 0.753298998 0.45530799 0.230166003 0.357784986 0.394501001 0.288610011 0.0831137002 0.431876004 0.442285001 0.886470973 0.766773999 0.0494818017 0.204190999 0.692071021 0.923304975 0.139588997 0.557980001 0.971890986 0.923933029 0.655990005 0.155700997 0.292302012 0.259822011 0.245228007 0.801815987 0.550235987 0.150259003 0.415538013 0.904627979 0.234651998 0.286444992 0.657926977 0.689961016 0.51661098 0.0157123003 0.0844618008 0.805221021 0.0988259986 0.516337991 0.247507006 0.985297024 0.283111006 0.29698801 0.189487994 0.97518301 0.220293 0.329077005 0.533161998 0.192184001 0.253010005 0.189153001 0.347885996 0.545311987 0.448974997 0.593113005 0.347128004 0.999211013 0.743372977 0.762665987 0.903840005 0.978025019 0.0491108 0.561766028 0.667985976 0.565721989 0.577479005 0.752447009 0.37094301 0.676304996 0.268785 0.618448973 0.66160202 0.551896989 0.915437996 0.851090014 0.527078986 0.135730997 0.180167004 0.0602415986 0.327915013 0.433176011 0.249394 0.675800979 0.978488028 0.698369026 0.268914014 0.325616002 0.697580993 0.0122868996 0.0882825032 0.601419985 0.99031198 0.137392998 0.163185999 0.658297002 0.703114986 0.740665019 0.410744995 0.0740574971 0.416970015 0.679530025 0.692507029 0.0785717964 0.231426999 0.607944012 0.929661989 0.758506 0.743676007 0.109829001 0.818746984 0.0715909973 0.54300499 0.068141602 0.747391999 0.521493018 0.766511023 0.0163062997 0.847109973 0.464091003 0.0285931006 0.935392022 0.0655115023 0.0189049002 0.0727853999 0.228698 0.677201986 0.775900006 0.969362974 0.0879471973 0.849958003 0.386332989 0.767476976 0.542464972 0.464904994 0.99890399 0.150408998 0.394566 0.757408977 0.89408499 0.504395008 0.576156974 0.96567601 0.0473999009 0.644298017 0.713068008 0.568893015 0.41080901 0.729373991 0.416002989 0.874899983 0.757966995 0.351395011 0.940411985 0.776871979 0.424180001 0.16911 0.454073995 0.200080007 0.138473004 0.542020977 0.0500381999 0.524806023 0.309498996 0.592503011 0.989709973 0.308402002 0.742911994 0.384276986 0.0658115968 0.636995971 0.888671994 0.641968012 0.602671981 0.936070979 0.286265999 0.315739989 0.504965007 0.697075009 0.0451133996 0.920966983 0.571974993 0.803080022 0.272361994 0.512386978 0.579952002 0.696542025 0.681496978 0.0340264998 0.896623015 0.819970012 0.576048017 0.946660995 0.344776005 0.885546982 0.539164007 0.334486008 0.193948999 0.282074988 0.718761981 0.259759992 0.919071972 0.607433975 0.901728988 0.521744013 0.543505013 0.187995002 0.837482989 0.0484699011 0.885070026 0.882597029 0.969437003 0.457044989 0.685676992 0.241798997 0.969431996 0.265628994 0.938341975 0.650929987 0.299656004 0.834963977 0.470898986 0.87570399 0.781624973 0.81567502 0.761250019 0.320789009 0.150160998 0.955199003 0.602864027 0.868923008 0.214959994 0.521935999 0.476357013 0.116687998 0.0436795019 0.0198624991 0.304683 0.881163001 0.0683325008 0.189752996 0.763759017 0.0377697013 0.646798015 0.449436009 0.279569 0.616231024 0.715066016 0.217911005 0.267159998 0.0147213005 0.0528746992 0.738059998 0.890425026 0.834500015 0.553735018 0.651674986 0.155288994 0.703894973 0.606875002 0.758153021 0.572818995 0.821834981 0.280088007 0.0491758995 0.938522995 0.32376799 0.0690383986 0.243205994 0.204931006 0.137371004 0.43295899 0.968689978 0.175141007 0.0797571987 0.418125987 0.454710007 0.695987999 0.133192003 0.672619998 0.963147998 0.147912994 0.725494981 0.701207995 0.0383381993 0.559994996 0.254942 0.690014005 0.715282977 0.958837986 0.296887994 0.473435998 0.531656027 0.118722998 0.753524005 0.580832005 0.0572457984 0.0772918016 0.649870992 0.300451994 0.282222003 0.787241995 0.733411014 0.250912011 0.962382019 0.813167989 0.669037998 0.417091995 0.509155989 0.80223 0.0897118002 0.472303987 0.95014298 0.815207005 0.173511997 0.988480985 0.375200987 0.428454012 0.67849499 0.0904844031 0.387291998 0.975383997 0.563920021 0.918947995 0.0941065997 0.317443997 0.499781013 0.151352003 0.394735992 0.149651006 0.451804012 0.676958025 0.936892986 0.185214996 0.927869976 0.899275005 0.998382986 0.596908987 0.316367 0.507538974 0.399138987 0.406078994 0.979842007 0.349281996 0.221285 0.153354004 0.337763011 0.596486986 0.581807971 0.0162585992 0.686971009 0.969099998 0.991641998 0.250891 0.888047993 0.0857487991 0.568334997 0.387829006 0.237101004 0.963070989 0.537479997 0.688905001 0.640029013 0.474373013 0.874119997 0.567898989 0.373647988 0.872502983 0.164808005 0.690015018 0.380041987 0.563947022 0.0960939005 0.359883994 0.913228989 0.317378998 0.513238013 0.250992 0.913865983 0.0950466022 0.267251015 0.600836992 0.0641466007 0.258893013 0.851728022 0.952194989 0.344642013 0.420062989 0.340023994 0.581743002 0.383134007 0.877503991 0.270648986 0.0231628008 0.351877004 0.144768998 0.591062009 0.725525975 0.0172720999 0.755869985 0.415540993 0.397314012 0.319817007 0.511635005 0.757197976 0.233045995 0.829014003 0.270435989 0.484037995 0.742879987 0.365482986 0.75128901 0.343717009 0.429628998 0.0101824999 0.195444003 0.381823987 0.35482499 0.615507007 0.721848011 0.936568022 0.998641014 0.599352002 0.207216993 0.0218038 0.95122999 0.351985991 0.612865984 0.676755011 0.369257987 0.368735999 0.0922963023 0.766570985 0.688552976 0.60393101 0.523769021 0.921598971 0.432945013 0.79420501 0.405638009 0.175825 0.159687996 0.156927004 0.519541025 0.589317977 0.167109996 0.714986026 0.971141994 0.521933973 0.330493003 0.692990005 0.458501995 0.329133987 0.292342991 0.665718019 0.350937992 0.243572995 0.0177039001 0.963804007 0.920328021 0.386961013 0.332540005 0.0126243997 0.153532997 0.0210931003 0.616554976 0.677302003 0.942691982 0.0495004989 0.471507013 0.348329991 0.225325003 0.631195009 0.50525701 0.744867027 0.220513001 0.672366023 0.45985201 0.191654995 0.194300994 0.790345013 0.884644985 0.652801991 0.119479001 0.176988006 0.318520993 0.470416993 0.420560986 0.336225003 0.434219986 0.340889007 0.723186016 0.766759992 0.353513002 0.876718998 0.787853003 0.970068991 0.554021001 0.730544984 0.0195693001 0.0255277995 0.0788754001 0.244894996 0.656723022 0.584132016 0.989760995 0.877236009 0.256498992 0.449613988 0.0688909963 0.450800002 0.239959002 0.953535974 0.103602 0.359438002 0.130523995 0.422122985 0.829854012 0.551084995 0.758346975 0.264075011 0.891973972 0.481534004 0.0308344997 0.245487005 0.358251989 0.818687022 0.215555996 0.91227299 0.549233019 0.235126004 0.937801003 0.628108025 0.480019987 0.594524026 0.212240994 0.469781995 0.471760005 0.468739986 0.91939503 0.540651023 0.919538975 0.159354001 0.494186997 0.0231413003 0.518791974 0.62471199 0.445264012 0.348645985 0.175797001 0.203612 0.612721026 0.0677710995 0.68514502 0.643554986 0.313259006 0.0433975011 0.462242991 0.528814971 0.955671012 0.0114757 0.76394099 0.893471003 0.639584005 0.243961006 0.487994999 0.851824999 0.713742018 0.959756017 0.320564985 0.633136988 0.500406981 0.240104005 0.792491019 0.994593978 0.263244987 0.311282992 0.619306028 0.708509028 0.659928977 0.795103014 0.912120998 0.272650003 0.862873971 0.597266018 0.916204989 0.176133007 0.640663981 0.378448009 0.704948008 0.596333981 0.38992399 0.468888015 0.489805996 0.0295075998 0.712849021 0.977801025 0.88133198 0.426591009 0.937556982 0.201896995 0.0597289018 0.437963009 0.442000985 0.852219999 0.432558 0.705245972 0.163503006 0.051863499 0.413755 0.823432028 0.846966028 0.325875998 0.0960822999 0.70984 0.923142016 0.0122873997 0.885972977 0.563805997 0.390735 0.590920985 0.160139993 0.78065902 0.0598088987 0.649945021 0.810167015 0.77265799 0.627746999 0.691498995 0.199248999 0.565303028 0.89339602 0.258978009 0.00326664001 0.335397005 0.111198999 0.435824007 0.0406426005 0.274702013 0.487688005 0.454398006 0.0981341973 0.334654003 0.780273974 0.194215998 0.0444944017 0.70341599 0.206504002 0.930468023 0.267221987 0.597239017 0.521387994 0.427361012 0.377898008 0.581197023 0.0773068964 0.188065007 0.353855014 0.705052972 0.879563987 0.553103983 0.270357013 0.772960007 0.812083006 0.27362299 0.108355999 0.923281014 0.70944798 0.148999006 0.197982997 0.197135001 0.603395998 0.296117008 0.531789005 0.383670002 0.490334004 0.576283991 0.0870862976 0.696838021 0.506751001 0.354308009 0.294077009 0.0281393006 0.781669021 0.671975017 0.609336019 0.858976007 0.860040009 0.963190973 0.564029992 0.739602983 0.516296029 0.834387004 0.51256299 0.328379005 0.108010001 0.620918989 0.251659989 0.81745702 0.769918025 0.449642986 0.0145925004 0.373313993 0.745760977 0.54638201 0.756985009 0.236093998 0.122665003 0.844070971 0.932932019 0.629415989 0.198378995 0.227008 0.657554984 0.980048001 0.898983002 0.266891986 0.839025021 0.759023011 0.230083004 0.403053999 0.498625994 0.746379018 0.237441003 0.0111889001 0.0747578964 0.345450997 0.632107973 0.326418012 0.162908003 0.402025998 0.776060998 0.177500993 0.775340021 0.521821976 0.72388202 0.532324016 0.757915974 0.846547008 0.376394987 0.690847993 0.47596401 0.574774027 0.917855978 0.133518994 0.554822028 0.81683898 0.40041101 0.393846989 0.57586199 0.630493999 0.796900988 0.0744881034 0.376872987 0.0343424007 0.0856769979 0.45163101 0.379792988 0.717785001 0.778048992 0.542701006 0.11981 0.554109991 0.720202029 0.895150006 0.0759316981 0.444083989 0.427473992 0.833848 0.29063201 0.803869009 0.524694979 0.766595006 0.378643006 0.442550987 0.900114 0.933466017 0.259389997 0.30052501 0.327311993 0.835251987 0.931019008 0.124214001 0.909740984 0.307891995 0.158555999 0.995418012 0.759522974 0.538348973 0.713202 0.537572026 0.0810509026 0.833012998 0.0916818008 0.801253021 0.728163004 0.167613998 0.245337993 0.155636996 0.00146108004 0.535969019 0.959506989 0.526156008 0.302565008 0.338149995 0.968707025 0.202678993 0.271614999 0.228098005 0.503203988 0.598927975 0.0633499026 0.434222996 0.723141015 0.973089993 0.742115021 0.881698012 0.968508005 0.501637995 0.420046985 0.681710005 0.0392098017 0.501097977 0.514723003 0.130891994 0.302350998 0.242886007 0.298505008 0.547688007 0.398523003 0.299966007 0.083657898 0.358029008 0.826121986 0.386222988 0.696178973 0.794830024 0.588901997 0.967795014 0.0229272004 0.0921060964 0.566721976 0.0862770975 0.526328981 0.289864004 0.0593673997 0.268444002 0.171561003 0.0278753992 0.770081997 0.591607988 0.709586024 0.809292018 0.0927060992 0.224308997 0.940183997 0.395056993 0.467193991 0.238689005 0.94274497 0.865716994 0.538654983 0.0264033992 0.223747 0.364778012 0.412625998 0.919925988 0.159606993 0.00152808998 0.887719989 0.182533994 0.0936342031 0.454443008 0.268810987 0.61996299 0.744306028 0.328179002 0.888408005 0.915867984 0.356054008 0.658490002 0.507475972 0.0656398013 0.467781991 0.600181997 0.289947987 0.407965988 0.995239019 0.757143021 0.646655023 0.937985003 0.622860014 0.185310006 0.964388013 0.846607029 0.550086975 0.377014011 0.766532004 0.709694982 0.378542006 0.654253006 0.892229021 0.472175986 0.108695 0.161039993 0.0921398029 0.853002012 0.48921901 0.980548024 0.768868983 0.845273018 0.639038026 0.276345015 0.910912991 0.106820002 0.876527011 0.200861007 0.514786005 0.871766984 0.958003998 0.161440998 0.809750974 0.580864012 0.346751004 0.774138987 0.427471012 0.896838009 0.151152998 0.194003001 0.606532991 0.529694974 0.848255992 0.498762012 0.00187152997 0.956951022 0.65980202 0.0940114036 0.809952974 0.149021 0.0745590031 0.578822017 0.994293988 0.713597 0.855167985 0.905206978 0.820416987 0.731694996 0.106068999 0.335202992 0.603461981 0.0640726984 0.49664399 0.413213015 0.644936979 0.843394995 0.187352002 0.0724077001 0.740233004 0.338505 0.266411006 0.346765995 0.868200004 0.114666998 0.845528007 0.870072007 0.0716186017 0.505330026 0.964083016 0.881572008 0.654352009 0.0386418998 0.460393995 0.648645997 0.752238989 0.31556201 0.553852975 0.572655976 0.047257401 0.659922004 0.907859027 0.650718987 0.72399497 0.404502988 0.0639320984 0.368930995 0.247896999 0.251284003 0.441338986 0.988130987 0.589788973 0.707750022 0.334897012 0.457989007 0.822417021 0.180425003 0.328060001 0.894035995 0.685756028 0.292142987 0.775608003 0.340108007 0.330785006 0.236001998 0.988753021 0.0830236971 0.551563978 0.542607009 0.655678988 0.598821998 0.202528998 0.563538015 0.249541 0.92652297 0.968039989 0.313472986 0.295455009 0.215938002 0.564756989 0.736793995 0.204069003 0.154545993 0.444543988 0.538966 0.612533987 0.266961008 0.719390988 0.940594018 0.160997003 0.405146986 0.232738003 0.936604977 0.745254993 0.563521981 0.172607005 0.734008014 0.646546006 0.724170983 0.276614994 0.302224994 0.32299301 0.479142994 0.865763009 0.572534025 0.405667007 0.833804011 0.886007011 0.701120973 0.0497415997 0.450764 0.437914997 0.253809988 0.60530901 0.882458985 0.792775989 0.217843994 0.149419993 0.512166977 0.158437997 0.31041801 0.917313993 0.391175985 0.247023001 0.662568986 0.954698026 0.419629991 0.396577001 0.601243973 0.143801004 0.673192024 0.90346998 0.466794014 0.152335003 0.769232988 0.0393276997 0.558001995 0.603037 0.92533499 0.259122998 0.652778029 0.376098007 0.697037995 0.906588018 0.981408 0.57949698 0.699364007 0.199250996 0.728917003 0.211531997 0.357688993 0.0393345989 0.128846005 0.748865008 0.286356986 0.791414976 0.703562975 0.705986977 0.187992007 0.304807007 0.84978801 0.861182988 0.208276004 0.316581994 0.0135185998 0.977509022 0.355910003 0.571519971 0.580546021 0.28124401 0.830642998 0.233324006 0.657342017 0.527680993 0.139911994 0.638750017 0.107178003 0.839277029 0.838001013 0.836094975 0.0508081988 0.195690006 0.875428975 0.179654002 0.944554985 0.161787003 0.971068978 0.648117006 0.86777401 0.159061 0.952924013 0.717561007 0.0202440992 0.161200002 0.0341431983 0.0337627009 0.138708994 0.390053004 0.605283022 0.719254971 0.671297014 0.43592599 0.952579021 0.328639001 0.963607013 0.0924908966 0.967388988 0.0707852021 0.931766987 0.80539 0.906880021 0.982576013 0.00107978994 0.782310009 0.16223 0.945634007 0.944096029 0.133298993 0.593751013 0.811869979 0.292358994 0.546675026 0.529430985 0.312602997 0.707875013 0.563574016 0.346365988 0.846584976 0.95362699 0.95164901 0.565840006 0.624924004 0.387575001 0.518418014 0.953562975 0.351182997 0.610908985 0.920952022 0.421968013 0.542676985 0.726342022 0.328848004 0.525252998 0.727421999 0.111157998 0.687481999 0.673056006 0.0552540012 0.820780993 0.26680699 0.867124021 0.113140002 0.813483 0.396555007 0.425743997 0.521358013 0.960129023 0.772109985 0.367942989 0.913756013 0.723758996 0.933781981 0.538680017 0.111334004 0.452201009 0.492242992 0.462516993 0.0631102994 0.413195014 0.884485006 0.605786979 0.139537007 0.213332996 0.131040007 0.866958022 0.324490994 0.818521976 0.540014029 0.379745007 0.639303029 0.806822002 0.246868998 0.752443016 0.620303988 0.643423975 0.178186998 0.141662002 0.603552997 0.950296998 0.50960499 0.51730901 0.674055994 0.443387002 0.0559896007 0.785390973 0.895587981 0.548232973 0.247907996 0.958697975 0.961427987 0.132393003 0.564485013 0.100965001 0.345726013 0.695524991 0.967922986 0.670216978 0.514047027 0.507937014 0.0499624014 0.153349996 0.314758986 0.296831012 0.905793011 0.935063004 0.940254986 0.0839805976 0.0767249987 0.543807983 0.0342776999 0.586329997 0.0611172989 0.708334029 0.0297164004 0.117106996 0.493725002 0.925303996 0.665340006 0.741632998 0.88400197 0.626767993 0.874026 0.448487014 0.727732003 0.219751999 0.144012004 0.695656002 0.889970005 0.658059001 0.203593001 0.939931989 0.811408997 0.518351972 0.236763 0.717202008 0.453415006 0.177018002 0.801182985 0.530139983 0.72082603 0.83546102 0.116470002 0.781943023 0.54379499 0.146185994 0.899049997 0.0375192985 0.0714901984 0.564390004 0.779151976 0.95549202 0.191156998 0.653177977 0.403979987 0.918889999 0.87292999 0.547991991 0.614544988 0.762898982 0.206051007 0.818139017 0.70283097 0.0174599998 0.336490989 0.939593971 0.734661996 0.789906025 0.116612002 0.535844982 0.320046008 0.837437987 0.371306002 0.436515003 0.619381011 0.915100992 0.582701027 0.518431008 0.952620029 0.654191017 0.0828204975 0.731772006 0.60968399 0.273977995 0.384950012 0.0136636002 0.192867994 0.257878989 0.561655998 0.807412982 0.0207789 0.76770699 0.625551999 0.723609984 0.785166979 0.962041974 0.663204014 0.519828975 0.751947999 0.779815972 0.0556744002 0.0719935 0.617254019 0.426979989 0.50850898 0.236635 0.34208101 0.0912100971 0.755065978 0.29470101 0.745401978 0.837885976 0.0264730006 0.355085999 0.111864001 0.411422998 0.368748993 0.304731995 0.669301987 0.930405021 0.112144999 0.690081 0.698110998 0.737695992 0.413691014 0.483278006 0.699738979 0.0768954009 0.00310679991 0.451685995 0.856711984 0.0587811992 0.523679972 0.473966002 0.485762 0.0321886986 0.710600972 0.82784301 0.123398997 0.465667009 0.122543998 0.868799984 0.303552985 0.149017006 0.223885998 0.415416986 0.560438991 0.592634976 0.720148027 0.229741007 0.523039997 0.832292974 0.919821978 0.221150994 0.569989979 0.333512992 0.704428971 0.269728005 0.410409003 0.707535982 0.721414983 0.267120004 0.76631701 0.245094001 0.741086006 0.252077997 0.277283013 0.451687008 0.0799209028 0.400682002 0.917353988 0.202464998 0.269481987 0.220906004 0.351480991 0.493368 0.636322975 0.911920011 0.0860036016 0.356471002 0.141661003 0.609043002 0.188764006 0.0614835992 0.830193996 0.758754015 0.394997001 0.534623027 0.0284819007 0.805405021 0.242158994 0.74989599 0.0725255981 0.00847576 0.994991004 0.813611984 0.260553986 0.272273988 0.265298992 0.340474993 0.67295599 0.182652995 0.542940021 0.942438006 0.403558999 0.894420981 0.43580699 0.0398819 0.806340992 0.521811008 0.396353006 0.948001981 0.130853996 0.585117996 0.0094859302 0.961048007 0.343872011 0.404482991 0.495671988 0.372352988 0.209887996 0.737830997 0.122249998 0.282413989 0.746306002 0.117241003 0.0960254967 0.00686055003 0.389515013 0.361324012 0.347335994 0.0624708012 0.543977022 0.890275002 0.00490929 0.947535992 0.784695983 0.440715998 0.987417996 0.591036975 0.962526977 0.383771002 0.539039016 0.0933806971 0.968888998 0.548524976 0.054429099 0.312759995 0.953007996 0.550100982 0.685114026 0.162896007 0.287932009 0.807363987 0.445309013 0.0342379995 0.924603999 0.541334987 0.0410985015 0.314119011 0.902658999 0.388433993 0.376590014 0.446635991 0.278708994 0.381498992 0.394172013 0.0634050965 0.822215021 0.381590009 0.654442012 0.784741998 0.765361011 0.193480998 0.878122985 0.734250009 0.742006004 0.93255198 0.0470100008 0.695012987 0.482652992 0.732123971 0.857909024 0.770583987 0.539487004 0.303218007 0.804822028 0.464091986 0.844552994 0.84592098 0.778210998 0.747211993 0.234355003 0.154800996 0.193848997 0.513064027 0.536300004 0.58802098 0.576469004 0.358514994 0.969610989 0.230911002 0.143257007 0.734972 0.424392015 0.0213801991 0.469220996 0.166398004 0.953931987 0.516231 0.861410975 0.436585009 0.248355001 0.719319999 0.207169995 0.787841976 0.0225389004 0.011992 0.251933992 0.867092013 0.857913017 0.0301444009 0.614304006 0.0922679976 0.184945002 0.808152974 0.605332017 0.721244991 0.396174014 0.181802005 0.0797599033 0.365783989 0.412712991 0.223017007 0.100755997 0.837104976 0.244396999 0.569976985 0.0035027999 0.19833 0.0862087011 0.864914 0.634914994 0.334564 0.584235013 0.842083991 0.122405998 0.606773019 0.854076028 0.374339998 0.473865986 0.711988986 0.404484004 0.0881700963 0.804256976 0.589429021 0.896323025 0.409590006 0.310674012 0.292497009 0.591391027 0.390433997 0.658281028 0.00410436979 0.613451004 0.759037018 0.841208994 0.857847989 0.329014987 0.844712019 0.0561779998 0.415223002 0.709626019 0.691093028 0.749786973 0.293861002 0.533177018 0.872192979 0.900633991 0.387254 0.246533006 0.374500006 0.0992432013 0.65101701 0.462669998 0.903500974 0.240446001 0.358992994 0.313089997 0.551119983 0.651489973 0.904482007 0.941552997 0.309771001 0.908586025 0.555004001 0.0688085034 0.74979502 0.412851989 0.397823006 0.594507992 0.469029993 0.813046992 0.304134011 0.160123006 0.562834024 0.597994983 0.693300009 0.435027003 0.498629004 0.080554001 0.681559026 0.87312901 0.179796994 0.332576007 0.335799009 0.0832977965 0.573022008 0.694791973 0.396387994 0.124141 0.346282005 0.300870001 0.065694198 0.656053007 0.209455997 0.620697975 0.724861979 0.959250987 0.0335502997 0.122685 0.553758979 0.502581 0.935730994 0.85789299 0.662703991 0.498564988 0.45588699 0.356004 0.933591008 0.954515994 0.436558008 0.615150988 0.827645004 0.616355002 0.947726011 0.163443998 0.699653029 0.520748019 0.858235002 0.0960408971 0.644888997 0.204517007 0.396910995 0.710582972 0.860570014 0.606366992 0.33128199 0.585431993 0.565617979 0.364832014 0.708115995 0.119377002 0.867411971 0.643848002 0.977270007 0.530116022 0.142413005 0.433156997 0.886120021 0.0760039985 0.387672991 0.322676986 0.691155016 0.215317994 0.939032018 0.638881028 0.378762007 0.638684988 0.159629002 0.236998007 0.734726012 0.804517984 0.441514999 0.131637007 0.515102029 0.302085012 0.738004029 0.846382976 0.887516975 0.303622007 0.211215004 0.59563297 0.422998011 0.0786276013 0.239481002 0.400267988 0.608743012 0.381893009 0.833424985 0.494863003 0.457897007 0.221099004 0.81753999 0.149051994 0.436417013 0.756573021 0.787932992 0.81517899 0.395258009 0.947562993 0.0521767996 0.129984006 0.752080977 0.493692011 0.261620998 0.267183006 0.79577601 0.999625027 0.113565996 0.683292985 0.303245991 0.324781001 0.278926015 0.726244986 0.403409004 0.518406987 0.126513004 0.0121523002 0.900300026 0.95993799 0.50701499 0.358197987 0.181036994 0.324555993 0.507250011 0.617453992 0.0811287016 0.295183003 0.432633013 0.476386994 0.242744997 0.484809995 0.606370986 0.994826019 0.978501976 0.867992997 0.262008995 0.774277985 0.867617011 0.375575006 0.457571 0.170864001 0.70035702 0.736497998 0.897108972 0.103765003 0.254904002 0.0236219 0.115918003 0.155204996 0.983560026 0.622932971 0.513401985 0.164597005 0.947489023 0.0206518993 0.78205198 0.0286174994 0.315834999 0.214684993 0.505003989 0.558579981 0.699495018 0.111376002 0.553406 0.677996993 0.979367971 0.815415025 0.452275008 0.846985996 0.190990999 0.909846008 0.0178497992 0.891346991 0.646344006 0.914959013 0.995112002 0.901247978 0.93858099 0.111029997 0.0564530008 0.922141016 0.733963013 0.569854975 0.0867383033 0.681451976 0.590506971 0.868789971 0.710069001 0.90634203 0.0834748 0.215074003 0.464922011 0.782970011 0.32644999 0.0183281004 0.460967004 0.305817991 0.833742976 0.913241982 0.152804002 0.0247338992 0.82308799 0.170653999 0.916081011 0.469431996 0.0856124014 0.911193013 0.370680004 0.024193 0.0222234 0.427132994 0.946334004 0.756187022 0.996987998 0.0330720991 0.437638015 0.587495029 0.901862025 0.147707999 0.493836999 0.985337019 0.362782001 0.95875901 0.768306971 0.689230978 0.977087021 0.229273006 0.995049 0.810829997 0.142515004 0.147853002 0.835564017 0.965602994 0.318506986 0.751645029 0.435034007 0.404119015 0.662838995 0.805714011 0.428312004 0.685061991 0.232847005 0.374646008 0.441248 0.229835004 0.407718003 0.878886998 0.817330003 0.309579998 0.0265947003 0.311167002 0.294916987 0.389376014 0.269926012 0.0632231012 0.0786074027 0.247013003 0.292495996 0.0736564994 0.0578433014 0.435010999 0.221508995 0.893408 0.400613993 0.540015996 0.645053029 0.835648 0.94413501 0.307891011 0.641362011 0.372447014 0.992953002 0.874207973 0.747093022 0.434201986 0.104042999 0.154810995 0.313089013 0.92137301 0.464390993 0.339682996 0.232539997 0.759307981 0.729058981 0.502466023 0.822530985 0.807667017 0.749478996 0.115027003 0.88132298 0.807322979 0.55003798 0.102833003 0.700730026 0.95065099 0.642849028 0.345782995 0.78629899 0.586983979 0.653674006 0.427661002 0.959432006 0.646627009 0.301869005 0.706525028 0.0808288977 0.405912012 0.861335993 0.393916994 0.327284992 0.325726986 0.733600974 0.559825003 0.0850344971 0.462660015 0.0622913986 0.907564998 0.270327002 0.811770976 0.0225920994 0.151649997 0.619093001 0.572629988 0.254483014 0.319822997 0.523280978 0.897332013 0.665606022 0.309581012 0.484315991 0.319279999 0.73724103 0.443747014 0.965907991 0.0391101018 0.150271997 0.0467365012 0.445021987 0.0116079999 0.44065401 0.772306979 0.337334991 0.174254 0.332132012 0.422369003 0.636914015 0.394423991 0.329935014 0.907240987 0.206193998 0.352526993 0.0588913001 0.825287998 0.925157011 0.313374013 0.145110995 0.448437989 0.210705996 0.810716987 0.75801897 0.695021987 0.129997998 0.49526 0.138769001 0.0959054977 0.534370005 0.289041013 0.142642006 0.979391992 0.300648987 0.583296001 0.751698971 0.637983978 0.757550001 0.0838309973 0.0603533983 0.394464999 0.47825399 0.390287995 0.301705986 0.684449017 0.742815018 0.360597014 0.509736001 0.667971015 0.673972011 0.654847026 0.116410002 0.884676993 0.465564996 0.874427974 0.57969898 0.595561981 0.369688004 0.71846801 0.691468 0.90405798 0.00750896009 0.834110022 0.883449972 0.30815801 0.417405993 0.635149002 0.946142018 0.174955994 0.718980014 0.00649531977 0.569420993 0.197235003 0.396782994 0.871127009 0.881684005 0.139597997 0.231723994 0.391420007 0.807569027 0.905695975 0.0462668985 0.923978984 0.790373027 0.511830986 0.798407018 0.370072007 0.107394002 0.168096006 0.0885401964 0.79886198 0.0721542016 0.0960491002 0.632970989 0.95560497 0.404206991 0.0503770001 0.590753973 0.350349009 0.225333005 0.309733987 0.356844008 0.794754028 0.506968975 0.753628016 0.665880978 0.38865301 0.893226027 0.897605002 0.780071974 0.700794995 0.803300977 0.826339006 0.624773979 0.593675017 0.338171005 0.423182011 0.963747025 0.445564002 0.591277003 0.0522871017 0.244425997 0.663432002 0.148335993 0.877397001 0.619036019 0.552542984 0.927774012 0.209790006 0.902891994 0.153107002 0.519523978 0.259737015 0.947861016 0.0264935996 0.0133645004 0.613741994 0.415145993 0.906589985 0.511346996 0.195217997 0.60738498 0.314648986 0.0215576999 0.232159004 0.90832299 0.359728009 0.655341029 0.872070014 0.805293024 0.246618003 0.924356997 0.0497188009 0.910049975 0.0726936981 0.927115977 0.529085994 0.625236988 0.854889989 0.738875985 0.528129995 0.00799768046 0.258401006 0.787865996 0.955859005 0.28489399 0.801231027 0.569600999 0.700040996 0.707821012 0.0809481964 0.895259023 0.315205991 0.395597011 0.916817009 0.547366023 0.303920001 0.276544988 0.202706993 0.175990999 0.0818378031 0.449324995 0.100348003 0.131557003 0.359375 0.173041999 0.0586728007 0.888460994 0.798278987 0.913563013 0.627337992 0.326407999 0.921561003 0.885739028 0.114275001 0.877420008 0.170633003 0.915506005 0.447021008 0.870674014 0.623327017 0.527969003 0.765932977 0.938533008 0.923565984 0.682748973 0.485899001 0.227485999 0.959294021 0.688606024 0.403477013 0.0411320999 0.137931004 0.503825009 0.172689006 0.497307003 0.676865995 0.231361002 0.385767996 0.475145012 0.144924998 0.0131059997 0.801554024 0.0664855987 0.898845017 0.91582799 0.943904996 0.0694776997 0.831333995 0.390926003 0.940150976 0.454661012 0.918895006 0.706084013 0.39319399 0.842459977 0.388832986 0.879094005 0.0699461997 0.348127007 0.567700028 0.473423004 0.389259011 0.705631018 0.977247 0.561948001 0.202938005 0.654114008 0.793309987 0.588706017 0.129259005 0.938233972 0.601812005 0.930813015 0.00471981987 0.500657022 0.846641004 0.948625028 0.570133984 0.677976012 0.339551002 0.510285974 0.132636994 0.258444995 0.216370001 0.525830984 0.100906 0.605202973 0.404924005 0.170852005 0.95332998 0.972624004 0.64427501 0.342588991 0.678255022 0.621522009 0.904537022 0.881192982 0.275635988 0.697847009 0.469898999 0.404895008 0.63608098 0.0717113018 0.335707992 0.640801013 0.572368026 0.182348996 0.589425981 0.142501995 0.860324979 0.928977013 0.652787983 0.992960989 0.187423006 0.86915803 0.518791974 0.288327992 0.474359989 0.923716009 0.459179997 0.427689999 0.896340013 0.103455 0.770280004 0.574595988 0.724977016 0.674817026 0.455789 0.000612734992 0.372664005 0.925688028 0.405508012 0.00874562003 0.997399986 0.741216004 0.649546981 0.569768012 0.92356497 0.238973007 0.712270021 0.783890009 0.167950004 0.365058005 0.776850998 0.355372995 0.234216005 0.295643002 0.643701017 0.708576024 0.219359994 0.102880999 0.136265993 0.115699999 0.206336007 0.906545997 0.690295994 0.931312978 0.581363022 0.146084994 0.931926012 0.95402801 0.0717732012 0.33743301 0.962773025 0.0691727027 0.0786492005 0.612320006 0.638939977 0.00221436005 0.851293027 0.351209998 0.786104023 0.0192431007 0.716268003 0.562955976 0.374615997 0.950483978 0.858599007 0.0183169991 0.659060001 0.0779590979 0.121197999 0.795325994 0.193660006 0.32753399 0.701871991 0.883956015 0.258846998 0.283235013 0.0300407 0.190772995 0.237262994 0.101814002 0.528205991 0.200036004 0.170986995 0.606854975 0.812355995 0.809926987 0.609070003 0.663649023 0.161137 0.395173997 0.682892025 0.877404988 0.958130002 0.0575078987 0.827889025 0.816729009 0.0758247972 0.486948997 0.89468801 0.197023004 0.282274991 0.0883475989 0.524556994 0.984147012 0.972302973 0.783405006 0.267381996 0.00234391005 0.974177003 0.50464499 0.104157999 0.502382994 0.704680979 0.275144011 0.109238997 0.517036974 0.0850709975 0.718308985 0.180685997 0.246207997 0.113482997 0.863578022 0.123613 0.0716124997 0.921086013 0.951502025 0.88834101 0.996910989 0.438450992 0.78302902 0.193933994 0.720725 0.871376991 0.718491018 0.704873025 0.843680024 0.501896024 0.972254992 0.846023977 0.476072997 0.476900011 0.950182021 0.978456974 0.181582004 0.225326002 0.0876955017 0.698619008 0.310396999 0.806003988 0.879306018 0.556604981 0.919487 0.74288398 0.680217981 0.991099 0.663969994 0.631720006 0.879441023 0.660880983 0.0701700971 0.662469983 0.854815006 0.790895998 0.533846974 0.573306978 0.495768011 0.377528012 0.0752025023 0.468023002 0.223552004 0.551276028 0.944922984 0.173733994 0.529731989 0.126505002 0.399060011 0.617428005 0.825124025 0.70945698 0.423431993 0.704429984 0.266061991 0.342918992 0.447313994 0.946280003 0.334017992 0.111284003 0.577998996 0.213459 0.772165 0.648168981 0.875928998 0.626980007 0.439065009 0.409776002 0.200286001 0.93483299 0.787303984 0.275489002 0.402855992 0.0108556999 0.826763988 0.347779006 0.184588999 0.35649699 0.474285007 0.58364898 0.973924994 0.299409002 0.29310599 0.397356987 0.00383896008 0.559167981 0.740275025 0.45115301 0.505447984 0.0742935017 0.562435985 0.0834472999 0.287752002 0.334601015 0.731616974 0.163681999 0.961580992 0.170681998 0.573458016 0.161866993 0.105515003 0.360762 0.437355995 0.508370996 0.371618003 0.264120996 0.856149971 0.556207001 0.620616972 0.330435008 0.139855996 0.594542027 0.62984401 0.432962 0.991899014 0.633683026 0.992129982 0.732173979 0.0848354995 0.497577995 0.806466997 0.647271991 0.581026018 0.0942199007 0.981872976 0.312642008 0.257901996 0.943454027 0.483323991 0.831359982 0.105320998 0.588838995 0.192121997 0.542676985 0.0972094983 0.563739002 0.806797981 0.953360021 0.119946003 0.427415013 0.283794999 0.259802014 0.0219573006 0.913637996 0.692764997 0.0138558997 0.547321022 0.684894979 0.746029973 0.632157028 0.182473004 0.552497029 0.279428989 0.763499022 0.646717012 0.261301994 0.0761412978 0.904618979 0.204756007 0.559464991 0.735978007 0.310077012 0.148304 0.92809999 0.85275501 0.245514005 0.491838992 0.659552991 0.198872998 0.611784995 0.0869679973 0.482668012 0.871587992 0.108925 0.396306008 0.564351976 0.122781001 0.943628013 0.249247 0.868811011 0.575784981 0.431721002 0.421308011 0.855212986 0.195219994 0.0680254996 0.116515003 0.271360993 0.972643971 0.321271002 0.830825984 0.708622992 0.631349027 0.979130983 0.636722028 0.484104007 0.224644005 0.128562003 0.143656 0.423518002 0.740347028 0.230624005 0.906185985 0.611935019 0.339549989 0.302491993 0.176286995 0.462330997 0.246120006 0.42553401 0.331142008 0.821904004 0.857254982 0.752449989 0.677118003 0.0524746999 0.820475996 0.793632984 0.323835999 0.793120027 0.114905 0.154661998 0.501742005 0.746253014 0.133792996 0.138465002 0.230357006 0.358437002 0.267026007 0.37401399 0.78195399 0.0073731998 0.60463798 0.688139975 0.619307995 0.944187999 0.990631998 0.79559499 0.406518996 0.236751005 0.221129 0.737659991 0.0586557984 0.0783839002 0.49011001 0.735773981 0.130859002 0.310586005 0.529407024 0.454694003 0.103706002 0.644311011 0.609356999 0.605448008 0.390565008 0.743148983 0.743912995 0.620922029 0.101585999 0.0109393997 0.994935989 0.883539975 0.0183125995 0.599574029 0.571680009 0.637619972 0.543761015 0.562312007 0.433214992 0.950280011 0.799063981 0.654344022 0.687940001 0.857719004 0.732728004 0.178050995 0.593492985 0.863586009 0.488635987 0.122900002 0.318280995 0.592342019 0.76721102 0.927636981 0.197790995 0.157775998 0.670786977 0.941703975 0.778698027 0.772373021 0.952642977 0.773633003 0.655912995 0.970956028 0.373207003 0.227593005 0.608576 0.916967988 0.789905012 0.0417911001 0.867247999 0.588968992 0.696134984 0.555188 0.446687996 0.428862989 0.733237982 0.0401809998 0.292448997 0.221874997 0.163081005 0.610729992 0.814216971 0.930290997 0.538366973 0.0120077999 0.0880670026 0.209153995 0.953710973 0.866765022 0.981526971 0.90635401 0.640398026 0.637440026 0.877309978 0.0136046 0.865032971 0.485886008 0.930572987 0.654938996 0.527677 0.797819972 0.243908003 0.223811999 0.353008002 0.690595984 0.652674973 0.0862466991 0.730777025 0.945124984 0.308122009 0.893857002 0.555854976 0.122339003 0.824149013 0.0942220986 0.134347007 0.912216008 0.303375989 0.088057898 0.77898097 0.28490299 0.994412005 0.419378012 0.922343016 0.871722996 0.432983011 0.787375987 0.357609004 0.363555998 0.442315012 0.885285974 0.161375999 0.68622297 0.109099001 0.514383972 0.376819015 0.761774004 0.600630999 0.107594997 0.706898987 0.908752978 0.00145291002 0.26275301 0.0310916007 0.825601995 0.356974989 0.165437996 0.737818003 0.660351992 0.253495991 0.516798019 0.945254982 0.247907996 0.936177015 0.867597997 0.119631 0.369159997 0.654973984 0.477239996 0.732715011 0.0972890034 0.362526 0.894092023 0.783511996 0.471625 0.408475995 0.160329998 0.233399004 0.00910731964 0.267926008 0.940298021 0.917859972 0.26937899 0.203051999 0.948952019 0.0949803963 0.560027003 0.114390001 0.832798004 0.220378995 0.367886007 0.349595994 0.165634006 0.615794003 0.285773009 0.0332312994 0.735424995 0.654932976 0.688205004 0.212665007 0.387647986 0.78549403 0.575191975 0.28174001 0.569006026 0.0468169004 0.690216005 0.729336023 0.280216008 0.699322999 0.997262001 0.220514998 0.61718303 0.266640991 0.423566014 0.566134989 0.361620992 0.983592987 0.680525005 0.194418997 0.203971997 0.0484105013 0.54401499 0.369605988 0.664205015 0.829788029 0.402837008 0.39963001 0.484721005 0.0910425037 0.612294972 0.872368991 0.876537025 0.187487006 0.154109001 0.445542991 0.234303996 0.844323993 0.174879 0.514519989 0.543648005 0.172141001 0.735035002 0.160831004 0.438782007 0.158601001 0.726966023 0.800402999 0.142194003 0.407490999 0.994822025 0.346166998 0.455900997 0.538837016 0.715772986 0.120105997 0.368624985 0.118610002 0.519735992 0.853344977 0.209652007 0.132030994 0.725714028 0.0861890987 0.319518 0.879823029 0.531732023 0.553821981 0.724147022 0.706610978 0.0683422014 0.267794997 0.878751993 0.803376973 0.428626001 0.317532986 0.961978018 0.155591995 0.117936 0.104172997 0.56308198 0.112758003 0.450338989 0.0189836994 0.651593983 0.166112006 0.139090002 0.0202188995 0.284722 0.658825994 0.873564005 0.494374007 0.790857017 0.599277973 0.580563009 0.110375002 0.479101002 0.112295002 0.664197028 0.203247994 0.818906009 0.732538998 0.471042991 0.697658002 0.535916984 0.899667978 0.0151914004 0.497895002 0.0552602001 0.133128002 0.602066994 0.618342996 0.245885 0.052406501 0.637326002 0.897478998 0.218518004 0.776416004 0.917698026 0.503239989 0.435241997 0.791262984 0.99761498 0.226098999 0.390540987 0.578177989 0.336474001 0.869642019 0.69047302 0.000671559013 0.0728897974 0.509379029 0.733210981 0.543932021 0.207037002 0.269127995 0.443601012 0.222228006 0.767022014 0.498861015 0.355356008 0.369089007 0.117204003 0.601240993 0.421496004 0.754530013 0.49871999 0.640013993 0.53094703 0.416418999 0.143253997 0.966188014 0.207681 0.140869007 0.192287996 0.598222017 0.71904701 0.528761983 0.467864007 0.40952 0.529433012 0.54075402 0.918899 0.262643993 0.0846861005 0.125936002 0.531772017 0.528286994 0.348163992 0.298794001 0.0271483008 0.70352 0.667882979 0.144352004 0.304760993 0.0893787965 0.898882985 0.803480983 0.729393005 0.429829001 0.219899997 0.872646987 0.396017998 0.427581012 0.0135164 0.588304996 0.0258026998 0.732563019 0.117067002 0.493665993 0.142083004 0.646499991 0.0344199985 0.0609815009 0.909144998 0.119106002 0.186917007 0.440916985 0.647392988 0.535081029 0.739710987 0.674540997 0.238600999 0.407593995 0.818894029 0.543362021 0.496973008 0.717776 0.346843004 0.226365998 0.147605002 0.566742003 0.0990128964 0.543622971 0.994323015 0.112529002 0.131927997 0.0201255996 0.845091999 0.248995006 0.513791978 0.987174988 0.895494998 0.548211992 0.0481568016 0.804639995 0.667317986 0.235073999 0.245556995 0.314711004 0.770155013 0.985267997 0.989252985 0.00875579007 0.392861009 0.808146 0.55211699 0.889833987 0.525922 0.898959994 0.1162 0.673528016 0.465701997 0.215213001 0.217150003 0.460025012 0.32774201 0.349079013 0.480150998 0.172833994 0.598074019 0.993942976 0.160009995 0.493568987 0.542155027 0.208166003 0.298209012 0.209472999 0.443239987 0.543766022 0.524183989 0.213395 0.529034019 0.513436973 0.222150996 0.921895027 0.321583003 0.774267972 0.811729014 0.847504973 0.673228979 0.927928984 0.521032989 0.138931006 0.143141001 0.738183022 0.598955989 0.470883012 0.0872616023 0.0791067034 0.643718004 0.68533498 0.0730493963 0.803726971 0.178904995 0.615203977 0.0118938005 0.477113992 0.824676991 0.455134004 0.0208803006 0.348861009 0.668528974 0.549914002 0.862298012 0.890681028 0.471809 0.183881 0.664949 0.283538997 0.0313855 0.338178009 0.211467996 0.552417994 0.477108002 0.354609013 0.290600985 0.0760641024 0.825492978 0.37786299 0.155171007 0.469209999 0.0631979033 0.228220001 0.272938013 0.242101997 0.843424022 0.284830987 0.719215989 0.668102026 0.739965022 0.740096986 0.0169628002 0.408495009 0.290010989 0.879261017 0.299174994 0.761820018 0.0631411001 0.964124024 0.0453590006 0.0945265964 0.302302003 0.256826997 0.646945 0.779410005 0.611436009 0.937546015 0.855473995 0.436928004 0.315407991 0.0106450999 0.906139016 0.378605992 0.238865003 0.179076001 0.620707989 0.0822898 0.463907003 0.339924991 0.750391006 0.203872994 0.0800212994 0.767354012 0.612367988 0.370032012 0.646615028 0.911543012 0.131852001 0.709756017 0.875666976 0.177211002 0.80428201 0.177968994 0.434038013 0.451227009 0.957379997 0.0454736985 0.388772994 0.812853992 0.482401997 0.704181015 0.823499024 0.388541013 0.0827867016 0.0623641983 0.567616999 0.703495026 0.144654006 0.0315239988 0.0434198007 0.895044982 0.235396996 0.123441003 0.662400007 0.847764015 0.493472993 0.309013993 0.759307027 0.625325024 0.0187701993 0.634975016 0.802537024 0.823053002 0.812943995 0.236573994 0.274280012 0.770323992 0.282047987 0.663052022 0.583177984 0.764450014 0.367233008 0.406675994 0.152990997 0.450019985 0.46904099 0.720606983 0.153514996 0.613695025 0.752130985 0.196934998 0.508740008 0.987528026 0.320376009 0.171139002 0.835291982 0.813848972 0.480154008 0.594600022 0.439173996 0.498923987 0.229574993 0.241711006 0.32197699 0.0425187983 0.478285015 0.596256018 0.812843025 0.760334015 0.259308994 0.396019995 0.524784029 0.626541972 0.802697003 0.677775025 0.0765616 0.271737009 0.398382008 0.230076 0.885432005 0.150512993 0.427011013 0.394172013 0.138041005 0.747386992 0.565311015 0.973334014 0.561236024 0.0454647988 0.567933977 0.000409795 0.544389009 0.797508001 0.242120996 0.866366029 0.840026975 0.720405996 0.462621987 0.652869999 0.480740011 0.721930981 0.0488895997 0.00552337011 0.348473012 0.851585984 0.683297992 0.425033987 0.123323001 0.081679903 0.655111015 0.00875512045 0.232192993 0.0821217 0.402927011 0.370234996 0.829508007 0.968237996 0.343567997 0.390744001 0.0137026003 0.911502004 0.391153991 0.558090985 0.709010005 0.633274019 0.424457014 0.54903698 0.353680015 0.887079 0.201906994 0.834420025 0.609009981 0.25079599 0.839942992 0.957482994 0.102381997 0.523240983 0.38251701 0.225705996 0.604920983 0.0376277007 0.234460995 0.837113976 0.119749002 0.637387991 0.207349002 0.949258029 0.605624974 0.550917029 0.340002 0.619328022 0.462419003 0.731155992 0.177420005 0.171428993 0.36443001 0.601876974 0.720466018 0.718110025 0.488956004 0.922372997 0.552529991 0.0979655012 0.173169002 0.392473996 0.0554482006 0.275550991 0.915714979 0.437965006 0.501257002 0.520636022 0.475593001 0.735718012 0.357751012 0.59534198 0.373106003 0.565100014 0.54460001 0.978730977 0.116016999 0.88460201 0.598058999 0.578436017 0.615756989 0.775479019 0.749866009 0.980186999 0.377355009 0.470331997 0.698297977 0.866311014 0.392704993 0.250827998 0.964276016 0.565873981 0.643302023 0.0197247006 0.841425002 0.559017003 0.457690001 0.342682004 0.0796535984 0.933282971 0.078400299 0.43740499 0.528625011 0.451505989 0.00250448007 0.073224999 0.430236995 0.118522003 0.957826972 0.0282963999 0.696958005 0.57358402 0.803775012 0.446824014 0.553771019 0.181131005 0.917155981 0.252068996 0.0474415012 0.309861004 0.502897024 0.0117180003 0.875734985 0.146199003 0.0314427018 0.717159986 0.705215991 0.489133 0.0598421991 0.784870028 0.422414988 0.138243005 0.222275004 0.95104003 0.589748979 0.224778995 0.0242650993 0.0199858006 0.343300998 0.982092023 0.0482821018 0.0402589999 0.555675983 0.85205698 0.487082988 0.109448001 0.0331878997 0.404238999 0.361517012 0.0806294009 0.714100003 0.864413977 0.0923473984 0.589834988 0.0106130997 0.123790003 0.306995004 0.715829015 0.612923026 0.366836995 0.500698984 0.0353377014 0.505078971 0.722974002 0.986378014 0.0948280022 0.947753012 0.0106429998 0.114813998 0.29105401 0.992735028 0.163095996 0.331313014 0.548411012 0.0151532004 0.818395972 0.657859027 0.0483409986 0.222635001 0.0193755999 0.128969997 0.936734974 0.883790016 0.221318007 0.526569009 0.894402981 0.345108002 0.833563983 0.610231996 0.958029985 0.200400993 0.110932 0.99336803 0.70547998 0.833905995 0.979745984 0.800307989 0.781657994 0.990388989 0.915121973 0.072712101 0.983124018 0.0782177001 0.404024988 0.531535029 0.0933708027 0.222420007 0.189393997 0.141711995 0.445055008 0.208770007 0.270682007 0.381790012 0.0925592035 0.492000014 0.908358991 0.98696202 0.837108016 0.741922975 0.597194016 0.795138001 0.942323983 0.708126009 0.788505971 0.647804022 0.54203099 0.768252015 0.448112011 0.323689997 0.758641005 0.363234013 0.396402001 0.741765022 0.441451013 0.80042702 0.273299992 0.534821987 0.0228470992 0.462693989 0.676533997 0.467902005 0.671464026 0.947215974 0.849691987 0.764023006 0.439215988 0.758050978 0.750985026 0.276324004 0.499974012 0.348179013 0.0714624003 0.442297012 0.0563049987 0.85996902 0.0901011005 0.598336995 0.628220975 0.538213015 0.922025979 0.38686201 0.901446998 0.318428993 0.128627002 0.342898011 0.118855 0.401928008 0.877719998 0.141701996 0.864621997 0.554255009 0.609604001 0.53608501 0.501470983 0.459295988 0.300107986 0.940687001 0.217346996 0.0510929003 0.217012003 0.717320025 0.399271995 0.288473994 0.159618005 0.455576986 0.148442999 0.249718994 0.0539136007 0.776664019 0.787931979 0.975939989 0.163525999 0.689378023 0.294369012 0.292153001 0.0322766006 0.413224012 0.694081008 0.909996986 0.554925978 0.558701992 0.464251995 0.164531007 0.094787702 0.965722978 0.623826981 0.394896001 0.906409979 0.841172993 0.445989013 0.123421997 0.558493972 0.845260978 0.41189599 0.718110979 0.300837994 0.56033802 0.967830002 0.354750991 0.337002009 0.755761027 0.33069101 0.500527978 0.445140004 0.625060022 0.792680979 0.477416009 0.0382836983 0.486761987 0.387412995 0.593209982 0.045463901 0.85166502 0.757740021 0.140251994 0.817387998 0.381567001 0.535147011 0.723797977 0.222739995 0.981136024 0.84721899 0.781234026 0.826397002 0.25911501 0.499345005 0.127234995 0.819453001 0.467175007 0.481985986 0.156454995 0.222936004 0.812677026 0.656982005 0.668075979 0.437736988 0.449663013 0.145492002 0.476020992 0.936424971 0.532904983 0.0692308992 0.981889009 0.384570003 0.826970994 0.122139998 0.201958001 0.208537996 0.657288015 0.925755978 0.431279004 0.638423979 0.772975028 0.212513 0.464819998 0.0320900008 0.711857021 0.592055023 0.851543009 0.179031998 0.0740410015 0.00799787976 0.401968002 0.886717975 0.664979994 0.0700438991 0.324456006 0.114643998 0.215535998 0.800477028 0.0510682985 0.748440981 0.869708002 0.0329568982 0.133011997 0.696678996 0.155096993 0.334969997 0.905216992 0.812385023 0.260726005 0.336495996 0.450807989 0.0337007008 0.549008012 0.915629029 0.0657906979 0.260865986 0.507683992 0.91733402 0.439898014 0.581725001 0.92533201 0.841866016 0.468443006 0.590312004 0.911909997 0.792899013 0.704954982 0.127445996 0.593375027 0.756024003 0.875886977 0.463082999 0.78898102 0.00889910012 0.159761995 0.944078028 0.343869001 0.0649786964 0.756462991 0.604595006 0.401475012 0.207270995 0.638294995 0.950483024 0.122900002 0.704086006 0.211348996 0.630582988 0.621420026 0.651247025 0.212308004 0.546751022 0.493113011 0.680751026 0.137062997 0.405023009 0.473650008 0.842019022 0.532468975 0.0670249984 0.598042011 0.408356011 0.530107975 0.387023002 0.417255014 0.689868987 0.331101 0.761124015 0.754848003 0.0875632986 0.365718991 0.156323001 0.294833988 0.00401392998 0.106804997 0.417733997 0.708100021 0.318154007 0.0483171009 0.329519987 0.969401002 0.260625005 0.876271009 0.462513 0.941375971 0.0133338002 0.867536008 0.415026009 0.855351985 0.400005013 0.482051015 0.453395009 0.808360994 0.0121587999 0.840417981 0.225615993 0.702027977 0.171517998 0.986739993 0.45687601 0.25908199 0.352459013 0.613198996 0.553915977 0.356472999 0.720004022 0.971650004 0.0645724982 0.0381584018 0.0199666992 0.394091994 0.00755904987 0.280591995 0.270363003 0.470072001 0.221967995 0.283697009 0.33760801 0.636994004 0.139048994 0.737613022 0.119044997 0.592444003 0.545974016 0.131203994 0.432861 0.771589994 0.833231986 0.604380012 0.758329988 0.290109009 0.863461018 0.110788003 0.903307021 0.417376995 0.467260987 0.623311996 0.389026999 0.531834006 0.661469996 0.408993989 0.92592603 0.669028997 0.689585984 0.196288005 0.139101997 0.911553979 0.479984999 0.476709992 		%read{302,5584} %write{2147483647,-1}
const	int[4096]	$const60			%read{303,5585} %write{2147483647,-1}
temp	int	$tmp129	%read{306,306} %write{305,305}
temp	float	$tmp130	%read{308,308} %write{307,307} %derivs
const	float	$const61	9.99999975e-05		%read{308,5905} %write{2147483647,-1}
temp	int	$tmp131	%read{310,310} %write{309,309}
const	float	$const62	-100000000		%read{311,5779} %write{2147483647,-1}
temp	int	$tmp132	%read{312,312} %write{311,311}
temp	int	$tmp133	%read{315,315} %write{314,314} %derivs
const	float	$const63	100000000		%read{316,5784} %write{2147483647,-1}
temp	int	$tmp134	%read{317,317} %write{316,316}
temp	int	$tmp135	%read{322,334} %write{322,334}
temp	int	$tmp136	%read{320,334} %write{321,334}
const	int	$const64	12		%read{324,5807} %write{2147483647,-1}
temp	int	$tmp137	%read{322,334} %write{322,334} %derivs
temp	int	$tmp138	%read{322,334} %write{322,334} %derivs
temp	int	$tmp139	%read{322,334} %write{322,334} %derivs
temp	int	$tmp140	%read{322,334} %write{322,334} %derivs
temp	int	$tmp141	%read{322,334} %write{322,334} %derivs
temp	int	$tmp142	%read{2147483647,-1} %write{322,334}
temp	int	$tmp143	%read{336,336} %write{335,335}
temp	float	$tmp144	%read{338,338} %write{337,337} %derivs
temp	int	$tmp145	%read{340,340} %write{339,339}
temp	int	$tmp146	%read{342,342} %write{341,341}
temp	int	$tmp147	%read{345,345} %write{344,344} %derivs
temp	int	$tmp148	%read{347,347} %write{346,346}
temp	float	$tmp149	%read{351,351} %write{350,350} %derivs
temp	int	$tmp150	%read{353,353} %write{352,352}
temp	int	$tmp151	%read{355,355} %write{354,354}
temp	int	$tmp152	%read{358,358} %write{357,357} %derivs
temp	int	$tmp153	%read{360,360} %write{359,359}
temp	int	$tmp154	%read{365,383} %write{365,383}
temp	int	$tmp155	%read{363,383} %write{364,383}
temp	int	$tmp156	%read{365,383} %write{365,383} %derivs
temp	int	$tmp157	%read{365,383} %write{365,383} %derivs
temp	int	$tmp158	%read{365,383} %write{365,383} %derivs
temp	int	$tmp159	%read{365,383} %write{365,383} %derivs
temp	int	$tmp160	%read{365,383} %write{365,383} %derivs
temp	int	$tmp161	%read{365,383} %write{365,383} %derivs
temp	int	$tmp162	%read{365,383} %write{365,383} %derivs
temp	int	$tmp163	%read{365,383} %write{365,383} %derivs
temp	float	$tmp164	%read{365,383} %write{365,383} %derivs
temp	int	$tmp165	%read{365,383} %write{365,383} %derivs
temp	int	$tmp166	%read{2147483647,-1} %write{365,383}
temp	int	$tmp167	%read{385,385} %write{384,384}
temp	float	$tmp168	%read{387,387} %write{386,386} %derivs
temp	int	$tmp169	%read{389,389} %write{388,388}
temp	int	$tmp170	%read{391,391} %write{390,390}
temp	int	$tmp171	%read{394,394} %write{393,393} %derivs
temp	int	$tmp172	%read{396,396} %write{395,395}
temp	float	$tmp173	%read{400,400} %write{399,399} %derivs
temp	int	$tmp174	%read{402,402} %write{401,401}
temp	int	$tmp175	%read{404,404} %write{403,403}
temp	int	$tmp176	%read{407,407} %write{406,406} %derivs
temp	int	$tmp177	%read{409,409} %write{408,408}
temp	float	$tmp178	%read{413,413} %write{412,412} %derivs
temp	int	$tmp179	%read{415,415} %write{414,414}
temp	int	$tmp180	%read{417,417} %write{416,416}
temp	int	$tmp181	%read{420,420} %write{419,419} %derivs
temp	int	$tmp182	%read{422,422} %write{421,421}
temp	int	$tmp183	%read{427,451} %write{427,451}
temp	int	$tmp184	%read{425,451} %write{426,451}
temp	int	$tmp185	%read{427,451} %write{427,451} %derivs
temp	int	$tmp186	%read{427,451} %write{427,451} %derivs
temp	int	$tmp187	%read{427,451} %write{427,451} %derivs
temp	int	$tmp188	%read{427,451} %write{427,451} %derivs
temp	int	$tmp189	%read{427,451} %write{427,451} %derivs
temp	int	$tmp190	%read{427,451} %write{427,451} %derivs
temp	int	$tmp191	%read{427,451} %write{427,451} %derivs
temp	int	$tmp192	%read{427,451} %write{427,451} %derivs
temp	int	$tmp193	%read{427,451} %write{427,451} %derivs
temp	int	$tmp194	%read{427,451} %write{427,451} %derivs
temp	int	$tmp195	%read{427,451} %write{427,451} %derivs
temp	int	$tmp196	%read{427,451} %write{427,451} %derivs
temp	float	$tmp197	%read{427,451} %write{427,451} %derivs
temp	int	$tmp198	%read{427,451} %write{427,451} %derivs
temp	int	$tmp199	%read{2147483647,-1} %write{427,451}
temp	int	$tmp200	%read{453,453} %write{452,452}
temp	float	$tmp201	%read{455,455} %write{454,454} %derivs
temp	int	$tmp202	%read{457,457} %write{456,456}
temp	int	$tmp203	%read{459,459} %write{458,458}
temp	int	$tmp204	%read{462,462} %write{461,461} %derivs
temp	int	$tmp205	%read{464,464} %write{463,463}
temp	float	$tmp206	%read{468,468} %write{467,467} %derivs
temp	int	$tmp207	%read{470,470} %write{469,469}
temp	int	$tmp208	%read{472,472} %write{471,471}
temp	int	$tmp209	%read{475,475} %write{474,474} %derivs
temp	int	$tmp210	%read{477,477} %write{476,476}
temp	float	$tmp211	%read{481,481} %write{480,480} %derivs
temp	int	$tmp212	%read{483,483} %write{482,482}
temp	int	$tmp213	%read{485,485} %write{484,484}
temp	int	$tmp214	%read{488,488} %write{487,487} %derivs
temp	int	$tmp215	%read{490,490} %write{489,489}
temp	float	$tmp216	%read{494,494} %write{493,493} %derivs
temp	int	$tmp217	%read{496,496} %write{495,495}
temp	int	$tmp218	%read{498,498} %write{497,497}
temp	int	$tmp219	%read{501,501} %write{500,500} %derivs
temp	int	$tmp220	%read{503,503} %write{502,502}
temp	int	$tmp221	%read{508,538} %write{508,538}
temp	int	$tmp222	%read{506,538} %write{507,538}
temp	int	$tmp223	%read{508,538} %write{508,538} %derivs
temp	int	$tmp224	%read{508,538} %write{508,538} %derivs
temp	int	$tmp225	%read{508,538} %write{508,538} %derivs
temp	int	$tmp226	%read{508,538} %write{508,538} %derivs
temp	int	$tmp227	%read{508,538} %write{508,538} %derivs
temp	int	$tmp228	%read{508,538} %write{508,538} %derivs
temp	int	$tmp229	%read{508,538} %write{508,538} %derivs
temp	int	$tmp230	%read{508,538} %write{508,538} %derivs
temp	int	$tmp231	%read{508,538} %write{508,538} %derivs
temp	int	$tmp232	%read{508,538} %write{508,538} %derivs
temp	int	$tmp233	%read{508,538} %write{508,538} %derivs
temp	int	$tmp234	%read{508,538} %write{508,538} %derivs
temp	int	$tmp235	%read{508,538} %write{508,538} %derivs
temp	int	$tmp236	%read{508,538} %write{508,538} %derivs
temp	int	$tmp237	%read{508,538} %write{508,538} %derivs
temp	int	$tmp238	%read{508,538} %write{508,538} %derivs
temp	int	$tmp239	%read{508,538} %write{508,538} %derivs
temp	float	$tmp240	%read{508,538} %write{508,538} %derivs
temp	int	$tmp241	%read{508,538} %write{508,538} %derivs
temp	int	$tmp242	%read{2147483647,-1} %write{508,538}
const	int	$const65	15		%read{538,5820} %write{2147483647,-1}
temp	float	$tmp243	%read{542,542} %write{539,539} %derivs
temp	float	$tmp244	%read{542,542} %write{540,540} %derivs
temp	float	$tmp245	%read{542,542} %write{541,541} %derivs
const	string	$const66	"cell"		%read{545,5825} %write{2147483647,-1}
temp	vector	$tmp246	%read{545,545} %write{544,544} %derivs
temp	float	$tmp247	%read{544,544} %write{543,543} %derivs
const	vector	$const67	0.5 0.5 0.5		%read{546,817} %write{2147483647,-1}
temp	vector	$tmp249	%read{547,547} %write{546,546} %derivs
const	float	$const68	2		%read{547,6058} %write{2147483647,-1}
temp	vector	$tmp250	%read{548,548} %write{547,547} %derivs
temp	int	$tmp251	%read{550,550} %write{549,549}
temp	vector	$tmp252	%read{558,564} %write{554,554} %derivs
temp	float	$tmp253	%read{553,553} %write{552,552} %derivs
temp	float	$tmp254	%read{554,554} %write{553,553} %derivs
temp	float	$tmp255	%read{560,560} %write{559,559} %derivs
temp	float	$tmp256	%read{559,559} %write{558,558} %derivs
temp	float	$tmp257	%read{563,563} %write{562,562} %derivs
temp	float	$tmp258	%read{562,562} %write{561,561} %derivs
temp	float	$tmp259	%read{566,566} %write{565,565} %derivs
temp	float	$tmp260	%read{565,565} %write{564,564} %derivs
temp	int	$tmp261	%read{576,576} %write{575,575}
temp	float	$tmp262	%read{578,578} %write{577,577} %derivs
temp	int	$tmp263	%read{580,580} %write{579,579}
temp	int	$tmp264	%read{582,582} %write{581,581}
temp	int	$tmp265	%read{585,585} %write{584,584} %derivs
temp	int	$tmp266	%read{587,587} %write{586,586}
temp	int	$tmp267	%read{592,604} %write{592,604}
temp	int	$tmp268	%read{590,604} %write{591,604}
temp	int	$tmp269	%read{592,604} %write{592,604} %derivs
temp	int	$tmp270	%read{592,604} %write{592,604} %derivs
temp	int	$tmp271	%read{592,604} %write{592,604} %derivs
temp	int	$tmp272	%read{592,604} %write{592,604} %derivs
temp	int	$tmp273	%read{592,604} %write{592,604} %derivs
temp	int	$tmp274	%read{2147483647,-1} %write{592,604}
temp	int	$tmp275	%read{606,606} %write{605,605}
temp	float	$tmp276	%read{608,608} %write{607,607} %derivs
temp	int	$tmp277	%read{610,610} %write{609,609}
temp	int	$tmp278	%read{612,612} %write{611,611}
temp	int	$tmp279	%read{615,615} %write{614,614} %derivs
temp	int	$tmp280	%read{617,617} %write{616,616}
temp	float	$tmp281	%read{621,621} %write{620,620} %derivs
temp	int	$tmp282	%read{623,623} %write{622,622}
temp	int	$tmp283	%read{625,625} %write{624,624}
temp	int	$tmp284	%read{628,628} %write{627,627} %derivs
temp	int	$tmp285	%read{630,630} %write{629,629}
temp	int	$tmp286	%read{635,653} %write{635,653}
temp	int	$tmp287	%read{633,653} %write{634,653}
temp	int	$tmp288	%read{635,653} %write{635,653} %derivs
temp	int	$tmp289	%read{635,653} %write{635,653} %derivs
temp	int	$tmp290	%read{635,653} %write{635,653} %derivs
temp	int	$tmp291	%read{635,653} %write{635,653} %derivs
temp	int	$tmp292	%read{635,653} %write{635,653} %derivs
temp	int	$tmp293	%read{635,653} %write{635,653} %derivs
temp	int	$tmp294	%read{635,653} %write{635,653} %derivs
temp	int	$tmp295	%read{635,653} %write{635,653} %derivs
temp	float	$tmp296	%read{635,653} %write{635,653} %derivs
temp	int	$tmp297	%read{635,653} %write{635,653} %derivs
temp	int	$tmp298	%read{2147483647,-1} %write{635,653}
temp	int	$tmp299	%read{655,655} %write{654,654}
temp	float	$tmp300	%read{657,657} %write{656,656} %derivs
temp	int	$tmp301	%read{659,659} %write{658,658}
temp	int	$tmp302	%read{661,661} %write{660,660}
temp	int	$tmp303	%read{664,664} %write{663,663} %derivs
temp	int	$tmp304	%read{666,666} %write{665,665}
temp	float	$tmp305	%read{670,670} %write{669,669} %derivs
temp	int	$tmp306	%read{672,672} %write{671,671}
temp	int	$tmp307	%read{674,674} %write{673,673}
temp	int	$tmp308	%read{677,677} %write{676,676} %derivs
temp	int	$tmp309	%read{679,679} %write{678,678}
temp	float	$tmp310	%read{683,683} %write{682,682} %derivs
temp	int	$tmp311	%read{685,685} %write{684,684}
temp	int	$tmp312	%read{687,687} %write{686,686}
temp	int	$tmp313	%read{690,690} %write{689,689} %derivs
temp	int	$tmp314	%read{692,692} %write{691,691}
temp	int	$tmp315	%read{697,721} %write{697,721}
temp	int	$tmp316	%read{695,721} %write{696,721}
temp	int	$tmp317	%read{697,721} %write{697,721} %derivs
temp	int	$tmp318	%read{697,721} %write{697,721} %derivs
temp	int	$tmp319	%read{697,721} %write{697,721} %derivs
temp	int	$tmp320	%read{697,721} %write{697,721} %derivs
temp	int	$tmp321	%read{697,721} %write{697,721} %derivs
temp	int	$tmp322	%read{697,721} %write{697,721} %derivs
temp	int	$tmp323	%read{697,721} %write{697,721} %derivs
temp	int	$tmp324	%read{697,721} %write{697,721} %derivs
temp	int	$tmp325	%read{697,721} %write{697,721} %derivs
temp	int	$tmp326	%read{697,721} %write{697,721} %derivs
temp	int	$tmp327	%read{697,721} %write{697,721} %derivs
temp	int	$tmp328	%read{697,721} %write{697,721} %derivs
temp	float	$tmp329	%read{697,721} %write{697,721} %derivs
temp	int	$tmp330	%read{697,721} %write{697,721} %derivs
temp	int	$tmp331	%read{2147483647,-1} %write{697,721}
temp	int	$tmp332	%read{723,723} %write{722,722}
temp	float	$tmp333	%read{725,725} %write{724,724} %derivs
temp	int	$tmp334	%read{727,727} %write{726,726}
temp	int	$tmp335	%read{729,729} %write{728,728}
temp	int	$tmp336	%read{732,732} %write{731,731} %derivs
temp	int	$tmp337	%read{734,734} %write{733,733}
temp	float	$tmp338	%read{738,738} %write{737,737} %derivs
temp	int	$tmp339	%read{740,740} %write{739,739}
temp	int	$tmp340	%read{742,742} %write{741,741}
temp	int	$tmp341	%read{745,745} %write{744,744} %derivs
temp	int	$tmp342	%read{747,747} %write{746,746}
temp	float	$tmp343	%read{751,751} %write{750,750} %derivs
temp	int	$tmp344	%read{753,753} %write{752,752}
temp	int	$tmp345	%read{755,755} %write{754,754}
temp	int	$tmp346	%read{758,758} %write{757,757} %derivs
temp	int	$tmp347	%read{760,760} %write{759,759}
temp	float	$tmp348	%read{764,764} %write{763,763} %derivs
temp	int	$tmp349	%read{766,766} %write{765,765}
temp	int	$tmp350	%read{768,768} %write{767,767}
temp	int	$tmp351	%read{771,771} %write{770,770} %derivs
temp	int	$tmp352	%read{773,773} %write{772,772}
temp	int	$tmp353	%read{778,808} %write{778,808}
temp	int	$tmp354	%read{776,808} %write{777,808}
temp	int	$tmp355	%read{778,808} %write{778,808} %derivs
temp	int	$tmp356	%read{778,808} %write{778,808} %derivs
temp	int	$tmp357	%read{778,808} %write{778,808} %derivs
temp	int	$tmp358	%read{778,808} %write{778,808} %derivs
temp	int	$tmp359	%read{778,808} %write{778,808} %derivs
temp	int	$tmp360	%read{778,808} %write{778,808} %derivs
temp	int	$tmp361	%read{778,808} %write{778,808} %derivs
temp	int	$tmp362	%read{778,808} %write{778,808} %derivs
temp	int	$tmp363	%read{778,808} %write{778,808} %derivs
temp	int	$tmp364	%read{778,808} %write{778,808} %derivs
temp	int	$tmp365	%read{778,808} %write{778,808} %derivs
temp	int	$tmp366	%read{778,808} %write{778,808} %derivs
temp	int	$tmp367	%read{778,808} %write{778,808} %derivs
temp	int	$tmp368	%read{778,808} %write{778,808} %derivs
temp	int	$tmp369	%read{778,808} %write{778,808} %derivs
temp	int	$tmp370	%read{778,808} %write{778,808} %derivs
temp	int	$tmp371	%read{778,808} %write{778,808} %derivs
temp	float	$tmp372	%read{778,808} %write{778,808} %derivs
temp	int	$tmp373	%read{778,808} %write{778,808} %derivs
temp	int	$tmp374	%read{2147483647,-1} %write{778,808}
temp	float	$tmp375	%read{812,812} %write{809,809} %derivs
temp	float	$tmp376	%read{812,812} %write{810,810} %derivs
temp	float	$tmp377	%read{812,812} %write{811,811} %derivs
temp	vector	$tmp378	%read{816,816} %write{815,815} %derivs
temp	float	$tmp379	%read{814,814} %write{813,813} %derivs
temp	float	$tmp380	%read{815,815} %write{814,814} %derivs
temp	vector	$tmp382	%read{818,818} %write{817,817} %derivs
temp	vector	$tmp383	%read{819,819} %write{818,818} %derivs
temp	int	$tmp384	%read{821,821} %write{820,820}
temp	int	$tmp385	%read{823,823} %write{822,822}
temp	int	$tmp386	%read{826,826} %write{825,825}
temp	float	$tmp387	%read{833,833} %write{829,829} %derivs
temp	int	$tmp388	%read{845,845} %write{844,844}
temp	float	$tmp389	%read{847,847} %write{846,846} %derivs
temp	int	$tmp390	%read{849,849} %write{848,848}
temp	int	$tmp391	%read{851,851} %write{850,850}
temp	int	$tmp392	%read{854,854} %write{853,853} %derivs
temp	int	$tmp393	%read{856,856} %write{855,855}
temp	int	$tmp394	%read{861,873} %write{861,873}
temp	int	$tmp395	%read{859,873} %write{860,873}
temp	int	$tmp396	%read{861,873} %write{861,873} %derivs
temp	int	$tmp397	%read{861,873} %write{861,873} %derivs
temp	int	$tmp398	%read{861,873} %write{861,873} %derivs
temp	int	$tmp399	%read{861,873} %write{861,873} %derivs
temp	int	$tmp400	%read{861,873} %write{861,873} %derivs
temp	int	$tmp401	%read{2147483647,-1} %write{861,873}
temp	int	$tmp402	%read{875,875} %write{874,874}
temp	float	$tmp403	%read{877,877} %write{876,876} %derivs
temp	int	$tmp404	%read{879,879} %write{878,878}
temp	int	$tmp405	%read{881,881} %write{880,880}
temp	int	$tmp406	%read{884,884} %write{883,883} %derivs
temp	int	$tmp407	%read{886,886} %write{885,885}
temp	float	$tmp408	%read{890,890} %write{889,889} %derivs
temp	int	$tmp409	%read{892,892} %write{891,891}
temp	int	$tmp410	%read{894,894} %write{893,893}
temp	int	$tmp411	%read{897,897} %write{896,896} %derivs
temp	int	$tmp412	%read{899,899} %write{898,898}
temp	int	$tmp413	%read{904,922} %write{904,922}
temp	int	$tmp414	%read{902,922} %write{903,922}
temp	int	$tmp415	%read{904,922} %write{904,922} %derivs
temp	int	$tmp416	%read{904,922} %write{904,922} %derivs
temp	int	$tmp417	%read{904,922} %write{904,922} %derivs
temp	int	$tmp418	%read{904,922} %write{904,922} %derivs
temp	int	$tmp419	%read{904,922} %write{904,922} %derivs
temp	int	$tmp420	%read{904,922} %write{904,922} %derivs
temp	int	$tmp421	%read{904,922} %write{904,922} %derivs
temp	int	$tmp422	%read{904,922} %write{904,922} %derivs
temp	float	$tmp423	%read{904,922} %write{904,922} %derivs
temp	int	$tmp424	%read{904,922} %write{904,922} %derivs
temp	int	$tmp425	%read{2147483647,-1} %write{904,922}
temp	int	$tmp426	%read{924,924} %write{923,923}
temp	float	$tmp427	%read{926,926} %write{925,925} %derivs
temp	int	$tmp428	%read{928,928} %write{927,927}
temp	int	$tmp429	%read{930,930} %write{929,929}
temp	int	$tmp430	%read{933,933} %write{932,932} %derivs
temp	int	$tmp431	%read{935,935} %write{934,934}
temp	float	$tmp432	%read{939,939} %write{938,938} %derivs
temp	int	$tmp433	%read{941,941} %write{940,940}
temp	int	$tmp434	%read{943,943} %write{942,942}
temp	int	$tmp435	%read{946,946} %write{945,945} %derivs
temp	int	$tmp436	%read{948,948} %write{947,947}
temp	float	$tmp437	%read{952,952} %write{951,951} %derivs
temp	int	$tmp438	%read{954,954} %write{953,953}
temp	int	$tmp439	%read{956,956} %write{955,955}
temp	int	$tmp440	%read{959,959} %write{958,958} %derivs
temp	int	$tmp441	%read{961,961} %write{960,960}
temp	int	$tmp442	%read{966,990} %write{966,990}
temp	int	$tmp443	%read{964,990} %write{965,990}
temp	int	$tmp444	%read{966,990} %write{966,990} %derivs
temp	int	$tmp445	%read{966,990} %write{966,990} %derivs
temp	int	$tmp446	%read{966,990} %write{966,990} %derivs
temp	int	$tmp447	%read{966,990} %write{966,990} %derivs
temp	int	$tmp448	%read{966,990} %write{966,990} %derivs
temp	int	$tmp449	%read{966,990} %write{966,990} %derivs
temp	int	$tmp450	%read{966,990} %write{966,990} %derivs
temp	int	$tmp451	%read{966,990} %write{966,990} %derivs
temp	int	$tmp452	%read{966,990} %write{966,990} %derivs
temp	int	$tmp453	%read{966,990} %write{966,990} %derivs
temp	int	$tmp454	%read{966,990} %write{966,990} %derivs
temp	int	$tmp455	%read{966,990} %write{966,990} %derivs
temp	float	$tmp456	%read{966,990} %write{966,990} %derivs
temp	int	$tmp457	%read{966,990} %write{966,990} %derivs
temp	int	$tmp458	%read{2147483647,-1} %write{966,990}
temp	int	$tmp459	%read{992,992} %write{991,991}
temp	float	$tmp460	%read{994,994} %write{993,993} %derivs
temp	int	$tmp461	%read{996,996} %write{995,995}
temp	int	$tmp462	%read{998,998} %write{997,997}
temp	int	$tmp463	%read{1001,1001} %write{1000,1000} %derivs
temp	int	$tmp464	%read{1003,1003} %write{1002,1002}
temp	float	$tmp465	%read{1007,1007} %write{1006,1006} %derivs
temp	int	$tmp466	%read{1009,1009} %write{1008,1008}
temp	int	$tmp467	%read{1011,1011} %write{1010,1010}
temp	int	$tmp468	%read{1014,1014} %write{1013,1013} %derivs
temp	int	$tmp469	%read{1016,1016} %write{1015,1015}
temp	float	$tmp470	%read{1020,1020} %write{1019,1019} %derivs
temp	int	$tmp471	%read{1022,1022} %write{1021,1021}
temp	int	$tmp472	%read{1024,1024} %write{1023,1023}
temp	int	$tmp473	%read{1027,1027} %write{1026,1026} %derivs
temp	int	$tmp474	%read{1029,1029} %write{1028,1028}
temp	float	$tmp475	%read{1033,1033} %write{1032,1032} %derivs
temp	int	$tmp476	%read{1035,1035} %write{1034,1034}
temp	int	$tmp477	%read{1037,1037} %write{1036,1036}
temp	int	$tmp478	%read{1040,1040} %write{1039,1039} %derivs
temp	int	$tmp479	%read{1042,1042} %write{1041,1041}
temp	int	$tmp480	%read{1047,1077} %write{1047,1077}
temp	int	$tmp481	%read{1045,1077} %write{1046,1077}
temp	int	$tmp482	%read{1047,1077} %write{1047,1077} %derivs
temp	int	$tmp483	%read{1047,1077} %write{1047,1077} %derivs
temp	int	$tmp484	%read{1047,1077} %write{1047,1077} %derivs
temp	int	$tmp485	%read{1047,1077} %write{1047,1077} %derivs
temp	int	$tmp486	%read{1047,1077} %write{1047,1077} %derivs
temp	int	$tmp487	%read{1047,1077} %write{1047,1077} %derivs
temp	int	$tmp488	%read{1047,1077} %write{1047,1077} %derivs
temp	int	$tmp489	%read{1047,1077} %write{1047,1077} %derivs
temp	int	$tmp490	%read{1047,1077} %write{1047,1077} %derivs
temp	int	$tmp491	%read{1047,1077} %write{1047,1077} %derivs
temp	int	$tmp492	%read{1047,1077} %write{1047,1077} %derivs
temp	int	$tmp493	%read{1047,1077} %write{1047,1077} %derivs
temp	int	$tmp494	%read{1047,1077} %write{1047,1077} %derivs
temp	int	$tmp495	%read{1047,1077} %write{1047,1077} %derivs
temp	int	$tmp496	%read{1047,1077} %write{1047,1077} %derivs
temp	int	$tmp497	%read{1047,1077} %write{1047,1077} %derivs
temp	int	$tmp498	%read{1047,1077} %write{1047,1077} %derivs
temp	float	$tmp499	%read{1047,1077} %write{1047,1077} %derivs
temp	int	$tmp500	%read{1047,1077} %write{1047,1077} %derivs
temp	int	$tmp501	%read{2147483647,-1} %write{1047,1077}
temp	float	$tmp502	%read{1080,1080} %write{1079,1079} %derivs
const	float	$const69	1223		%read{1081,1081} %write{2147483647,-1}
temp	float	$tmp503	%read{1082,1082} %write{1081,1081} %derivs
temp	int	$tmp504	%read{1084,1087} %write{1083,1086}
temp	int	$tmp505	%read{1086,1086} %write{1085,1085}
temp	int	$tmp506	%read{1088,1091} %write{1087,1090}
temp	int	$tmp507	%read{1090,1090} %write{1089,1089}
temp	int	$tmp508	%read{1092,1095} %write{1091,1094}
temp	int	$tmp509	%read{1094,1094} %write{1093,1093}
temp	int	$tmp510	%read{1106,5916} %write{1106,5916}
temp	int	$tmp511	%read{1104,5916} %write{1105,5916}
temp	point	$tmp512	%read{1106,5916} %write{1106,5916}
temp	int	$tmp514	%read{1106,5916} %write{1106,5916}
temp	int	$tmp515	%read{1106,5916} %write{1106,5916}
temp	float	$tmp516	%read{1106,5916} %write{1106,5916}
temp	point	$tmp517	%read{1106,5916} %write{1106,5916}
temp	int	$tmp518	%read{1106,5916} %write{1106,5916}
temp	point	$tmp519	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp520	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp521	%read{1106,5916} %write{1106,5916}
temp	int	$tmp522	%read{1106,5916} %write{1106,5916}
temp	float	$tmp523	%read{1106,5916} %write{1106,5916}
temp	float	$tmp524	%read{1106,5916} %write{1106,5916}
const	string	$const70	"RixMod"		%read{1130,1433} %write{2147483647,-1}
temp	int	$tmp525	%read{1106,5916} %write{1106,5916}
temp	float	$tmp526	%read{1106,5916} %write{1106,5916}
temp	float	$tmp527	%read{1106,5916} %write{1106,5916}
temp	float	$tmp528	%read{1106,5916} %write{1106,5916}
temp	int	$tmp529	%read{1106,5916} %write{1106,5916}
temp	float	$tmp530	%read{1106,5916} %write{1106,5916}
temp	float	$tmp531	%read{1106,5916} %write{1106,5916}
temp	int	$tmp532	%read{1106,5916} %write{1106,5916}
temp	float	$tmp533	%read{1106,5916} %write{1106,5916}
temp	float	$tmp534	%read{1106,5916} %write{1106,5916}
temp	float	$tmp535	%read{1106,5916} %write{1106,5916}
temp	int	$tmp536	%read{1106,5916} %write{1106,5916}
temp	float	$tmp537	%read{1106,5916} %write{1106,5916}
temp	float	$tmp538	%read{1106,5916} %write{1106,5916}
temp	float	$tmp539	%read{1106,5916} %write{1106,5916}
temp	float	$tmp540	%read{1106,5916} %write{1106,5916}
temp	float	$tmp541	%read{1106,5916} %write{1106,5916}
temp	int	$tmp542	%read{1106,5916} %write{1106,5916}
temp	float	$tmp543	%read{1106,5916} %write{1106,5916}
temp	float	$tmp544	%read{1106,5916} %write{1106,5916}
temp	float	$tmp545	%read{1106,5916} %write{1106,5916}
temp	int	$tmp546	%read{1106,5916} %write{1106,5916}
temp	int	$tmp547	%read{1106,5916} %write{1106,5916}
const	float	$const71	7		%read{1172,1172} %write{2147483647,-1}
temp	float	$tmp548	%read{1106,5916} %write{1106,5916} %derivs
const	float	$const72	3		%read{1173,1173} %write{2147483647,-1}
temp	float	$tmp549	%read{1106,5916} %write{1106,5916} %derivs
const	float	$const73	11		%read{1174,1174} %write{2147483647,-1}
temp	float	$tmp550	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp551	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp552	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp553	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp554	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp555	%read{1106,5916} %write{1106,5916}
temp	float	$tmp556	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp557	%read{1106,5916} %write{1106,5916}
temp	int	$tmp558	%read{1106,5916} %write{1106,5916}
temp	int	$tmp559	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp560	%read{1106,5916} %write{1106,5916}
temp	int	$tmp561	%read{1106,5916} %write{1106,5916}
temp	int	$tmp562	%read{1106,5916} %write{1106,5916}
temp	int	$tmp563	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp564	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp565	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp566	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp567	%read{1106,5916} %write{1106,5916}
temp	int	$tmp568	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp569	%read{1106,5916} %write{1106,5916}
temp	float	$tmp570	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp571	%read{1106,5916} %write{1106,5916}
temp	int	$tmp572	%read{1106,5916} %write{1106,5916}
temp	int	$tmp573	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp574	%read{1106,5916} %write{1106,5916}
temp	float	$tmp575	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp576	%read{1106,5916} %write{1106,5916}
temp	int	$tmp577	%read{1106,5916} %write{1106,5916}
temp	int	$tmp578	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp579	%read{1106,5916} %write{1106,5916}
temp	int	$tmp580	%read{1106,5916} %write{1106,5916}
temp	int	$tmp581	%read{1106,5916} %write{1106,5916}
temp	int	$tmp582	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp583	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp584	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp585	%read{1106,5916} %write{1106,5916}
temp	int	$tmp586	%read{1106,5916} %write{1106,5916}
temp	int	$tmp587	%read{1106,5916} %write{1106,5916}
temp	int	$tmp588	%read{1106,5916} %write{1106,5916}
temp	int	$tmp589	%read{1106,5916} %write{1106,5916}
temp	float	$tmp590	%read{1106,5916} %write{1106,5916}
temp	int	$tmp591	%read{1106,5916} %write{1106,5916}
temp	int	$tmp592	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp593	%read{1106,5916} %write{1106,5916}
temp	float	$tmp594	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp595	%read{1106,5916} %write{1106,5916}
temp	int	$tmp596	%read{1106,5916} %write{1106,5916}
temp	int	$tmp597	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp598	%read{1106,5916} %write{1106,5916}
temp	float	$tmp599	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp600	%read{1106,5916} %write{1106,5916}
temp	int	$tmp601	%read{1106,5916} %write{1106,5916}
temp	int	$tmp602	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp603	%read{1106,5916} %write{1106,5916}
temp	float	$tmp604	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp605	%read{1106,5916} %write{1106,5916}
temp	int	$tmp606	%read{1106,5916} %write{1106,5916}
temp	int	$tmp607	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp608	%read{1106,5916} %write{1106,5916}
temp	int	$tmp609	%read{1106,5916} %write{1106,5916}
temp	int	$tmp610	%read{1106,5916} %write{1106,5916}
temp	int	$tmp611	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp612	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp613	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp614	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp615	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp616	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp617	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp618	%read{1106,5916} %write{1106,5916}
temp	int	$tmp619	%read{1106,5916} %write{1106,5916}
temp	int	$tmp620	%read{1106,5916} %write{1106,5916}
temp	int	$tmp621	%read{1106,5916} %write{1106,5916}
temp	int	$tmp622	%read{1106,5916} %write{1106,5916}
temp	float	$tmp623	%read{1106,5916} %write{1106,5916}
temp	int	$tmp624	%read{1106,5916} %write{1106,5916}
temp	int	$tmp625	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp626	%read{1106,5916} %write{1106,5916}
temp	float	$tmp627	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp628	%read{1106,5916} %write{1106,5916}
temp	int	$tmp629	%read{1106,5916} %write{1106,5916}
temp	int	$tmp630	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp631	%read{1106,5916} %write{1106,5916}
temp	float	$tmp632	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp633	%read{1106,5916} %write{1106,5916}
temp	int	$tmp634	%read{1106,5916} %write{1106,5916}
temp	int	$tmp635	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp636	%read{1106,5916} %write{1106,5916}
temp	float	$tmp637	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp638	%read{1106,5916} %write{1106,5916}
temp	int	$tmp639	%read{1106,5916} %write{1106,5916}
temp	int	$tmp640	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp641	%read{1106,5916} %write{1106,5916}
temp	float	$tmp642	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp643	%read{1106,5916} %write{1106,5916}
temp	int	$tmp644	%read{1106,5916} %write{1106,5916}
temp	int	$tmp645	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp646	%read{1106,5916} %write{1106,5916}
temp	int	$tmp647	%read{1106,5916} %write{1106,5916}
temp	int	$tmp648	%read{1106,5916} %write{1106,5916}
temp	int	$tmp649	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp650	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp651	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp652	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp653	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp654	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp655	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp656	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp657	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp658	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp659	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp660	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp661	%read{1106,5916} %write{1106,5916}
temp	int	$tmp662	%read{1106,5916} %write{1106,5916}
temp	int	$tmp663	%read{1106,5916} %write{1106,5916}
temp	int	$tmp664	%read{1106,5916} %write{1106,5916}
temp	int	$tmp665	%read{1106,5916} %write{1106,5916}
temp	float	$tmp666	%read{1106,5916} %write{1106,5916}
temp	int	$tmp667	%read{1106,5916} %write{1106,5916}
temp	int	$tmp668	%read{2147483647,-1} %write{1106,5916}
temp	float	$tmp669	%read{1106,5916} %write{1106,5916}
const	float	$const74	10000		%read{1431,1431} %write{2147483647,-1}
temp	float	$tmp670	%read{1106,5916} %write{1106,5916}
temp	float	$tmp671	%read{1106,5916} %write{1106,5916}
const	float	$const75	10		%read{1432,1432} %write{2147483647,-1}
temp	int	$tmp672	%read{1106,5916} %write{1106,5916}
temp	float	$tmp673	%read{1106,5916} %write{1106,5916}
temp	float	$tmp674	%read{1106,5916} %write{1106,5916}
temp	float	$tmp675	%read{1106,5916} %write{1106,5916}
temp	int	$tmp676	%read{1106,5916} %write{1106,5916}
const	string	$const76	"PxrMultiTexture: Unknown texture order"		%read{1446,1446} %write{2147483647,-1}
temp	int	$tmp677	%read{1106,5916} %write{1106,5916}
temp	int	$tmp678	%read{1106,5916} %write{1106,5916}
temp	color	$tmp679	%read{1106,5916} %write{1106,5916}
temp	int	$tmp681	%read{1106,5916} %write{1106,5916}
temp	int	$tmp682	%read{1106,5916} %write{1106,5916}
temp	int	$tmp683	%read{1106,5916} %write{1106,5916}
temp	color	$tmp684.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp684.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
const	string	$const77	"hexTileTextureExponents"		%read{1457,1799} %write{2147483647,-1}
const	float	$const78	0.5		%read{1458,6078} %write{2147483647,-1}
const	float	$const80	1024		%read{1458,1800} %write{2147483647,-1}
temp	int	$tmp685	%read{1106,5916} %write{1106,5916}
temp	int	$tmp686	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp687	%read{1106,5916} %write{1106,5916}
temp	int	$tmp688	%read{1106,5916} %write{1106,5916}
temp	int	$tmp689	%read{1106,5916} %write{1106,5916}
temp	float	$tmp690	%read{1106,5916} %write{1106,5916}
temp	int	$tmp691	%read{1106,5916} %write{1106,5916}
temp	float	$tmp692	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp693	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp694	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp695	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp696	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp697	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp698	%read{1106,5916} %write{1106,5916} %derivs
const	color	$const81	0.5 0.5 0.5		%read{1483,5963} %write{2147483647,-1}
temp	color	$tmp700	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp701	%read{1106,5916} %write{1106,5916}
temp	color	$tmp702.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp702.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp703	%read{1106,5916} %write{1106,5916}
temp	int	$tmp704	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp705	%read{1106,5916} %write{1106,5916}
temp	int	$tmp706	%read{1106,5916} %write{1106,5916}
temp	int	$tmp707	%read{1106,5916} %write{1106,5916}
temp	float	$tmp708	%read{1106,5916} %write{1106,5916}
temp	int	$tmp709	%read{1106,5916} %write{1106,5916}
temp	float	$tmp710	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp711	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp712	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp713	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp714	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp715	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp716	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp718	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp719	%read{1106,5916} %write{1106,5916}
temp	color	$tmp720.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp720.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp721	%read{1106,5916} %write{1106,5916}
temp	int	$tmp722	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp723	%read{1106,5916} %write{1106,5916}
temp	int	$tmp724	%read{1106,5916} %write{1106,5916}
temp	int	$tmp725	%read{1106,5916} %write{1106,5916}
temp	float	$tmp726	%read{1106,5916} %write{1106,5916}
temp	int	$tmp727	%read{1106,5916} %write{1106,5916}
temp	float	$tmp728	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp729	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp730	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp731	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp732	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp733	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp734	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp736	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp737	%read{1106,5916} %write{1106,5916}
temp	color	$tmp738.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp738.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp739	%read{1106,5916} %write{1106,5916}
temp	int	$tmp740	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp741	%read{1106,5916} %write{1106,5916}
temp	int	$tmp742	%read{1106,5916} %write{1106,5916}
temp	int	$tmp743	%read{1106,5916} %write{1106,5916}
temp	float	$tmp744	%read{1106,5916} %write{1106,5916}
temp	int	$tmp745	%read{1106,5916} %write{1106,5916}
temp	float	$tmp746	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp747	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp748	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp749	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp750	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp751	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp752	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp754	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp755	%read{1106,5916} %write{1106,5916}
temp	color	$tmp756.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp756.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp757	%read{1106,5916} %write{1106,5916}
temp	int	$tmp758	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp759	%read{1106,5916} %write{1106,5916}
temp	int	$tmp760	%read{1106,5916} %write{1106,5916}
temp	int	$tmp761	%read{1106,5916} %write{1106,5916}
temp	float	$tmp762	%read{1106,5916} %write{1106,5916}
temp	int	$tmp763	%read{1106,5916} %write{1106,5916}
temp	float	$tmp764	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp765	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp766	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp767	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp768	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp769	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp770	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp772	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp773	%read{1106,5916} %write{1106,5916}
temp	color	$tmp774.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp774.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp775	%read{1106,5916} %write{1106,5916}
temp	int	$tmp776	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp777	%read{1106,5916} %write{1106,5916}
temp	int	$tmp778	%read{1106,5916} %write{1106,5916}
temp	int	$tmp779	%read{1106,5916} %write{1106,5916}
temp	float	$tmp780	%read{1106,5916} %write{1106,5916}
temp	int	$tmp781	%read{1106,5916} %write{1106,5916}
temp	float	$tmp782	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp783	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp784	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp785	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp786	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp787	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp788	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp790	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp791	%read{1106,5916} %write{1106,5916}
temp	color	$tmp792.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp792.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp793	%read{1106,5916} %write{1106,5916}
temp	int	$tmp794	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp795	%read{1106,5916} %write{1106,5916}
temp	int	$tmp796	%read{1106,5916} %write{1106,5916}
temp	int	$tmp797	%read{1106,5916} %write{1106,5916}
temp	float	$tmp798	%read{1106,5916} %write{1106,5916}
temp	int	$tmp799	%read{1106,5916} %write{1106,5916}
temp	float	$tmp800	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp801	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp802	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp803	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp804	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp805	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp806	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp808	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp809	%read{1106,5916} %write{1106,5916}
temp	color	$tmp810.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp810.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp811	%read{1106,5916} %write{1106,5916}
temp	int	$tmp812	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp813	%read{1106,5916} %write{1106,5916}
temp	int	$tmp814	%read{1106,5916} %write{1106,5916}
temp	int	$tmp815	%read{1106,5916} %write{1106,5916}
temp	float	$tmp816	%read{1106,5916} %write{1106,5916}
temp	int	$tmp817	%read{1106,5916} %write{1106,5916}
temp	float	$tmp818	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp819	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp820	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp821	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp822	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp823	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp824	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp826	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp827	%read{1106,5916} %write{1106,5916}
temp	color	$tmp828.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp828.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp829	%read{1106,5916} %write{1106,5916}
temp	int	$tmp830	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp831	%read{1106,5916} %write{1106,5916}
temp	int	$tmp832	%read{1106,5916} %write{1106,5916}
temp	int	$tmp833	%read{1106,5916} %write{1106,5916}
temp	float	$tmp834	%read{1106,5916} %write{1106,5916}
temp	int	$tmp835	%read{1106,5916} %write{1106,5916}
temp	float	$tmp836	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp837	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp838	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp839	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp840	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp841	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp842	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp844	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp845	%read{1106,5916} %write{1106,5916}
temp	color	$tmp846.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp846.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp847	%read{1106,5916} %write{1106,5916}
temp	int	$tmp848	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp849	%read{1106,5916} %write{1106,5916}
temp	int	$tmp850	%read{1106,5916} %write{1106,5916}
temp	int	$tmp851	%read{1106,5916} %write{1106,5916}
temp	float	$tmp852	%read{1106,5916} %write{1106,5916}
temp	int	$tmp853	%read{1106,5916} %write{1106,5916}
temp	float	$tmp854	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp855	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp856	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp857	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp858	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp859	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp860	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp862	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp863	%read{1106,5916} %write{1106,5916}
temp	point	$tmp864.s	%read{2147483647,-1} %write{1106,5916}
temp	point	$tmp864.t	%read{2147483647,-1} %write{1106,5916}
temp	point	$tmp864.w	%read{1106,5916} %write{1106,5916}
temp	point	$tmp864.r	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp866	%read{1106,5916} %write{1106,5916}
temp	int	$tmp867	%read{1106,5916} %write{1106,5916}
temp	color	$tmp868	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp869.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp869.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp870.s	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp870.t	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp870.w	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp870.r	%read{2147483647,-1} %write{1106,5916}
temp	float	$tmp871	%read{1106,5916} %write{1106,5916}
temp	color	$tmp872	%read{1106,5916} %write{1106,5916}
const	string	$const82	"hexTileLookup"		%read{1856,4671} %write{2147483647,-1}
temp	int	$tmp873	%read{1106,5916} %write{1106,5916}
temp	int	$tmp874	%read{1106,5916} %write{1106,5916}
temp	int	$tmp875	%read{1106,5916} %write{1106,5916}
temp	float	$tmp876	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp877	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp878	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp879	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp880	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp881	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp882	%read{1106,5916} %write{1106,5916}
temp	int	$tmp883	%read{1106,5916} %write{1106,5916}
temp	int	$tmp884	%read{1106,5916} %write{1106,5916}
temp	int	$tmp885	%read{1106,5916} %write{1106,5916}
const	string	$const83	"PxrTxMipControls"		%read{1902,5007} %write{2147483647,-1}
temp	int	$tmp886	%read{1106,5916} %write{1106,5916}
temp	float	$tmp887	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp888	%read{1106,5916} %write{1106,5916}
temp	int	$tmp889	%read{1106,5916} %write{1106,5916}
temp	float	$tmp890	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp891	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp892	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp893	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp894	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp895	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp896	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp897	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp898	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp899	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp900	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp901	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp902	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp903	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp904	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp905	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp906	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp907	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp908	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp909	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp910	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp911	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp912	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp913	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp914	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp915	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp916	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp917	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp918	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp919	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp920	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp921	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp922	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp923	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp924	%read{1106,5916} %write{1106,5916}
temp	int	$tmp925	%read{1106,5916} %write{1106,5916}
temp	int	$tmp926	%read{1106,5916} %write{1106,5916}
temp	int	$tmp927	%read{1106,5916} %write{1106,5916}
temp	int	$tmp928	%read{1106,5916} %write{1106,5916}
temp	int	$tmp929	%read{1106,5916} %write{1106,5916}
temp	int	$tmp930	%read{1106,5916} %write{1106,5916}
temp	float	$tmp931	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp932	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp933	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp934.x	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp934.y	%read{1106,5916} %write{1106,5916} %derivs
const	string	$const84	"GenBasisTB"		%read{1991,4806} %write{2147483647,-1}
temp	float	$tmp935	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp936	%read{1106,5916} %write{1106,5916}
temp	float	$tmp937	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp938	%read{1106,5916} %write{1106,5916}
temp	float	$tmp939	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp940	%read{1106,5916} %write{1106,5916}
temp	int	$tmp941	%read{1106,5916} %write{1106,5916}
const	float	$const85	-1		%read{2002,5466} %write{2147483647,-1}
const	string	$const86	"Dx"		%read{2004,4819} %write{2147483647,-1}
const	string	$const87	"Dy"		%read{2007,4822} %write{2147483647,-1}
temp	float	$tmp942.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp942.y	%read{1106,5916} %write{1106,5916}
const	string	$const88	"dot"		%read{2012,4827} %write{2147483647,-1}
temp	float	$tmp943	%read{1106,5916} %write{1106,5916}
temp	float	$tmp944	%read{1106,5916} %write{1106,5916}
temp	int	$tmp945	%read{1106,5916} %write{1106,5916}
temp	float	$tmp946.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp946.y	%read{1106,5916} %write{1106,5916}
const	string	$const89	"__operator__mul__"		%read{2022,5478} %write{2147483647,-1}
temp	float	$tmp947.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp947.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp948	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp949	%read{1106,5916} %write{1106,5916}
temp	float	$tmp950	%read{1106,5916} %write{1106,5916}
temp	int	$tmp951	%read{1106,5916} %write{1106,5916}
temp	float	$tmp952	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp953	%read{1106,5916} %write{1106,5916}
const	string	$const90	"setupNormalMapHex"		%read{2038,4853} %write{2147483647,-1}
temp	color	$tmp954	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp955	%read{1106,5916} %write{1106,5916}
temp	int	$tmp956	%read{1106,5916} %write{1106,5916}
temp	float	$tmp957	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp958	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp959	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp960	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp961	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp962	%read{1106,5916} %write{1106,5916} %derivs
temp	vector	$tmp963	%read{1106,5916} %write{1106,5916}
temp	float	$tmp964.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp964.y	%read{1106,5916} %write{1106,5916}
const	string	$const91	"TspaceNormalToDerivative"		%read{2057,5455} %write{2147483647,-1}
const	float	$const92	128		%read{2058,5456} %write{2147483647,-1}
temp	float	$tmp965	%read{1106,5916} %write{1106,5916}
temp	float	$tmp966	%read{1106,5916} %write{1106,5916}
temp	float	$tmp967	%read{1106,5916} %write{1106,5916}
temp	float	$tmp968	%read{1106,5916} %write{1106,5916}
temp	float	$tmp969	%read{1106,5916} %write{1106,5916}
temp	float	$tmp970.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp970.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp971.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp971.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp972	%read{1106,5916} %write{1106,5916}
const	string	$const93	"__operator__neg__"		%read{2073,5471} %write{2147483647,-1}
const	string	$const94	"__operator__div__"		%read{2076,5474} %write{2147483647,-1}
temp	float	$tmp973.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp973.y	%read{1106,5916} %write{1106,5916}
const	string	$const95	"SurfgradFromTBN"		%read{2084,5484} %write{2147483647,-1}
temp	vector	$tmp974	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp975	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp976	%read{1106,5916} %write{1106,5916}
temp	int	$tmp977	%read{1106,5916} %write{1106,5916}
temp	int	$tmp978	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp979	%read{1106,5916} %write{1106,5916}
temp	int	$tmp980	%read{1106,5916} %write{1106,5916}
temp	int	$tmp981	%read{1106,5916} %write{1106,5916}
temp	float	$tmp982	%read{1106,5916} %write{1106,5916}
temp	int	$tmp983	%read{1106,5916} %write{1106,5916}
temp	float	$tmp984	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp985	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp986	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp987	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp988	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp989	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp990	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp991	%read{1106,5916} %write{1106,5916}
const	string	$const96	"hexTileAccumulate"		%read{2131,5945} %write{2147483647,-1}
temp	color	$tmp992	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp993	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp994	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp995	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp996	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp997	%read{1106,5916} %write{1106,5916}
const	string	$const97	"hexTileFinalColor"		%read{2146,5958} %write{2147483647,-1}
temp	float	$tmp998	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1000	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1001	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1004	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1005	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1006.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1006.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1007.s	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1007.t	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1007.w	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1007.r	%read{2147483647,-1} %write{1106,5916}
temp	float	$tmp1008	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1009	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1010	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1011	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1012	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1013	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1014	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1015	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1016	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1017	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1018	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1019	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1020	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1021	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1022	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1023	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1024	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1025	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1026	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1027	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1028	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1029	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1030	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1031	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1032	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1033	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1034	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1035	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1036	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1037	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1038	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1039	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1040	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1041	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1042	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1043	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1044	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1045	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1046	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1047	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1048	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1049	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1050	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1051	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1052	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1053	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1054	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1055	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1056	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1057	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1058	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1059	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1060	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1061	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1062	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1063	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1064	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1065	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1066	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1067	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1068	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1069	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1070	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1071.x	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1071.y	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1072	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp1073	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1074	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp1075	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1076	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1077	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1078	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1079.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1079.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1080	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1081	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1082	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1083.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1083.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1084.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1084.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1085	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1086	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1087	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1088	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1089	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1090	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1091	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1092	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1093	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1094	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1095	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1096	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1097	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1098	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1099	%read{1106,5916} %write{1106,5916} %derivs
temp	vector	$tmp1100	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1101.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1101.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1102	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1103	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1104	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1105	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1106	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1107.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1107.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1108.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1108.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1109	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1110.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1110.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1111	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1112	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1113	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1114	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1115	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp1116	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1117	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1118	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1119	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1120	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1121	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1122	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1123	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1124	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1125	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1126	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1127	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1128	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1129	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1130	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1131	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1132	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1133	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp1134	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1135	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1137	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1138	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1141	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1142	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1143.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1143.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1144.s	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1144.t	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1144.w	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1144.r	%read{2147483647,-1} %write{1106,5916}
temp	float	$tmp1145	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1146	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1147	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1148	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1149	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1150	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1151	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1152	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1153	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1154	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1155	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1156	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1157	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1158	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1159	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1160	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1161	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1162	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1163	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1164	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1165	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1166	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1167	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1168	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1169	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1170	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1171	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1172	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1173	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1174	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1175	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1176	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1177	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1178	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1179	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1180	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1181	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1182	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1183	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1184	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1185	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1186	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1187	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1188	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1189	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1190	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1191	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1192	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1193	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1194	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1195	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1196	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1197	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1198	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1199	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1200	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1201	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1202	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1203	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1204	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1205	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1206	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1207	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1208.x	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1208.y	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1209	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp1210	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1211	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp1212	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1213	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1214	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1215	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1216.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1216.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1217	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1218	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1219	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1220.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1220.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1221.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1221.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1222	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1223	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1224	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1225	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1226	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1227	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1228	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1229	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1230	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1231	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1232	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1233	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1234	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1235	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1236	%read{1106,5916} %write{1106,5916} %derivs
temp	vector	$tmp1237	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1238.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1238.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1239	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1240	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1241	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1242	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1243	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1244.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1244.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1245.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1245.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1246	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1247.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1247.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1248	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1249	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1250	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1251	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1252	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp1253	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1254	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1255	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1256	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1257	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1258	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1259	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1260	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1261	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1262	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1263	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1264	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1265	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1266	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1267	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1268	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1269	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1270	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp1271	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1272	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1274	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1275	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1278	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1279	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1280.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1280.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1281.s	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1281.t	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1281.w	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1281.r	%read{2147483647,-1} %write{1106,5916}
temp	float	$tmp1282	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1283	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1284	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1285	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1286	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1287	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1288	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1289	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1290	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1291	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1292	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1293	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1294	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1295	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1296	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1297	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1298	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1299	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1300	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1301	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1302	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1303	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1304	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1305	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1306	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1307	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1308	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1309	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1310	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1311	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1312	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1313	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1314	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1315	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1316	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1317	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1318	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1319	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1320	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1321	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1322	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1323	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1324	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1325	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1326	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1327	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1328	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1329	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1330	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1331	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1332	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1333	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1334	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1335	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1336	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1337	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1338	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1339	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1340	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1341	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1342	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1343	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1344	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1345.x	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1345.y	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1346	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp1347	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1348	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp1349	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1350	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1351	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1352	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1353.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1353.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1354	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1355	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1356	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1357.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1357.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1358.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1358.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1359	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1360	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1361	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1362	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1363	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1364	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1365	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1366	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1367	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1368	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1369	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1370	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1371	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1372	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1373	%read{1106,5916} %write{1106,5916} %derivs
temp	vector	$tmp1374	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1375.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1375.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1376	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1377	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1378	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1379	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1380	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1381.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1381.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1382.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1382.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1383	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1384.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1384.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1385	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1386	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1387	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1388	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1389	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp1390	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1391	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1392	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1393	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1394	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1395	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1396	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1397	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1398	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1399	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1400	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1401	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1402	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1403	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1404	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1405	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1406	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1407	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp1408	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1409	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1411	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1412	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1415	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1416	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1417.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1417.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1418.s	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1418.t	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1418.w	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1418.r	%read{2147483647,-1} %write{1106,5916}
temp	float	$tmp1419	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1420	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1421	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1422	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1423	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1424	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1425	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1426	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1427	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1428	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1429	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1430	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1431	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1432	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1433	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1434	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1435	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1436	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1437	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1438	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1439	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1440	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1441	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1442	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1443	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1444	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1445	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1446	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1447	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1448	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1449	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1450	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1451	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1452	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1453	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1454	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1455	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1456	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1457	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1458	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1459	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1460	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1461	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1462	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1463	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1464	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1465	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1466	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1467	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1468	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1469	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1470	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1471	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1472	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1473	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1474	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1475	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1476	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1477	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1478	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1479	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1480	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1481	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1482.x	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1482.y	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1483	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp1484	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1485	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp1486	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1487	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1488	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1489	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1490.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1490.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1491	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1492	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1493	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1494.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1494.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1495.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1495.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1496	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1497	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1498	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1499	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1500	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1501	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1502	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1503	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1504	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1505	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1506	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1507	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1508	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1509	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1510	%read{1106,5916} %write{1106,5916} %derivs
temp	vector	$tmp1511	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1512.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1512.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1513	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1514	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1515	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1516	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1517	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1518.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1518.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1519.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1519.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1520	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1521.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1521.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1522	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1523	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1524	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1525	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1526	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp1527	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1528	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1529	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1530	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1531	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1532	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1533	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1534	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1535	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1536	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1537	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1538	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1539	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1540	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1541	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1542	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1543	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1544	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp1545	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1546	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1548	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1549	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1552	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1553	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1554.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1554.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1555.s	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1555.t	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1555.w	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1555.r	%read{2147483647,-1} %write{1106,5916}
temp	float	$tmp1556	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1557	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1558	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1559	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1560	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1561	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1562	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1563	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1564	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1565	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1566	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1567	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1568	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1569	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1570	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1571	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1572	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1573	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1574	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1575	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1576	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1577	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1578	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1579	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1580	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1581	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1582	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1583	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1584	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1585	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1586	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1587	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1588	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1589	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1590	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1591	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1592	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1593	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1594	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1595	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1596	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1597	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1598	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1599	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1600	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1601	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1602	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1603	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1604	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1605	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1606	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1607	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1608	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1609	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1610	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1611	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1612	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1613	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1614	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1615	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1616	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1617	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1618	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1619.x	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1619.y	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1620	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp1621	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1622	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp1623	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1624	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1625	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1626	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1627.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1627.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1628	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1629	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1630	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1631.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1631.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1632.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1632.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1633	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1634	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1635	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1636	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1637	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1638	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1639	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1640	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1641	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1642	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1643	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1644	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1645	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1646	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1647	%read{1106,5916} %write{1106,5916} %derivs
temp	vector	$tmp1648	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1649.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1649.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1650	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1651	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1652	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1653	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1654	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1655.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1655.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1656.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1656.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1657	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1658.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1658.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1659	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1660	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1661	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1662	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1663	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp1664	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1665	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1666	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1667	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1668	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1669	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1670	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1671	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1672	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1673	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1674	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1675	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1676	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1677	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1678	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1679	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1680	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1681	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp1682	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1683	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1685	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1686	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1689	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1690	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1691.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1691.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1692.s	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1692.t	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1692.w	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1692.r	%read{2147483647,-1} %write{1106,5916}
temp	float	$tmp1693	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1694	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1695	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1696	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1697	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1698	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1699	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1700	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1701	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1702	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1703	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1704	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1705	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1706	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1707	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1708	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1709	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1710	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1711	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1712	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1713	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1714	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1715	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1716	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1717	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1718	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1719	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1720	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1721	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1722	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1723	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1724	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1725	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1726	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1727	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1728	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1729	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1730	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1731	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1732	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1733	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1734	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1735	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1736	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1737	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1738	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1739	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1740	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1741	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1742	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1743	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1744	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1745	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1746	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1747	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1748	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1749	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1750	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1751	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1752	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1753	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1754	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1755	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1756.x	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1756.y	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1757	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp1758	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1759	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp1760	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1761	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1762	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1763	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1764.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1764.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1765	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1766	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1767	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1768.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1768.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1769.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1769.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1770	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1771	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1772	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1773	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1774	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1775	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1776	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1777	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1778	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1779	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1780	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1781	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1782	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1783	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1784	%read{1106,5916} %write{1106,5916} %derivs
temp	vector	$tmp1785	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1786.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1786.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1787	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1788	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1789	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1790	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1791	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1792.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1792.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1793.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1793.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1794	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1795.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1795.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1796	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1797	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1798	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1799	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1800	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp1801	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1802	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1803	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1804	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1805	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1806	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1807	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1808	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1809	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1810	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1811	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1812	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1813	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1814	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1815	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1816	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1817	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1818	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp1819	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1820	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1822	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1823	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1826	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1827	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1828.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1828.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1829.s	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1829.t	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1829.w	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1829.r	%read{2147483647,-1} %write{1106,5916}
temp	float	$tmp1830	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1831	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1832	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1833	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1834	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1835	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1836	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1837	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1838	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1839	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1840	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1841	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1842	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1843	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1844	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1845	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1846	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1847	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1848	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1849	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1850	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1851	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1852	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1853	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1854	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1855	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1856	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1857	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1858	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1859	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1860	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1861	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1862	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1863	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1864	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1865	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1866	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1867	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1868	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1869	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1870	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1871	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1872	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1873	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1874	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1875	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1876	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1877	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1878	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1879	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1880	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1881	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1882	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1883	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1884	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1885	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1886	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1887	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1888	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1889	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1890	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1891	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1892	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1893.x	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1893.y	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1894	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp1895	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1896	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp1897	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1898	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1899	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1900	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1901.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1901.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1902	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1903	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1904	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1905.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1905.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1906.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1906.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1907	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1908	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1909	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1910	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1911	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1912	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1913	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1914	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1915	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1916	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1917	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1918	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1919	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1920	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1921	%read{1106,5916} %write{1106,5916} %derivs
temp	vector	$tmp1922	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1923.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1923.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1924	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1925	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1926	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1927	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1928	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1929.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1929.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1930.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1930.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1931	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1932.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1932.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1933	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1934	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp1935	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1936	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1937	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp1938	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1939	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1940	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1941	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1942	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1943	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1944	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1945	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1946	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1947	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1948	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1949	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1950	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1951	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1952	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1953	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1954	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1955	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp1956	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1957	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1959	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1960	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1963	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1964	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1965.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp1965.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1966.s	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1966.t	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1966.w	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp1966.r	%read{2147483647,-1} %write{1106,5916}
temp	float	$tmp1967	%read{1106,5916} %write{1106,5916}
temp	color	$tmp1968	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1969	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1970	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1971	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1972	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1973	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1974	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1975	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1976	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1977	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1978	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1979	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1980	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1981	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1982	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1983	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp1984	%read{1106,5916} %write{1106,5916}
temp	int	$tmp1985	%read{1106,5916} %write{1106,5916}
temp	float	$tmp1986	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1987	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1988	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1989	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1990	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1991	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1992	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1993	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1994	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1995	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1996	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1997	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1998	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp1999	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2000	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2001	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2002	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2003	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2004	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2005	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2006	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2007	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2008	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2009	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2010	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2011	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2012	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2013	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2014	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2015	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2016	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2017	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2018	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2019	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2020	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2021	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2022	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2023	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2024	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2025	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2026	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2027	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2028	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2029	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2030.x	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2030.y	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2031	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp2032	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2033	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp2034	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2035	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp2036	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2037	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2038.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2038.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2039	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2040	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2041	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2042.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2042.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2043.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2043.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp2044	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp2045	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2046	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2047	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2048	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp2049	%read{1106,5916} %write{1106,5916}
temp	color	$tmp2050	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2051	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2052	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2053	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2054	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2055	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2056	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2057	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2058	%read{1106,5916} %write{1106,5916} %derivs
temp	vector	$tmp2059	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2060.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2060.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2061	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2062	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2063	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2064	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2065	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2066.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2066.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2067.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2067.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2068	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2069.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2069.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp2070	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp2071	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp2072	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2073	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2074	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp2075	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2076	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2077	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2078	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2079	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2080	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2081	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2082	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2083	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2084	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2085	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp2086	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2087	%read{1106,5916} %write{1106,5916}
temp	color	$tmp2088	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp2089	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2090	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp2091	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2092	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp2093	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2094	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp2096	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp2097	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp2100	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp2101.powerTtoG	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp2101.powerGtoT	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2102.s	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2102.t	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2102.w	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2102.r	%read{2147483647,-1} %write{1106,5916}
temp	float	$tmp2103	%read{1106,5916} %write{1106,5916}
temp	color	$tmp2104	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2105	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2106	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2107	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2108	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2109	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2110	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2111	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2112	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2113	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2114	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2115	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2116	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2117	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2118	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2119	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2120	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2121	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2122	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2123	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2124	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2125	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2126	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2127	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2128	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2129	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2130	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2131	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2132	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2133	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2134	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2135	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2136	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2137	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2138	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2139	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2140	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2141	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2142	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2143	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2144	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2145	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2146	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2147	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2148	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2149	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2150	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2151	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2152	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2153	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2154	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2155	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2156	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2157	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2158	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2159	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2160	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2161	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2162	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2163	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2164	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2165	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2166.x	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2166.y	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2167	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp2168	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2169	%read{1106,5916} %write{1106,5916}
temp	normal	$tmp2170	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2171	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp2172	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2173	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2174.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2174.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2175	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2176	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2177	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2178.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2178.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2179.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2179.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp2180	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp2181	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2182	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2183	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2184	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp2185	%read{1106,5916} %write{1106,5916}
temp	color	$tmp2186	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2187	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2188	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2189	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2190	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2191	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2192	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2193	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2194	%read{1106,5916} %write{1106,5916} %derivs
temp	vector	$tmp2195	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2196.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2196.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2197	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2198	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2199	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2200	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2201	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2202.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2202.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2203.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2203.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2204	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2205.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2205.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp2206	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp2207	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp2208	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2209	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2210	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp2211	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2212	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2213	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2214	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2215	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2216	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2217	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2218	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2219	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2220	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2221	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp2222	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2223	%read{1106,5916} %write{1106,5916}
temp	color	$tmp2224	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp2225	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2226	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp2227	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2228	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp2229	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2230	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp2232	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp2233	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2236	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2237	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2238	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2239	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2240	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2241	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2242	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2243	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2244	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2245	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2246	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2247	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2248	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2249	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2250	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2251	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2252	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2253	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2254	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2255	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2256	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2257	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2258	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2259	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2260	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2261	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2262	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2263	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2264	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2265	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2266	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2267	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2268	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2269	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2270	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2271	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2272	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2273	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2274	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2275	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2276	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2277	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2278	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2279	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2280	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2281	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2282	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2283	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2284	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2285	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2286	%read{1106,5916} %write{1106,5916}
temp	color	$tmp2287	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2288	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2289	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2290	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2291	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2292	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2293	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2294	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2295	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2296	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2297	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2298	%read{1106,5916} %write{1106,5916}
temp	color	$tmp2299	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2300	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2301	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2302	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2303	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2304	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2305	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2306	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2307	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2308	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2309	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2310	%read{1106,5916} %write{1106,5916}
temp	color	$tmp2311	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2312	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2313	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2314	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2315	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2316	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2317	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2318	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2319	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2320	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2321	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2322	%read{1106,5916} %write{1106,5916}
temp	color	$tmp2323	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2324	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2325	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2326	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2327	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2328	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2329	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2330	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2331	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2332	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2333	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2334	%read{1106,5916} %write{1106,5916}
temp	color	$tmp2335	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2336	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2337	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2338	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2339	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2340	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2341	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2342	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2343	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2344	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2345	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2346	%read{1106,5916} %write{1106,5916}
temp	color	$tmp2347	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2348	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2349	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2350	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2351	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2352	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2353	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2354	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2355	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2356	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2357	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2358	%read{1106,5916} %write{1106,5916}
temp	color	$tmp2359	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2360	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2361	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2362	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2363	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2364	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2365	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2366	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2367	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2368	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2369	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2370	%read{1106,5916} %write{1106,5916}
temp	color	$tmp2371	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2372	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2373	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2374	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2375	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2376	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2377	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2378	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2379	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2380	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2381	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2382	%read{1106,5916} %write{1106,5916}
temp	color	$tmp2383	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2384	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2385	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2386	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2387	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2388	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2389	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2390	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2391	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2392	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2393	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp2394	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2395	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2396	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2397	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2398	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2399	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2400	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2401	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2402	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2403	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2404	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp2405	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2406	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2407	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp2408	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2409	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2410	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2411	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2412	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2413	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2414	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2415	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2416	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2417	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2418	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2419	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2420	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2421	%read{1106,5916} %write{1106,5916}
const	string	$const98	"setupNormalMap"		%read{5424,5424} %write{2147483647,-1}
temp	color	$tmp2422	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2423	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2424	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2425	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2426	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2427	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2428	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2429	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2430	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2431	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2432	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2433	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2434	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2435	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2436	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2437	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2438	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp2439	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2440.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2440.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2441	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2442	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2443	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2444	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2445	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2446.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2446.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2447.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2447.y	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2448	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2449.x	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2449.y	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp2450	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp2451	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp2452	%read{1106,5916} %write{1106,5916}
temp	vector	$tmp2453	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2454	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2455	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2456	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2457	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2458	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2459	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2460	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2461	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2462	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2463	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2464	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2465	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2466	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2467	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2468	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2469	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2470	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2471	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2472	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2473	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2474	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2475	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2476	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2477	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2478	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2479	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2480	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2481	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2482	%read{1106,5916} %write{1106,5916} %derivs
temp	point	$tmp2483	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2484	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2485	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2486	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2487	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2488	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2489	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2490	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2491	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2492	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2493	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2494	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2495	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2496	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2497	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2498	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2499	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2500	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2501	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2502	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2503	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2504	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2505	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp2506	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2507	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2508	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2509	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2510	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2511	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2512	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2513	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2514	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2515	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2516	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2517	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2518	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2519	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2520	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2521	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2522	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2523	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2524	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2525	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2526	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2527	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2528	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2529	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp2530	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2531	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2532	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2533	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2534	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2535	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2536	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2537	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2538	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2539	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2540	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2541	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2542	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2543	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2544	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2545	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2546	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2547	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2548	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2549	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2550	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2551	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2552	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2553	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2554	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2555	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2556	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2557	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2558	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2559	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2560	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2561	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2562	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp2563	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2564	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2565	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2566	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2567	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2568	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2569	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2570	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2571	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2572	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2573	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2574	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2575	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2576	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2577	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2578	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2579	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2580	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2581	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2582	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2583	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2584	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2585	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2586	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2587	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2588	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2589	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2590	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2591	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2592	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2593	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2594	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2595	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2596	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2597	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2598	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2599	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2600	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2601	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2602	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2603	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2604	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2605	%read{2147483647,-1} %write{1106,5916}
temp	float	$tmp2606	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2607	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2608	%read{1106,5916} %write{1106,5916} %derivs
const	string	$const99	"randomizeHLSG"		%read{5826,5826} %write{2147483647,-1}
temp	float	$tmp2609	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2610	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2611	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2612	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2613	%read{1106,5916} %write{1106,5916} %derivs
const	float	$const100	0.333332986		%read{5832,5832} %write{2147483647,-1}
temp	float	$tmp2614	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2615	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2616	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2617	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2618	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2619	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2620	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2621	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2622	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2623	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2624	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2625	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2626	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2627	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2628	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2629	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2630	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2631	%read{1106,5916} %write{1106,5916}
temp	color	$tmp2632	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp2633	%read{1106,5916} %write{1106,5916} %derivs
const	string	$const101	"varyColor"		%read{5872,5872} %write{2147483647,-1}
temp	int	$tmp2634	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2635	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2636	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2637	%read{1106,5916} %write{1106,5916}
const	string	$const102	"rgb"		%read{5883,5900} %write{2147483647,-1}
const	string	$const103	"hsl"		%read{5883,5900} %write{2147483647,-1}
temp	float	$tmp2638	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2639	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2640	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2641	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2642	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2643	%read{1106,5916} %write{1106,5916} %derivs
const	string	$const104	"clamp"		%read{5890,6009} %write{2147483647,-1}
temp	float	$tmp2644	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2645	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2646	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2647	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2648	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp2650	%read{1106,5916} %write{1106,5916} %derivs
temp	int	$tmp2651	%read{1106,5916} %write{1106,5916}
temp	float	$tmp2652	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2653	%read{1106,5916} %write{1106,5916} %derivs
temp	float	$tmp2654	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp2655	%read{1106,5916} %write{1106,5916} %derivs
temp	color	$tmp2656	%read{1106,5916} %write{1106,5916}
temp	int	$tmp2657	%read{2147483647,-1} %write{1106,5916}
temp	int	$tmp2658	%read{5919,5919} %write{5918,5918}
temp	int	$tmp2659	%read{5925,5957} %write{5925,5957}
temp	int	$tmp2660	%read{5923,5957} %write{5924,5957}
temp	int	$tmp2661	%read{5925,5957} %write{5925,5957}
temp	float	$tmp2662	%read{5925,5957} %write{5925,5957} %derivs
temp	point	$tmp2663	%read{5925,5957} %write{5925,5957} %derivs
temp	float	$tmp2664	%read{5925,5957} %write{5925,5957} %derivs
temp	point	$tmp2665	%read{5925,5957} %write{5925,5957} %derivs
temp	float	$tmp2666	%read{5925,5957} %write{5925,5957} %derivs
temp	color	$tmp2667	%read{5925,5957} %write{5925,5957} %derivs
temp	color	$tmp2668	%read{5925,5957} %write{5925,5957} %derivs
temp	color	$tmp2669	%read{5925,5957} %write{5925,5957} %derivs
temp	float	$tmp2670	%read{5925,5957} %write{5925,5957} %derivs
temp	point	$tmp2671	%read{5925,5957} %write{5925,5957} %derivs
temp	float	$tmp2672	%read{5925,5957} %write{5925,5957} %derivs
temp	point	$tmp2673	%read{5925,5957} %write{5925,5957} %derivs
temp	float	$tmp2674	%read{5925,5957} %write{5925,5957} %derivs
temp	color	$tmp2675.powerTtoG	%read{5925,5957} %write{5925,5957} %derivs
temp	color	$tmp2675.powerGtoT	%read{5925,5957} %write{5925,5957} %derivs
temp	color	$tmp2676	%read{5925,5957} %write{5925,5957} %derivs
temp	color	$tmp2677	%read{5925,5957} %write{5925,5957} %derivs
temp	float	$tmp2678	%read{5925,5957} %write{5925,5957} %derivs
temp	color	$tmp2679	%read{5925,5957} %write{5925,5957} %derivs
temp	int	$tmp2680	%read{2147483647,-1} %write{5925,5957}
temp	float	$tmp2681	%read{5960,5960} %write{5959,5959} %derivs
temp	color	$tmp2683	%read{5962,5962} %write{5961,5961} %derivs
temp	color	$tmp2684	%read{5963,5963} %write{5962,5962} %derivs
temp	int	$tmp2687	%read{5970,5993} %write{5970,5993}
temp	int	$tmp2688	%read{5968,5993} %write{5969,5993}
temp	int	$tmp2689	%read{5970,5993} %write{5970,5993}
temp	float	$tmp2690	%read{5970,5993} %write{5970,5993} %derivs
temp	point	$tmp2691	%read{5970,5993} %write{5970,5993} %derivs
temp	float	$tmp2692	%read{5970,5993} %write{5970,5993} %derivs
temp	point	$tmp2693	%read{5970,5993} %write{5970,5993} %derivs
temp	float	$tmp2694	%read{5970,5993} %write{5970,5993} %derivs
temp	color	$tmp2695	%read{5970,5993} %write{5970,5993} %derivs
temp	color	$tmp2696	%read{5970,5993} %write{5970,5993} %derivs
temp	int	$tmp2697	%read{5970,5993} %write{5970,5993}
temp	float	$tmp2698	%read{5970,5993} %write{5970,5993}
temp	point	$tmp2699	%read{5970,5993} %write{5970,5993}
temp	float	$tmp2700	%read{5970,5993} %write{5970,5993}
temp	point	$tmp2701	%read{5970,5993} %write{5970,5993}
temp	float	$tmp2702	%read{5970,5993} %write{5970,5993}
temp	color	$tmp2703	%read{5970,5993} %write{5970,5993}
temp	color	$tmp2704	%read{5970,5993} %write{5970,5993}
temp	int	$tmp2705	%read{2147483647,-1} %write{5970,5993}
temp	int	$tmp2706	%read{5998,6008} %write{5998,6008}
temp	int	$tmp2707	%read{5996,6008} %write{5997,6008}
temp	int	$tmp2708	%read{5998,6008} %write{5998,6008}
temp	float	$tmp2709	%read{5998,6008} %write{5998,6008}
temp	point	$tmp2710	%read{5998,6008} %write{5998,6008}
temp	float	$tmp2711	%read{5998,6008} %write{5998,6008}
temp	float	$tmp2712	%read{5998,6008} %write{5998,6008}
temp	int	$tmp2713	%read{2147483647,-1} %write{5998,6008}
temp	float	$tmp2714	%read{6011,6011} %write{6010,6010}
temp	int	$tmp2715	%read{6016,6068} %write{6016,6068}
temp	int	$tmp2716	%read{6014,6068} %write{6015,6068}
temp	int	$tmp2717	%read{6016,6068} %write{6016,6068}
temp	point	$tmp2718.s	%read{2147483647,-1} %write{6016,6068}
temp	point	$tmp2718.t	%read{2147483647,-1} %write{6016,6068}
temp	point	$tmp2718.w	%read{6016,6068} %write{6016,6068}
temp	point	$tmp2718.r	%read{2147483647,-1} %write{6016,6068}
temp	int	$tmp2720	%read{6016,6068} %write{6016,6068}
temp	float	$tmp2721	%read{6016,6068} %write{6016,6068} %derivs
temp	point	$tmp2722.s	%read{2147483647,-1} %write{6016,6068}
temp	point	$tmp2722.t	%read{2147483647,-1} %write{6016,6068}
temp	point	$tmp2722.w	%read{6016,6068} %write{6016,6068} %derivs
temp	point	$tmp2722.r	%read{2147483647,-1} %write{6016,6068}
const	string	$const105	"hexTileGrid"		%read{6034,6034} %write{2147483647,-1}
temp	float	$tmp2723	%read{6016,6068} %write{6016,6068} %derivs
temp	float	$tmp2724	%read{6016,6068} %write{6016,6068} %derivs
temp	float	$tmp2725	%read{6016,6068} %write{6016,6068} %derivs
temp	float	$tmp2726	%read{6016,6068} %write{6016,6068} %derivs
temp	float	$tmp2727	%read{6016,6068} %write{6016,6068} %derivs
temp	float	$tmp2728	%read{6016,6068} %write{6016,6068} %derivs
temp	float	$tmp2729	%read{6016,6068} %write{6016,6068} %derivs
temp	float	$tmp2730	%read{6016,6068} %write{6016,6068} %derivs
temp	point	$tmp2731	%read{6016,6068} %write{6016,6068} %derivs
temp	float	$tmp2732	%read{6016,6068} %write{6016,6068} %derivs
temp	int	$tmp2733	%read{6016,6068} %write{6016,6068}
temp	int	$tmp2734	%read{6016,6068} %write{6016,6068}
const	float	$const106	100000		%read{6055,6055} %write{2147483647,-1}
temp	float	$tmp2735	%read{6016,6068} %write{6016,6068} %derivs
temp	point	$tmp2736	%read{6016,6068} %write{6016,6068} %derivs
temp	float	$tmp2737	%read{6016,6068} %write{6016,6068} %derivs
temp	float	$tmp2738	%read{6016,6068} %write{6016,6068} %derivs
temp	float	$tmp2739	%read{6016,6068} %write{6016,6068} %derivs
temp	float	$tmp2740	%read{6016,6068} %write{6016,6068} %derivs
temp	float	$tmp2741	%read{6016,6068} %write{6016,6068} %derivs
temp	point	$tmp2742	%read{6016,6068} %write{6016,6068} %derivs
temp	float	$tmp2743	%read{6016,6068} %write{6016,6068} %derivs
temp	int	$tmp2744	%read{2147483647,-1} %write{6016,6068}
temp	int	$tmp2745	%read{2147483647,-1} %write{6016,6068}
temp	int	$tmp2746	%read{6071,6071} %write{6070,6070}
temp	int	$tmp2747	%read{6072,6076} %write{6071,6075}
temp	int	$tmp2748	%read{6074,6074} %write{6073,6073}
temp	int	$tmp2749	%read{6075,6075} %write{6074,6074}
temp	vector	$tmp2750	%read{6082,6082} %write{6081,6081}
temp	float	$tmp2751	%read{6078,6078} %write{6077,6077} %derivs
temp	float	$tmp2752	%read{6079,6079} %write{6078,6078} %derivs
temp	normal	$tmp2753	%read{6080,6080} %write{6079,6079} %derivs
temp	point	$tmp2754	%read{6081,6081} %write{6080,6080} %derivs
const	string	$const107	"surfgradFromPerturbedNormal"		%read{6083,6083} %write{2147483647,-1}
temp	vector	$tmp2755	%read{6086,6086} %write{6085,6085}
temp	vector	$tmp2756	%read{6089,6089} %write{6086,6086}
temp	float	$tmp2757	%read{6089,6089} %write{6088,6088}
const	float	$const108	9.99999994e-09		%read{6088,6088} %write{2147483647,-1}
temp	float	$tmp2758	%read{6088,6088} %write{6087,6087}
const	string	$const109	"Color_Saturate"		%read{6090,6090} %write{2147483647,-1}
temp	color	$tmp2759	%read{6094,6094} %write{6093,6093} %derivs
temp	color	$tmp2760	%read{6096,6096} %write{6095,6095} %derivs
temp	float	$tmp2761	%read{6098,6098} %write{6097,6097}
code manifoldMulti.Tn
# PxrMultiTexture.osl:79
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.Tn $const2 $const1 	%filename{"PxrMultiTexture.osl"} %line{79} %argrw{"wrr"}
	aassign		manifoldMulti.Tn $const3 $const1 	%argrw{"wrr"}
	aassign		manifoldMulti.Tn $const4 $const1 	%argrw{"wrr"}
	aassign		manifoldMulti.Tn $const5 $const1 	%argrw{"wrr"}
code manifoldMulti.Bn
# PxrMultiTexture.osl:79
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.Bn $const2 $const1 	%filename{"PxrMultiTexture.osl"} %line{79} %argrw{"wrr"}
	aassign		manifoldMulti.Bn $const3 $const1 	%argrw{"wrr"}
	aassign		manifoldMulti.Bn $const4 $const1 	%argrw{"wrr"}
	aassign		manifoldMulti.Bn $const5 $const1 	%argrw{"wrr"}
code manifoldMulti.hextile0
# PxrMultiTexture.osl:79
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.hextile0 $const2 $const6 	%filename{"PxrMultiTexture.osl"} %line{79} %argrw{"wrr"}
	aassign		manifoldMulti.hextile0 $const3 $const6 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile0 $const4 $const7 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile0 $const5 $const6 	%argrw{"wrr"}
code manifoldMulti.hextile1
# PxrMultiTexture.osl:79
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.hextile1 $const2 $const6 	%filename{"PxrMultiTexture.osl"} %line{79} %argrw{"wrr"}
	aassign		manifoldMulti.hextile1 $const3 $const6 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile1 $const4 $const7 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile1 $const5 $const6 	%argrw{"wrr"}
code manifoldMulti.hextile2
# PxrMultiTexture.osl:79
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.hextile2 $const2 $const6 	%filename{"PxrMultiTexture.osl"} %line{79} %argrw{"wrr"}
	aassign		manifoldMulti.hextile2 $const3 $const6 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile2 $const4 $const7 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile2 $const5 $const6 	%argrw{"wrr"}
code manifoldMulti.hextile3
# PxrMultiTexture.osl:79
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.hextile3 $const2 $const6 	%filename{"PxrMultiTexture.osl"} %line{79} %argrw{"wrr"}
	aassign		manifoldMulti.hextile3 $const3 $const6 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile3 $const4 $const7 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile3 $const5 $const6 	%argrw{"wrr"}
code ___main___
# PxrMultiTexture.osl:523
#     NormalMapParams nMap = {texturesAreNormalMaps, orientation, flipX, flipY};
	assign		nMap.enabled texturesAreNormalMaps 	%filename{"PxrMultiTexture.osl"} %line{523} %argrw{"wr"}
	assign		nMap.orientation orientation 	%argrw{"wr"}
	assign		nMap.flipX flipX 	%argrw{"wr"}
	assign		nMap.flipY flipY 	%argrw{"wr"}
# PxrMultiTexture.osl:524
#     TxParams txparams = initTxParams(firstChannel, blur,
	functioncall	$const8 49 	%line{524} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:83
#     return initTxParams(firstchannel, blur, missingcolor, missingalpha, filter, 1.0);
	functioncall	$const8 49 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{83} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:68
#     if (filter == 0)
	eq		$tmp25 filter $const2 	%line{68} %argrw{"wrr"}
	if		$tmp25 33 37 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:69
#         interp = "closest";
	assign		___634_interp $const10 	%line{69} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:70
#     else if (filter == 2)
	eq		$tmp26 filter $const4 	%line{70} %argrw{"wrr"}
	if		$tmp26 36 37 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:71
#         interp = "linear";
	assign		___634_interp $const11 	%line{71} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:73
#         interp = "smartcubic";
	assign		___634_interp $const12 	%line{73} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:75
#     TxParams params = {firstchannel, blur, missingcolor, missingalpha,
	assign		___634_params.firstchannel firstChannel 	%line{75} %argrw{"wr"}
	assign		___634_params.blur blur 	%argrw{"wr"}
	assign		___634_params.missingcolor missingColor 	%argrw{"wr"}
	assign		___634_params.missingalpha missingAlpha 	%argrw{"wr"}
	assign		___634_params.interp ___634_interp 	%argrw{"wr"}
	assign		___634_params.width $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:77
#     return params;
	assign		txparams.firstchannel ___634_params.firstchannel 	%line{77} %argrw{"wr"}
	assign		txparams.blur ___634_params.blur 	%argrw{"wr"}
	assign		txparams.missingcolor ___634_params.missingcolor 	%argrw{"wr"}
	assign		txparams.missingalpha ___634_params.missingalpha 	%argrw{"wr"}
	assign		txparams.interp ___634_params.interp 	%argrw{"wr"}
	assign		txparams.width ___634_params.width 	%argrw{"wr"}
# PxrMultiTexture.osl:526
#     int needAlpha = isconnected(resultA);
	isconnected	needAlpha resultA 	%filename{"PxrMultiTexture.osl"} %line{526} %argrw{"wr"}
# PxrMultiTexture.osl:530
#     int noManifold = isconnected(manifoldMulti) == 0;
	isconnected	$tmp27 manifoldMulti 	%line{530} %argrw{"wr"}
	eq		noManifold $tmp27 $const2 	%argrw{"wrr"}
# PxrMultiTexture.osl:533
#     if (noManifold)
	if		noManifold 134 134 	%line{533} %argrw{"r"}
# PxrMultiTexture.osl:535
#         float st[2] = {0, 0};
	assign		___772_st $const13 	%line{535} %argrw{"wr"}
# PxrMultiTexture.osl:536
#         getattribute("primvar", "st", st);
	getattribute	$tmp28 $const14 $const15 ___772_st 	%line{536} %argrw{"wrrw"}
# PxrMultiTexture.osl:537
#         TxCoords txcoords = initTxCoords(st[0], st[1], invertT);
	aref		$tmp29 ___772_st $const2 	%line{537} %argrw{"wrr"}
	aref		$tmp30 ___772_st $const3 	%argrw{"wrr"}
	functioncall	$const16 79 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		invertT 65 66 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{100} %argrw{"r"}
	functioncall	$const17 65 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp31 $tmp30 	%line{48} %argrw{"wr"}
	add		$tmp32 $tmp31 $const9 	%argrw{"wrr"}
	floor		$tmp33 $tmp30 	%argrw{"wr"}
	sub		$tmp34 $tmp30 $tmp33 	%argrw{"wrr"}
	sub		___636__tt $tmp32 $tmp34 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt $tmp30 	%line{100} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:101
#     TxCoords coords = { ss, _tt, Dx(ss), Dy(ss), Dx(_tt), Dy(_tt) };
	assign		___636_coords.s $tmp29 	%line{101} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx $tmp29 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy $tmp29 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     return coords;
	assign		___772_txcoords.s ___636_coords.s 	%line{102} %argrw{"wr"}
	assign		___772_txcoords.t ___636_coords.t 	%argrw{"wr"}
	assign		___772_txcoords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___772_txcoords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___772_txcoords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___772_txcoords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# PxrMultiTexture.osl:538
#         resultRGB = PxrTextureLookup(filename0, txcoords, txparams);
	functioncall	$const18 109 	%filename{"PxrMultiTexture.osl"} %line{538} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename0 ___772_txcoords.s ___772_txcoords.t ___772_txcoords.dsdx ___772_txcoords.dtdx ___772_txcoords.dsdy ___772_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp35 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp35 88 88 	%argrw{"r"}
	assign		resultRGB ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename0 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp36 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp36 94 94 	%argrw{"r"}
	neq		$tmp37 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp36 $tmp37 	%argrw{"wr"}
	if		$tmp36 108 108 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp38 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp39 $tmp38 $const2 	%argrw{"wrr"}
	if		$tmp39 98 101 	%argrw{"r"}
	eq		$tmp40 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp41 $tmp40 $const2 	%argrw{"wrr"}
	assign		$tmp39 $tmp41 	%argrw{"wr"}
	if		$tmp39 108 108 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp42 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp42 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp43 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp43 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp44 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp44 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		resultRGB ___649_finalResult 	%line{217} %argrw{"wr"}
# PxrMultiTexture.osl:539
#         if (linearize) PxrLinearizeSRGB(resultRGB);
	if		linearize 133 133 	%filename{"PxrMultiTexture.osl"} %line{539} %argrw{"r"}
	functioncall	$const25 133 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 116 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp46 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp47 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp45 $tmp47 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp45 133 133 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp49 119 121 132 133 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp48 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp49 $tmp48 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp50 resultRGB ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp51 $tmp50 $const29 	%argrw{"wrr"}
	if		$tmp51 127 132 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp52 resultRGB ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp53 $tmp52 $const30 	%argrw{"wrr"}
	compassign	resultRGB ___641_i $tmp53 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp55 resultRGB ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp56 $tmp55 $const31 	%argrw{"wrr"}
	mul		$tmp57 $tmp56 $const32 	%argrw{"wrr"}
	pow		$tmp54 $tmp57 $const33 	%argrw{"wrr"}
	compassign	resultRGB ___641_i $tmp54 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# PxrMultiTexture.osl:540
#         return;
	exit	%filename{"PxrMultiTexture.osl"} %line{540}
# PxrMultiTexture.osl:558
#     point sta[NUM_STGRPS] = {manifoldMulti.stAlpha0, manifoldMulti.stAlpha1,
	aassign		sta $const2 manifoldMulti.stAlpha0 	%line{558} %argrw{"wrr"}
	aassign		sta $const3 manifoldMulti.stAlpha1 	%argrw{"wrr"}
	aassign		sta $const4 manifoldMulti.stAlpha2 	%argrw{"wrr"}
	aassign		sta $const5 manifoldMulti.stAlpha3 	%argrw{"wrr"}
# PxrMultiTexture.osl:560
#     point idf[NUM_STGRPS] = {manifoldMulti.tileidRunflag0, manifoldMulti.tileidRunflag1,
	aassign		idf $const2 manifoldMulti.tileidRunflag0 	%line{560} %argrw{"wrr"}
	aassign		idf $const3 manifoldMulti.tileidRunflag1 	%argrw{"wrr"}
	aassign		idf $const4 manifoldMulti.tileidRunflag2 	%argrw{"wrr"}
	aassign		idf $const5 manifoldMulti.tileidRunflag3 	%argrw{"wrr"}
# PxrMultiTexture.osl:562
#     float stRadius = manifoldMulti.radius;
	assign		stRadius manifoldMulti.radius 	%line{562} %argrw{"wr"}
# PxrMultiTexture.osl:566
#     string textures[NUMTEX] = {filename0, filename1, filename2, filename3,
	aassign		textures $const2 filename0 	%line{566} %argrw{"wrr"}
	aassign		textures $const3 filename1 	%argrw{"wrr"}
	aassign		textures $const4 filename2 	%argrw{"wrr"}
	aassign		textures $const5 filename3 	%argrw{"wrr"}
	aassign		textures $const34 filename4 	%argrw{"wrr"}
	aassign		textures $const35 filename5 	%argrw{"wrr"}
	aassign		textures $const36 filename6 	%argrw{"wrr"}
	aassign		textures $const37 filename7 	%argrw{"wrr"}
	aassign		textures $const38 filename8 	%argrw{"wrr"}
	aassign		textures $const39 filename9 	%argrw{"wrr"}
# PxrMultiTexture.osl:575
#     HexTileData hexData[NUM_STGRPS] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aref		$tmp58 manifoldMulti.hextile0 $const2 	%line{575} %argrw{"wrr"}
	aassign		hexData.s $const2 $tmp58 	%argrw{"wrr"}
	aref		$tmp59 manifoldMulti.hextile0 $const3 	%argrw{"wrr"}
	aassign		hexData.t $const2 $tmp59 	%argrw{"wrr"}
	aref		$tmp60 manifoldMulti.hextile0 $const4 	%argrw{"wrr"}
	aassign		hexData.w $const2 $tmp60 	%argrw{"wrr"}
	aref		$tmp61 manifoldMulti.hextile0 $const5 	%argrw{"wrr"}
	aassign		hexData.r $const2 $tmp61 	%argrw{"wrr"}
# PxrMultiTexture.osl:576
#                                        FromFlatHexTileData(manifoldMulti.hextile1),
	aref		$tmp62 manifoldMulti.hextile1 $const2 	%line{576} %argrw{"wrr"}
# PxrMultiTexture.osl:575
#     HexTileData hexData[NUM_STGRPS] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		hexData.s $const3 $tmp62 	%line{575} %argrw{"wrr"}
# PxrMultiTexture.osl:576
#                                        FromFlatHexTileData(manifoldMulti.hextile1),
	aref		$tmp63 manifoldMulti.hextile1 $const3 	%line{576} %argrw{"wrr"}
# PxrMultiTexture.osl:575
#     HexTileData hexData[NUM_STGRPS] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		hexData.t $const3 $tmp63 	%line{575} %argrw{"wrr"}
# PxrMultiTexture.osl:576
#                                        FromFlatHexTileData(manifoldMulti.hextile1),
	aref		$tmp64 manifoldMulti.hextile1 $const4 	%line{576} %argrw{"wrr"}
# PxrMultiTexture.osl:575
#     HexTileData hexData[NUM_STGRPS] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		hexData.w $const3 $tmp64 	%line{575} %argrw{"wrr"}
# PxrMultiTexture.osl:576
#                                        FromFlatHexTileData(manifoldMulti.hextile1),
	aref		$tmp65 manifoldMulti.hextile1 $const5 	%line{576} %argrw{"wrr"}
# PxrMultiTexture.osl:575
#     HexTileData hexData[NUM_STGRPS] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		hexData.r $const3 $tmp65 	%line{575} %argrw{"wrr"}
# PxrMultiTexture.osl:577
#                                        FromFlatHexTileData(manifoldMulti.hextile2),
	aref		$tmp66 manifoldMulti.hextile2 $const2 	%line{577} %argrw{"wrr"}
# PxrMultiTexture.osl:575
#     HexTileData hexData[NUM_STGRPS] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		hexData.s $const4 $tmp66 	%line{575} %argrw{"wrr"}
# PxrMultiTexture.osl:577
#                                        FromFlatHexTileData(manifoldMulti.hextile2),
	aref		$tmp67 manifoldMulti.hextile2 $const3 	%line{577} %argrw{"wrr"}
# PxrMultiTexture.osl:575
#     HexTileData hexData[NUM_STGRPS] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		hexData.t $const4 $tmp67 	%line{575} %argrw{"wrr"}
# PxrMultiTexture.osl:577
#                                        FromFlatHexTileData(manifoldMulti.hextile2),
	aref		$tmp68 manifoldMulti.hextile2 $const4 	%line{577} %argrw{"wrr"}
# PxrMultiTexture.osl:575
#     HexTileData hexData[NUM_STGRPS] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		hexData.w $const4 $tmp68 	%line{575} %argrw{"wrr"}
# PxrMultiTexture.osl:577
#                                        FromFlatHexTileData(manifoldMulti.hextile2),
	aref		$tmp69 manifoldMulti.hextile2 $const5 	%line{577} %argrw{"wrr"}
# PxrMultiTexture.osl:575
#     HexTileData hexData[NUM_STGRPS] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		hexData.r $const4 $tmp69 	%line{575} %argrw{"wrr"}
# PxrMultiTexture.osl:578
#                                        FromFlatHexTileData(manifoldMulti.hextile3)};
	aref		$tmp70 manifoldMulti.hextile3 $const2 	%line{578} %argrw{"wrr"}
# PxrMultiTexture.osl:575
#     HexTileData hexData[NUM_STGRPS] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		hexData.s $const5 $tmp70 	%line{575} %argrw{"wrr"}
# PxrMultiTexture.osl:578
#                                        FromFlatHexTileData(manifoldMulti.hextile3)};
	aref		$tmp71 manifoldMulti.hextile3 $const3 	%line{578} %argrw{"wrr"}
# PxrMultiTexture.osl:575
#     HexTileData hexData[NUM_STGRPS] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		hexData.t $const5 $tmp71 	%line{575} %argrw{"wrr"}
# PxrMultiTexture.osl:578
#                                        FromFlatHexTileData(manifoldMulti.hextile3)};
	aref		$tmp72 manifoldMulti.hextile3 $const4 	%line{578} %argrw{"wrr"}
# PxrMultiTexture.osl:575
#     HexTileData hexData[NUM_STGRPS] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		hexData.w $const5 $tmp72 	%line{575} %argrw{"wrr"}
# PxrMultiTexture.osl:578
#                                        FromFlatHexTileData(manifoldMulti.hextile3)};
	aref		$tmp73 manifoldMulti.hextile3 $const5 	%line{578} %argrw{"wrr"}
# PxrMultiTexture.osl:575
#     HexTileData hexData[NUM_STGRPS] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		hexData.r $const5 $tmp73 	%line{575} %argrw{"wrr"}
# PxrMultiTexture.osl:579
#     HexTileTexture hexTex[NUM_STGRPS] = {HEXTILETEXTURE_ZERO, HEXTILETEXTURE_ZERO,
	aassign		hexTex.powerTtoG $const2 $const40 	%line{579} %argrw{"wrr"}
	aassign		hexTex.powerGtoT $const2 $const40 	%argrw{"wrr"}
	aassign		hexTex.powerTtoG $const3 $const40 	%argrw{"wrr"}
	aassign		hexTex.powerGtoT $const3 $const40 	%argrw{"wrr"}
	aassign		hexTex.powerTtoG $const4 $const40 	%argrw{"wrr"}
	aassign		hexTex.powerGtoT $const4 $const40 	%argrw{"wrr"}
	aassign		hexTex.powerTtoG $const5 $const40 	%argrw{"wrr"}
	aassign		hexTex.powerGtoT $const5 $const40 	%argrw{"wrr"}
# PxrMultiTexture.osl:582
#     int doHexTile = validHexTileData(hexData[0]) + validHexTileData(hexData[1]) +
	aref		$tmp83.s hexData.s $const2 	%line{582} %argrw{"wrr"}
	aref		$tmp83.t hexData.t $const2 	%argrw{"wrr"}
	aref		$tmp83.w hexData.w $const2 	%argrw{"wrr"}
	aref		$tmp83.r hexData.r $const2 	%argrw{"wrr"}
	functioncall	$const41 203 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:78
#     return hxt.w == INVALID_HEXTILE_WEIGHT ? 0 : 1;
	eq		$tmp85 $tmp83.w $const7 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{78} %argrw{"wrr"}
	if		$tmp85 201 202 	%argrw{"r"}
	assign		$tmp82 $const2 	%argrw{"wr"}
	assign		$tmp82 $const3 	%argrw{"wr"}
	return
# PxrMultiTexture.osl:582
#     int doHexTile = validHexTileData(hexData[0]) + validHexTileData(hexData[1]) +
	aref		$tmp87.s hexData.s $const3 	%filename{"PxrMultiTexture.osl"} %line{582} %argrw{"wrr"}
	aref		$tmp87.t hexData.t $const3 	%argrw{"wrr"}
	aref		$tmp87.w hexData.w $const3 	%argrw{"wrr"}
	aref		$tmp87.r hexData.r $const3 	%argrw{"wrr"}
	functioncall	$const41 213 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:78
#     return hxt.w == INVALID_HEXTILE_WEIGHT ? 0 : 1;
	eq		$tmp89 $tmp87.w $const7 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{78} %argrw{"wrr"}
	if		$tmp89 211 212 	%argrw{"r"}
	assign		$tmp86 $const2 	%argrw{"wr"}
	assign		$tmp86 $const3 	%argrw{"wr"}
	return
# PxrMultiTexture.osl:582
#     int doHexTile = validHexTileData(hexData[0]) + validHexTileData(hexData[1]) +
	add		$tmp90 $tmp82 $tmp86 	%filename{"PxrMultiTexture.osl"} %line{582} %argrw{"wrr"}
# PxrMultiTexture.osl:583
#                     validHexTileData(hexData[2]) + validHexTileData(hexData[3]);
	aref		$tmp92.s hexData.s $const4 	%line{583} %argrw{"wrr"}
	aref		$tmp92.t hexData.t $const4 	%argrw{"wrr"}
	aref		$tmp92.w hexData.w $const4 	%argrw{"wrr"}
	aref		$tmp92.r hexData.r $const4 	%argrw{"wrr"}
	functioncall	$const41 224 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:78
#     return hxt.w == INVALID_HEXTILE_WEIGHT ? 0 : 1;
	eq		$tmp94 $tmp92.w $const7 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{78} %argrw{"wrr"}
	if		$tmp94 222 223 	%argrw{"r"}
	assign		$tmp91 $const2 	%argrw{"wr"}
	assign		$tmp91 $const3 	%argrw{"wr"}
	return
# PxrMultiTexture.osl:582
#     int doHexTile = validHexTileData(hexData[0]) + validHexTileData(hexData[1]) +
	add		$tmp95 $tmp90 $tmp91 	%filename{"PxrMultiTexture.osl"} %line{582} %argrw{"wrr"}
# PxrMultiTexture.osl:583
#                     validHexTileData(hexData[2]) + validHexTileData(hexData[3]);
	aref		$tmp97.s hexData.s $const5 	%line{583} %argrw{"wrr"}
	aref		$tmp97.t hexData.t $const5 	%argrw{"wrr"}
	aref		$tmp97.w hexData.w $const5 	%argrw{"wrr"}
	aref		$tmp97.r hexData.r $const5 	%argrw{"wrr"}
	functioncall	$const41 235 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:78
#     return hxt.w == INVALID_HEXTILE_WEIGHT ? 0 : 1;
	eq		$tmp99 $tmp97.w $const7 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{78} %argrw{"wrr"}
	if		$tmp99 233 234 	%argrw{"r"}
	assign		$tmp96 $const2 	%argrw{"wr"}
	assign		$tmp96 $const3 	%argrw{"wr"}
	return
# PxrMultiTexture.osl:583
#                     validHexTileData(hexData[2]) + validHexTileData(hexData[3]);
	add		doHexTile $tmp95 $tmp96 	%filename{"PxrMultiTexture.osl"} %line{583} %argrw{"wrr"}
# PxrMultiTexture.osl:590
#     int minNumTex = min(10, manifoldMulti.minNumTextures);
	min		minNumTex $const42 manifoldMulti.minNumTextures 	%line{590} %argrw{"wrr"}
# PxrMultiTexture.osl:591
#     int numRequested = max(manifoldMulti.numTextures, minNumTex);
	max		numRequested manifoldMulti.numTextures minNumTex 	%line{591} %argrw{"wrr"}
# PxrMultiTexture.osl:592
#     float numTexturesF = manifoldMulti.numTextures;
	assign		numTexturesF manifoldMulti.numTextures 	%line{592} %argrw{"wr"}
# PxrMultiTexture.osl:611
#     float objSeed = valid_out_flt;
	assign		objSeed $const3 	%line{611} %argrw{"wr"}
# PxrMultiTexture.osl:612
#     vector nullvec = null_out_vec;
	assign		nullvec $const1 	%line{612} %argrw{"wr"}
# PxrMultiTexture.osl:613
#     getRandomVector(randomSource, randomSeed, matchCppPattern,
	functioncall	$const43 1081 	%line{613} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:120
#     float seed = 0.0;
	assign		___720_seed $const44 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h"} %line{120} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:121
#     if (source == k_src_objectId)
	eq		$tmp100 randomSource $const2 	%line{121} %argrw{"wrr"}
	if		$tmp100 249 268 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:124
#         getattribute("builtin", "id", itmp);
	getattribute	$tmp101 $const45 $const46 ___721_itmp 	%line{124} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:128
#         seed = itmp * 3 + 1;
	mul		$tmp102 ___721_itmp $const5 	%line{128} %argrw{"wrr"}
	add		$tmp103 $tmp102 $const3 	%argrw{"wrr"}
	assign		___720_seed $tmp103 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:130
#     else if (source == k_src_objectName)
	eq		$tmp104 randomSource $const3 	%line{130} %argrw{"wrr"}
	if		$tmp104 264 268 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:133
#         COMPAT_NAME_HASH(seed);
	eq		$tmp105 matchCppPattern $const2 	%line{133} %argrw{"wrr"}
	neq		$tmp106 $tmp105 $const2 	%argrw{"wrr"}
	if		$tmp106 254 258 	%argrw{"r"}
	getattribute	$tmp107 $const47 ___720_seed 	%argrw{"wrw"}
	eq		$tmp108 $tmp107 $const2 	%argrw{"wrr"}
	neq		$tmp109 $tmp108 $const2 	%argrw{"wrr"}
	assign		$tmp106 $tmp109 	%argrw{"wr"}
	if		$tmp106 264 264 	%argrw{"r"}
	assign		___723_idname $const27 	%argrw{"wr"}
	getattribute	$tmp110 $const48 ___723_idname 	%argrw{"wrw"}
	hash		$tmp111 ___723_idname 	%argrw{"wr"}
	mod		$tmp112 $tmp111 $const49 	%argrw{"wrr"}
	assign		___720_seed $tmp112 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:135
#     else if (source == k_src_constant)
	eq		$tmp113 randomSource $const5 	%line{135} %argrw{"wrr"}
	if		$tmp113 267 268 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:137
#             seed = 0.0;
	assign		___720_seed $const44 	%line{137} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:141
#         error("PxrMultiTex::getRandomVector :"
	error		$const50 randomSource 	%line{141} %argrw{"rr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:146
#     float procPrimId = 0;
	assign		___720_procPrimId $const2 	%line{146} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:147
#     if (getattribute("user:procprimid", procPrimId))
	getattribute	$tmp114 $const51 ___720_procPrimId 	%line{147} %argrw{"wrw"}
	if		$tmp114 277 277 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:149
#         seed = mod(seed + procPrimId, 65535);
	add		$tmp115 ___720_seed ___720_procPrimId 	%line{149} %argrw{"wrr"}
	functioncall	$const54 277 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:154
# float  mod (float  a, float  b) { return a - b*floor(a/b); }
	div		$tmp117 $tmp115 $const53 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{154} %argrw{"wrr"}
	floor		$tmp116 $tmp117 	%argrw{"wr"}
	mul		$tmp118 $const53 $tmp116 	%argrw{"wrr"}
	sub		___720_seed $tmp115 $tmp118 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:153
#     if (!matchCppPattern) seed = fmod(seed, 65536.0);
	eq		$tmp119 matchCppPattern $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h"} %line{153} %argrw{"wrr"}
	if		$tmp119 280 280 	%argrw{"r"}
	fmod		___720_seed ___720_seed $const55 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:155
#     if (randVec)
	neq		$tmp120 nullvec $const44 	%line{155} %argrw{"wrr"}
	if		$tmp120 549 549 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:157
#         randVec = matchCppPattern ?
	if		matchCppPattern 543 546 	%line{157} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:158
#                     rxcellnoise(vector(seed + extraSeed)) :
	add		$tmp122 ___720_seed randomSeed 	%line{158} %argrw{"wrr"}
	assign		$tmp121 $tmp122 	%argrw{"wr"}
	functioncall	$const56 543 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:954
#     noise_parameters np = {3, 3, INPUT3W(seed), point(0), NONPERIODIC};
	assign		___601_np.domain $const5 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h"} %line{954} %argrw{"wr"}
	assign		___601_np.range $const5 	%argrw{"wr"}
	compref		$tmp124 $tmp121 $const2 	%argrw{"wrr"}
	fmod		$tmp123 $tmp124 $const55 	%argrw{"wrr"}
	aassign		___601_np.input $const2 $tmp123 	%argrw{"wrr"}
	compref		$tmp126 $tmp121 $const3 	%argrw{"wrr"}
	fmod		$tmp125 $tmp126 $const55 	%argrw{"wrr"}
	aassign		___601_np.input $const3 $tmp125 	%argrw{"wrr"}
	compref		$tmp128 $tmp121 $const4 	%argrw{"wrr"}
	fmod		$tmp127 $tmp128 $const55 	%argrw{"wrr"}
	aassign		___601_np.input $const4 $tmp127 	%argrw{"wrr"}
	aassign		___601_np.input $const5 $const2 	%argrw{"wrr"}
	assign		___601_np.result $const6 	%argrw{"wr"}
	assign		___601_np.periodic $const2 	%argrw{"wr"}
	assign		___601_np.period $const57 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:955
#     rx_cell_noise(np);
	functioncall	$const58 539 	%line{955} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:68
#     float rxcellrandtable[4096] = {
	assign		___538_rxcellrandtable $const59 	%line{68} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:582
#     int rxcellpermute[4096] = {
	assign		___538_rxcellpermute $const60 	%line{582} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:904
#     int k = 0;
	assign		___538_k $const2 	%line{904} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:905
#     if (np.domain == 1)
	eq		$tmp129 ___601_np.domain $const3 	%line{905} %argrw{"wrr"}
	if		$tmp129 335 539 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:907
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp130 ___601_np.input $const2 	%line{907} %argrw{"wrr"}
	add		___538_v0 $tmp130 $const61 	%argrw{"wrr"}
	lt		$tmp131 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp131 316 320 	%argrw{"r"}
	lt		$tmp132 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp132 314 316 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp133 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp133 $const3 	%argrw{"wrr"}
	gt		$tmp134 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp134 319 320 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:908
#         for (i = np.range; i > 0; i--, int00 += 7)
	for		$tmp136 322 324 332 335 	%line{908} %argrw{"r"}
	assign		___538_i ___601_np.range 	%argrw{"wr"}
	gt		$tmp135 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp136 $tmp135 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:910
#             v0 = rxcellrandtable[CELLPERMUTE(int00)];
	shl		$tmp137 $const3 $const64 	%line{910} %argrw{"wrr"}
	sub		$tmp138 $tmp137 $const3 	%argrw{"wrr"}
	bitand		$tmp139 ___538_int00 $tmp138 	%argrw{"wrr"}
	aref		$tmp140 ___538_rxcellpermute $tmp139 	%argrw{"wrr"}
	aref		___538_v0 ___538_rxcellrandtable $tmp140 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:911
#             np.result[k++] = v0;
	assign		$tmp141 ___538_k 	%line{911} %argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___601_np.result $tmp141 ___538_v0 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:908
#         for (i = np.range; i > 0; i--, int00 += 7)
	assign		$tmp142 ___538_i 	%line{908} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:914
#     else if (np.domain == 2)
	eq		$tmp143 ___601_np.domain $const4 	%line{914} %argrw{"wrr"}
	if		$tmp143 384 539 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:916
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp144 ___601_np.input $const2 	%line{916} %argrw{"wrr"}
	add		___538_v0 $tmp144 $const61 	%argrw{"wrr"}
	lt		$tmp145 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp145 346 350 	%argrw{"r"}
	lt		$tmp146 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp146 344 346 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp147 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp147 $const3 	%argrw{"wrr"}
	gt		$tmp148 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp148 349 350 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:917
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp149 ___601_np.input $const3 	%line{917} %argrw{"wrr"}
	add		___538_v0 $tmp149 $const61 	%argrw{"wrr"}
	lt		$tmp150 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp150 359 363 	%argrw{"r"}
	lt		$tmp151 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp151 357 359 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		$tmp152 ___538_v0 	%argrw{"wr"}
	sub		___538_int01 $tmp152 $const3 	%argrw{"wrr"}
	gt		$tmp153 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp153 362 363 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		___538_int01 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:918
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7)
	for		$tmp155 365 367 380 384 	%line{918} %argrw{"r"}
	assign		___538_i ___601_np.range 	%argrw{"wr"}
	gt		$tmp154 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp155 $tmp154 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:920
#             iy = CELLPERMUTE(int01);
	shl		$tmp156 $const3 $const64 	%line{920} %argrw{"wrr"}
	sub		$tmp157 $tmp156 $const3 	%argrw{"wrr"}
	bitand		$tmp158 ___538_int01 $tmp157 	%argrw{"wrr"}
	aref		___538_iy ___538_rxcellpermute $tmp158 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:921
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(iy + int00)];
	add		$tmp159 ___538_iy ___538_int00 	%line{921} %argrw{"wrr"}
	shl		$tmp160 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp161 $tmp160 $const3 	%argrw{"wrr"}
	bitand		$tmp162 $tmp159 $tmp161 	%argrw{"wrr"}
	aref		$tmp163 ___538_rxcellpermute $tmp162 	%argrw{"wrr"}
	aref		$tmp164 ___538_rxcellrandtable $tmp163 	%argrw{"wrr"}
	assign		$tmp165 ___538_k 	%argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___601_np.result $tmp165 $tmp164 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:918
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7)
	assign		$tmp166 ___538_i 	%line{918} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
	add		___538_int01 ___538_int01 $const37 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:924
#     else if (np.domain == 3)
	eq		$tmp167 ___601_np.domain $const5 	%line{924} %argrw{"wrr"}
	if		$tmp167 452 539 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:926
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp168 ___601_np.input $const2 	%line{926} %argrw{"wrr"}
	add		___538_v0 $tmp168 $const61 	%argrw{"wrr"}
	lt		$tmp169 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp169 395 399 	%argrw{"r"}
	lt		$tmp170 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp170 393 395 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp171 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp171 $const3 	%argrw{"wrr"}
	gt		$tmp172 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp172 398 399 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:927
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp173 ___601_np.input $const3 	%line{927} %argrw{"wrr"}
	add		___538_v0 $tmp173 $const61 	%argrw{"wrr"}
	lt		$tmp174 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp174 408 412 	%argrw{"r"}
	lt		$tmp175 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp175 406 408 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		$tmp176 ___538_v0 	%argrw{"wr"}
	sub		___538_int01 $tmp176 $const3 	%argrw{"wrr"}
	gt		$tmp177 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp177 411 412 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		___538_int01 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:928
#         SETUP_CELL_DOMAIN(2, int02);
	aref		$tmp178 ___601_np.input $const4 	%line{928} %argrw{"wrr"}
	add		___538_v0 $tmp178 $const61 	%argrw{"wrr"}
	lt		$tmp179 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp179 421 425 	%argrw{"r"}
	lt		$tmp180 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp180 419 421 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		$tmp181 ___538_v0 	%argrw{"wr"}
	sub		___538_int02 $tmp181 $const3 	%argrw{"wrr"}
	gt		$tmp182 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp182 424 425 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		___538_int02 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:929
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3)
	for		$tmp184 427 429 447 452 	%line{929} %argrw{"r"}
	assign		___538_i ___601_np.range 	%argrw{"wr"}
	gt		$tmp183 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp184 $tmp183 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:931
#             iz = CELLPERMUTE(int02);
	shl		$tmp185 $const3 $const64 	%line{931} %argrw{"wrr"}
	sub		$tmp186 $tmp185 $const3 	%argrw{"wrr"}
	bitand		$tmp187 ___538_int02 $tmp186 	%argrw{"wrr"}
	aref		___538_iz ___538_rxcellpermute $tmp187 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:932
#             iy = CELLPERMUTE(int01 + iz);
	add		$tmp188 ___538_int01 ___538_iz 	%line{932} %argrw{"wrr"}
	shl		$tmp189 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp190 $tmp189 $const3 	%argrw{"wrr"}
	bitand		$tmp191 $tmp188 $tmp190 	%argrw{"wrr"}
	aref		___538_iy ___538_rxcellpermute $tmp191 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:933
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(int00 + iy)];
	add		$tmp192 ___538_int00 ___538_iy 	%line{933} %argrw{"wrr"}
	shl		$tmp193 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp194 $tmp193 $const3 	%argrw{"wrr"}
	bitand		$tmp195 $tmp192 $tmp194 	%argrw{"wrr"}
	aref		$tmp196 ___538_rxcellpermute $tmp195 	%argrw{"wrr"}
	aref		$tmp197 ___538_rxcellrandtable $tmp196 	%argrw{"wrr"}
	assign		$tmp198 ___538_k 	%argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___601_np.result $tmp198 $tmp197 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:929
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3)
	assign		$tmp199 ___538_i 	%line{929} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
	add		___538_int01 ___538_int01 $const37 	%argrw{"wrr"}
	add		___538_int02 ___538_int02 $const5 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:936
#     else if (np.domain == 4)
	eq		$tmp200 ___601_np.domain $const34 	%line{936} %argrw{"wrr"}
	if		$tmp200 539 539 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:938
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp201 ___601_np.input $const2 	%line{938} %argrw{"wrr"}
	add		___538_v0 $tmp201 $const61 	%argrw{"wrr"}
	lt		$tmp202 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp202 463 467 	%argrw{"r"}
	lt		$tmp203 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp203 461 463 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp204 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp204 $const3 	%argrw{"wrr"}
	gt		$tmp205 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp205 466 467 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:939
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp206 ___601_np.input $const3 	%line{939} %argrw{"wrr"}
	add		___538_v0 $tmp206 $const61 	%argrw{"wrr"}
	lt		$tmp207 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp207 476 480 	%argrw{"r"}
	lt		$tmp208 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp208 474 476 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		$tmp209 ___538_v0 	%argrw{"wr"}
	sub		___538_int01 $tmp209 $const3 	%argrw{"wrr"}
	gt		$tmp210 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp210 479 480 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		___538_int01 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:940
#         SETUP_CELL_DOMAIN(2, int02);
	aref		$tmp211 ___601_np.input $const4 	%line{940} %argrw{"wrr"}
	add		___538_v0 $tmp211 $const61 	%argrw{"wrr"}
	lt		$tmp212 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp212 489 493 	%argrw{"r"}
	lt		$tmp213 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp213 487 489 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		$tmp214 ___538_v0 	%argrw{"wr"}
	sub		___538_int02 $tmp214 $const3 	%argrw{"wrr"}
	gt		$tmp215 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp215 492 493 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		___538_int02 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:941
#         SETUP_CELL_DOMAIN(3, int03);
	aref		$tmp216 ___601_np.input $const5 	%line{941} %argrw{"wrr"}
	add		___538_v0 $tmp216 $const61 	%argrw{"wrr"}
	lt		$tmp217 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp217 502 506 	%argrw{"r"}
	lt		$tmp218 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp218 500 502 	%argrw{"r"}
	assign		___538_int03 $const2 	%argrw{"wr"}
	assign		$tmp219 ___538_v0 	%argrw{"wr"}
	sub		___538_int03 $tmp219 $const3 	%argrw{"wrr"}
	gt		$tmp220 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp220 505 506 	%argrw{"r"}
	assign		___538_int03 $const2 	%argrw{"wr"}
	assign		___538_int03 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:942
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3, int03 += 15)
	for		$tmp222 508 510 533 539 	%line{942} %argrw{"r"}
	assign		___538_i ___601_np.range 	%argrw{"wr"}
	gt		$tmp221 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp222 $tmp221 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:944
#             iz = CELLPERMUTE(int02 + CELLPERMUTE(int03));
	shl		$tmp223 $const3 $const64 	%line{944} %argrw{"wrr"}
	sub		$tmp224 $tmp223 $const3 	%argrw{"wrr"}
	bitand		$tmp225 ___538_int03 $tmp224 	%argrw{"wrr"}
	aref		$tmp226 ___538_rxcellpermute $tmp225 	%argrw{"wrr"}
	add		$tmp227 ___538_int02 $tmp226 	%argrw{"wrr"}
	shl		$tmp228 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp229 $tmp228 $const3 	%argrw{"wrr"}
	bitand		$tmp230 $tmp227 $tmp229 	%argrw{"wrr"}
	aref		___538_iz ___538_rxcellpermute $tmp230 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:945
#             iy = CELLPERMUTE(int01 + iz);
	add		$tmp231 ___538_int01 ___538_iz 	%line{945} %argrw{"wrr"}
	shl		$tmp232 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp233 $tmp232 $const3 	%argrw{"wrr"}
	bitand		$tmp234 $tmp231 $tmp233 	%argrw{"wrr"}
	aref		___538_iy ___538_rxcellpermute $tmp234 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:946
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(int00 + iy)];
	add		$tmp235 ___538_int00 ___538_iy 	%line{946} %argrw{"wrr"}
	shl		$tmp236 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp237 $tmp236 $const3 	%argrw{"wrr"}
	bitand		$tmp238 $tmp235 $tmp237 	%argrw{"wrr"}
	aref		$tmp239 ___538_rxcellpermute $tmp238 	%argrw{"wrr"}
	aref		$tmp240 ___538_rxcellrandtable $tmp239 	%argrw{"wrr"}
	assign		$tmp241 ___538_k 	%argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___601_np.result $tmp241 $tmp240 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:942
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3, int03 += 15)
	assign		$tmp242 ___538_i 	%line{942} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
	add		___538_int01 ___538_int01 $const37 	%argrw{"wrr"}
	add		___538_int02 ___538_int02 $const5 	%argrw{"wrr"}
	add		___538_int03 ___538_int03 $const65 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:956
#     return point(np.result[0], np.result[1], np.result[2]);
	compref		$tmp243 ___601_np.result $const2 	%line{956} %argrw{"wrr"}
	compref		$tmp244 ___601_np.result $const3 	%argrw{"wrr"}
	compref		$tmp245 ___601_np.result $const4 	%argrw{"wrr"}
	point		nullvec $tmp243 $tmp244 $tmp245 	%argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:159
#                     noise("cell", vector(seed + extraSeed));
	add		$tmp247 ___720_seed randomSeed 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h"} %line{159} %argrw{"wrr"}
	assign		$tmp246 $tmp247 	%argrw{"wr"}
	noise		nullvec $const66 $tmp246 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:161
#         randVec = normalize((randVec - vector(0.5)) * 2.0);
	sub		$tmp249 nullvec $const67 	%line{161} %argrw{"wrr"}
	mul		$tmp250 $tmp249 $const68 	%argrw{"wrr"}
	normalize	nullvec $tmp250 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:164
#     if (randVec2)
	neq		$tmp251 nullvec $const44 	%line{164} %argrw{"wrr"}
	if		$tmp251 820 820 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:166
#         randVec2 = matchCppPattern ?
	if		matchCppPattern 813 817 	%line{166} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:167
#                         rxcellnoise(vector(seed * 2.0 + extraSeed)) :
	mul		$tmp253 ___720_seed $const68 	%line{167} %argrw{"wrr"}
	add		$tmp254 $tmp253 randomSeed 	%argrw{"wrr"}
	assign		$tmp252 $tmp254 	%argrw{"wr"}
	functioncall	$const56 813 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:954
#     noise_parameters np = {3, 3, INPUT3W(seed), point(0), NONPERIODIC};
	assign		___601_np.domain $const5 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h"} %line{954} %argrw{"wr"}
	assign		___601_np.range $const5 	%argrw{"wr"}
	compref		$tmp256 $tmp252 $const2 	%argrw{"wrr"}
	fmod		$tmp255 $tmp256 $const55 	%argrw{"wrr"}
	aassign		___601_np.input $const2 $tmp255 	%argrw{"wrr"}
	compref		$tmp258 $tmp252 $const3 	%argrw{"wrr"}
	fmod		$tmp257 $tmp258 $const55 	%argrw{"wrr"}
	aassign		___601_np.input $const3 $tmp257 	%argrw{"wrr"}
	compref		$tmp260 $tmp252 $const4 	%argrw{"wrr"}
	fmod		$tmp259 $tmp260 $const55 	%argrw{"wrr"}
	aassign		___601_np.input $const4 $tmp259 	%argrw{"wrr"}
	aassign		___601_np.input $const5 $const2 	%argrw{"wrr"}
	assign		___601_np.result $const6 	%argrw{"wr"}
	assign		___601_np.periodic $const2 	%argrw{"wr"}
	assign		___601_np.period $const57 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:955
#     rx_cell_noise(np);
	functioncall	$const58 809 	%line{955} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:68
#     float rxcellrandtable[4096] = {
	assign		___538_rxcellrandtable $const59 	%line{68} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:582
#     int rxcellpermute[4096] = {
	assign		___538_rxcellpermute $const60 	%line{582} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:904
#     int k = 0;
	assign		___538_k $const2 	%line{904} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:905
#     if (np.domain == 1)
	eq		$tmp261 ___601_np.domain $const3 	%line{905} %argrw{"wrr"}
	if		$tmp261 605 809 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:907
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp262 ___601_np.input $const2 	%line{907} %argrw{"wrr"}
	add		___538_v0 $tmp262 $const61 	%argrw{"wrr"}
	lt		$tmp263 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp263 586 590 	%argrw{"r"}
	lt		$tmp264 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp264 584 586 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp265 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp265 $const3 	%argrw{"wrr"}
	gt		$tmp266 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp266 589 590 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:908
#         for (i = np.range; i > 0; i--, int00 += 7)
	for		$tmp268 592 594 602 605 	%line{908} %argrw{"r"}
	assign		___538_i ___601_np.range 	%argrw{"wr"}
	gt		$tmp267 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp268 $tmp267 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:910
#             v0 = rxcellrandtable[CELLPERMUTE(int00)];
	shl		$tmp269 $const3 $const64 	%line{910} %argrw{"wrr"}
	sub		$tmp270 $tmp269 $const3 	%argrw{"wrr"}
	bitand		$tmp271 ___538_int00 $tmp270 	%argrw{"wrr"}
	aref		$tmp272 ___538_rxcellpermute $tmp271 	%argrw{"wrr"}
	aref		___538_v0 ___538_rxcellrandtable $tmp272 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:911
#             np.result[k++] = v0;
	assign		$tmp273 ___538_k 	%line{911} %argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___601_np.result $tmp273 ___538_v0 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:908
#         for (i = np.range; i > 0; i--, int00 += 7)
	assign		$tmp274 ___538_i 	%line{908} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:914
#     else if (np.domain == 2)
	eq		$tmp275 ___601_np.domain $const4 	%line{914} %argrw{"wrr"}
	if		$tmp275 654 809 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:916
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp276 ___601_np.input $const2 	%line{916} %argrw{"wrr"}
	add		___538_v0 $tmp276 $const61 	%argrw{"wrr"}
	lt		$tmp277 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp277 616 620 	%argrw{"r"}
	lt		$tmp278 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp278 614 616 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp279 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp279 $const3 	%argrw{"wrr"}
	gt		$tmp280 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp280 619 620 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:917
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp281 ___601_np.input $const3 	%line{917} %argrw{"wrr"}
	add		___538_v0 $tmp281 $const61 	%argrw{"wrr"}
	lt		$tmp282 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp282 629 633 	%argrw{"r"}
	lt		$tmp283 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp283 627 629 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		$tmp284 ___538_v0 	%argrw{"wr"}
	sub		___538_int01 $tmp284 $const3 	%argrw{"wrr"}
	gt		$tmp285 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp285 632 633 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		___538_int01 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:918
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7)
	for		$tmp287 635 637 650 654 	%line{918} %argrw{"r"}
	assign		___538_i ___601_np.range 	%argrw{"wr"}
	gt		$tmp286 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp287 $tmp286 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:920
#             iy = CELLPERMUTE(int01);
	shl		$tmp288 $const3 $const64 	%line{920} %argrw{"wrr"}
	sub		$tmp289 $tmp288 $const3 	%argrw{"wrr"}
	bitand		$tmp290 ___538_int01 $tmp289 	%argrw{"wrr"}
	aref		___538_iy ___538_rxcellpermute $tmp290 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:921
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(iy + int00)];
	add		$tmp291 ___538_iy ___538_int00 	%line{921} %argrw{"wrr"}
	shl		$tmp292 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp293 $tmp292 $const3 	%argrw{"wrr"}
	bitand		$tmp294 $tmp291 $tmp293 	%argrw{"wrr"}
	aref		$tmp295 ___538_rxcellpermute $tmp294 	%argrw{"wrr"}
	aref		$tmp296 ___538_rxcellrandtable $tmp295 	%argrw{"wrr"}
	assign		$tmp297 ___538_k 	%argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___601_np.result $tmp297 $tmp296 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:918
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7)
	assign		$tmp298 ___538_i 	%line{918} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
	add		___538_int01 ___538_int01 $const37 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:924
#     else if (np.domain == 3)
	eq		$tmp299 ___601_np.domain $const5 	%line{924} %argrw{"wrr"}
	if		$tmp299 722 809 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:926
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp300 ___601_np.input $const2 	%line{926} %argrw{"wrr"}
	add		___538_v0 $tmp300 $const61 	%argrw{"wrr"}
	lt		$tmp301 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp301 665 669 	%argrw{"r"}
	lt		$tmp302 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp302 663 665 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp303 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp303 $const3 	%argrw{"wrr"}
	gt		$tmp304 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp304 668 669 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:927
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp305 ___601_np.input $const3 	%line{927} %argrw{"wrr"}
	add		___538_v0 $tmp305 $const61 	%argrw{"wrr"}
	lt		$tmp306 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp306 678 682 	%argrw{"r"}
	lt		$tmp307 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp307 676 678 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		$tmp308 ___538_v0 	%argrw{"wr"}
	sub		___538_int01 $tmp308 $const3 	%argrw{"wrr"}
	gt		$tmp309 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp309 681 682 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		___538_int01 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:928
#         SETUP_CELL_DOMAIN(2, int02);
	aref		$tmp310 ___601_np.input $const4 	%line{928} %argrw{"wrr"}
	add		___538_v0 $tmp310 $const61 	%argrw{"wrr"}
	lt		$tmp311 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp311 691 695 	%argrw{"r"}
	lt		$tmp312 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp312 689 691 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		$tmp313 ___538_v0 	%argrw{"wr"}
	sub		___538_int02 $tmp313 $const3 	%argrw{"wrr"}
	gt		$tmp314 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp314 694 695 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		___538_int02 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:929
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3)
	for		$tmp316 697 699 717 722 	%line{929} %argrw{"r"}
	assign		___538_i ___601_np.range 	%argrw{"wr"}
	gt		$tmp315 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp316 $tmp315 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:931
#             iz = CELLPERMUTE(int02);
	shl		$tmp317 $const3 $const64 	%line{931} %argrw{"wrr"}
	sub		$tmp318 $tmp317 $const3 	%argrw{"wrr"}
	bitand		$tmp319 ___538_int02 $tmp318 	%argrw{"wrr"}
	aref		___538_iz ___538_rxcellpermute $tmp319 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:932
#             iy = CELLPERMUTE(int01 + iz);
	add		$tmp320 ___538_int01 ___538_iz 	%line{932} %argrw{"wrr"}
	shl		$tmp321 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp322 $tmp321 $const3 	%argrw{"wrr"}
	bitand		$tmp323 $tmp320 $tmp322 	%argrw{"wrr"}
	aref		___538_iy ___538_rxcellpermute $tmp323 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:933
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(int00 + iy)];
	add		$tmp324 ___538_int00 ___538_iy 	%line{933} %argrw{"wrr"}
	shl		$tmp325 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp326 $tmp325 $const3 	%argrw{"wrr"}
	bitand		$tmp327 $tmp324 $tmp326 	%argrw{"wrr"}
	aref		$tmp328 ___538_rxcellpermute $tmp327 	%argrw{"wrr"}
	aref		$tmp329 ___538_rxcellrandtable $tmp328 	%argrw{"wrr"}
	assign		$tmp330 ___538_k 	%argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___601_np.result $tmp330 $tmp329 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:929
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3)
	assign		$tmp331 ___538_i 	%line{929} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
	add		___538_int01 ___538_int01 $const37 	%argrw{"wrr"}
	add		___538_int02 ___538_int02 $const5 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:936
#     else if (np.domain == 4)
	eq		$tmp332 ___601_np.domain $const34 	%line{936} %argrw{"wrr"}
	if		$tmp332 809 809 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:938
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp333 ___601_np.input $const2 	%line{938} %argrw{"wrr"}
	add		___538_v0 $tmp333 $const61 	%argrw{"wrr"}
	lt		$tmp334 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp334 733 737 	%argrw{"r"}
	lt		$tmp335 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp335 731 733 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp336 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp336 $const3 	%argrw{"wrr"}
	gt		$tmp337 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp337 736 737 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:939
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp338 ___601_np.input $const3 	%line{939} %argrw{"wrr"}
	add		___538_v0 $tmp338 $const61 	%argrw{"wrr"}
	lt		$tmp339 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp339 746 750 	%argrw{"r"}
	lt		$tmp340 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp340 744 746 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		$tmp341 ___538_v0 	%argrw{"wr"}
	sub		___538_int01 $tmp341 $const3 	%argrw{"wrr"}
	gt		$tmp342 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp342 749 750 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		___538_int01 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:940
#         SETUP_CELL_DOMAIN(2, int02);
	aref		$tmp343 ___601_np.input $const4 	%line{940} %argrw{"wrr"}
	add		___538_v0 $tmp343 $const61 	%argrw{"wrr"}
	lt		$tmp344 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp344 759 763 	%argrw{"r"}
	lt		$tmp345 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp345 757 759 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		$tmp346 ___538_v0 	%argrw{"wr"}
	sub		___538_int02 $tmp346 $const3 	%argrw{"wrr"}
	gt		$tmp347 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp347 762 763 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		___538_int02 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:941
#         SETUP_CELL_DOMAIN(3, int03);
	aref		$tmp348 ___601_np.input $const5 	%line{941} %argrw{"wrr"}
	add		___538_v0 $tmp348 $const61 	%argrw{"wrr"}
	lt		$tmp349 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp349 772 776 	%argrw{"r"}
	lt		$tmp350 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp350 770 772 	%argrw{"r"}
	assign		___538_int03 $const2 	%argrw{"wr"}
	assign		$tmp351 ___538_v0 	%argrw{"wr"}
	sub		___538_int03 $tmp351 $const3 	%argrw{"wrr"}
	gt		$tmp352 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp352 775 776 	%argrw{"r"}
	assign		___538_int03 $const2 	%argrw{"wr"}
	assign		___538_int03 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:942
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3, int03 += 15)
	for		$tmp354 778 780 803 809 	%line{942} %argrw{"r"}
	assign		___538_i ___601_np.range 	%argrw{"wr"}
	gt		$tmp353 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp354 $tmp353 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:944
#             iz = CELLPERMUTE(int02 + CELLPERMUTE(int03));
	shl		$tmp355 $const3 $const64 	%line{944} %argrw{"wrr"}
	sub		$tmp356 $tmp355 $const3 	%argrw{"wrr"}
	bitand		$tmp357 ___538_int03 $tmp356 	%argrw{"wrr"}
	aref		$tmp358 ___538_rxcellpermute $tmp357 	%argrw{"wrr"}
	add		$tmp359 ___538_int02 $tmp358 	%argrw{"wrr"}
	shl		$tmp360 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp361 $tmp360 $const3 	%argrw{"wrr"}
	bitand		$tmp362 $tmp359 $tmp361 	%argrw{"wrr"}
	aref		___538_iz ___538_rxcellpermute $tmp362 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:945
#             iy = CELLPERMUTE(int01 + iz);
	add		$tmp363 ___538_int01 ___538_iz 	%line{945} %argrw{"wrr"}
	shl		$tmp364 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp365 $tmp364 $const3 	%argrw{"wrr"}
	bitand		$tmp366 $tmp363 $tmp365 	%argrw{"wrr"}
	aref		___538_iy ___538_rxcellpermute $tmp366 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:946
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(int00 + iy)];
	add		$tmp367 ___538_int00 ___538_iy 	%line{946} %argrw{"wrr"}
	shl		$tmp368 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp369 $tmp368 $const3 	%argrw{"wrr"}
	bitand		$tmp370 $tmp367 $tmp369 	%argrw{"wrr"}
	aref		$tmp371 ___538_rxcellpermute $tmp370 	%argrw{"wrr"}
	aref		$tmp372 ___538_rxcellrandtable $tmp371 	%argrw{"wrr"}
	assign		$tmp373 ___538_k 	%argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___601_np.result $tmp373 $tmp372 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:942
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3, int03 += 15)
	assign		$tmp374 ___538_i 	%line{942} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
	add		___538_int01 ___538_int01 $const37 	%argrw{"wrr"}
	add		___538_int02 ___538_int02 $const5 	%argrw{"wrr"}
	add		___538_int03 ___538_int03 $const65 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:956
#     return point(np.result[0], np.result[1], np.result[2]);
	compref		$tmp375 ___601_np.result $const2 	%line{956} %argrw{"wrr"}
	compref		$tmp376 ___601_np.result $const3 	%argrw{"wrr"}
	compref		$tmp377 ___601_np.result $const4 	%argrw{"wrr"}
	point		nullvec $tmp375 $tmp376 $tmp377 	%argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:168
#                         noise("cell", vector(seed * 2.0 + extraSeed));
	mul		$tmp379 ___720_seed $const68 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h"} %line{168} %argrw{"wrr"}
	add		$tmp380 $tmp379 randomSeed 	%argrw{"wrr"}
	assign		$tmp378 $tmp380 	%argrw{"wr"}
	noise		nullvec $const66 $tmp378 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:170
#         randVec2 = normalize((randVec2 - vector(0.5)) * 2.0);
	sub		$tmp382 nullvec $const67 	%line{170} %argrw{"wrr"}
	mul		$tmp383 $tmp382 $const68 	%argrw{"wrr"}
	normalize	nullvec $tmp383 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:173
#     if (randFlt)
	neq		$tmp384 objSeed $const44 	%line{173} %argrw{"wrr"}
	if		$tmp384 1081 1081 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:175
#         if (randVec)
	neq		$tmp385 nullvec $const44 	%line{175} %argrw{"wrr"}
	if		$tmp385 825 1081 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:176
#             randFlt = randVec[0];
	compref		objSeed nullvec $const2 	%line{176} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:177
#         else if (randVec2)
	neq		$tmp386 nullvec $const44 	%line{177} %argrw{"wrr"}
	if		$tmp386 828 1081 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:178
#             randFlt = randVec2[0];
	compref		objSeed nullvec $const2 	%line{178} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:181
#             randFlt = matchCppPattern ?
	if		matchCppPattern 1079 1081 	%line{181} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:182
#                         rxcellnoise(seed + extraSeed) :
	add		$tmp387 ___720_seed randomSeed 	%line{182} %argrw{"wrr"}
	functioncall	$const56 1079 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:975
#     noise_parameters np = {1, 1, INPUT1(seed), point(0), NONPERIODIC};
	assign		___604_np.domain $const3 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h"} %line{975} %argrw{"wr"}
	assign		___604_np.range $const3 	%argrw{"wr"}
	aassign		___604_np.input $const2 $tmp387 	%argrw{"wrr"}
	aassign		___604_np.input $const3 $const2 	%argrw{"wrr"}
	aassign		___604_np.input $const4 $const2 	%argrw{"wrr"}
	aassign		___604_np.input $const5 $const2 	%argrw{"wrr"}
	assign		___604_np.result $const6 	%argrw{"wr"}
	assign		___604_np.periodic $const2 	%argrw{"wr"}
	assign		___604_np.period $const57 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:976
#     rx_cell_noise(np);
	functioncall	$const58 1078 	%line{976} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:68
#     float rxcellrandtable[4096] = {
	assign		___538_rxcellrandtable $const59 	%line{68} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:582
#     int rxcellpermute[4096] = {
	assign		___538_rxcellpermute $const60 	%line{582} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:904
#     int k = 0;
	assign		___538_k $const2 	%line{904} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:905
#     if (np.domain == 1)
	eq		$tmp388 ___604_np.domain $const3 	%line{905} %argrw{"wrr"}
	if		$tmp388 874 1078 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:907
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp389 ___604_np.input $const2 	%line{907} %argrw{"wrr"}
	add		___538_v0 $tmp389 $const61 	%argrw{"wrr"}
	lt		$tmp390 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp390 855 859 	%argrw{"r"}
	lt		$tmp391 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp391 853 855 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp392 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp392 $const3 	%argrw{"wrr"}
	gt		$tmp393 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp393 858 859 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:908
#         for (i = np.range; i > 0; i--, int00 += 7)
	for		$tmp395 861 863 871 874 	%line{908} %argrw{"r"}
	assign		___538_i ___604_np.range 	%argrw{"wr"}
	gt		$tmp394 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp395 $tmp394 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:910
#             v0 = rxcellrandtable[CELLPERMUTE(int00)];
	shl		$tmp396 $const3 $const64 	%line{910} %argrw{"wrr"}
	sub		$tmp397 $tmp396 $const3 	%argrw{"wrr"}
	bitand		$tmp398 ___538_int00 $tmp397 	%argrw{"wrr"}
	aref		$tmp399 ___538_rxcellpermute $tmp398 	%argrw{"wrr"}
	aref		___538_v0 ___538_rxcellrandtable $tmp399 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:911
#             np.result[k++] = v0;
	assign		$tmp400 ___538_k 	%line{911} %argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___604_np.result $tmp400 ___538_v0 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:908
#         for (i = np.range; i > 0; i--, int00 += 7)
	assign		$tmp401 ___538_i 	%line{908} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:914
#     else if (np.domain == 2)
	eq		$tmp402 ___604_np.domain $const4 	%line{914} %argrw{"wrr"}
	if		$tmp402 923 1078 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:916
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp403 ___604_np.input $const2 	%line{916} %argrw{"wrr"}
	add		___538_v0 $tmp403 $const61 	%argrw{"wrr"}
	lt		$tmp404 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp404 885 889 	%argrw{"r"}
	lt		$tmp405 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp405 883 885 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp406 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp406 $const3 	%argrw{"wrr"}
	gt		$tmp407 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp407 888 889 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:917
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp408 ___604_np.input $const3 	%line{917} %argrw{"wrr"}
	add		___538_v0 $tmp408 $const61 	%argrw{"wrr"}
	lt		$tmp409 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp409 898 902 	%argrw{"r"}
	lt		$tmp410 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp410 896 898 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		$tmp411 ___538_v0 	%argrw{"wr"}
	sub		___538_int01 $tmp411 $const3 	%argrw{"wrr"}
	gt		$tmp412 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp412 901 902 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		___538_int01 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:918
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7)
	for		$tmp414 904 906 919 923 	%line{918} %argrw{"r"}
	assign		___538_i ___604_np.range 	%argrw{"wr"}
	gt		$tmp413 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp414 $tmp413 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:920
#             iy = CELLPERMUTE(int01);
	shl		$tmp415 $const3 $const64 	%line{920} %argrw{"wrr"}
	sub		$tmp416 $tmp415 $const3 	%argrw{"wrr"}
	bitand		$tmp417 ___538_int01 $tmp416 	%argrw{"wrr"}
	aref		___538_iy ___538_rxcellpermute $tmp417 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:921
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(iy + int00)];
	add		$tmp418 ___538_iy ___538_int00 	%line{921} %argrw{"wrr"}
	shl		$tmp419 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp420 $tmp419 $const3 	%argrw{"wrr"}
	bitand		$tmp421 $tmp418 $tmp420 	%argrw{"wrr"}
	aref		$tmp422 ___538_rxcellpermute $tmp421 	%argrw{"wrr"}
	aref		$tmp423 ___538_rxcellrandtable $tmp422 	%argrw{"wrr"}
	assign		$tmp424 ___538_k 	%argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___604_np.result $tmp424 $tmp423 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:918
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7)
	assign		$tmp425 ___538_i 	%line{918} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
	add		___538_int01 ___538_int01 $const37 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:924
#     else if (np.domain == 3)
	eq		$tmp426 ___604_np.domain $const5 	%line{924} %argrw{"wrr"}
	if		$tmp426 991 1078 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:926
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp427 ___604_np.input $const2 	%line{926} %argrw{"wrr"}
	add		___538_v0 $tmp427 $const61 	%argrw{"wrr"}
	lt		$tmp428 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp428 934 938 	%argrw{"r"}
	lt		$tmp429 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp429 932 934 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp430 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp430 $const3 	%argrw{"wrr"}
	gt		$tmp431 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp431 937 938 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:927
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp432 ___604_np.input $const3 	%line{927} %argrw{"wrr"}
	add		___538_v0 $tmp432 $const61 	%argrw{"wrr"}
	lt		$tmp433 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp433 947 951 	%argrw{"r"}
	lt		$tmp434 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp434 945 947 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		$tmp435 ___538_v0 	%argrw{"wr"}
	sub		___538_int01 $tmp435 $const3 	%argrw{"wrr"}
	gt		$tmp436 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp436 950 951 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		___538_int01 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:928
#         SETUP_CELL_DOMAIN(2, int02);
	aref		$tmp437 ___604_np.input $const4 	%line{928} %argrw{"wrr"}
	add		___538_v0 $tmp437 $const61 	%argrw{"wrr"}
	lt		$tmp438 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp438 960 964 	%argrw{"r"}
	lt		$tmp439 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp439 958 960 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		$tmp440 ___538_v0 	%argrw{"wr"}
	sub		___538_int02 $tmp440 $const3 	%argrw{"wrr"}
	gt		$tmp441 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp441 963 964 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		___538_int02 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:929
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3)
	for		$tmp443 966 968 986 991 	%line{929} %argrw{"r"}
	assign		___538_i ___604_np.range 	%argrw{"wr"}
	gt		$tmp442 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp443 $tmp442 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:931
#             iz = CELLPERMUTE(int02);
	shl		$tmp444 $const3 $const64 	%line{931} %argrw{"wrr"}
	sub		$tmp445 $tmp444 $const3 	%argrw{"wrr"}
	bitand		$tmp446 ___538_int02 $tmp445 	%argrw{"wrr"}
	aref		___538_iz ___538_rxcellpermute $tmp446 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:932
#             iy = CELLPERMUTE(int01 + iz);
	add		$tmp447 ___538_int01 ___538_iz 	%line{932} %argrw{"wrr"}
	shl		$tmp448 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp449 $tmp448 $const3 	%argrw{"wrr"}
	bitand		$tmp450 $tmp447 $tmp449 	%argrw{"wrr"}
	aref		___538_iy ___538_rxcellpermute $tmp450 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:933
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(int00 + iy)];
	add		$tmp451 ___538_int00 ___538_iy 	%line{933} %argrw{"wrr"}
	shl		$tmp452 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp453 $tmp452 $const3 	%argrw{"wrr"}
	bitand		$tmp454 $tmp451 $tmp453 	%argrw{"wrr"}
	aref		$tmp455 ___538_rxcellpermute $tmp454 	%argrw{"wrr"}
	aref		$tmp456 ___538_rxcellrandtable $tmp455 	%argrw{"wrr"}
	assign		$tmp457 ___538_k 	%argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___604_np.result $tmp457 $tmp456 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:929
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3)
	assign		$tmp458 ___538_i 	%line{929} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
	add		___538_int01 ___538_int01 $const37 	%argrw{"wrr"}
	add		___538_int02 ___538_int02 $const5 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:936
#     else if (np.domain == 4)
	eq		$tmp459 ___604_np.domain $const34 	%line{936} %argrw{"wrr"}
	if		$tmp459 1078 1078 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:938
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp460 ___604_np.input $const2 	%line{938} %argrw{"wrr"}
	add		___538_v0 $tmp460 $const61 	%argrw{"wrr"}
	lt		$tmp461 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp461 1002 1006 	%argrw{"r"}
	lt		$tmp462 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp462 1000 1002 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp463 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp463 $const3 	%argrw{"wrr"}
	gt		$tmp464 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp464 1005 1006 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:939
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp465 ___604_np.input $const3 	%line{939} %argrw{"wrr"}
	add		___538_v0 $tmp465 $const61 	%argrw{"wrr"}
	lt		$tmp466 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp466 1015 1019 	%argrw{"r"}
	lt		$tmp467 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp467 1013 1015 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		$tmp468 ___538_v0 	%argrw{"wr"}
	sub		___538_int01 $tmp468 $const3 	%argrw{"wrr"}
	gt		$tmp469 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp469 1018 1019 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		___538_int01 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:940
#         SETUP_CELL_DOMAIN(2, int02);
	aref		$tmp470 ___604_np.input $const4 	%line{940} %argrw{"wrr"}
	add		___538_v0 $tmp470 $const61 	%argrw{"wrr"}
	lt		$tmp471 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp471 1028 1032 	%argrw{"r"}
	lt		$tmp472 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp472 1026 1028 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		$tmp473 ___538_v0 	%argrw{"wr"}
	sub		___538_int02 $tmp473 $const3 	%argrw{"wrr"}
	gt		$tmp474 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp474 1031 1032 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		___538_int02 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:941
#         SETUP_CELL_DOMAIN(3, int03);
	aref		$tmp475 ___604_np.input $const5 	%line{941} %argrw{"wrr"}
	add		___538_v0 $tmp475 $const61 	%argrw{"wrr"}
	lt		$tmp476 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp476 1041 1045 	%argrw{"r"}
	lt		$tmp477 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp477 1039 1041 	%argrw{"r"}
	assign		___538_int03 $const2 	%argrw{"wr"}
	assign		$tmp478 ___538_v0 	%argrw{"wr"}
	sub		___538_int03 $tmp478 $const3 	%argrw{"wrr"}
	gt		$tmp479 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp479 1044 1045 	%argrw{"r"}
	assign		___538_int03 $const2 	%argrw{"wr"}
	assign		___538_int03 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:942
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3, int03 += 15)
	for		$tmp481 1047 1049 1072 1078 	%line{942} %argrw{"r"}
	assign		___538_i ___604_np.range 	%argrw{"wr"}
	gt		$tmp480 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp481 $tmp480 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:944
#             iz = CELLPERMUTE(int02 + CELLPERMUTE(int03));
	shl		$tmp482 $const3 $const64 	%line{944} %argrw{"wrr"}
	sub		$tmp483 $tmp482 $const3 	%argrw{"wrr"}
	bitand		$tmp484 ___538_int03 $tmp483 	%argrw{"wrr"}
	aref		$tmp485 ___538_rxcellpermute $tmp484 	%argrw{"wrr"}
	add		$tmp486 ___538_int02 $tmp485 	%argrw{"wrr"}
	shl		$tmp487 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp488 $tmp487 $const3 	%argrw{"wrr"}
	bitand		$tmp489 $tmp486 $tmp488 	%argrw{"wrr"}
	aref		___538_iz ___538_rxcellpermute $tmp489 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:945
#             iy = CELLPERMUTE(int01 + iz);
	add		$tmp490 ___538_int01 ___538_iz 	%line{945} %argrw{"wrr"}
	shl		$tmp491 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp492 $tmp491 $const3 	%argrw{"wrr"}
	bitand		$tmp493 $tmp490 $tmp492 	%argrw{"wrr"}
	aref		___538_iy ___538_rxcellpermute $tmp493 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:946
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(int00 + iy)];
	add		$tmp494 ___538_int00 ___538_iy 	%line{946} %argrw{"wrr"}
	shl		$tmp495 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp496 $tmp495 $const3 	%argrw{"wrr"}
	bitand		$tmp497 $tmp494 $tmp496 	%argrw{"wrr"}
	aref		$tmp498 ___538_rxcellpermute $tmp497 	%argrw{"wrr"}
	aref		$tmp499 ___538_rxcellrandtable $tmp498 	%argrw{"wrr"}
	assign		$tmp500 ___538_k 	%argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___604_np.result $tmp500 $tmp499 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:942
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3, int03 += 15)
	assign		$tmp501 ___538_i 	%line{942} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
	add		___538_int01 ___538_int01 $const37 	%argrw{"wrr"}
	add		___538_int02 ___538_int02 $const5 	%argrw{"wrr"}
	add		___538_int03 ___538_int03 $const65 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:977
#     return np.result[0];
	compref		objSeed ___604_np.result $const2 	%line{977} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h:183
#                         noise("cell", seed + extraSeed);
	add		$tmp502 ___720_seed randomSeed 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLMultiManifold.h"} %line{183} %argrw{"wrr"}
	noise		objSeed $const66 $tmp502 	%argrw{"wrr"}
# PxrMultiTexture.osl:615
#     objSeed = floor(objSeed * 1223.0);
	mul		$tmp503 objSeed $const69 	%filename{"PxrMultiTexture.osl"} %line{615} %argrw{"wrr"}
	floor		objSeed $tmp503 	%argrw{"wr"}
# PxrMultiTexture.osl:617
#     int randomize = (randomHue || randomSaturation || randomLuminance || randomGamma);
	neq		$tmp504 randomHue $const44 	%line{617} %argrw{"wrr"}
	if		$tmp504 1085 1087 	%argrw{"r"}
	neq		$tmp505 randomSaturation $const44 	%argrw{"wrr"}
	assign		$tmp504 $tmp505 	%argrw{"wr"}
	neq		$tmp506 $tmp504 $const2 	%argrw{"wrr"}
	if		$tmp506 1089 1091 	%argrw{"r"}
	neq		$tmp507 randomLuminance $const44 	%argrw{"wrr"}
	assign		$tmp506 $tmp507 	%argrw{"wr"}
	neq		$tmp508 $tmp506 $const2 	%argrw{"wrr"}
	if		$tmp508 1093 1095 	%argrw{"r"}
	neq		$tmp509 randomGamma $const44 	%argrw{"wrr"}
	assign		$tmp508 $tmp509 	%argrw{"wr"}
	assign		randomize $tmp508 	%argrw{"wr"}
# PxrMultiTexture.osl:618
#     int doHue = (randomHue != 0.0);
	neq		doHue randomHue $const44 	%line{618} %argrw{"wrr"}
# PxrMultiTexture.osl:619
#     int doSat = (randomSaturation != 0.0);
	neq		doSat randomSaturation $const44 	%line{619} %argrw{"wrr"}
# PxrMultiTexture.osl:620
#     int doLum = (randomLuminance != 0.0);
	neq		doLum randomLuminance $const44 	%line{620} %argrw{"wrr"}
# PxrMultiTexture.osl:621
#     int doGam = (randomGamma != 0.0);
	neq		doGam randomGamma $const44 	%line{621} %argrw{"wrr"}
# PxrMultiTexture.osl:623
#     float rHue = randomHue;
	assign		rHue randomHue 	%line{623} %argrw{"wr"}
# PxrMultiTexture.osl:624
#     float rSat = randomSaturation;
	assign		rSat randomSaturation 	%line{624} %argrw{"wr"}
# PxrMultiTexture.osl:625
#     float rLum = randomLuminance;
	assign		rLum randomLuminance 	%line{625} %argrw{"wr"}
# PxrMultiTexture.osl:626
#     float rGam = randomGamma;
	assign		rGam randomGamma 	%line{626} %argrw{"wr"}
# PxrMultiTexture.osl:630
#     for (int g = 0; g < NUM_STGRPS; g++)
	for		$tmp511 1106 1108 5915 5917 	%line{630} %argrw{"r"}
	assign		___773_g $const2 	%argrw{"wr"}
	lt		$tmp510 ___773_g $const34 	%argrw{"wrr"}
	neq		$tmp511 $tmp510 $const2 	%argrw{"wrr"}
# PxrMultiTexture.osl:632
#         enable[g] = 0;
	aassign		enable ___773_g $const2 	%line{632} %argrw{"wrr"}
# PxrMultiTexture.osl:636
#         if (sta[g] == null_sta)
	aref		$tmp512 sta ___773_g 	%line{636} %argrw{"wrr"}
	eq		$tmp514 $tmp512 $const7 	%argrw{"wrr"}
	if		$tmp514 1113 1113 	%argrw{"r"}
# PxrMultiTexture.osl:637
#             continue;
	continue	%line{637}
# PxrMultiTexture.osl:642
#         enable[g] = int(idf[g][2]);
	aref		$tmp517 idf ___773_g 	%line{642} %argrw{"wrr"}
	compref		$tmp516 $tmp517 $const4 	%argrw{"wrr"}
	assign		$tmp515 $tmp516 	%argrw{"wr"}
	aassign		enable ___773_g $tmp515 	%argrw{"wrr"}
# PxrMultiTexture.osl:644
#         if (enable[g])
	aref		$tmp518 enable ___773_g 	%line{644} %argrw{"wrr"}
	if		$tmp518 5910 5915 	%argrw{"r"}
# PxrMultiTexture.osl:646
#             int texId = 0;          // texture index
	assign		___775_texId $const2 	%line{646} %argrw{"wr"}
# PxrMultiTexture.osl:647
#             float tx = idf[g][0];   // tile id x
	aref		$tmp519 idf ___773_g 	%line{647} %argrw{"wrr"}
	compref		___775_tx $tmp519 $const2 	%argrw{"wrr"}
# PxrMultiTexture.osl:648
#             float ty = idf[g][1];   // tile id y
	aref		$tmp520 idf ___773_g 	%line{648} %argrw{"wrr"}
	compref		___775_ty $tmp520 $const3 	%argrw{"wrr"}
# PxrMultiTexture.osl:651
#             if (manifoldMulti.numTextures == 1)
	eq		$tmp521 manifoldMulti.numTextures $const3 	%line{651} %argrw{"wrr"}
	if		$tmp521 1127 1447 	%argrw{"r"}
# PxrMultiTexture.osl:653
#                 texId = 0;
	assign		___775_texId $const2 	%line{653} %argrw{"wr"}
# PxrMultiTexture.osl:657
#                 if (manifoldMulti.textureOrder == k_ordered)
	eq		$tmp522 manifoldMulti.textureOrder $const2 	%line{657} %argrw{"wrr"}
	if		$tmp522 1170 1447 	%argrw{"r"}
# PxrMultiTexture.osl:662
#                     float m = RixMod(tx, minNumTex) +
	assign		$tmp524 minNumTex 	%line{662} %argrw{"wr"}
	functioncall	$const70 1141 	%argrw{"r"}
# PxrMultiTexture.osl:63
#     float n = float(int(x/y));
	div		$tmp526 ___775_tx $tmp524 	%line{63} %argrw{"wrr"}
	assign		$tmp525 $tmp526 	%argrw{"wr"}
	assign		$tmp527 $tmp525 	%argrw{"wr"}
	assign		___771_n $tmp527 	%argrw{"wr"}
# PxrMultiTexture.osl:64
#     float result = x - n*y;
	mul		$tmp528 ___771_n $tmp524 	%line{64} %argrw{"wrr"}
	sub		___771_result ___775_tx $tmp528 	%argrw{"wrr"}
# PxrMultiTexture.osl:65
#     if (result < 0.0) result += y;
	lt		$tmp529 ___771_result $const44 	%line{65} %argrw{"wrr"}
	if		$tmp529 1140 1140 	%argrw{"r"}
	add		___771_result ___771_result $tmp524 	%argrw{"wrr"}
# PxrMultiTexture.osl:66
#     return result;
	assign		$tmp523 ___771_result 	%line{66} %argrw{"wr"}
# PxrMultiTexture.osl:663
#                               RixMod(ty, minNumTex) *
	assign		$tmp531 minNumTex 	%line{663} %argrw{"wr"}
	functioncall	$const70 1153 	%argrw{"r"}
# PxrMultiTexture.osl:63
#     float n = float(int(x/y));
	div		$tmp533 ___775_ty $tmp531 	%line{63} %argrw{"wrr"}
	assign		$tmp532 $tmp533 	%argrw{"wr"}
	assign		$tmp534 $tmp532 	%argrw{"wr"}
	assign		___771_n $tmp534 	%argrw{"wr"}
# PxrMultiTexture.osl:64
#     float result = x - n*y;
	mul		$tmp535 ___771_n $tmp531 	%line{64} %argrw{"wrr"}
	sub		___771_result ___775_ty $tmp535 	%argrw{"wrr"}
# PxrMultiTexture.osl:65
#     if (result < 0.0) result += y;
	lt		$tmp536 ___771_result $const44 	%line{65} %argrw{"wrr"}
	if		$tmp536 1152 1152 	%argrw{"r"}
	add		___771_result ___771_result $tmp531 	%argrw{"wrr"}
# PxrMultiTexture.osl:66
#     return result;
	assign		$tmp530 ___771_result 	%line{66} %argrw{"wr"}
# PxrMultiTexture.osl:664
#                               float(minNumTex);
	assign		$tmp538 minNumTex 	%line{664} %argrw{"wr"}
	assign		$tmp537 $tmp538 	%argrw{"wr"}
# PxrMultiTexture.osl:663
#                               RixMod(ty, minNumTex) *
	mul		$tmp539 $tmp530 $tmp537 	%line{663} %argrw{"wrr"}
# PxrMultiTexture.osl:662
#                     float m = RixMod(tx, minNumTex) +
	add		___778_m $tmp523 $tmp539 	%line{662} %argrw{"wrr"}
# PxrMultiTexture.osl:665
#                     texId = int(RixMod(m, manifoldMulti.numTextures));
	assign		$tmp541 manifoldMulti.numTextures 	%line{665} %argrw{"wr"}
	functioncall	$const70 1169 	%argrw{"r"}
# PxrMultiTexture.osl:63
#     float n = float(int(x/y));
	div		$tmp543 ___778_m $tmp541 	%line{63} %argrw{"wrr"}
	assign		$tmp542 $tmp543 	%argrw{"wr"}
	assign		$tmp544 $tmp542 	%argrw{"wr"}
	assign		___771_n $tmp544 	%argrw{"wr"}
# PxrMultiTexture.osl:64
#     float result = x - n*y;
	mul		$tmp545 ___771_n $tmp541 	%line{64} %argrw{"wrr"}
	sub		___771_result ___778_m $tmp545 	%argrw{"wrr"}
# PxrMultiTexture.osl:65
#     if (result < 0.0) result += y;
	lt		$tmp546 ___771_result $const44 	%line{65} %argrw{"wrr"}
	if		$tmp546 1168 1168 	%argrw{"r"}
	add		___771_result ___771_result $tmp541 	%argrw{"wrr"}
# PxrMultiTexture.osl:66
#     return result;
	assign		$tmp540 ___771_result 	%line{66} %argrw{"wr"}
# PxrMultiTexture.osl:665
#                     texId = int(RixMod(m, manifoldMulti.numTextures));
	assign		___775_texId $tmp540 	%line{665} %argrw{"wr"}
# PxrMultiTexture.osl:667
#                 else if (manifoldMulti.textureOrder == k_random)
	eq		$tmp547 manifoldMulti.textureOrder $const3 	%line{667} %argrw{"wrr"}
	if		$tmp547 1445 1447 	%argrw{"r"}
# PxrMultiTexture.osl:669
#                     point p = point(tx * 7.0,
	mul		$tmp548 ___775_tx $const71 	%line{669} %argrw{"wrr"}
# PxrMultiTexture.osl:670
#                                     ty * 3.0,
	mul		$tmp549 ___775_ty $const72 	%line{670} %argrw{"wrr"}
# PxrMultiTexture.osl:671
#                                     tx + ty * 11.0);
	mul		$tmp550 ___775_ty $const73 	%line{671} %argrw{"wrr"}
	add		$tmp551 ___775_tx $tmp550 	%argrw{"wrr"}
# PxrMultiTexture.osl:669
#                     point p = point(tx * 7.0,
	point		___779_p $tmp548 $tmp549 $tmp551 	%line{669} %argrw{"wrrr"}
# PxrMultiTexture.osl:672
#                     float rnd = matchCppPattern ?
	if		matchCppPattern 1430 1431 	%line{672} %argrw{"r"}
# PxrMultiTexture.osl:673
#                                     rxcellnoise(p) :
	functioncall	$const56 1430 	%line{673} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:961
#     noise_parameters np = {3, 1, INPUT3(seed), point(0), NONPERIODIC};
	assign		___602_np.domain $const5 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h"} %line{961} %argrw{"wr"}
	assign		___602_np.range $const3 	%argrw{"wr"}
	compref		$tmp552 ___779_p $const2 	%argrw{"wrr"}
	aassign		___602_np.input $const2 $tmp552 	%argrw{"wrr"}
	compref		$tmp553 ___779_p $const3 	%argrw{"wrr"}
	aassign		___602_np.input $const3 $tmp553 	%argrw{"wrr"}
	compref		$tmp554 ___779_p $const4 	%argrw{"wrr"}
	aassign		___602_np.input $const4 $tmp554 	%argrw{"wrr"}
	aassign		___602_np.input $const5 $const2 	%argrw{"wrr"}
	assign		___602_np.result $const6 	%argrw{"wr"}
	assign		___602_np.periodic $const2 	%argrw{"wr"}
	assign		___602_np.period $const57 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:962
#     rx_cell_noise(np);
	functioncall	$const58 1429 	%line{962} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:68
#     float rxcellrandtable[4096] = {
	assign		___538_rxcellrandtable $const59 	%line{68} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:582
#     int rxcellpermute[4096] = {
	assign		___538_rxcellpermute $const60 	%line{582} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:904
#     int k = 0;
	assign		___538_k $const2 	%line{904} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:905
#     if (np.domain == 1)
	eq		$tmp555 ___602_np.domain $const3 	%line{905} %argrw{"wrr"}
	if		$tmp555 1225 1429 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:907
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp556 ___602_np.input $const2 	%line{907} %argrw{"wrr"}
	add		___538_v0 $tmp556 $const61 	%argrw{"wrr"}
	lt		$tmp557 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp557 1206 1210 	%argrw{"r"}
	lt		$tmp558 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp558 1204 1206 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp559 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp559 $const3 	%argrw{"wrr"}
	gt		$tmp560 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp560 1209 1210 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:908
#         for (i = np.range; i > 0; i--, int00 += 7)
	for		$tmp562 1212 1214 1222 1225 	%line{908} %argrw{"r"}
	assign		___538_i ___602_np.range 	%argrw{"wr"}
	gt		$tmp561 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp562 $tmp561 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:910
#             v0 = rxcellrandtable[CELLPERMUTE(int00)];
	shl		$tmp563 $const3 $const64 	%line{910} %argrw{"wrr"}
	sub		$tmp564 $tmp563 $const3 	%argrw{"wrr"}
	bitand		$tmp565 ___538_int00 $tmp564 	%argrw{"wrr"}
	aref		$tmp566 ___538_rxcellpermute $tmp565 	%argrw{"wrr"}
	aref		___538_v0 ___538_rxcellrandtable $tmp566 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:911
#             np.result[k++] = v0;
	assign		$tmp567 ___538_k 	%line{911} %argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___602_np.result $tmp567 ___538_v0 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:908
#         for (i = np.range; i > 0; i--, int00 += 7)
	assign		$tmp568 ___538_i 	%line{908} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:914
#     else if (np.domain == 2)
	eq		$tmp569 ___602_np.domain $const4 	%line{914} %argrw{"wrr"}
	if		$tmp569 1274 1429 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:916
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp570 ___602_np.input $const2 	%line{916} %argrw{"wrr"}
	add		___538_v0 $tmp570 $const61 	%argrw{"wrr"}
	lt		$tmp571 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp571 1236 1240 	%argrw{"r"}
	lt		$tmp572 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp572 1234 1236 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp573 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp573 $const3 	%argrw{"wrr"}
	gt		$tmp574 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp574 1239 1240 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:917
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp575 ___602_np.input $const3 	%line{917} %argrw{"wrr"}
	add		___538_v0 $tmp575 $const61 	%argrw{"wrr"}
	lt		$tmp576 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp576 1249 1253 	%argrw{"r"}
	lt		$tmp577 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp577 1247 1249 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		$tmp578 ___538_v0 	%argrw{"wr"}
	sub		___538_int01 $tmp578 $const3 	%argrw{"wrr"}
	gt		$tmp579 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp579 1252 1253 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		___538_int01 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:918
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7)
	for		$tmp581 1255 1257 1270 1274 	%line{918} %argrw{"r"}
	assign		___538_i ___602_np.range 	%argrw{"wr"}
	gt		$tmp580 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp581 $tmp580 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:920
#             iy = CELLPERMUTE(int01);
	shl		$tmp582 $const3 $const64 	%line{920} %argrw{"wrr"}
	sub		$tmp583 $tmp582 $const3 	%argrw{"wrr"}
	bitand		$tmp584 ___538_int01 $tmp583 	%argrw{"wrr"}
	aref		___538_iy ___538_rxcellpermute $tmp584 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:921
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(iy + int00)];
	add		$tmp585 ___538_iy ___538_int00 	%line{921} %argrw{"wrr"}
	shl		$tmp586 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp587 $tmp586 $const3 	%argrw{"wrr"}
	bitand		$tmp588 $tmp585 $tmp587 	%argrw{"wrr"}
	aref		$tmp589 ___538_rxcellpermute $tmp588 	%argrw{"wrr"}
	aref		$tmp590 ___538_rxcellrandtable $tmp589 	%argrw{"wrr"}
	assign		$tmp591 ___538_k 	%argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___602_np.result $tmp591 $tmp590 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:918
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7)
	assign		$tmp592 ___538_i 	%line{918} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
	add		___538_int01 ___538_int01 $const37 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:924
#     else if (np.domain == 3)
	eq		$tmp593 ___602_np.domain $const5 	%line{924} %argrw{"wrr"}
	if		$tmp593 1342 1429 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:926
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp594 ___602_np.input $const2 	%line{926} %argrw{"wrr"}
	add		___538_v0 $tmp594 $const61 	%argrw{"wrr"}
	lt		$tmp595 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp595 1285 1289 	%argrw{"r"}
	lt		$tmp596 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp596 1283 1285 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp597 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp597 $const3 	%argrw{"wrr"}
	gt		$tmp598 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp598 1288 1289 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:927
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp599 ___602_np.input $const3 	%line{927} %argrw{"wrr"}
	add		___538_v0 $tmp599 $const61 	%argrw{"wrr"}
	lt		$tmp600 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp600 1298 1302 	%argrw{"r"}
	lt		$tmp601 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp601 1296 1298 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		$tmp602 ___538_v0 	%argrw{"wr"}
	sub		___538_int01 $tmp602 $const3 	%argrw{"wrr"}
	gt		$tmp603 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp603 1301 1302 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		___538_int01 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:928
#         SETUP_CELL_DOMAIN(2, int02);
	aref		$tmp604 ___602_np.input $const4 	%line{928} %argrw{"wrr"}
	add		___538_v0 $tmp604 $const61 	%argrw{"wrr"}
	lt		$tmp605 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp605 1311 1315 	%argrw{"r"}
	lt		$tmp606 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp606 1309 1311 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		$tmp607 ___538_v0 	%argrw{"wr"}
	sub		___538_int02 $tmp607 $const3 	%argrw{"wrr"}
	gt		$tmp608 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp608 1314 1315 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		___538_int02 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:929
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3)
	for		$tmp610 1317 1319 1337 1342 	%line{929} %argrw{"r"}
	assign		___538_i ___602_np.range 	%argrw{"wr"}
	gt		$tmp609 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp610 $tmp609 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:931
#             iz = CELLPERMUTE(int02);
	shl		$tmp611 $const3 $const64 	%line{931} %argrw{"wrr"}
	sub		$tmp612 $tmp611 $const3 	%argrw{"wrr"}
	bitand		$tmp613 ___538_int02 $tmp612 	%argrw{"wrr"}
	aref		___538_iz ___538_rxcellpermute $tmp613 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:932
#             iy = CELLPERMUTE(int01 + iz);
	add		$tmp614 ___538_int01 ___538_iz 	%line{932} %argrw{"wrr"}
	shl		$tmp615 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp616 $tmp615 $const3 	%argrw{"wrr"}
	bitand		$tmp617 $tmp614 $tmp616 	%argrw{"wrr"}
	aref		___538_iy ___538_rxcellpermute $tmp617 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:933
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(int00 + iy)];
	add		$tmp618 ___538_int00 ___538_iy 	%line{933} %argrw{"wrr"}
	shl		$tmp619 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp620 $tmp619 $const3 	%argrw{"wrr"}
	bitand		$tmp621 $tmp618 $tmp620 	%argrw{"wrr"}
	aref		$tmp622 ___538_rxcellpermute $tmp621 	%argrw{"wrr"}
	aref		$tmp623 ___538_rxcellrandtable $tmp622 	%argrw{"wrr"}
	assign		$tmp624 ___538_k 	%argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___602_np.result $tmp624 $tmp623 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:929
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3)
	assign		$tmp625 ___538_i 	%line{929} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
	add		___538_int01 ___538_int01 $const37 	%argrw{"wrr"}
	add		___538_int02 ___538_int02 $const5 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:936
#     else if (np.domain == 4)
	eq		$tmp626 ___602_np.domain $const34 	%line{936} %argrw{"wrr"}
	if		$tmp626 1429 1429 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:938
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp627 ___602_np.input $const2 	%line{938} %argrw{"wrr"}
	add		___538_v0 $tmp627 $const61 	%argrw{"wrr"}
	lt		$tmp628 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp628 1353 1357 	%argrw{"r"}
	lt		$tmp629 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp629 1351 1353 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp630 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp630 $const3 	%argrw{"wrr"}
	gt		$tmp631 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp631 1356 1357 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:939
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp632 ___602_np.input $const3 	%line{939} %argrw{"wrr"}
	add		___538_v0 $tmp632 $const61 	%argrw{"wrr"}
	lt		$tmp633 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp633 1366 1370 	%argrw{"r"}
	lt		$tmp634 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp634 1364 1366 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		$tmp635 ___538_v0 	%argrw{"wr"}
	sub		___538_int01 $tmp635 $const3 	%argrw{"wrr"}
	gt		$tmp636 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp636 1369 1370 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		___538_int01 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:940
#         SETUP_CELL_DOMAIN(2, int02);
	aref		$tmp637 ___602_np.input $const4 	%line{940} %argrw{"wrr"}
	add		___538_v0 $tmp637 $const61 	%argrw{"wrr"}
	lt		$tmp638 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp638 1379 1383 	%argrw{"r"}
	lt		$tmp639 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp639 1377 1379 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		$tmp640 ___538_v0 	%argrw{"wr"}
	sub		___538_int02 $tmp640 $const3 	%argrw{"wrr"}
	gt		$tmp641 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp641 1382 1383 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		___538_int02 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:941
#         SETUP_CELL_DOMAIN(3, int03);
	aref		$tmp642 ___602_np.input $const5 	%line{941} %argrw{"wrr"}
	add		___538_v0 $tmp642 $const61 	%argrw{"wrr"}
	lt		$tmp643 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp643 1392 1396 	%argrw{"r"}
	lt		$tmp644 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp644 1390 1392 	%argrw{"r"}
	assign		___538_int03 $const2 	%argrw{"wr"}
	assign		$tmp645 ___538_v0 	%argrw{"wr"}
	sub		___538_int03 $tmp645 $const3 	%argrw{"wrr"}
	gt		$tmp646 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp646 1395 1396 	%argrw{"r"}
	assign		___538_int03 $const2 	%argrw{"wr"}
	assign		___538_int03 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:942
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3, int03 += 15)
	for		$tmp648 1398 1400 1423 1429 	%line{942} %argrw{"r"}
	assign		___538_i ___602_np.range 	%argrw{"wr"}
	gt		$tmp647 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp648 $tmp647 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:944
#             iz = CELLPERMUTE(int02 + CELLPERMUTE(int03));
	shl		$tmp649 $const3 $const64 	%line{944} %argrw{"wrr"}
	sub		$tmp650 $tmp649 $const3 	%argrw{"wrr"}
	bitand		$tmp651 ___538_int03 $tmp650 	%argrw{"wrr"}
	aref		$tmp652 ___538_rxcellpermute $tmp651 	%argrw{"wrr"}
	add		$tmp653 ___538_int02 $tmp652 	%argrw{"wrr"}
	shl		$tmp654 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp655 $tmp654 $const3 	%argrw{"wrr"}
	bitand		$tmp656 $tmp653 $tmp655 	%argrw{"wrr"}
	aref		___538_iz ___538_rxcellpermute $tmp656 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:945
#             iy = CELLPERMUTE(int01 + iz);
	add		$tmp657 ___538_int01 ___538_iz 	%line{945} %argrw{"wrr"}
	shl		$tmp658 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp659 $tmp658 $const3 	%argrw{"wrr"}
	bitand		$tmp660 $tmp657 $tmp659 	%argrw{"wrr"}
	aref		___538_iy ___538_rxcellpermute $tmp660 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:946
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(int00 + iy)];
	add		$tmp661 ___538_int00 ___538_iy 	%line{946} %argrw{"wrr"}
	shl		$tmp662 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp663 $tmp662 $const3 	%argrw{"wrr"}
	bitand		$tmp664 $tmp661 $tmp663 	%argrw{"wrr"}
	aref		$tmp665 ___538_rxcellpermute $tmp664 	%argrw{"wrr"}
	aref		$tmp666 ___538_rxcellrandtable $tmp665 	%argrw{"wrr"}
	assign		$tmp667 ___538_k 	%argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___602_np.result $tmp667 $tmp666 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:942
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3, int03 += 15)
	assign		$tmp668 ___538_i 	%line{942} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
	add		___538_int01 ___538_int01 $const37 	%argrw{"wrr"}
	add		___538_int02 ___538_int02 $const5 	%argrw{"wrr"}
	add		___538_int03 ___538_int03 $const65 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:963
#     return np.result[0];
	compref		___779_rnd ___602_np.result $const2 	%line{963} %argrw{"wrr"}
# PxrMultiTexture.osl:674
#                                     noise("cell", p);
	noise		___779_rnd $const66 ___779_p 	%filename{"PxrMultiTexture.osl"} %line{674} %argrw{"wrr"}
# PxrMultiTexture.osl:675
#                     texId = int(RixMod(rnd * 10000.0, min(10.0, numTexturesF)));
	mul		$tmp670 ___779_rnd $const74 	%line{675} %argrw{"wrr"}
	min		$tmp671 $const75 numTexturesF 	%argrw{"wrr"}
	functioncall	$const70 1444 	%argrw{"r"}
# PxrMultiTexture.osl:63
#     float n = float(int(x/y));
	div		$tmp673 $tmp670 $tmp671 	%line{63} %argrw{"wrr"}
	assign		$tmp672 $tmp673 	%argrw{"wr"}
	assign		$tmp674 $tmp672 	%argrw{"wr"}
	assign		___771_n $tmp674 	%argrw{"wr"}
# PxrMultiTexture.osl:64
#     float result = x - n*y;
	mul		$tmp675 ___771_n $tmp671 	%line{64} %argrw{"wrr"}
	sub		___771_result $tmp670 $tmp675 	%argrw{"wrr"}
# PxrMultiTexture.osl:65
#     if (result < 0.0) result += y;
	lt		$tmp676 ___771_result $const44 	%line{65} %argrw{"wrr"}
	if		$tmp676 1443 1443 	%argrw{"r"}
	add		___771_result ___771_result $tmp671 	%argrw{"wrr"}
# PxrMultiTexture.osl:66
#     return result;
	assign		$tmp669 ___771_result 	%line{66} %argrw{"wr"}
# PxrMultiTexture.osl:675
#                     texId = int(RixMod(rnd * 10000.0, min(10.0, numTexturesF)));
	assign		___775_texId $tmp669 	%line{675} %argrw{"wr"}
# PxrMultiTexture.osl:679
#                     texId = 0;
	assign		___775_texId $const2 	%line{679} %argrw{"wr"}
# PxrMultiTexture.osl:680
#                     error("PxrMultiTexture: Unknown texture order");
	error		$const76 	%line{680} %argrw{"r"}
# PxrMultiTexture.osl:691
#             if (blendingContrast > 0 && hexTex[g].powerTtoG == color(0))
	gt		$tmp677 blendingContrast $const2 	%line{691} %argrw{"wrr"}
	neq		$tmp678 $tmp677 $const2 	%argrw{"wrr"}
	if		$tmp678 1454 1454 	%argrw{"r"}
	aref		$tmp679 hexTex.powerTtoG ___773_g 	%argrw{"wrr"}
	eq		$tmp681 $tmp679 $const40 	%argrw{"wrr"}
	neq		$tmp682 $tmp681 $const2 	%argrw{"wrr"}
	assign		$tmp678 $tmp682 	%argrw{"wr"}
	if		$tmp678 1835 1835 	%argrw{"r"}
# PxrMultiTexture.osl:693
#                 if (texId == 0) // This if-else awkwardness is to work-around XPU's texturing limitations
	eq		$tmp683 ___775_texId $const2 	%line{693} %argrw{"wrr"}
	if		$tmp683 1493 1835 	%argrw{"r"}
# PxrMultiTexture.osl:695
#                     hexTex[g] = hexTileTextureExponents(filename0, linearize);
	functioncall	$const77 1491 	%line{695} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:253
#     color Tcenter = texture(filename, 0.5, 0.5,
	texture		___711_Tcenter filename0 $const78 $const78 $const80 $const80 $const80 $const80 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{253} %argrw{"wrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:255
#     if (linearize) PxrLinearizeSRGB(Tcenter);
	if		linearize 1483 1483 	%line{255} %argrw{"r"}
	functioncall	$const25 1483 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 1466 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp686 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp687 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp685 $tmp687 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp685 1483 1483 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp689 1469 1471 1482 1483 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp688 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp689 $tmp688 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp690 ___711_Tcenter ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp691 $tmp690 $const29 	%argrw{"wrr"}
	if		$tmp691 1477 1482 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp692 ___711_Tcenter ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp693 $tmp692 $const30 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp693 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp695 ___711_Tcenter ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp696 $tmp695 $const31 	%argrw{"wrr"}
	mul		$tmp697 $tmp696 $const32 	%argrw{"wrr"}
	pow		$tmp694 $tmp697 $const33 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp694 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:259
#     result.powerTtoG = log(HEXT_GCENTER) / log(Tcenter);
	log		$tmp698 $const81 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{259} %argrw{"wr"}
	log		$tmp700 ___711_Tcenter 	%argrw{"wr"}
	div		___711_result.powerTtoG $tmp698 $tmp700 	%argrw{"wrr"}
	assign		___711_result.powerTtoG ___711_result.powerTtoG 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:260
#     result.powerGtoT = 1.0 / result.powerTtoG;
	div		___711_result.powerGtoT $const9 ___711_result.powerTtoG 	%line{260} %argrw{"wrr"}
	assign		___711_result.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:261
#     return result;
	assign		$tmp684.powerTtoG ___711_result.powerTtoG 	%line{261} %argrw{"wr"}
	assign		$tmp684.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# PxrMultiTexture.osl:695
#                     hexTex[g] = hexTileTextureExponents(filename0, linearize);
	aassign		hexTex.powerTtoG ___773_g $tmp684.powerTtoG 	%filename{"PxrMultiTexture.osl"} %line{695} %argrw{"wrr"}
	aassign		hexTex.powerGtoT ___773_g $tmp684.powerGtoT 	%argrw{"wrr"}
# PxrMultiTexture.osl:697
#                 else if (texId == 1)
	eq		$tmp701 ___775_texId $const3 	%line{697} %argrw{"wrr"}
	if		$tmp701 1531 1835 	%argrw{"r"}
# PxrMultiTexture.osl:699
#                     hexTex[g] = hexTileTextureExponents(filename1, linearize);
	functioncall	$const77 1529 	%line{699} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:253
#     color Tcenter = texture(filename, 0.5, 0.5,
	texture		___711_Tcenter filename1 $const78 $const78 $const80 $const80 $const80 $const80 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{253} %argrw{"wrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:255
#     if (linearize) PxrLinearizeSRGB(Tcenter);
	if		linearize 1521 1521 	%line{255} %argrw{"r"}
	functioncall	$const25 1521 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 1504 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp704 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp705 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp703 $tmp705 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp703 1521 1521 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp707 1507 1509 1520 1521 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp706 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp707 $tmp706 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp708 ___711_Tcenter ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp709 $tmp708 $const29 	%argrw{"wrr"}
	if		$tmp709 1515 1520 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp710 ___711_Tcenter ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp711 $tmp710 $const30 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp711 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp713 ___711_Tcenter ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp714 $tmp713 $const31 	%argrw{"wrr"}
	mul		$tmp715 $tmp714 $const32 	%argrw{"wrr"}
	pow		$tmp712 $tmp715 $const33 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp712 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:259
#     result.powerTtoG = log(HEXT_GCENTER) / log(Tcenter);
	log		$tmp716 $const81 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{259} %argrw{"wr"}
	log		$tmp718 ___711_Tcenter 	%argrw{"wr"}
	div		___711_result.powerTtoG $tmp716 $tmp718 	%argrw{"wrr"}
	assign		___711_result.powerTtoG ___711_result.powerTtoG 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:260
#     result.powerGtoT = 1.0 / result.powerTtoG;
	div		___711_result.powerGtoT $const9 ___711_result.powerTtoG 	%line{260} %argrw{"wrr"}
	assign		___711_result.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:261
#     return result;
	assign		$tmp702.powerTtoG ___711_result.powerTtoG 	%line{261} %argrw{"wr"}
	assign		$tmp702.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# PxrMultiTexture.osl:699
#                     hexTex[g] = hexTileTextureExponents(filename1, linearize);
	aassign		hexTex.powerTtoG ___773_g $tmp702.powerTtoG 	%filename{"PxrMultiTexture.osl"} %line{699} %argrw{"wrr"}
	aassign		hexTex.powerGtoT ___773_g $tmp702.powerGtoT 	%argrw{"wrr"}
# PxrMultiTexture.osl:701
#                 else if (texId == 2)
	eq		$tmp719 ___775_texId $const4 	%line{701} %argrw{"wrr"}
	if		$tmp719 1569 1835 	%argrw{"r"}
# PxrMultiTexture.osl:703
#                     hexTex[g] = hexTileTextureExponents(filename2, linearize);
	functioncall	$const77 1567 	%line{703} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:253
#     color Tcenter = texture(filename, 0.5, 0.5,
	texture		___711_Tcenter filename2 $const78 $const78 $const80 $const80 $const80 $const80 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{253} %argrw{"wrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:255
#     if (linearize) PxrLinearizeSRGB(Tcenter);
	if		linearize 1559 1559 	%line{255} %argrw{"r"}
	functioncall	$const25 1559 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 1542 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp722 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp723 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp721 $tmp723 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp721 1559 1559 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp725 1545 1547 1558 1559 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp724 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp725 $tmp724 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp726 ___711_Tcenter ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp727 $tmp726 $const29 	%argrw{"wrr"}
	if		$tmp727 1553 1558 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp728 ___711_Tcenter ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp729 $tmp728 $const30 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp729 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp731 ___711_Tcenter ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp732 $tmp731 $const31 	%argrw{"wrr"}
	mul		$tmp733 $tmp732 $const32 	%argrw{"wrr"}
	pow		$tmp730 $tmp733 $const33 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp730 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:259
#     result.powerTtoG = log(HEXT_GCENTER) / log(Tcenter);
	log		$tmp734 $const81 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{259} %argrw{"wr"}
	log		$tmp736 ___711_Tcenter 	%argrw{"wr"}
	div		___711_result.powerTtoG $tmp734 $tmp736 	%argrw{"wrr"}
	assign		___711_result.powerTtoG ___711_result.powerTtoG 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:260
#     result.powerGtoT = 1.0 / result.powerTtoG;
	div		___711_result.powerGtoT $const9 ___711_result.powerTtoG 	%line{260} %argrw{"wrr"}
	assign		___711_result.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:261
#     return result;
	assign		$tmp720.powerTtoG ___711_result.powerTtoG 	%line{261} %argrw{"wr"}
	assign		$tmp720.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# PxrMultiTexture.osl:703
#                     hexTex[g] = hexTileTextureExponents(filename2, linearize);
	aassign		hexTex.powerTtoG ___773_g $tmp720.powerTtoG 	%filename{"PxrMultiTexture.osl"} %line{703} %argrw{"wrr"}
	aassign		hexTex.powerGtoT ___773_g $tmp720.powerGtoT 	%argrw{"wrr"}
# PxrMultiTexture.osl:705
#                 else if (texId == 3)
	eq		$tmp737 ___775_texId $const5 	%line{705} %argrw{"wrr"}
	if		$tmp737 1607 1835 	%argrw{"r"}
# PxrMultiTexture.osl:707
#                     hexTex[g] = hexTileTextureExponents(filename3, linearize);
	functioncall	$const77 1605 	%line{707} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:253
#     color Tcenter = texture(filename, 0.5, 0.5,
	texture		___711_Tcenter filename3 $const78 $const78 $const80 $const80 $const80 $const80 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{253} %argrw{"wrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:255
#     if (linearize) PxrLinearizeSRGB(Tcenter);
	if		linearize 1597 1597 	%line{255} %argrw{"r"}
	functioncall	$const25 1597 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 1580 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp740 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp741 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp739 $tmp741 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp739 1597 1597 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp743 1583 1585 1596 1597 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp742 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp743 $tmp742 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp744 ___711_Tcenter ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp745 $tmp744 $const29 	%argrw{"wrr"}
	if		$tmp745 1591 1596 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp746 ___711_Tcenter ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp747 $tmp746 $const30 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp747 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp749 ___711_Tcenter ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp750 $tmp749 $const31 	%argrw{"wrr"}
	mul		$tmp751 $tmp750 $const32 	%argrw{"wrr"}
	pow		$tmp748 $tmp751 $const33 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp748 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:259
#     result.powerTtoG = log(HEXT_GCENTER) / log(Tcenter);
	log		$tmp752 $const81 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{259} %argrw{"wr"}
	log		$tmp754 ___711_Tcenter 	%argrw{"wr"}
	div		___711_result.powerTtoG $tmp752 $tmp754 	%argrw{"wrr"}
	assign		___711_result.powerTtoG ___711_result.powerTtoG 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:260
#     result.powerGtoT = 1.0 / result.powerTtoG;
	div		___711_result.powerGtoT $const9 ___711_result.powerTtoG 	%line{260} %argrw{"wrr"}
	assign		___711_result.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:261
#     return result;
	assign		$tmp738.powerTtoG ___711_result.powerTtoG 	%line{261} %argrw{"wr"}
	assign		$tmp738.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# PxrMultiTexture.osl:707
#                     hexTex[g] = hexTileTextureExponents(filename3, linearize);
	aassign		hexTex.powerTtoG ___773_g $tmp738.powerTtoG 	%filename{"PxrMultiTexture.osl"} %line{707} %argrw{"wrr"}
	aassign		hexTex.powerGtoT ___773_g $tmp738.powerGtoT 	%argrw{"wrr"}
# PxrMultiTexture.osl:709
#                 else if (texId == 4)
	eq		$tmp755 ___775_texId $const34 	%line{709} %argrw{"wrr"}
	if		$tmp755 1645 1835 	%argrw{"r"}
# PxrMultiTexture.osl:711
#                     hexTex[g] = hexTileTextureExponents(filename4, linearize);
	functioncall	$const77 1643 	%line{711} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:253
#     color Tcenter = texture(filename, 0.5, 0.5,
	texture		___711_Tcenter filename4 $const78 $const78 $const80 $const80 $const80 $const80 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{253} %argrw{"wrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:255
#     if (linearize) PxrLinearizeSRGB(Tcenter);
	if		linearize 1635 1635 	%line{255} %argrw{"r"}
	functioncall	$const25 1635 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 1618 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp758 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp759 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp757 $tmp759 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp757 1635 1635 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp761 1621 1623 1634 1635 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp760 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp761 $tmp760 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp762 ___711_Tcenter ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp763 $tmp762 $const29 	%argrw{"wrr"}
	if		$tmp763 1629 1634 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp764 ___711_Tcenter ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp765 $tmp764 $const30 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp765 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp767 ___711_Tcenter ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp768 $tmp767 $const31 	%argrw{"wrr"}
	mul		$tmp769 $tmp768 $const32 	%argrw{"wrr"}
	pow		$tmp766 $tmp769 $const33 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp766 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:259
#     result.powerTtoG = log(HEXT_GCENTER) / log(Tcenter);
	log		$tmp770 $const81 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{259} %argrw{"wr"}
	log		$tmp772 ___711_Tcenter 	%argrw{"wr"}
	div		___711_result.powerTtoG $tmp770 $tmp772 	%argrw{"wrr"}
	assign		___711_result.powerTtoG ___711_result.powerTtoG 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:260
#     result.powerGtoT = 1.0 / result.powerTtoG;
	div		___711_result.powerGtoT $const9 ___711_result.powerTtoG 	%line{260} %argrw{"wrr"}
	assign		___711_result.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:261
#     return result;
	assign		$tmp756.powerTtoG ___711_result.powerTtoG 	%line{261} %argrw{"wr"}
	assign		$tmp756.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# PxrMultiTexture.osl:711
#                     hexTex[g] = hexTileTextureExponents(filename4, linearize);
	aassign		hexTex.powerTtoG ___773_g $tmp756.powerTtoG 	%filename{"PxrMultiTexture.osl"} %line{711} %argrw{"wrr"}
	aassign		hexTex.powerGtoT ___773_g $tmp756.powerGtoT 	%argrw{"wrr"}
# PxrMultiTexture.osl:713
#                 else if (texId == 5)
	eq		$tmp773 ___775_texId $const35 	%line{713} %argrw{"wrr"}
	if		$tmp773 1683 1835 	%argrw{"r"}
# PxrMultiTexture.osl:715
#                     hexTex[g] = hexTileTextureExponents(filename5, linearize);
	functioncall	$const77 1681 	%line{715} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:253
#     color Tcenter = texture(filename, 0.5, 0.5,
	texture		___711_Tcenter filename5 $const78 $const78 $const80 $const80 $const80 $const80 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{253} %argrw{"wrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:255
#     if (linearize) PxrLinearizeSRGB(Tcenter);
	if		linearize 1673 1673 	%line{255} %argrw{"r"}
	functioncall	$const25 1673 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 1656 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp776 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp777 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp775 $tmp777 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp775 1673 1673 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp779 1659 1661 1672 1673 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp778 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp779 $tmp778 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp780 ___711_Tcenter ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp781 $tmp780 $const29 	%argrw{"wrr"}
	if		$tmp781 1667 1672 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp782 ___711_Tcenter ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp783 $tmp782 $const30 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp783 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp785 ___711_Tcenter ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp786 $tmp785 $const31 	%argrw{"wrr"}
	mul		$tmp787 $tmp786 $const32 	%argrw{"wrr"}
	pow		$tmp784 $tmp787 $const33 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp784 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:259
#     result.powerTtoG = log(HEXT_GCENTER) / log(Tcenter);
	log		$tmp788 $const81 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{259} %argrw{"wr"}
	log		$tmp790 ___711_Tcenter 	%argrw{"wr"}
	div		___711_result.powerTtoG $tmp788 $tmp790 	%argrw{"wrr"}
	assign		___711_result.powerTtoG ___711_result.powerTtoG 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:260
#     result.powerGtoT = 1.0 / result.powerTtoG;
	div		___711_result.powerGtoT $const9 ___711_result.powerTtoG 	%line{260} %argrw{"wrr"}
	assign		___711_result.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:261
#     return result;
	assign		$tmp774.powerTtoG ___711_result.powerTtoG 	%line{261} %argrw{"wr"}
	assign		$tmp774.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# PxrMultiTexture.osl:715
#                     hexTex[g] = hexTileTextureExponents(filename5, linearize);
	aassign		hexTex.powerTtoG ___773_g $tmp774.powerTtoG 	%filename{"PxrMultiTexture.osl"} %line{715} %argrw{"wrr"}
	aassign		hexTex.powerGtoT ___773_g $tmp774.powerGtoT 	%argrw{"wrr"}
# PxrMultiTexture.osl:717
#                 else if (texId == 6)
	eq		$tmp791 ___775_texId $const36 	%line{717} %argrw{"wrr"}
	if		$tmp791 1721 1835 	%argrw{"r"}
# PxrMultiTexture.osl:719
#                     hexTex[g] = hexTileTextureExponents(filename6, linearize);
	functioncall	$const77 1719 	%line{719} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:253
#     color Tcenter = texture(filename, 0.5, 0.5,
	texture		___711_Tcenter filename6 $const78 $const78 $const80 $const80 $const80 $const80 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{253} %argrw{"wrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:255
#     if (linearize) PxrLinearizeSRGB(Tcenter);
	if		linearize 1711 1711 	%line{255} %argrw{"r"}
	functioncall	$const25 1711 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 1694 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp794 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp795 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp793 $tmp795 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp793 1711 1711 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp797 1697 1699 1710 1711 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp796 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp797 $tmp796 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp798 ___711_Tcenter ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp799 $tmp798 $const29 	%argrw{"wrr"}
	if		$tmp799 1705 1710 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp800 ___711_Tcenter ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp801 $tmp800 $const30 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp801 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp803 ___711_Tcenter ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp804 $tmp803 $const31 	%argrw{"wrr"}
	mul		$tmp805 $tmp804 $const32 	%argrw{"wrr"}
	pow		$tmp802 $tmp805 $const33 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp802 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:259
#     result.powerTtoG = log(HEXT_GCENTER) / log(Tcenter);
	log		$tmp806 $const81 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{259} %argrw{"wr"}
	log		$tmp808 ___711_Tcenter 	%argrw{"wr"}
	div		___711_result.powerTtoG $tmp806 $tmp808 	%argrw{"wrr"}
	assign		___711_result.powerTtoG ___711_result.powerTtoG 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:260
#     result.powerGtoT = 1.0 / result.powerTtoG;
	div		___711_result.powerGtoT $const9 ___711_result.powerTtoG 	%line{260} %argrw{"wrr"}
	assign		___711_result.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:261
#     return result;
	assign		$tmp792.powerTtoG ___711_result.powerTtoG 	%line{261} %argrw{"wr"}
	assign		$tmp792.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# PxrMultiTexture.osl:719
#                     hexTex[g] = hexTileTextureExponents(filename6, linearize);
	aassign		hexTex.powerTtoG ___773_g $tmp792.powerTtoG 	%filename{"PxrMultiTexture.osl"} %line{719} %argrw{"wrr"}
	aassign		hexTex.powerGtoT ___773_g $tmp792.powerGtoT 	%argrw{"wrr"}
# PxrMultiTexture.osl:721
#                 else if (texId == 7)
	eq		$tmp809 ___775_texId $const37 	%line{721} %argrw{"wrr"}
	if		$tmp809 1759 1835 	%argrw{"r"}
# PxrMultiTexture.osl:723
#                     hexTex[g] = hexTileTextureExponents(filename7, linearize);
	functioncall	$const77 1757 	%line{723} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:253
#     color Tcenter = texture(filename, 0.5, 0.5,
	texture		___711_Tcenter filename7 $const78 $const78 $const80 $const80 $const80 $const80 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{253} %argrw{"wrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:255
#     if (linearize) PxrLinearizeSRGB(Tcenter);
	if		linearize 1749 1749 	%line{255} %argrw{"r"}
	functioncall	$const25 1749 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 1732 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp812 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp813 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp811 $tmp813 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp811 1749 1749 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp815 1735 1737 1748 1749 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp814 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp815 $tmp814 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp816 ___711_Tcenter ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp817 $tmp816 $const29 	%argrw{"wrr"}
	if		$tmp817 1743 1748 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp818 ___711_Tcenter ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp819 $tmp818 $const30 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp819 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp821 ___711_Tcenter ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp822 $tmp821 $const31 	%argrw{"wrr"}
	mul		$tmp823 $tmp822 $const32 	%argrw{"wrr"}
	pow		$tmp820 $tmp823 $const33 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp820 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:259
#     result.powerTtoG = log(HEXT_GCENTER) / log(Tcenter);
	log		$tmp824 $const81 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{259} %argrw{"wr"}
	log		$tmp826 ___711_Tcenter 	%argrw{"wr"}
	div		___711_result.powerTtoG $tmp824 $tmp826 	%argrw{"wrr"}
	assign		___711_result.powerTtoG ___711_result.powerTtoG 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:260
#     result.powerGtoT = 1.0 / result.powerTtoG;
	div		___711_result.powerGtoT $const9 ___711_result.powerTtoG 	%line{260} %argrw{"wrr"}
	assign		___711_result.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:261
#     return result;
	assign		$tmp810.powerTtoG ___711_result.powerTtoG 	%line{261} %argrw{"wr"}
	assign		$tmp810.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# PxrMultiTexture.osl:723
#                     hexTex[g] = hexTileTextureExponents(filename7, linearize);
	aassign		hexTex.powerTtoG ___773_g $tmp810.powerTtoG 	%filename{"PxrMultiTexture.osl"} %line{723} %argrw{"wrr"}
	aassign		hexTex.powerGtoT ___773_g $tmp810.powerGtoT 	%argrw{"wrr"}
# PxrMultiTexture.osl:725
#                 else if (texId == 8)
	eq		$tmp827 ___775_texId $const38 	%line{725} %argrw{"wrr"}
	if		$tmp827 1797 1835 	%argrw{"r"}
# PxrMultiTexture.osl:727
#                     hexTex[g] = hexTileTextureExponents(filename8, linearize);
	functioncall	$const77 1795 	%line{727} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:253
#     color Tcenter = texture(filename, 0.5, 0.5,
	texture		___711_Tcenter filename8 $const78 $const78 $const80 $const80 $const80 $const80 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{253} %argrw{"wrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:255
#     if (linearize) PxrLinearizeSRGB(Tcenter);
	if		linearize 1787 1787 	%line{255} %argrw{"r"}
	functioncall	$const25 1787 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 1770 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp830 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp831 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp829 $tmp831 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp829 1787 1787 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp833 1773 1775 1786 1787 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp832 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp833 $tmp832 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp834 ___711_Tcenter ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp835 $tmp834 $const29 	%argrw{"wrr"}
	if		$tmp835 1781 1786 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp836 ___711_Tcenter ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp837 $tmp836 $const30 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp837 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp839 ___711_Tcenter ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp840 $tmp839 $const31 	%argrw{"wrr"}
	mul		$tmp841 $tmp840 $const32 	%argrw{"wrr"}
	pow		$tmp838 $tmp841 $const33 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp838 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:259
#     result.powerTtoG = log(HEXT_GCENTER) / log(Tcenter);
	log		$tmp842 $const81 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{259} %argrw{"wr"}
	log		$tmp844 ___711_Tcenter 	%argrw{"wr"}
	div		___711_result.powerTtoG $tmp842 $tmp844 	%argrw{"wrr"}
	assign		___711_result.powerTtoG ___711_result.powerTtoG 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:260
#     result.powerGtoT = 1.0 / result.powerTtoG;
	div		___711_result.powerGtoT $const9 ___711_result.powerTtoG 	%line{260} %argrw{"wrr"}
	assign		___711_result.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:261
#     return result;
	assign		$tmp828.powerTtoG ___711_result.powerTtoG 	%line{261} %argrw{"wr"}
	assign		$tmp828.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# PxrMultiTexture.osl:727
#                     hexTex[g] = hexTileTextureExponents(filename8, linearize);
	aassign		hexTex.powerTtoG ___773_g $tmp828.powerTtoG 	%filename{"PxrMultiTexture.osl"} %line{727} %argrw{"wrr"}
	aassign		hexTex.powerGtoT ___773_g $tmp828.powerGtoT 	%argrw{"wrr"}
# PxrMultiTexture.osl:729
#                 else if (texId == 9)
	eq		$tmp845 ___775_texId $const39 	%line{729} %argrw{"wrr"}
	if		$tmp845 1835 1835 	%argrw{"r"}
# PxrMultiTexture.osl:731
#                     hexTex[g] = hexTileTextureExponents(filename9, linearize);
	functioncall	$const77 1833 	%line{731} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:253
#     color Tcenter = texture(filename, 0.5, 0.5,
	texture		___711_Tcenter filename9 $const78 $const78 $const80 $const80 $const80 $const80 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{253} %argrw{"wrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:255
#     if (linearize) PxrLinearizeSRGB(Tcenter);
	if		linearize 1825 1825 	%line{255} %argrw{"r"}
	functioncall	$const25 1825 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 1808 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp848 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp849 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp847 $tmp849 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp847 1825 1825 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp851 1811 1813 1824 1825 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp850 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp851 $tmp850 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp852 ___711_Tcenter ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp853 $tmp852 $const29 	%argrw{"wrr"}
	if		$tmp853 1819 1824 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp854 ___711_Tcenter ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp855 $tmp854 $const30 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp855 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp857 ___711_Tcenter ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp858 $tmp857 $const31 	%argrw{"wrr"}
	mul		$tmp859 $tmp858 $const32 	%argrw{"wrr"}
	pow		$tmp856 $tmp859 $const33 	%argrw{"wrr"}
	compassign	___711_Tcenter ___641_i $tmp856 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:259
#     result.powerTtoG = log(HEXT_GCENTER) / log(Tcenter);
	log		$tmp860 $const81 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{259} %argrw{"wr"}
	log		$tmp862 ___711_Tcenter 	%argrw{"wr"}
	div		___711_result.powerTtoG $tmp860 $tmp862 	%argrw{"wrr"}
	assign		___711_result.powerTtoG ___711_result.powerTtoG 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:260
#     result.powerGtoT = 1.0 / result.powerTtoG;
	div		___711_result.powerGtoT $const9 ___711_result.powerTtoG 	%line{260} %argrw{"wrr"}
	assign		___711_result.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:261
#     return result;
	assign		$tmp846.powerTtoG ___711_result.powerTtoG 	%line{261} %argrw{"wr"}
	assign		$tmp846.powerGtoT ___711_result.powerGtoT 	%argrw{"wr"}
# PxrMultiTexture.osl:731
#                     hexTex[g] = hexTileTextureExponents(filename9, linearize);
	aassign		hexTex.powerTtoG ___773_g $tmp846.powerTtoG 	%filename{"PxrMultiTexture.osl"} %line{731} %argrw{"wrr"}
	aassign		hexTex.powerGtoT ___773_g $tmp846.powerGtoT 	%argrw{"wrr"}
# PxrMultiTexture.osl:738
#             if (validHexTileData(hexData[g]))
	aref		$tmp864.s hexData.s ___773_g 	%line{738} %argrw{"wrr"}
	aref		$tmp864.t hexData.t ___773_g 	%argrw{"wrr"}
	aref		$tmp864.w hexData.w ___773_g 	%argrw{"wrr"}
	aref		$tmp864.r hexData.r ___773_g 	%argrw{"wrr"}
	functioncall	$const41 1845 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:78
#     return hxt.w == INVALID_HEXTILE_WEIGHT ? 0 : 1;
	eq		$tmp866 $tmp864.w $const7 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{78} %argrw{"wrr"}
	if		$tmp866 1843 1844 	%argrw{"r"}
	assign		$tmp863 $const2 	%argrw{"wr"}
	assign		$tmp863 $const3 	%argrw{"wr"}
	return
# PxrMultiTexture.osl:738
#             if (validHexTileData(hexData[g]))
	if		$tmp863 4974 5552 	%filename{"PxrMultiTexture.osl"} %line{738} %argrw{"r"}
# PxrMultiTexture.osl:740
#                 if (texId == 0) // This if-else awkwardness is to work-around XPU's texturing limitations
	eq		$tmp867 ___775_texId $const2 	%line{740} %argrw{"wrr"}
	if		$tmp867 2159 4974 	%argrw{"r"}
# PxrMultiTexture.osl:745
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aref		$tmp869.powerTtoG hexTex.powerTtoG ___773_g 	%line{745} %argrw{"wrr"}
	aref		$tmp869.powerGtoT hexTex.powerGtoT ___773_g 	%argrw{"wrr"}
	aref		$tmp870.s hexData.s ___773_g 	%argrw{"wrr"}
	aref		$tmp870.t hexData.t ___773_g 	%argrw{"wrr"}
	aref		$tmp870.w hexData.w ___773_g 	%argrw{"wrr"}
	aref		$tmp870.r hexData.r ___773_g 	%argrw{"wrr"}
	aref		$tmp871 alphas ___773_g 	%argrw{"wrr"}
	aref		$tmp872 grads ___773_g 	%argrw{"wrr"}
# PxrMultiTexture.osl:742
#                     colors[g] = hexTileLookup(filename0, txparams, linearize, mipBias,
	functioncall	$const82 2156 	%line{742} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:310
#     HexTileColor hexCol = HEXTILECOLOR_ZERO;
	assign		___714_hexCol.value $const40 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{310} %argrw{"wr"}
	assign		___714_hexCol.norm $const44 	%argrw{"wr"}
	assign		___714_hexCol.powerGtoT $const40 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:311
#     color co = 0, cc = 0, c;
	assign		___714_co $const2 	%line{311} %argrw{"wr"}
	assign		___714_cc $const2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:313
#     ng = 0;
	assign		$tmp872 $const2 	%line{313} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	for		$tmp874 1865 1867 2142 2144 	%line{315} %argrw{"r"}
	assign		___715_i $const2 	%argrw{"wr"}
	lt		$tmp873 ___715_i $const5 	%argrw{"wrr"}
	neq		$tmp874 $tmp873 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:317
#         float w = hexData.w[i];
	compref		___716_w $tmp870.w ___715_i 	%line{317} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:318
#         if (w == 0.0)
	eq		$tmp875 ___716_w $const44 	%line{318} %argrw{"wrr"}
	if		$tmp875 1871 1871 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:319
#             continue;
	continue	%line{319}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:322
#         TxCoords txcoords = initTxCoords(hexData.s[i], hexData.t[i], 0);
	compref		$tmp876 $tmp870.s ___715_i 	%line{322} %argrw{"wrr"}
	compref		$tmp877 $tmp870.t ___715_i 	%argrw{"wrr"}
	functioncall	$const16 1895 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 1881 1882 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{100} %argrw{"r"}
	functioncall	$const17 1881 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp878 $tmp877 	%line{48} %argrw{"wr"}
	add		$tmp879 $tmp878 $const9 	%argrw{"wrr"}
	floor		$tmp880 $tmp877 	%argrw{"wr"}
	sub		$tmp881 $tmp877 $tmp880 	%argrw{"wrr"}
	sub		___636__tt $tmp879 $tmp881 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt $tmp877 	%line{100} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:101
#     TxCoords coords = { ss, _tt, Dx(ss), Dy(ss), Dx(_tt), Dy(_tt) };
	assign		___636_coords.s $tmp876 	%line{101} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx $tmp876 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy $tmp876 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     return coords;
	assign		___716_txcoords.s ___636_coords.s 	%line{102} %argrw{"wr"}
	assign		___716_txcoords.t ___636_coords.t 	%argrw{"wr"}
	assign		___716_txcoords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___716_txcoords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___716_txcoords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___716_txcoords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:323
#         if (mipBias != 0 || maxResolution != 0)
	neq		$tmp882 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{323} %argrw{"wrr"}
	neq		$tmp883 $tmp882 $const2 	%argrw{"wrr"}
	if		$tmp883 1898 1901 	%argrw{"r"}
	neq		$tmp884 maxResolution $const2 	%argrw{"wrr"}
	neq		$tmp885 $tmp884 $const2 	%argrw{"wrr"}
	assign		$tmp883 $tmp885 	%argrw{"wr"}
	if		$tmp883 1958 1958 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:324
#             PxrTxMipControls(mipBias, maxResolution, txcoords, txparams);
	functioncall	$const83 1958 	%line{324} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:153
#     float bias = (mipBias != 0) ? pow(2.0, mipBias) : 1.0;
	neq		$tmp886 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{153} %argrw{"wrr"}
	if		$tmp886 1907 1908 	%argrw{"r"}
	assign		$tmp887 mipBias 	%argrw{"wr"}
	pow		___645_bias $const68 $tmp887 	%argrw{"wrr"}
	assign		___645_bias $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:154
#     bias *= params.width;
	mul		___645_bias ___645_bias txparams.width 	%line{154} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:155
#     if (maxResolution <= 0)
	le		$tmp888 maxResolution $const2 	%line{155} %argrw{"wrr"}
	if		$tmp888 1912 1958 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:157
#         params.width = bias;
	assign		txparams.width ___645_bias 	%line{157} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:163
#         float minRadius = (maxResolution > 0.0) ? 1.0 / maxResolution : 0.0;
	gt		$tmp889 maxResolution $const44 	%line{163} %argrw{"wrr"}
	if		$tmp889 1915 1916 	%argrw{"r"}
	div		___647_minRadius $const9 maxResolution 	%argrw{"wrr"}
	assign		___647_minRadius $const44 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:165
#         float dsdx = max(minRadius, abs(coords.dsdx * bias)) * sign(coords.dsdx);
	mul		$tmp892 ___716_txcoords.dsdx ___645_bias 	%line{165} %argrw{"wrr"}
	abs		$tmp891 $tmp892 	%argrw{"wr"}
	max		$tmp890 ___647_minRadius $tmp891 	%argrw{"wrr"}
	sign		$tmp893 ___716_txcoords.dsdx 	%argrw{"wr"}
	mul		___647_dsdx $tmp890 $tmp893 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:166
#         float dtdx = max(minRadius, abs(coords.dtdx * bias)) * sign(coords.dtdx);
	mul		$tmp896 ___716_txcoords.dtdx ___645_bias 	%line{166} %argrw{"wrr"}
	abs		$tmp895 $tmp896 	%argrw{"wr"}
	max		$tmp894 ___647_minRadius $tmp895 	%argrw{"wrr"}
	sign		$tmp897 ___716_txcoords.dtdx 	%argrw{"wr"}
	mul		___647_dtdx $tmp894 $tmp897 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:167
#         float dsdy = max(minRadius, abs(coords.dsdy * bias)) * sign(coords.dsdy);
	mul		$tmp900 ___716_txcoords.dsdy ___645_bias 	%line{167} %argrw{"wrr"}
	abs		$tmp899 $tmp900 	%argrw{"wr"}
	max		$tmp898 ___647_minRadius $tmp899 	%argrw{"wrr"}
	sign		$tmp901 ___716_txcoords.dsdy 	%argrw{"wr"}
	mul		___647_dsdy $tmp898 $tmp901 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:168
#         float dtdy = max(minRadius, abs(coords.dtdy * bias)) * sign(coords.dtdy);
	mul		$tmp904 ___716_txcoords.dtdy ___645_bias 	%line{168} %argrw{"wrr"}
	abs		$tmp903 $tmp904 	%argrw{"wr"}
	max		$tmp902 ___647_minRadius $tmp903 	%argrw{"wrr"}
	sign		$tmp905 ___716_txcoords.dtdy 	%argrw{"wr"}
	mul		___647_dtdy $tmp902 $tmp905 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:169
#         vector v0 = point(coords.dsdx, coords.dtdx, 0) - point(coords.dsdy, coords.dtdy, 0);
	point		$tmp906 ___716_txcoords.dsdx ___716_txcoords.dtdx $const44 	%line{169} %argrw{"wrrr"}
	point		$tmp907 ___716_txcoords.dsdy ___716_txcoords.dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v0 $tmp906 $tmp907 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:170
#         vector v1 = point(dsdx, dtdx, 0) - point(dsdy, dtdy, 0);
	point		$tmp908 ___647_dsdx ___647_dtdx $const44 	%line{170} %argrw{"wrrr"}
	point		$tmp909 ___647_dsdy ___647_dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v1 $tmp908 $tmp909 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:171
#         params.width = (v1.x*v1.x + v1.y*v1.y) / (v0.x*v0.x + v1.y*v1.y);
	compref		$tmp910 ___647_v1 $const2 	%line{171} %argrw{"wrr"}
	compref		$tmp911 ___647_v1 $const2 	%argrw{"wrr"}
	mul		$tmp912 $tmp910 $tmp911 	%argrw{"wrr"}
	compref		$tmp913 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp914 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp915 $tmp913 $tmp914 	%argrw{"wrr"}
	add		$tmp916 $tmp912 $tmp915 	%argrw{"wrr"}
	compref		$tmp917 ___647_v0 $const2 	%argrw{"wrr"}
	compref		$tmp918 ___647_v0 $const2 	%argrw{"wrr"}
	mul		$tmp919 $tmp917 $tmp918 	%argrw{"wrr"}
	compref		$tmp920 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp921 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp922 $tmp920 $tmp921 	%argrw{"wrr"}
	add		$tmp923 $tmp919 $tmp922 	%argrw{"wrr"}
	div		txparams.width $tmp916 $tmp923 	%argrw{"wrr"}
	assign		txparams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:325
#         c = PxrTextureLookup(filename, txcoords, txparams);
	functioncall	$const18 1988 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{325} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename0 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp924 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp924 1967 1967 	%argrw{"r"}
	assign		___714_c ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename0 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp925 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp925 1973 1973 	%argrw{"r"}
	neq		$tmp926 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp925 $tmp926 	%argrw{"wr"}
	if		$tmp925 1987 1987 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp927 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp928 $tmp927 $const2 	%argrw{"wrr"}
	if		$tmp928 1977 1980 	%argrw{"r"}
	eq		$tmp929 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp930 $tmp929 $const2 	%argrw{"wrr"}
	assign		$tmp928 $tmp930 	%argrw{"wr"}
	if		$tmp928 1987 1987 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp931 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp931 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp932 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp932 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp933 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp933 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		___714_c ___649_finalResult 	%line{217} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:326
#         if (nMap.enabled)
	if		nMap.enabled 2090 2090 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{326} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:329
#             GenBasisTB(Tn, Bn, float2(hexData.s[i], hexData.t[i]), N);
	compref		$tmp934.x $tmp870.s ___715_i 	%line{329} %argrw{"wrr"}
	compref		$tmp934.y $tmp870.t ___715_i 	%argrw{"wrr"}
	functioncall	$const84 2038 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:55
#     vector sigmaX = dPdu - dot(dPdu, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp935 dPdu N 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{55} %argrw{"wrr"}
	mul		$tmp936 $tmp935 N 	%argrw{"wrr"}
	sub		___684_sigmaX dPdu $tmp936 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:56
#     vector sigmaY = dPdv - dot(dPdv, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp937 dPdv N 	%line{56} %argrw{"wrr"}
	mul		$tmp938 $tmp937 N 	%argrw{"wrr"}
	sub		___684_sigmaY dPdv $tmp938 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:57
#     float flip_sign = dot(dPdv, cross(nrmBaseNormal, dPdu)) < 0.0 ? -1.0 : 1.0;
	cross		$tmp940 N dPdu 	%line{57} %argrw{"wrr"}
	dot		$tmp939 dPdv $tmp940 	%argrw{"wrr"}
	lt		$tmp941 $tmp939 $const44 	%argrw{"wrr"}
	if		$tmp941 2003 2004 	%argrw{"r"}
	assign		___684_flip_sign $const85 	%argrw{"wr"}
	assign		___684_flip_sign $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:59
#     float2 dSTdx = Dx(texST);
	functioncall	$const86 2007 	%line{59} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:167
#     return float2(Dx(a.x), Dx(a.y));
	Dx		___684_dSTdx.x $tmp934.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{167} %argrw{"wr"} %argderivs{1}
	Dx		___684_dSTdx.y $tmp934.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:60
#     float2 dSTdy = Dy(texST);
	functioncall	$const87 2010 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{60} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:172
#     return float2(Dy(a.x), Dy(a.y));
	Dy		___684_dSTdy.x $tmp934.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{172} %argrw{"wr"} %argderivs{1}
	Dy		___684_dSTdy.y $tmp934.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:61
#     float det = dot(dSTdx, float2(dSTdy.y, -dSTdy.x));
	assign		$tmp942.x ___684_dSTdy.y 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{61} %argrw{"wr"}
	neg		$tmp942.y ___684_dSTdy.x 	%argrw{"wr"}
	functioncall	$const88 2016 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:162
#     return a.x * b.x + a.y * b.y;
	mul		$tmp943 ___684_dSTdx.x $tmp942.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{162} %argrw{"wrr"}
	mul		$tmp944 ___684_dSTdx.y $tmp942.y 	%argrw{"wrr"}
	add		___684_det $tmp943 $tmp944 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:62
#     float sign_det = det < 0.0 ? -1.0 : 1.0;
	lt		$tmp945 ___684_det $const44 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{62} %argrw{"wrr"}
	if		$tmp945 2019 2020 	%argrw{"r"}
	assign		___684_sign_det $const85 	%argrw{"wr"}
	assign		___684_sign_det $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:66
#     float2 invC0 = sign_det * float2(dSTdy.y, -dSTdx.y);
	assign		$tmp946.x ___684_dSTdy.y 	%line{66} %argrw{"wr"}
	neg		$tmp946.y ___684_dSTdx.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 2028 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:130
#     return b * float2(a, a);
	assign		$tmp947.x ___684_sign_det 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{130} %argrw{"wr"}
	assign		$tmp947.y ___684_sign_det 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 2028 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		___684_invC0.x $tmp946.x $tmp947.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		___684_invC0.y $tmp946.y $tmp947.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:67
#     vT = sigmaX * invC0.x + sigmaY * invC0.y;
	mul		$tmp948 ___684_sigmaX ___684_invC0.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{67} %argrw{"wrr"}
	mul		$tmp949 ___684_sigmaY ___684_invC0.y 	%argrw{"wrr"}
	add		___717_Tn $tmp948 $tmp949 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:68
#     if (abs(det) > 0.0) vT = normalize(vT);
	abs		$tmp950 ___684_det 	%line{68} %argrw{"wr"}
	gt		$tmp951 $tmp950 $const44 	%argrw{"wrr"}
	if		$tmp951 2035 2035 	%argrw{"r"}
	normalize	___717_Tn ___717_Tn 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:69
#     vB = (sign_det * flip_sign) * cross(nrmBaseNormal, vT);
	mul		$tmp952 ___684_sign_det ___684_flip_sign 	%line{69} %argrw{"wrr"}
	cross		$tmp953 N ___717_Tn 	%argrw{"wrr"}
	mul		___717_Bn $tmp952 $tmp953 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:330
#             setupNormalMapHex(nMap, c);
	functioncall	$const90 2057 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{330} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:171
#     color tsNormal = nmap * 2.0 - 1.0;
	mul		$tmp954 ___714_c $const68 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{171} %argrw{"wrr"}
	sub		___694_tsNormal $tmp954 $const9 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:173
#     if (nmp.orientation == k_opengl)
	eq		$tmp955 nMap.orientation $const2 	%line{173} %argrw{"wrr"}
	if		$tmp955 2043 2056 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:177
#     else if (nmp.orientation == k_directx)
	eq		$tmp956 nMap.orientation $const3 	%line{177} %argrw{"wrr"}
	if		$tmp956 2048 2056 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:179
#         tsNormal[1] = -tsNormal[1];
	compref		$tmp957 ___694_tsNormal $const3 	%line{179} %argrw{"wrr"}
	neg		$tmp958 $tmp957 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp958 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:183
#         if (nmp.flipX)
	if		nMap.flipX 2052 2052 	%line{183} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:184
#             tsNormal[0] = -tsNormal[0];
	compref		$tmp959 ___694_tsNormal $const2 	%line{184} %argrw{"wrr"}
	neg		$tmp960 $tmp959 	%argrw{"wr"}
	compassign	___694_tsNormal $const2 $tmp960 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:185
#         if (nmp.flipY)
	if		nMap.flipY 2056 2056 	%line{185} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:186
#             tsNormal[1] = -tsNormal[1];
	compref		$tmp961 ___694_tsNormal $const3 	%line{186} %argrw{"wrr"}
	neg		$tmp962 $tmp961 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp962 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:188
#     nmap = tsNormal;
	assign		___714_c ___694_tsNormal 	%line{188} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const91 2084 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:76
# 	float scale = 1.0 / 128.0;
	div		___685_scale $const9 $const92 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{76} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:80
# 	color vMa = abs(vM);
	abs		___685_vMa ___714_c 	%line{80} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:81
# 	float z_ma = max(vMa[2], scale * max(vMa[0], vMa[1]));
	compref		$tmp965 ___685_vMa $const4 	%line{81} %argrw{"wrr"}
	compref		$tmp967 ___685_vMa $const2 	%argrw{"wrr"}
	compref		$tmp968 ___685_vMa $const3 	%argrw{"wrr"}
	max		$tmp966 $tmp967 $tmp968 	%argrw{"wrr"}
	mul		$tmp969 ___685_scale $tmp966 	%argrw{"wrr"}
	max		___685_z_ma $tmp965 $tmp969 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:84
# 	int gFlipVertDeriv = 1;
	assign		___685_gFlipVertDeriv $const3 	%line{84} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:85
# 	float s = gFlipVertDeriv ? -1.0 : 1.0;
	if		___685_gFlipVertDeriv 2069 2070 	%line{85} %argrw{"r"}
	assign		___685_s $const85 	%argrw{"wr"}
	assign		___685_s $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	compref		$tmp971.x ___714_c $const2 	%line{86} %argrw{"wrr"}
	compref		$tmp972 ___714_c $const3 	%argrw{"wrr"}
	mul		$tmp971.y ___685_s $tmp972 	%argrw{"wrr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const93 2076 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:55
#     return float2(-a.x, -a.y);
	neg		$tmp970.x $tmp971.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{55} %argrw{"wr"}
	neg		$tmp970.y $tmp971.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const94 2083 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:146
#     float b_inv = 1.0/b;
	div		___678_b_inv $const9 ___685_z_ma 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{146} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:147
#     return a * float2(b_inv, b_inv);
	assign		$tmp973.x ___678_b_inv 	%line{147} %argrw{"wr"}
	assign		$tmp973.y ___678_b_inv 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 2083 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		$tmp964.x $tmp970.x $tmp973.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		$tmp964.y $tmp970.y $tmp973.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	return	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{86}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const95 2088 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:92
#     return deriv.x * vT + deriv.y * vB;
	mul		$tmp974 $tmp964.x ___717_Tn 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{92} %argrw{"wrr"}
	mul		$tmp975 $tmp964.y ___717_Bn 	%argrw{"wrr"}
	add		$tmp963 $tmp974 $tmp975 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	mul		$tmp976 $tmp963 ___716_w 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"wrr"}
	add		$tmp872 $tmp872 $tmp976 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:333
#         if (linearize) PxrLinearizeSRGB(c);
	if		linearize 2114 2114 	%line{333} %argrw{"r"}
	functioncall	$const25 2114 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 2097 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp978 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp979 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp977 $tmp979 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp977 2114 2114 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp981 2100 2102 2113 2114 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp980 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp981 $tmp980 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp982 ___714_c ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp983 $tmp982 $const29 	%argrw{"wrr"}
	if		$tmp983 2108 2113 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp984 ___714_c ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp985 $tmp984 $const30 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp985 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp987 ___714_c ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp988 $tmp987 $const31 	%argrw{"wrr"}
	mul		$tmp989 $tmp988 $const32 	%argrw{"wrr"}
	pow		$tmp986 $tmp989 $const33 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp986 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:335
#         if (needAlpha)
	if		needAlpha 2127 2127 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{335} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:337
#             TxParams alphaParams = txparams;
	assign		___718_alphaParams.firstchannel txparams.firstchannel 	%line{337} %argrw{"wr"}
	assign		___718_alphaParams.blur txparams.blur 	%argrw{"wr"}
	assign		___718_alphaParams.missingcolor txparams.missingcolor 	%argrw{"wr"}
	assign		___718_alphaParams.missingalpha txparams.missingalpha 	%argrw{"wr"}
	assign		___718_alphaParams.interp txparams.interp 	%argrw{"wr"}
	assign		___718_alphaParams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:338
#             alphaParams.firstchannel += 3;    // XXX: Assume RGBA
	add		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel $const5 	%line{338} %argrw{"wrr"}
	assign		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:339
#             a = PxrTextureLookup(filename, txcoords, alphaParams);
	functioncall	$const18 2126 	%line{339} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha ___718_alphaParams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		___714_a filename0 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 ___718_alphaParams.firstchannel $const20 ___718_alphaParams.blur $const21 ___652_missingalpha $const22 ___718_alphaParams.interp $const23 ___718_alphaParams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:342
#             alpha = mix(alpha, 1, a);
	mix		$tmp871 $tmp871 $const9 ___714_a 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{342} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:346
#         co += c * w;
	mul		$tmp990 ___714_c ___716_w 	%line{346} %argrw{"wrr"}
	add		___714_co ___714_co $tmp990 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:347
#         if (blendingContrast > 0)
	gt		$tmp991 blendingContrast $const2 	%line{347} %argrw{"wrr"}
	if		$tmp991 2142 2142 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:348
#             hexTileAccumulate(c, w, hexTex, hexCol);
	functioncall	$const96 2142 	%line{348} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:274
#     result.value += pow(tex, htx.powerTtoG) * weight;
	pow		$tmp992 ___714_c $tmp869.powerTtoG 	%line{274} %argrw{"wrr"}
	mul		$tmp993 $tmp992 ___716_w 	%argrw{"wrr"}
	add		___714_hexCol.value ___714_hexCol.value $tmp993 	%argrw{"wrr"}
	assign		___714_hexCol.value ___714_hexCol.value 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:275
#     result.norm += weight * weight;
	mul		$tmp994 ___716_w ___716_w 	%line{275} %argrw{"wrr"}
	add		___714_hexCol.norm ___714_hexCol.norm $tmp994 	%argrw{"wrr"}
	assign		___714_hexCol.norm ___714_hexCol.norm 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:276
#     result.powerGtoT += htx.powerGtoT * weight;
	mul		$tmp995 $tmp869.powerGtoT ___716_w 	%line{276} %argrw{"wrr"}
	add		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT $tmp995 	%argrw{"wrr"}
	assign		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	assign		$tmp996 ___715_i 	%line{315} %argrw{"wr"}
	add		___715_i ___715_i $const3 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:350
#     if (blendingContrast > 0)
	gt		$tmp997 blendingContrast $const2 	%line{350} %argrw{"wrr"}
	if		$tmp997 2155 2155 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:351
#         cc = hexTileFinalColor(hexCol);
	functioncall	$const97 2155 	%line{351} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:284
#     float norm = 1.0 / sqrt(in.norm);
	sqrt		$tmp998 ___714_hexCol.norm 	%line{284} %argrw{"wr"}
	div		___713_norm $const9 $tmp998 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:285
#     color result = norm * (in.value - HEXT_GCENTER) + HEXT_GCENTER;
	sub		$tmp1000 ___714_hexCol.value $const81 	%line{285} %argrw{"wrr"}
	mul		$tmp1001 ___713_norm $tmp1000 	%argrw{"wrr"}
	add		___713_result $tmp1001 $const81 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:287
#     result = max(result, color(0.0));
	max		___713_result ___713_result $const40 	%line{287} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:290
#     result = pow(result, in.powerGtoT);
	pow		___713_result ___713_result ___714_hexCol.powerGtoT 	%line{290} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:291
#     return result;
	assign		___714_cc ___713_result 	%line{291} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:353
#     return mix(co, cc, blendingContrast);
	mix		$tmp868 ___714_co ___714_cc blendingContrast 	%line{353} %argrw{"wrrr"}
# PxrMultiTexture.osl:745
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aassign		alphas ___773_g $tmp871 	%filename{"PxrMultiTexture.osl"} %line{745} %argrw{"wrr"}
	aassign		grads ___773_g $tmp872 	%argrw{"wrr"}
# PxrMultiTexture.osl:742
#                     colors[g] = hexTileLookup(filename0, txparams, linearize, mipBias,
	aassign		colors ___773_g $tmp868 	%line{742} %argrw{"wrr"}
# PxrMultiTexture.osl:747
#                 else if (texId == 1)
	eq		$tmp1004 ___775_texId $const3 	%line{747} %argrw{"wrr"}
	if		$tmp1004 2472 4974 	%argrw{"r"}
# PxrMultiTexture.osl:752
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aref		$tmp1006.powerTtoG hexTex.powerTtoG ___773_g 	%line{752} %argrw{"wrr"}
	aref		$tmp1006.powerGtoT hexTex.powerGtoT ___773_g 	%argrw{"wrr"}
	aref		$tmp1007.s hexData.s ___773_g 	%argrw{"wrr"}
	aref		$tmp1007.t hexData.t ___773_g 	%argrw{"wrr"}
	aref		$tmp1007.w hexData.w ___773_g 	%argrw{"wrr"}
	aref		$tmp1007.r hexData.r ___773_g 	%argrw{"wrr"}
	aref		$tmp1008 alphas ___773_g 	%argrw{"wrr"}
	aref		$tmp1009 grads ___773_g 	%argrw{"wrr"}
# PxrMultiTexture.osl:749
#                     colors[g] = hexTileLookup(filename1, txparams, linearize, mipBias,
	functioncall	$const82 2469 	%line{749} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:310
#     HexTileColor hexCol = HEXTILECOLOR_ZERO;
	assign		___714_hexCol.value $const40 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{310} %argrw{"wr"}
	assign		___714_hexCol.norm $const44 	%argrw{"wr"}
	assign		___714_hexCol.powerGtoT $const40 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:311
#     color co = 0, cc = 0, c;
	assign		___714_co $const2 	%line{311} %argrw{"wr"}
	assign		___714_cc $const2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:313
#     ng = 0;
	assign		$tmp1009 $const2 	%line{313} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	for		$tmp1011 2178 2180 2455 2457 	%line{315} %argrw{"r"}
	assign		___715_i $const2 	%argrw{"wr"}
	lt		$tmp1010 ___715_i $const5 	%argrw{"wrr"}
	neq		$tmp1011 $tmp1010 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:317
#         float w = hexData.w[i];
	compref		___716_w $tmp1007.w ___715_i 	%line{317} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:318
#         if (w == 0.0)
	eq		$tmp1012 ___716_w $const44 	%line{318} %argrw{"wrr"}
	if		$tmp1012 2184 2184 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:319
#             continue;
	continue	%line{319}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:322
#         TxCoords txcoords = initTxCoords(hexData.s[i], hexData.t[i], 0);
	compref		$tmp1013 $tmp1007.s ___715_i 	%line{322} %argrw{"wrr"}
	compref		$tmp1014 $tmp1007.t ___715_i 	%argrw{"wrr"}
	functioncall	$const16 2208 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 2194 2195 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{100} %argrw{"r"}
	functioncall	$const17 2194 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp1015 $tmp1014 	%line{48} %argrw{"wr"}
	add		$tmp1016 $tmp1015 $const9 	%argrw{"wrr"}
	floor		$tmp1017 $tmp1014 	%argrw{"wr"}
	sub		$tmp1018 $tmp1014 $tmp1017 	%argrw{"wrr"}
	sub		___636__tt $tmp1016 $tmp1018 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt $tmp1014 	%line{100} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:101
#     TxCoords coords = { ss, _tt, Dx(ss), Dy(ss), Dx(_tt), Dy(_tt) };
	assign		___636_coords.s $tmp1013 	%line{101} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx $tmp1013 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy $tmp1013 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     return coords;
	assign		___716_txcoords.s ___636_coords.s 	%line{102} %argrw{"wr"}
	assign		___716_txcoords.t ___636_coords.t 	%argrw{"wr"}
	assign		___716_txcoords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___716_txcoords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___716_txcoords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___716_txcoords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:323
#         if (mipBias != 0 || maxResolution != 0)
	neq		$tmp1019 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{323} %argrw{"wrr"}
	neq		$tmp1020 $tmp1019 $const2 	%argrw{"wrr"}
	if		$tmp1020 2211 2214 	%argrw{"r"}
	neq		$tmp1021 maxResolution $const2 	%argrw{"wrr"}
	neq		$tmp1022 $tmp1021 $const2 	%argrw{"wrr"}
	assign		$tmp1020 $tmp1022 	%argrw{"wr"}
	if		$tmp1020 2271 2271 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:324
#             PxrTxMipControls(mipBias, maxResolution, txcoords, txparams);
	functioncall	$const83 2271 	%line{324} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:153
#     float bias = (mipBias != 0) ? pow(2.0, mipBias) : 1.0;
	neq		$tmp1023 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{153} %argrw{"wrr"}
	if		$tmp1023 2220 2221 	%argrw{"r"}
	assign		$tmp1024 mipBias 	%argrw{"wr"}
	pow		___645_bias $const68 $tmp1024 	%argrw{"wrr"}
	assign		___645_bias $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:154
#     bias *= params.width;
	mul		___645_bias ___645_bias txparams.width 	%line{154} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:155
#     if (maxResolution <= 0)
	le		$tmp1025 maxResolution $const2 	%line{155} %argrw{"wrr"}
	if		$tmp1025 2225 2271 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:157
#         params.width = bias;
	assign		txparams.width ___645_bias 	%line{157} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:163
#         float minRadius = (maxResolution > 0.0) ? 1.0 / maxResolution : 0.0;
	gt		$tmp1026 maxResolution $const44 	%line{163} %argrw{"wrr"}
	if		$tmp1026 2228 2229 	%argrw{"r"}
	div		___647_minRadius $const9 maxResolution 	%argrw{"wrr"}
	assign		___647_minRadius $const44 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:165
#         float dsdx = max(minRadius, abs(coords.dsdx * bias)) * sign(coords.dsdx);
	mul		$tmp1029 ___716_txcoords.dsdx ___645_bias 	%line{165} %argrw{"wrr"}
	abs		$tmp1028 $tmp1029 	%argrw{"wr"}
	max		$tmp1027 ___647_minRadius $tmp1028 	%argrw{"wrr"}
	sign		$tmp1030 ___716_txcoords.dsdx 	%argrw{"wr"}
	mul		___647_dsdx $tmp1027 $tmp1030 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:166
#         float dtdx = max(minRadius, abs(coords.dtdx * bias)) * sign(coords.dtdx);
	mul		$tmp1033 ___716_txcoords.dtdx ___645_bias 	%line{166} %argrw{"wrr"}
	abs		$tmp1032 $tmp1033 	%argrw{"wr"}
	max		$tmp1031 ___647_minRadius $tmp1032 	%argrw{"wrr"}
	sign		$tmp1034 ___716_txcoords.dtdx 	%argrw{"wr"}
	mul		___647_dtdx $tmp1031 $tmp1034 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:167
#         float dsdy = max(minRadius, abs(coords.dsdy * bias)) * sign(coords.dsdy);
	mul		$tmp1037 ___716_txcoords.dsdy ___645_bias 	%line{167} %argrw{"wrr"}
	abs		$tmp1036 $tmp1037 	%argrw{"wr"}
	max		$tmp1035 ___647_minRadius $tmp1036 	%argrw{"wrr"}
	sign		$tmp1038 ___716_txcoords.dsdy 	%argrw{"wr"}
	mul		___647_dsdy $tmp1035 $tmp1038 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:168
#         float dtdy = max(minRadius, abs(coords.dtdy * bias)) * sign(coords.dtdy);
	mul		$tmp1041 ___716_txcoords.dtdy ___645_bias 	%line{168} %argrw{"wrr"}
	abs		$tmp1040 $tmp1041 	%argrw{"wr"}
	max		$tmp1039 ___647_minRadius $tmp1040 	%argrw{"wrr"}
	sign		$tmp1042 ___716_txcoords.dtdy 	%argrw{"wr"}
	mul		___647_dtdy $tmp1039 $tmp1042 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:169
#         vector v0 = point(coords.dsdx, coords.dtdx, 0) - point(coords.dsdy, coords.dtdy, 0);
	point		$tmp1043 ___716_txcoords.dsdx ___716_txcoords.dtdx $const44 	%line{169} %argrw{"wrrr"}
	point		$tmp1044 ___716_txcoords.dsdy ___716_txcoords.dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v0 $tmp1043 $tmp1044 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:170
#         vector v1 = point(dsdx, dtdx, 0) - point(dsdy, dtdy, 0);
	point		$tmp1045 ___647_dsdx ___647_dtdx $const44 	%line{170} %argrw{"wrrr"}
	point		$tmp1046 ___647_dsdy ___647_dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v1 $tmp1045 $tmp1046 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:171
#         params.width = (v1.x*v1.x + v1.y*v1.y) / (v0.x*v0.x + v1.y*v1.y);
	compref		$tmp1047 ___647_v1 $const2 	%line{171} %argrw{"wrr"}
	compref		$tmp1048 ___647_v1 $const2 	%argrw{"wrr"}
	mul		$tmp1049 $tmp1047 $tmp1048 	%argrw{"wrr"}
	compref		$tmp1050 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp1051 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp1052 $tmp1050 $tmp1051 	%argrw{"wrr"}
	add		$tmp1053 $tmp1049 $tmp1052 	%argrw{"wrr"}
	compref		$tmp1054 ___647_v0 $const2 	%argrw{"wrr"}
	compref		$tmp1055 ___647_v0 $const2 	%argrw{"wrr"}
	mul		$tmp1056 $tmp1054 $tmp1055 	%argrw{"wrr"}
	compref		$tmp1057 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp1058 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp1059 $tmp1057 $tmp1058 	%argrw{"wrr"}
	add		$tmp1060 $tmp1056 $tmp1059 	%argrw{"wrr"}
	div		txparams.width $tmp1053 $tmp1060 	%argrw{"wrr"}
	assign		txparams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:325
#         c = PxrTextureLookup(filename, txcoords, txparams);
	functioncall	$const18 2301 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{325} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename1 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp1061 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp1061 2280 2280 	%argrw{"r"}
	assign		___714_c ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename1 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp1062 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp1062 2286 2286 	%argrw{"r"}
	neq		$tmp1063 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp1062 $tmp1063 	%argrw{"wr"}
	if		$tmp1062 2300 2300 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp1064 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp1065 $tmp1064 $const2 	%argrw{"wrr"}
	if		$tmp1065 2290 2293 	%argrw{"r"}
	eq		$tmp1066 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp1067 $tmp1066 $const2 	%argrw{"wrr"}
	assign		$tmp1065 $tmp1067 	%argrw{"wr"}
	if		$tmp1065 2300 2300 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp1068 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp1068 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp1069 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp1069 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp1070 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp1070 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		___714_c ___649_finalResult 	%line{217} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:326
#         if (nMap.enabled)
	if		nMap.enabled 2403 2403 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{326} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:329
#             GenBasisTB(Tn, Bn, float2(hexData.s[i], hexData.t[i]), N);
	compref		$tmp1071.x $tmp1007.s ___715_i 	%line{329} %argrw{"wrr"}
	compref		$tmp1071.y $tmp1007.t ___715_i 	%argrw{"wrr"}
	functioncall	$const84 2351 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:55
#     vector sigmaX = dPdu - dot(dPdu, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp1072 dPdu N 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{55} %argrw{"wrr"}
	mul		$tmp1073 $tmp1072 N 	%argrw{"wrr"}
	sub		___684_sigmaX dPdu $tmp1073 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:56
#     vector sigmaY = dPdv - dot(dPdv, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp1074 dPdv N 	%line{56} %argrw{"wrr"}
	mul		$tmp1075 $tmp1074 N 	%argrw{"wrr"}
	sub		___684_sigmaY dPdv $tmp1075 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:57
#     float flip_sign = dot(dPdv, cross(nrmBaseNormal, dPdu)) < 0.0 ? -1.0 : 1.0;
	cross		$tmp1077 N dPdu 	%line{57} %argrw{"wrr"}
	dot		$tmp1076 dPdv $tmp1077 	%argrw{"wrr"}
	lt		$tmp1078 $tmp1076 $const44 	%argrw{"wrr"}
	if		$tmp1078 2316 2317 	%argrw{"r"}
	assign		___684_flip_sign $const85 	%argrw{"wr"}
	assign		___684_flip_sign $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:59
#     float2 dSTdx = Dx(texST);
	functioncall	$const86 2320 	%line{59} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:167
#     return float2(Dx(a.x), Dx(a.y));
	Dx		___684_dSTdx.x $tmp1071.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{167} %argrw{"wr"} %argderivs{1}
	Dx		___684_dSTdx.y $tmp1071.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:60
#     float2 dSTdy = Dy(texST);
	functioncall	$const87 2323 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{60} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:172
#     return float2(Dy(a.x), Dy(a.y));
	Dy		___684_dSTdy.x $tmp1071.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{172} %argrw{"wr"} %argderivs{1}
	Dy		___684_dSTdy.y $tmp1071.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:61
#     float det = dot(dSTdx, float2(dSTdy.y, -dSTdy.x));
	assign		$tmp1079.x ___684_dSTdy.y 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{61} %argrw{"wr"}
	neg		$tmp1079.y ___684_dSTdy.x 	%argrw{"wr"}
	functioncall	$const88 2329 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:162
#     return a.x * b.x + a.y * b.y;
	mul		$tmp1080 ___684_dSTdx.x $tmp1079.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{162} %argrw{"wrr"}
	mul		$tmp1081 ___684_dSTdx.y $tmp1079.y 	%argrw{"wrr"}
	add		___684_det $tmp1080 $tmp1081 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:62
#     float sign_det = det < 0.0 ? -1.0 : 1.0;
	lt		$tmp1082 ___684_det $const44 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{62} %argrw{"wrr"}
	if		$tmp1082 2332 2333 	%argrw{"r"}
	assign		___684_sign_det $const85 	%argrw{"wr"}
	assign		___684_sign_det $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:66
#     float2 invC0 = sign_det * float2(dSTdy.y, -dSTdx.y);
	assign		$tmp1083.x ___684_dSTdy.y 	%line{66} %argrw{"wr"}
	neg		$tmp1083.y ___684_dSTdx.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 2341 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:130
#     return b * float2(a, a);
	assign		$tmp1084.x ___684_sign_det 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{130} %argrw{"wr"}
	assign		$tmp1084.y ___684_sign_det 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 2341 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		___684_invC0.x $tmp1083.x $tmp1084.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		___684_invC0.y $tmp1083.y $tmp1084.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:67
#     vT = sigmaX * invC0.x + sigmaY * invC0.y;
	mul		$tmp1085 ___684_sigmaX ___684_invC0.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{67} %argrw{"wrr"}
	mul		$tmp1086 ___684_sigmaY ___684_invC0.y 	%argrw{"wrr"}
	add		___717_Tn $tmp1085 $tmp1086 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:68
#     if (abs(det) > 0.0) vT = normalize(vT);
	abs		$tmp1087 ___684_det 	%line{68} %argrw{"wr"}
	gt		$tmp1088 $tmp1087 $const44 	%argrw{"wrr"}
	if		$tmp1088 2348 2348 	%argrw{"r"}
	normalize	___717_Tn ___717_Tn 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:69
#     vB = (sign_det * flip_sign) * cross(nrmBaseNormal, vT);
	mul		$tmp1089 ___684_sign_det ___684_flip_sign 	%line{69} %argrw{"wrr"}
	cross		$tmp1090 N ___717_Tn 	%argrw{"wrr"}
	mul		___717_Bn $tmp1089 $tmp1090 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:330
#             setupNormalMapHex(nMap, c);
	functioncall	$const90 2370 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{330} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:171
#     color tsNormal = nmap * 2.0 - 1.0;
	mul		$tmp1091 ___714_c $const68 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{171} %argrw{"wrr"}
	sub		___694_tsNormal $tmp1091 $const9 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:173
#     if (nmp.orientation == k_opengl)
	eq		$tmp1092 nMap.orientation $const2 	%line{173} %argrw{"wrr"}
	if		$tmp1092 2356 2369 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:177
#     else if (nmp.orientation == k_directx)
	eq		$tmp1093 nMap.orientation $const3 	%line{177} %argrw{"wrr"}
	if		$tmp1093 2361 2369 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:179
#         tsNormal[1] = -tsNormal[1];
	compref		$tmp1094 ___694_tsNormal $const3 	%line{179} %argrw{"wrr"}
	neg		$tmp1095 $tmp1094 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp1095 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:183
#         if (nmp.flipX)
	if		nMap.flipX 2365 2365 	%line{183} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:184
#             tsNormal[0] = -tsNormal[0];
	compref		$tmp1096 ___694_tsNormal $const2 	%line{184} %argrw{"wrr"}
	neg		$tmp1097 $tmp1096 	%argrw{"wr"}
	compassign	___694_tsNormal $const2 $tmp1097 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:185
#         if (nmp.flipY)
	if		nMap.flipY 2369 2369 	%line{185} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:186
#             tsNormal[1] = -tsNormal[1];
	compref		$tmp1098 ___694_tsNormal $const3 	%line{186} %argrw{"wrr"}
	neg		$tmp1099 $tmp1098 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp1099 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:188
#     nmap = tsNormal;
	assign		___714_c ___694_tsNormal 	%line{188} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const91 2397 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:76
# 	float scale = 1.0 / 128.0;
	div		___685_scale $const9 $const92 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{76} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:80
# 	color vMa = abs(vM);
	abs		___685_vMa ___714_c 	%line{80} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:81
# 	float z_ma = max(vMa[2], scale * max(vMa[0], vMa[1]));
	compref		$tmp1102 ___685_vMa $const4 	%line{81} %argrw{"wrr"}
	compref		$tmp1104 ___685_vMa $const2 	%argrw{"wrr"}
	compref		$tmp1105 ___685_vMa $const3 	%argrw{"wrr"}
	max		$tmp1103 $tmp1104 $tmp1105 	%argrw{"wrr"}
	mul		$tmp1106 ___685_scale $tmp1103 	%argrw{"wrr"}
	max		___685_z_ma $tmp1102 $tmp1106 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:84
# 	int gFlipVertDeriv = 1;
	assign		___685_gFlipVertDeriv $const3 	%line{84} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:85
# 	float s = gFlipVertDeriv ? -1.0 : 1.0;
	if		___685_gFlipVertDeriv 2382 2383 	%line{85} %argrw{"r"}
	assign		___685_s $const85 	%argrw{"wr"}
	assign		___685_s $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	compref		$tmp1108.x ___714_c $const2 	%line{86} %argrw{"wrr"}
	compref		$tmp1109 ___714_c $const3 	%argrw{"wrr"}
	mul		$tmp1108.y ___685_s $tmp1109 	%argrw{"wrr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const93 2389 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:55
#     return float2(-a.x, -a.y);
	neg		$tmp1107.x $tmp1108.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{55} %argrw{"wr"}
	neg		$tmp1107.y $tmp1108.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const94 2396 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:146
#     float b_inv = 1.0/b;
	div		___678_b_inv $const9 ___685_z_ma 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{146} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:147
#     return a * float2(b_inv, b_inv);
	assign		$tmp1110.x ___678_b_inv 	%line{147} %argrw{"wr"}
	assign		$tmp1110.y ___678_b_inv 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 2396 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		$tmp1101.x $tmp1107.x $tmp1110.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		$tmp1101.y $tmp1107.y $tmp1110.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	return	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{86}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const95 2401 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:92
#     return deriv.x * vT + deriv.y * vB;
	mul		$tmp1111 $tmp1101.x ___717_Tn 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{92} %argrw{"wrr"}
	mul		$tmp1112 $tmp1101.y ___717_Bn 	%argrw{"wrr"}
	add		$tmp1100 $tmp1111 $tmp1112 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	mul		$tmp1113 $tmp1100 ___716_w 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"wrr"}
	add		$tmp1009 $tmp1009 $tmp1113 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:333
#         if (linearize) PxrLinearizeSRGB(c);
	if		linearize 2427 2427 	%line{333} %argrw{"r"}
	functioncall	$const25 2427 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 2410 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp1115 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp1116 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp1114 $tmp1116 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp1114 2427 2427 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp1118 2413 2415 2426 2427 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp1117 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp1118 $tmp1117 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp1119 ___714_c ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp1120 $tmp1119 $const29 	%argrw{"wrr"}
	if		$tmp1120 2421 2426 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp1121 ___714_c ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp1122 $tmp1121 $const30 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp1122 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp1124 ___714_c ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp1125 $tmp1124 $const31 	%argrw{"wrr"}
	mul		$tmp1126 $tmp1125 $const32 	%argrw{"wrr"}
	pow		$tmp1123 $tmp1126 $const33 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp1123 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:335
#         if (needAlpha)
	if		needAlpha 2440 2440 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{335} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:337
#             TxParams alphaParams = txparams;
	assign		___718_alphaParams.firstchannel txparams.firstchannel 	%line{337} %argrw{"wr"}
	assign		___718_alphaParams.blur txparams.blur 	%argrw{"wr"}
	assign		___718_alphaParams.missingcolor txparams.missingcolor 	%argrw{"wr"}
	assign		___718_alphaParams.missingalpha txparams.missingalpha 	%argrw{"wr"}
	assign		___718_alphaParams.interp txparams.interp 	%argrw{"wr"}
	assign		___718_alphaParams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:338
#             alphaParams.firstchannel += 3;    // XXX: Assume RGBA
	add		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel $const5 	%line{338} %argrw{"wrr"}
	assign		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:339
#             a = PxrTextureLookup(filename, txcoords, alphaParams);
	functioncall	$const18 2439 	%line{339} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha ___718_alphaParams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		___714_a filename1 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 ___718_alphaParams.firstchannel $const20 ___718_alphaParams.blur $const21 ___652_missingalpha $const22 ___718_alphaParams.interp $const23 ___718_alphaParams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:342
#             alpha = mix(alpha, 1, a);
	mix		$tmp1008 $tmp1008 $const9 ___714_a 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{342} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:346
#         co += c * w;
	mul		$tmp1127 ___714_c ___716_w 	%line{346} %argrw{"wrr"}
	add		___714_co ___714_co $tmp1127 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:347
#         if (blendingContrast > 0)
	gt		$tmp1128 blendingContrast $const2 	%line{347} %argrw{"wrr"}
	if		$tmp1128 2455 2455 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:348
#             hexTileAccumulate(c, w, hexTex, hexCol);
	functioncall	$const96 2455 	%line{348} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:274
#     result.value += pow(tex, htx.powerTtoG) * weight;
	pow		$tmp1129 ___714_c $tmp1006.powerTtoG 	%line{274} %argrw{"wrr"}
	mul		$tmp1130 $tmp1129 ___716_w 	%argrw{"wrr"}
	add		___714_hexCol.value ___714_hexCol.value $tmp1130 	%argrw{"wrr"}
	assign		___714_hexCol.value ___714_hexCol.value 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:275
#     result.norm += weight * weight;
	mul		$tmp1131 ___716_w ___716_w 	%line{275} %argrw{"wrr"}
	add		___714_hexCol.norm ___714_hexCol.norm $tmp1131 	%argrw{"wrr"}
	assign		___714_hexCol.norm ___714_hexCol.norm 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:276
#     result.powerGtoT += htx.powerGtoT * weight;
	mul		$tmp1132 $tmp1006.powerGtoT ___716_w 	%line{276} %argrw{"wrr"}
	add		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT $tmp1132 	%argrw{"wrr"}
	assign		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	assign		$tmp1133 ___715_i 	%line{315} %argrw{"wr"}
	add		___715_i ___715_i $const3 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:350
#     if (blendingContrast > 0)
	gt		$tmp1134 blendingContrast $const2 	%line{350} %argrw{"wrr"}
	if		$tmp1134 2468 2468 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:351
#         cc = hexTileFinalColor(hexCol);
	functioncall	$const97 2468 	%line{351} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:284
#     float norm = 1.0 / sqrt(in.norm);
	sqrt		$tmp1135 ___714_hexCol.norm 	%line{284} %argrw{"wr"}
	div		___713_norm $const9 $tmp1135 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:285
#     color result = norm * (in.value - HEXT_GCENTER) + HEXT_GCENTER;
	sub		$tmp1137 ___714_hexCol.value $const81 	%line{285} %argrw{"wrr"}
	mul		$tmp1138 ___713_norm $tmp1137 	%argrw{"wrr"}
	add		___713_result $tmp1138 $const81 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:287
#     result = max(result, color(0.0));
	max		___713_result ___713_result $const40 	%line{287} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:290
#     result = pow(result, in.powerGtoT);
	pow		___713_result ___713_result ___714_hexCol.powerGtoT 	%line{290} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:291
#     return result;
	assign		___714_cc ___713_result 	%line{291} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:353
#     return mix(co, cc, blendingContrast);
	mix		$tmp1005 ___714_co ___714_cc blendingContrast 	%line{353} %argrw{"wrrr"}
# PxrMultiTexture.osl:752
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aassign		alphas ___773_g $tmp1008 	%filename{"PxrMultiTexture.osl"} %line{752} %argrw{"wrr"}
	aassign		grads ___773_g $tmp1009 	%argrw{"wrr"}
# PxrMultiTexture.osl:749
#                     colors[g] = hexTileLookup(filename1, txparams, linearize, mipBias,
	aassign		colors ___773_g $tmp1005 	%line{749} %argrw{"wrr"}
# PxrMultiTexture.osl:754
#                 else if (texId == 2)
	eq		$tmp1141 ___775_texId $const4 	%line{754} %argrw{"wrr"}
	if		$tmp1141 2785 4974 	%argrw{"r"}
# PxrMultiTexture.osl:759
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aref		$tmp1143.powerTtoG hexTex.powerTtoG ___773_g 	%line{759} %argrw{"wrr"}
	aref		$tmp1143.powerGtoT hexTex.powerGtoT ___773_g 	%argrw{"wrr"}
	aref		$tmp1144.s hexData.s ___773_g 	%argrw{"wrr"}
	aref		$tmp1144.t hexData.t ___773_g 	%argrw{"wrr"}
	aref		$tmp1144.w hexData.w ___773_g 	%argrw{"wrr"}
	aref		$tmp1144.r hexData.r ___773_g 	%argrw{"wrr"}
	aref		$tmp1145 alphas ___773_g 	%argrw{"wrr"}
	aref		$tmp1146 grads ___773_g 	%argrw{"wrr"}
# PxrMultiTexture.osl:756
#                     colors[g] = hexTileLookup(filename2, txparams, linearize, mipBias,
	functioncall	$const82 2782 	%line{756} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:310
#     HexTileColor hexCol = HEXTILECOLOR_ZERO;
	assign		___714_hexCol.value $const40 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{310} %argrw{"wr"}
	assign		___714_hexCol.norm $const44 	%argrw{"wr"}
	assign		___714_hexCol.powerGtoT $const40 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:311
#     color co = 0, cc = 0, c;
	assign		___714_co $const2 	%line{311} %argrw{"wr"}
	assign		___714_cc $const2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:313
#     ng = 0;
	assign		$tmp1146 $const2 	%line{313} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	for		$tmp1148 2491 2493 2768 2770 	%line{315} %argrw{"r"}
	assign		___715_i $const2 	%argrw{"wr"}
	lt		$tmp1147 ___715_i $const5 	%argrw{"wrr"}
	neq		$tmp1148 $tmp1147 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:317
#         float w = hexData.w[i];
	compref		___716_w $tmp1144.w ___715_i 	%line{317} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:318
#         if (w == 0.0)
	eq		$tmp1149 ___716_w $const44 	%line{318} %argrw{"wrr"}
	if		$tmp1149 2497 2497 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:319
#             continue;
	continue	%line{319}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:322
#         TxCoords txcoords = initTxCoords(hexData.s[i], hexData.t[i], 0);
	compref		$tmp1150 $tmp1144.s ___715_i 	%line{322} %argrw{"wrr"}
	compref		$tmp1151 $tmp1144.t ___715_i 	%argrw{"wrr"}
	functioncall	$const16 2521 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 2507 2508 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{100} %argrw{"r"}
	functioncall	$const17 2507 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp1152 $tmp1151 	%line{48} %argrw{"wr"}
	add		$tmp1153 $tmp1152 $const9 	%argrw{"wrr"}
	floor		$tmp1154 $tmp1151 	%argrw{"wr"}
	sub		$tmp1155 $tmp1151 $tmp1154 	%argrw{"wrr"}
	sub		___636__tt $tmp1153 $tmp1155 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt $tmp1151 	%line{100} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:101
#     TxCoords coords = { ss, _tt, Dx(ss), Dy(ss), Dx(_tt), Dy(_tt) };
	assign		___636_coords.s $tmp1150 	%line{101} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx $tmp1150 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy $tmp1150 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     return coords;
	assign		___716_txcoords.s ___636_coords.s 	%line{102} %argrw{"wr"}
	assign		___716_txcoords.t ___636_coords.t 	%argrw{"wr"}
	assign		___716_txcoords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___716_txcoords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___716_txcoords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___716_txcoords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:323
#         if (mipBias != 0 || maxResolution != 0)
	neq		$tmp1156 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{323} %argrw{"wrr"}
	neq		$tmp1157 $tmp1156 $const2 	%argrw{"wrr"}
	if		$tmp1157 2524 2527 	%argrw{"r"}
	neq		$tmp1158 maxResolution $const2 	%argrw{"wrr"}
	neq		$tmp1159 $tmp1158 $const2 	%argrw{"wrr"}
	assign		$tmp1157 $tmp1159 	%argrw{"wr"}
	if		$tmp1157 2584 2584 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:324
#             PxrTxMipControls(mipBias, maxResolution, txcoords, txparams);
	functioncall	$const83 2584 	%line{324} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:153
#     float bias = (mipBias != 0) ? pow(2.0, mipBias) : 1.0;
	neq		$tmp1160 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{153} %argrw{"wrr"}
	if		$tmp1160 2533 2534 	%argrw{"r"}
	assign		$tmp1161 mipBias 	%argrw{"wr"}
	pow		___645_bias $const68 $tmp1161 	%argrw{"wrr"}
	assign		___645_bias $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:154
#     bias *= params.width;
	mul		___645_bias ___645_bias txparams.width 	%line{154} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:155
#     if (maxResolution <= 0)
	le		$tmp1162 maxResolution $const2 	%line{155} %argrw{"wrr"}
	if		$tmp1162 2538 2584 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:157
#         params.width = bias;
	assign		txparams.width ___645_bias 	%line{157} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:163
#         float minRadius = (maxResolution > 0.0) ? 1.0 / maxResolution : 0.0;
	gt		$tmp1163 maxResolution $const44 	%line{163} %argrw{"wrr"}
	if		$tmp1163 2541 2542 	%argrw{"r"}
	div		___647_minRadius $const9 maxResolution 	%argrw{"wrr"}
	assign		___647_minRadius $const44 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:165
#         float dsdx = max(minRadius, abs(coords.dsdx * bias)) * sign(coords.dsdx);
	mul		$tmp1166 ___716_txcoords.dsdx ___645_bias 	%line{165} %argrw{"wrr"}
	abs		$tmp1165 $tmp1166 	%argrw{"wr"}
	max		$tmp1164 ___647_minRadius $tmp1165 	%argrw{"wrr"}
	sign		$tmp1167 ___716_txcoords.dsdx 	%argrw{"wr"}
	mul		___647_dsdx $tmp1164 $tmp1167 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:166
#         float dtdx = max(minRadius, abs(coords.dtdx * bias)) * sign(coords.dtdx);
	mul		$tmp1170 ___716_txcoords.dtdx ___645_bias 	%line{166} %argrw{"wrr"}
	abs		$tmp1169 $tmp1170 	%argrw{"wr"}
	max		$tmp1168 ___647_minRadius $tmp1169 	%argrw{"wrr"}
	sign		$tmp1171 ___716_txcoords.dtdx 	%argrw{"wr"}
	mul		___647_dtdx $tmp1168 $tmp1171 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:167
#         float dsdy = max(minRadius, abs(coords.dsdy * bias)) * sign(coords.dsdy);
	mul		$tmp1174 ___716_txcoords.dsdy ___645_bias 	%line{167} %argrw{"wrr"}
	abs		$tmp1173 $tmp1174 	%argrw{"wr"}
	max		$tmp1172 ___647_minRadius $tmp1173 	%argrw{"wrr"}
	sign		$tmp1175 ___716_txcoords.dsdy 	%argrw{"wr"}
	mul		___647_dsdy $tmp1172 $tmp1175 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:168
#         float dtdy = max(minRadius, abs(coords.dtdy * bias)) * sign(coords.dtdy);
	mul		$tmp1178 ___716_txcoords.dtdy ___645_bias 	%line{168} %argrw{"wrr"}
	abs		$tmp1177 $tmp1178 	%argrw{"wr"}
	max		$tmp1176 ___647_minRadius $tmp1177 	%argrw{"wrr"}
	sign		$tmp1179 ___716_txcoords.dtdy 	%argrw{"wr"}
	mul		___647_dtdy $tmp1176 $tmp1179 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:169
#         vector v0 = point(coords.dsdx, coords.dtdx, 0) - point(coords.dsdy, coords.dtdy, 0);
	point		$tmp1180 ___716_txcoords.dsdx ___716_txcoords.dtdx $const44 	%line{169} %argrw{"wrrr"}
	point		$tmp1181 ___716_txcoords.dsdy ___716_txcoords.dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v0 $tmp1180 $tmp1181 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:170
#         vector v1 = point(dsdx, dtdx, 0) - point(dsdy, dtdy, 0);
	point		$tmp1182 ___647_dsdx ___647_dtdx $const44 	%line{170} %argrw{"wrrr"}
	point		$tmp1183 ___647_dsdy ___647_dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v1 $tmp1182 $tmp1183 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:171
#         params.width = (v1.x*v1.x + v1.y*v1.y) / (v0.x*v0.x + v1.y*v1.y);
	compref		$tmp1184 ___647_v1 $const2 	%line{171} %argrw{"wrr"}
	compref		$tmp1185 ___647_v1 $const2 	%argrw{"wrr"}
	mul		$tmp1186 $tmp1184 $tmp1185 	%argrw{"wrr"}
	compref		$tmp1187 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp1188 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp1189 $tmp1187 $tmp1188 	%argrw{"wrr"}
	add		$tmp1190 $tmp1186 $tmp1189 	%argrw{"wrr"}
	compref		$tmp1191 ___647_v0 $const2 	%argrw{"wrr"}
	compref		$tmp1192 ___647_v0 $const2 	%argrw{"wrr"}
	mul		$tmp1193 $tmp1191 $tmp1192 	%argrw{"wrr"}
	compref		$tmp1194 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp1195 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp1196 $tmp1194 $tmp1195 	%argrw{"wrr"}
	add		$tmp1197 $tmp1193 $tmp1196 	%argrw{"wrr"}
	div		txparams.width $tmp1190 $tmp1197 	%argrw{"wrr"}
	assign		txparams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:325
#         c = PxrTextureLookup(filename, txcoords, txparams);
	functioncall	$const18 2614 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{325} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename2 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp1198 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp1198 2593 2593 	%argrw{"r"}
	assign		___714_c ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename2 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp1199 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp1199 2599 2599 	%argrw{"r"}
	neq		$tmp1200 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp1199 $tmp1200 	%argrw{"wr"}
	if		$tmp1199 2613 2613 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp1201 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp1202 $tmp1201 $const2 	%argrw{"wrr"}
	if		$tmp1202 2603 2606 	%argrw{"r"}
	eq		$tmp1203 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp1204 $tmp1203 $const2 	%argrw{"wrr"}
	assign		$tmp1202 $tmp1204 	%argrw{"wr"}
	if		$tmp1202 2613 2613 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp1205 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp1205 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp1206 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp1206 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp1207 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp1207 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		___714_c ___649_finalResult 	%line{217} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:326
#         if (nMap.enabled)
	if		nMap.enabled 2716 2716 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{326} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:329
#             GenBasisTB(Tn, Bn, float2(hexData.s[i], hexData.t[i]), N);
	compref		$tmp1208.x $tmp1144.s ___715_i 	%line{329} %argrw{"wrr"}
	compref		$tmp1208.y $tmp1144.t ___715_i 	%argrw{"wrr"}
	functioncall	$const84 2664 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:55
#     vector sigmaX = dPdu - dot(dPdu, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp1209 dPdu N 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{55} %argrw{"wrr"}
	mul		$tmp1210 $tmp1209 N 	%argrw{"wrr"}
	sub		___684_sigmaX dPdu $tmp1210 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:56
#     vector sigmaY = dPdv - dot(dPdv, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp1211 dPdv N 	%line{56} %argrw{"wrr"}
	mul		$tmp1212 $tmp1211 N 	%argrw{"wrr"}
	sub		___684_sigmaY dPdv $tmp1212 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:57
#     float flip_sign = dot(dPdv, cross(nrmBaseNormal, dPdu)) < 0.0 ? -1.0 : 1.0;
	cross		$tmp1214 N dPdu 	%line{57} %argrw{"wrr"}
	dot		$tmp1213 dPdv $tmp1214 	%argrw{"wrr"}
	lt		$tmp1215 $tmp1213 $const44 	%argrw{"wrr"}
	if		$tmp1215 2629 2630 	%argrw{"r"}
	assign		___684_flip_sign $const85 	%argrw{"wr"}
	assign		___684_flip_sign $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:59
#     float2 dSTdx = Dx(texST);
	functioncall	$const86 2633 	%line{59} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:167
#     return float2(Dx(a.x), Dx(a.y));
	Dx		___684_dSTdx.x $tmp1208.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{167} %argrw{"wr"} %argderivs{1}
	Dx		___684_dSTdx.y $tmp1208.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:60
#     float2 dSTdy = Dy(texST);
	functioncall	$const87 2636 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{60} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:172
#     return float2(Dy(a.x), Dy(a.y));
	Dy		___684_dSTdy.x $tmp1208.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{172} %argrw{"wr"} %argderivs{1}
	Dy		___684_dSTdy.y $tmp1208.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:61
#     float det = dot(dSTdx, float2(dSTdy.y, -dSTdy.x));
	assign		$tmp1216.x ___684_dSTdy.y 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{61} %argrw{"wr"}
	neg		$tmp1216.y ___684_dSTdy.x 	%argrw{"wr"}
	functioncall	$const88 2642 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:162
#     return a.x * b.x + a.y * b.y;
	mul		$tmp1217 ___684_dSTdx.x $tmp1216.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{162} %argrw{"wrr"}
	mul		$tmp1218 ___684_dSTdx.y $tmp1216.y 	%argrw{"wrr"}
	add		___684_det $tmp1217 $tmp1218 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:62
#     float sign_det = det < 0.0 ? -1.0 : 1.0;
	lt		$tmp1219 ___684_det $const44 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{62} %argrw{"wrr"}
	if		$tmp1219 2645 2646 	%argrw{"r"}
	assign		___684_sign_det $const85 	%argrw{"wr"}
	assign		___684_sign_det $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:66
#     float2 invC0 = sign_det * float2(dSTdy.y, -dSTdx.y);
	assign		$tmp1220.x ___684_dSTdy.y 	%line{66} %argrw{"wr"}
	neg		$tmp1220.y ___684_dSTdx.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 2654 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:130
#     return b * float2(a, a);
	assign		$tmp1221.x ___684_sign_det 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{130} %argrw{"wr"}
	assign		$tmp1221.y ___684_sign_det 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 2654 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		___684_invC0.x $tmp1220.x $tmp1221.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		___684_invC0.y $tmp1220.y $tmp1221.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:67
#     vT = sigmaX * invC0.x + sigmaY * invC0.y;
	mul		$tmp1222 ___684_sigmaX ___684_invC0.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{67} %argrw{"wrr"}
	mul		$tmp1223 ___684_sigmaY ___684_invC0.y 	%argrw{"wrr"}
	add		___717_Tn $tmp1222 $tmp1223 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:68
#     if (abs(det) > 0.0) vT = normalize(vT);
	abs		$tmp1224 ___684_det 	%line{68} %argrw{"wr"}
	gt		$tmp1225 $tmp1224 $const44 	%argrw{"wrr"}
	if		$tmp1225 2661 2661 	%argrw{"r"}
	normalize	___717_Tn ___717_Tn 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:69
#     vB = (sign_det * flip_sign) * cross(nrmBaseNormal, vT);
	mul		$tmp1226 ___684_sign_det ___684_flip_sign 	%line{69} %argrw{"wrr"}
	cross		$tmp1227 N ___717_Tn 	%argrw{"wrr"}
	mul		___717_Bn $tmp1226 $tmp1227 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:330
#             setupNormalMapHex(nMap, c);
	functioncall	$const90 2683 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{330} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:171
#     color tsNormal = nmap * 2.0 - 1.0;
	mul		$tmp1228 ___714_c $const68 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{171} %argrw{"wrr"}
	sub		___694_tsNormal $tmp1228 $const9 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:173
#     if (nmp.orientation == k_opengl)
	eq		$tmp1229 nMap.orientation $const2 	%line{173} %argrw{"wrr"}
	if		$tmp1229 2669 2682 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:177
#     else if (nmp.orientation == k_directx)
	eq		$tmp1230 nMap.orientation $const3 	%line{177} %argrw{"wrr"}
	if		$tmp1230 2674 2682 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:179
#         tsNormal[1] = -tsNormal[1];
	compref		$tmp1231 ___694_tsNormal $const3 	%line{179} %argrw{"wrr"}
	neg		$tmp1232 $tmp1231 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp1232 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:183
#         if (nmp.flipX)
	if		nMap.flipX 2678 2678 	%line{183} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:184
#             tsNormal[0] = -tsNormal[0];
	compref		$tmp1233 ___694_tsNormal $const2 	%line{184} %argrw{"wrr"}
	neg		$tmp1234 $tmp1233 	%argrw{"wr"}
	compassign	___694_tsNormal $const2 $tmp1234 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:185
#         if (nmp.flipY)
	if		nMap.flipY 2682 2682 	%line{185} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:186
#             tsNormal[1] = -tsNormal[1];
	compref		$tmp1235 ___694_tsNormal $const3 	%line{186} %argrw{"wrr"}
	neg		$tmp1236 $tmp1235 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp1236 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:188
#     nmap = tsNormal;
	assign		___714_c ___694_tsNormal 	%line{188} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const91 2710 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:76
# 	float scale = 1.0 / 128.0;
	div		___685_scale $const9 $const92 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{76} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:80
# 	color vMa = abs(vM);
	abs		___685_vMa ___714_c 	%line{80} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:81
# 	float z_ma = max(vMa[2], scale * max(vMa[0], vMa[1]));
	compref		$tmp1239 ___685_vMa $const4 	%line{81} %argrw{"wrr"}
	compref		$tmp1241 ___685_vMa $const2 	%argrw{"wrr"}
	compref		$tmp1242 ___685_vMa $const3 	%argrw{"wrr"}
	max		$tmp1240 $tmp1241 $tmp1242 	%argrw{"wrr"}
	mul		$tmp1243 ___685_scale $tmp1240 	%argrw{"wrr"}
	max		___685_z_ma $tmp1239 $tmp1243 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:84
# 	int gFlipVertDeriv = 1;
	assign		___685_gFlipVertDeriv $const3 	%line{84} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:85
# 	float s = gFlipVertDeriv ? -1.0 : 1.0;
	if		___685_gFlipVertDeriv 2695 2696 	%line{85} %argrw{"r"}
	assign		___685_s $const85 	%argrw{"wr"}
	assign		___685_s $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	compref		$tmp1245.x ___714_c $const2 	%line{86} %argrw{"wrr"}
	compref		$tmp1246 ___714_c $const3 	%argrw{"wrr"}
	mul		$tmp1245.y ___685_s $tmp1246 	%argrw{"wrr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const93 2702 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:55
#     return float2(-a.x, -a.y);
	neg		$tmp1244.x $tmp1245.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{55} %argrw{"wr"}
	neg		$tmp1244.y $tmp1245.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const94 2709 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:146
#     float b_inv = 1.0/b;
	div		___678_b_inv $const9 ___685_z_ma 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{146} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:147
#     return a * float2(b_inv, b_inv);
	assign		$tmp1247.x ___678_b_inv 	%line{147} %argrw{"wr"}
	assign		$tmp1247.y ___678_b_inv 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 2709 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		$tmp1238.x $tmp1244.x $tmp1247.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		$tmp1238.y $tmp1244.y $tmp1247.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	return	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{86}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const95 2714 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:92
#     return deriv.x * vT + deriv.y * vB;
	mul		$tmp1248 $tmp1238.x ___717_Tn 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{92} %argrw{"wrr"}
	mul		$tmp1249 $tmp1238.y ___717_Bn 	%argrw{"wrr"}
	add		$tmp1237 $tmp1248 $tmp1249 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	mul		$tmp1250 $tmp1237 ___716_w 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"wrr"}
	add		$tmp1146 $tmp1146 $tmp1250 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:333
#         if (linearize) PxrLinearizeSRGB(c);
	if		linearize 2740 2740 	%line{333} %argrw{"r"}
	functioncall	$const25 2740 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 2723 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp1252 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp1253 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp1251 $tmp1253 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp1251 2740 2740 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp1255 2726 2728 2739 2740 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp1254 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp1255 $tmp1254 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp1256 ___714_c ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp1257 $tmp1256 $const29 	%argrw{"wrr"}
	if		$tmp1257 2734 2739 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp1258 ___714_c ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp1259 $tmp1258 $const30 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp1259 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp1261 ___714_c ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp1262 $tmp1261 $const31 	%argrw{"wrr"}
	mul		$tmp1263 $tmp1262 $const32 	%argrw{"wrr"}
	pow		$tmp1260 $tmp1263 $const33 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp1260 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:335
#         if (needAlpha)
	if		needAlpha 2753 2753 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{335} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:337
#             TxParams alphaParams = txparams;
	assign		___718_alphaParams.firstchannel txparams.firstchannel 	%line{337} %argrw{"wr"}
	assign		___718_alphaParams.blur txparams.blur 	%argrw{"wr"}
	assign		___718_alphaParams.missingcolor txparams.missingcolor 	%argrw{"wr"}
	assign		___718_alphaParams.missingalpha txparams.missingalpha 	%argrw{"wr"}
	assign		___718_alphaParams.interp txparams.interp 	%argrw{"wr"}
	assign		___718_alphaParams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:338
#             alphaParams.firstchannel += 3;    // XXX: Assume RGBA
	add		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel $const5 	%line{338} %argrw{"wrr"}
	assign		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:339
#             a = PxrTextureLookup(filename, txcoords, alphaParams);
	functioncall	$const18 2752 	%line{339} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha ___718_alphaParams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		___714_a filename2 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 ___718_alphaParams.firstchannel $const20 ___718_alphaParams.blur $const21 ___652_missingalpha $const22 ___718_alphaParams.interp $const23 ___718_alphaParams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:342
#             alpha = mix(alpha, 1, a);
	mix		$tmp1145 $tmp1145 $const9 ___714_a 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{342} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:346
#         co += c * w;
	mul		$tmp1264 ___714_c ___716_w 	%line{346} %argrw{"wrr"}
	add		___714_co ___714_co $tmp1264 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:347
#         if (blendingContrast > 0)
	gt		$tmp1265 blendingContrast $const2 	%line{347} %argrw{"wrr"}
	if		$tmp1265 2768 2768 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:348
#             hexTileAccumulate(c, w, hexTex, hexCol);
	functioncall	$const96 2768 	%line{348} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:274
#     result.value += pow(tex, htx.powerTtoG) * weight;
	pow		$tmp1266 ___714_c $tmp1143.powerTtoG 	%line{274} %argrw{"wrr"}
	mul		$tmp1267 $tmp1266 ___716_w 	%argrw{"wrr"}
	add		___714_hexCol.value ___714_hexCol.value $tmp1267 	%argrw{"wrr"}
	assign		___714_hexCol.value ___714_hexCol.value 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:275
#     result.norm += weight * weight;
	mul		$tmp1268 ___716_w ___716_w 	%line{275} %argrw{"wrr"}
	add		___714_hexCol.norm ___714_hexCol.norm $tmp1268 	%argrw{"wrr"}
	assign		___714_hexCol.norm ___714_hexCol.norm 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:276
#     result.powerGtoT += htx.powerGtoT * weight;
	mul		$tmp1269 $tmp1143.powerGtoT ___716_w 	%line{276} %argrw{"wrr"}
	add		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT $tmp1269 	%argrw{"wrr"}
	assign		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	assign		$tmp1270 ___715_i 	%line{315} %argrw{"wr"}
	add		___715_i ___715_i $const3 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:350
#     if (blendingContrast > 0)
	gt		$tmp1271 blendingContrast $const2 	%line{350} %argrw{"wrr"}
	if		$tmp1271 2781 2781 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:351
#         cc = hexTileFinalColor(hexCol);
	functioncall	$const97 2781 	%line{351} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:284
#     float norm = 1.0 / sqrt(in.norm);
	sqrt		$tmp1272 ___714_hexCol.norm 	%line{284} %argrw{"wr"}
	div		___713_norm $const9 $tmp1272 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:285
#     color result = norm * (in.value - HEXT_GCENTER) + HEXT_GCENTER;
	sub		$tmp1274 ___714_hexCol.value $const81 	%line{285} %argrw{"wrr"}
	mul		$tmp1275 ___713_norm $tmp1274 	%argrw{"wrr"}
	add		___713_result $tmp1275 $const81 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:287
#     result = max(result, color(0.0));
	max		___713_result ___713_result $const40 	%line{287} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:290
#     result = pow(result, in.powerGtoT);
	pow		___713_result ___713_result ___714_hexCol.powerGtoT 	%line{290} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:291
#     return result;
	assign		___714_cc ___713_result 	%line{291} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:353
#     return mix(co, cc, blendingContrast);
	mix		$tmp1142 ___714_co ___714_cc blendingContrast 	%line{353} %argrw{"wrrr"}
# PxrMultiTexture.osl:759
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aassign		alphas ___773_g $tmp1145 	%filename{"PxrMultiTexture.osl"} %line{759} %argrw{"wrr"}
	aassign		grads ___773_g $tmp1146 	%argrw{"wrr"}
# PxrMultiTexture.osl:756
#                     colors[g] = hexTileLookup(filename2, txparams, linearize, mipBias,
	aassign		colors ___773_g $tmp1142 	%line{756} %argrw{"wrr"}
# PxrMultiTexture.osl:761
#                 else if (texId == 3)
	eq		$tmp1278 ___775_texId $const5 	%line{761} %argrw{"wrr"}
	if		$tmp1278 3098 4974 	%argrw{"r"}
# PxrMultiTexture.osl:766
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aref		$tmp1280.powerTtoG hexTex.powerTtoG ___773_g 	%line{766} %argrw{"wrr"}
	aref		$tmp1280.powerGtoT hexTex.powerGtoT ___773_g 	%argrw{"wrr"}
	aref		$tmp1281.s hexData.s ___773_g 	%argrw{"wrr"}
	aref		$tmp1281.t hexData.t ___773_g 	%argrw{"wrr"}
	aref		$tmp1281.w hexData.w ___773_g 	%argrw{"wrr"}
	aref		$tmp1281.r hexData.r ___773_g 	%argrw{"wrr"}
	aref		$tmp1282 alphas ___773_g 	%argrw{"wrr"}
	aref		$tmp1283 grads ___773_g 	%argrw{"wrr"}
# PxrMultiTexture.osl:763
#                     colors[g] = hexTileLookup(filename3, txparams, linearize, mipBias,
	functioncall	$const82 3095 	%line{763} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:310
#     HexTileColor hexCol = HEXTILECOLOR_ZERO;
	assign		___714_hexCol.value $const40 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{310} %argrw{"wr"}
	assign		___714_hexCol.norm $const44 	%argrw{"wr"}
	assign		___714_hexCol.powerGtoT $const40 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:311
#     color co = 0, cc = 0, c;
	assign		___714_co $const2 	%line{311} %argrw{"wr"}
	assign		___714_cc $const2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:313
#     ng = 0;
	assign		$tmp1283 $const2 	%line{313} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	for		$tmp1285 2804 2806 3081 3083 	%line{315} %argrw{"r"}
	assign		___715_i $const2 	%argrw{"wr"}
	lt		$tmp1284 ___715_i $const5 	%argrw{"wrr"}
	neq		$tmp1285 $tmp1284 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:317
#         float w = hexData.w[i];
	compref		___716_w $tmp1281.w ___715_i 	%line{317} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:318
#         if (w == 0.0)
	eq		$tmp1286 ___716_w $const44 	%line{318} %argrw{"wrr"}
	if		$tmp1286 2810 2810 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:319
#             continue;
	continue	%line{319}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:322
#         TxCoords txcoords = initTxCoords(hexData.s[i], hexData.t[i], 0);
	compref		$tmp1287 $tmp1281.s ___715_i 	%line{322} %argrw{"wrr"}
	compref		$tmp1288 $tmp1281.t ___715_i 	%argrw{"wrr"}
	functioncall	$const16 2834 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 2820 2821 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{100} %argrw{"r"}
	functioncall	$const17 2820 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp1289 $tmp1288 	%line{48} %argrw{"wr"}
	add		$tmp1290 $tmp1289 $const9 	%argrw{"wrr"}
	floor		$tmp1291 $tmp1288 	%argrw{"wr"}
	sub		$tmp1292 $tmp1288 $tmp1291 	%argrw{"wrr"}
	sub		___636__tt $tmp1290 $tmp1292 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt $tmp1288 	%line{100} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:101
#     TxCoords coords = { ss, _tt, Dx(ss), Dy(ss), Dx(_tt), Dy(_tt) };
	assign		___636_coords.s $tmp1287 	%line{101} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx $tmp1287 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy $tmp1287 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     return coords;
	assign		___716_txcoords.s ___636_coords.s 	%line{102} %argrw{"wr"}
	assign		___716_txcoords.t ___636_coords.t 	%argrw{"wr"}
	assign		___716_txcoords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___716_txcoords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___716_txcoords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___716_txcoords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:323
#         if (mipBias != 0 || maxResolution != 0)
	neq		$tmp1293 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{323} %argrw{"wrr"}
	neq		$tmp1294 $tmp1293 $const2 	%argrw{"wrr"}
	if		$tmp1294 2837 2840 	%argrw{"r"}
	neq		$tmp1295 maxResolution $const2 	%argrw{"wrr"}
	neq		$tmp1296 $tmp1295 $const2 	%argrw{"wrr"}
	assign		$tmp1294 $tmp1296 	%argrw{"wr"}
	if		$tmp1294 2897 2897 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:324
#             PxrTxMipControls(mipBias, maxResolution, txcoords, txparams);
	functioncall	$const83 2897 	%line{324} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:153
#     float bias = (mipBias != 0) ? pow(2.0, mipBias) : 1.0;
	neq		$tmp1297 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{153} %argrw{"wrr"}
	if		$tmp1297 2846 2847 	%argrw{"r"}
	assign		$tmp1298 mipBias 	%argrw{"wr"}
	pow		___645_bias $const68 $tmp1298 	%argrw{"wrr"}
	assign		___645_bias $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:154
#     bias *= params.width;
	mul		___645_bias ___645_bias txparams.width 	%line{154} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:155
#     if (maxResolution <= 0)
	le		$tmp1299 maxResolution $const2 	%line{155} %argrw{"wrr"}
	if		$tmp1299 2851 2897 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:157
#         params.width = bias;
	assign		txparams.width ___645_bias 	%line{157} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:163
#         float minRadius = (maxResolution > 0.0) ? 1.0 / maxResolution : 0.0;
	gt		$tmp1300 maxResolution $const44 	%line{163} %argrw{"wrr"}
	if		$tmp1300 2854 2855 	%argrw{"r"}
	div		___647_minRadius $const9 maxResolution 	%argrw{"wrr"}
	assign		___647_minRadius $const44 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:165
#         float dsdx = max(minRadius, abs(coords.dsdx * bias)) * sign(coords.dsdx);
	mul		$tmp1303 ___716_txcoords.dsdx ___645_bias 	%line{165} %argrw{"wrr"}
	abs		$tmp1302 $tmp1303 	%argrw{"wr"}
	max		$tmp1301 ___647_minRadius $tmp1302 	%argrw{"wrr"}
	sign		$tmp1304 ___716_txcoords.dsdx 	%argrw{"wr"}
	mul		___647_dsdx $tmp1301 $tmp1304 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:166
#         float dtdx = max(minRadius, abs(coords.dtdx * bias)) * sign(coords.dtdx);
	mul		$tmp1307 ___716_txcoords.dtdx ___645_bias 	%line{166} %argrw{"wrr"}
	abs		$tmp1306 $tmp1307 	%argrw{"wr"}
	max		$tmp1305 ___647_minRadius $tmp1306 	%argrw{"wrr"}
	sign		$tmp1308 ___716_txcoords.dtdx 	%argrw{"wr"}
	mul		___647_dtdx $tmp1305 $tmp1308 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:167
#         float dsdy = max(minRadius, abs(coords.dsdy * bias)) * sign(coords.dsdy);
	mul		$tmp1311 ___716_txcoords.dsdy ___645_bias 	%line{167} %argrw{"wrr"}
	abs		$tmp1310 $tmp1311 	%argrw{"wr"}
	max		$tmp1309 ___647_minRadius $tmp1310 	%argrw{"wrr"}
	sign		$tmp1312 ___716_txcoords.dsdy 	%argrw{"wr"}
	mul		___647_dsdy $tmp1309 $tmp1312 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:168
#         float dtdy = max(minRadius, abs(coords.dtdy * bias)) * sign(coords.dtdy);
	mul		$tmp1315 ___716_txcoords.dtdy ___645_bias 	%line{168} %argrw{"wrr"}
	abs		$tmp1314 $tmp1315 	%argrw{"wr"}
	max		$tmp1313 ___647_minRadius $tmp1314 	%argrw{"wrr"}
	sign		$tmp1316 ___716_txcoords.dtdy 	%argrw{"wr"}
	mul		___647_dtdy $tmp1313 $tmp1316 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:169
#         vector v0 = point(coords.dsdx, coords.dtdx, 0) - point(coords.dsdy, coords.dtdy, 0);
	point		$tmp1317 ___716_txcoords.dsdx ___716_txcoords.dtdx $const44 	%line{169} %argrw{"wrrr"}
	point		$tmp1318 ___716_txcoords.dsdy ___716_txcoords.dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v0 $tmp1317 $tmp1318 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:170
#         vector v1 = point(dsdx, dtdx, 0) - point(dsdy, dtdy, 0);
	point		$tmp1319 ___647_dsdx ___647_dtdx $const44 	%line{170} %argrw{"wrrr"}
	point		$tmp1320 ___647_dsdy ___647_dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v1 $tmp1319 $tmp1320 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:171
#         params.width = (v1.x*v1.x + v1.y*v1.y) / (v0.x*v0.x + v1.y*v1.y);
	compref		$tmp1321 ___647_v1 $const2 	%line{171} %argrw{"wrr"}
	compref		$tmp1322 ___647_v1 $const2 	%argrw{"wrr"}
	mul		$tmp1323 $tmp1321 $tmp1322 	%argrw{"wrr"}
	compref		$tmp1324 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp1325 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp1326 $tmp1324 $tmp1325 	%argrw{"wrr"}
	add		$tmp1327 $tmp1323 $tmp1326 	%argrw{"wrr"}
	compref		$tmp1328 ___647_v0 $const2 	%argrw{"wrr"}
	compref		$tmp1329 ___647_v0 $const2 	%argrw{"wrr"}
	mul		$tmp1330 $tmp1328 $tmp1329 	%argrw{"wrr"}
	compref		$tmp1331 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp1332 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp1333 $tmp1331 $tmp1332 	%argrw{"wrr"}
	add		$tmp1334 $tmp1330 $tmp1333 	%argrw{"wrr"}
	div		txparams.width $tmp1327 $tmp1334 	%argrw{"wrr"}
	assign		txparams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:325
#         c = PxrTextureLookup(filename, txcoords, txparams);
	functioncall	$const18 2927 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{325} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename3 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp1335 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp1335 2906 2906 	%argrw{"r"}
	assign		___714_c ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename3 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp1336 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp1336 2912 2912 	%argrw{"r"}
	neq		$tmp1337 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp1336 $tmp1337 	%argrw{"wr"}
	if		$tmp1336 2926 2926 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp1338 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp1339 $tmp1338 $const2 	%argrw{"wrr"}
	if		$tmp1339 2916 2919 	%argrw{"r"}
	eq		$tmp1340 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp1341 $tmp1340 $const2 	%argrw{"wrr"}
	assign		$tmp1339 $tmp1341 	%argrw{"wr"}
	if		$tmp1339 2926 2926 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp1342 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp1342 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp1343 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp1343 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp1344 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp1344 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		___714_c ___649_finalResult 	%line{217} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:326
#         if (nMap.enabled)
	if		nMap.enabled 3029 3029 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{326} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:329
#             GenBasisTB(Tn, Bn, float2(hexData.s[i], hexData.t[i]), N);
	compref		$tmp1345.x $tmp1281.s ___715_i 	%line{329} %argrw{"wrr"}
	compref		$tmp1345.y $tmp1281.t ___715_i 	%argrw{"wrr"}
	functioncall	$const84 2977 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:55
#     vector sigmaX = dPdu - dot(dPdu, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp1346 dPdu N 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{55} %argrw{"wrr"}
	mul		$tmp1347 $tmp1346 N 	%argrw{"wrr"}
	sub		___684_sigmaX dPdu $tmp1347 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:56
#     vector sigmaY = dPdv - dot(dPdv, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp1348 dPdv N 	%line{56} %argrw{"wrr"}
	mul		$tmp1349 $tmp1348 N 	%argrw{"wrr"}
	sub		___684_sigmaY dPdv $tmp1349 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:57
#     float flip_sign = dot(dPdv, cross(nrmBaseNormal, dPdu)) < 0.0 ? -1.0 : 1.0;
	cross		$tmp1351 N dPdu 	%line{57} %argrw{"wrr"}
	dot		$tmp1350 dPdv $tmp1351 	%argrw{"wrr"}
	lt		$tmp1352 $tmp1350 $const44 	%argrw{"wrr"}
	if		$tmp1352 2942 2943 	%argrw{"r"}
	assign		___684_flip_sign $const85 	%argrw{"wr"}
	assign		___684_flip_sign $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:59
#     float2 dSTdx = Dx(texST);
	functioncall	$const86 2946 	%line{59} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:167
#     return float2(Dx(a.x), Dx(a.y));
	Dx		___684_dSTdx.x $tmp1345.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{167} %argrw{"wr"} %argderivs{1}
	Dx		___684_dSTdx.y $tmp1345.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:60
#     float2 dSTdy = Dy(texST);
	functioncall	$const87 2949 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{60} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:172
#     return float2(Dy(a.x), Dy(a.y));
	Dy		___684_dSTdy.x $tmp1345.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{172} %argrw{"wr"} %argderivs{1}
	Dy		___684_dSTdy.y $tmp1345.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:61
#     float det = dot(dSTdx, float2(dSTdy.y, -dSTdy.x));
	assign		$tmp1353.x ___684_dSTdy.y 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{61} %argrw{"wr"}
	neg		$tmp1353.y ___684_dSTdy.x 	%argrw{"wr"}
	functioncall	$const88 2955 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:162
#     return a.x * b.x + a.y * b.y;
	mul		$tmp1354 ___684_dSTdx.x $tmp1353.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{162} %argrw{"wrr"}
	mul		$tmp1355 ___684_dSTdx.y $tmp1353.y 	%argrw{"wrr"}
	add		___684_det $tmp1354 $tmp1355 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:62
#     float sign_det = det < 0.0 ? -1.0 : 1.0;
	lt		$tmp1356 ___684_det $const44 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{62} %argrw{"wrr"}
	if		$tmp1356 2958 2959 	%argrw{"r"}
	assign		___684_sign_det $const85 	%argrw{"wr"}
	assign		___684_sign_det $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:66
#     float2 invC0 = sign_det * float2(dSTdy.y, -dSTdx.y);
	assign		$tmp1357.x ___684_dSTdy.y 	%line{66} %argrw{"wr"}
	neg		$tmp1357.y ___684_dSTdx.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 2967 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:130
#     return b * float2(a, a);
	assign		$tmp1358.x ___684_sign_det 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{130} %argrw{"wr"}
	assign		$tmp1358.y ___684_sign_det 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 2967 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		___684_invC0.x $tmp1357.x $tmp1358.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		___684_invC0.y $tmp1357.y $tmp1358.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:67
#     vT = sigmaX * invC0.x + sigmaY * invC0.y;
	mul		$tmp1359 ___684_sigmaX ___684_invC0.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{67} %argrw{"wrr"}
	mul		$tmp1360 ___684_sigmaY ___684_invC0.y 	%argrw{"wrr"}
	add		___717_Tn $tmp1359 $tmp1360 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:68
#     if (abs(det) > 0.0) vT = normalize(vT);
	abs		$tmp1361 ___684_det 	%line{68} %argrw{"wr"}
	gt		$tmp1362 $tmp1361 $const44 	%argrw{"wrr"}
	if		$tmp1362 2974 2974 	%argrw{"r"}
	normalize	___717_Tn ___717_Tn 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:69
#     vB = (sign_det * flip_sign) * cross(nrmBaseNormal, vT);
	mul		$tmp1363 ___684_sign_det ___684_flip_sign 	%line{69} %argrw{"wrr"}
	cross		$tmp1364 N ___717_Tn 	%argrw{"wrr"}
	mul		___717_Bn $tmp1363 $tmp1364 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:330
#             setupNormalMapHex(nMap, c);
	functioncall	$const90 2996 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{330} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:171
#     color tsNormal = nmap * 2.0 - 1.0;
	mul		$tmp1365 ___714_c $const68 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{171} %argrw{"wrr"}
	sub		___694_tsNormal $tmp1365 $const9 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:173
#     if (nmp.orientation == k_opengl)
	eq		$tmp1366 nMap.orientation $const2 	%line{173} %argrw{"wrr"}
	if		$tmp1366 2982 2995 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:177
#     else if (nmp.orientation == k_directx)
	eq		$tmp1367 nMap.orientation $const3 	%line{177} %argrw{"wrr"}
	if		$tmp1367 2987 2995 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:179
#         tsNormal[1] = -tsNormal[1];
	compref		$tmp1368 ___694_tsNormal $const3 	%line{179} %argrw{"wrr"}
	neg		$tmp1369 $tmp1368 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp1369 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:183
#         if (nmp.flipX)
	if		nMap.flipX 2991 2991 	%line{183} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:184
#             tsNormal[0] = -tsNormal[0];
	compref		$tmp1370 ___694_tsNormal $const2 	%line{184} %argrw{"wrr"}
	neg		$tmp1371 $tmp1370 	%argrw{"wr"}
	compassign	___694_tsNormal $const2 $tmp1371 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:185
#         if (nmp.flipY)
	if		nMap.flipY 2995 2995 	%line{185} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:186
#             tsNormal[1] = -tsNormal[1];
	compref		$tmp1372 ___694_tsNormal $const3 	%line{186} %argrw{"wrr"}
	neg		$tmp1373 $tmp1372 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp1373 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:188
#     nmap = tsNormal;
	assign		___714_c ___694_tsNormal 	%line{188} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const91 3023 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:76
# 	float scale = 1.0 / 128.0;
	div		___685_scale $const9 $const92 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{76} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:80
# 	color vMa = abs(vM);
	abs		___685_vMa ___714_c 	%line{80} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:81
# 	float z_ma = max(vMa[2], scale * max(vMa[0], vMa[1]));
	compref		$tmp1376 ___685_vMa $const4 	%line{81} %argrw{"wrr"}
	compref		$tmp1378 ___685_vMa $const2 	%argrw{"wrr"}
	compref		$tmp1379 ___685_vMa $const3 	%argrw{"wrr"}
	max		$tmp1377 $tmp1378 $tmp1379 	%argrw{"wrr"}
	mul		$tmp1380 ___685_scale $tmp1377 	%argrw{"wrr"}
	max		___685_z_ma $tmp1376 $tmp1380 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:84
# 	int gFlipVertDeriv = 1;
	assign		___685_gFlipVertDeriv $const3 	%line{84} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:85
# 	float s = gFlipVertDeriv ? -1.0 : 1.0;
	if		___685_gFlipVertDeriv 3008 3009 	%line{85} %argrw{"r"}
	assign		___685_s $const85 	%argrw{"wr"}
	assign		___685_s $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	compref		$tmp1382.x ___714_c $const2 	%line{86} %argrw{"wrr"}
	compref		$tmp1383 ___714_c $const3 	%argrw{"wrr"}
	mul		$tmp1382.y ___685_s $tmp1383 	%argrw{"wrr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const93 3015 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:55
#     return float2(-a.x, -a.y);
	neg		$tmp1381.x $tmp1382.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{55} %argrw{"wr"}
	neg		$tmp1381.y $tmp1382.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const94 3022 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:146
#     float b_inv = 1.0/b;
	div		___678_b_inv $const9 ___685_z_ma 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{146} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:147
#     return a * float2(b_inv, b_inv);
	assign		$tmp1384.x ___678_b_inv 	%line{147} %argrw{"wr"}
	assign		$tmp1384.y ___678_b_inv 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 3022 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		$tmp1375.x $tmp1381.x $tmp1384.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		$tmp1375.y $tmp1381.y $tmp1384.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	return	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{86}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const95 3027 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:92
#     return deriv.x * vT + deriv.y * vB;
	mul		$tmp1385 $tmp1375.x ___717_Tn 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{92} %argrw{"wrr"}
	mul		$tmp1386 $tmp1375.y ___717_Bn 	%argrw{"wrr"}
	add		$tmp1374 $tmp1385 $tmp1386 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	mul		$tmp1387 $tmp1374 ___716_w 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"wrr"}
	add		$tmp1283 $tmp1283 $tmp1387 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:333
#         if (linearize) PxrLinearizeSRGB(c);
	if		linearize 3053 3053 	%line{333} %argrw{"r"}
	functioncall	$const25 3053 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 3036 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp1389 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp1390 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp1388 $tmp1390 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp1388 3053 3053 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp1392 3039 3041 3052 3053 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp1391 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp1392 $tmp1391 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp1393 ___714_c ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp1394 $tmp1393 $const29 	%argrw{"wrr"}
	if		$tmp1394 3047 3052 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp1395 ___714_c ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp1396 $tmp1395 $const30 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp1396 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp1398 ___714_c ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp1399 $tmp1398 $const31 	%argrw{"wrr"}
	mul		$tmp1400 $tmp1399 $const32 	%argrw{"wrr"}
	pow		$tmp1397 $tmp1400 $const33 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp1397 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:335
#         if (needAlpha)
	if		needAlpha 3066 3066 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{335} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:337
#             TxParams alphaParams = txparams;
	assign		___718_alphaParams.firstchannel txparams.firstchannel 	%line{337} %argrw{"wr"}
	assign		___718_alphaParams.blur txparams.blur 	%argrw{"wr"}
	assign		___718_alphaParams.missingcolor txparams.missingcolor 	%argrw{"wr"}
	assign		___718_alphaParams.missingalpha txparams.missingalpha 	%argrw{"wr"}
	assign		___718_alphaParams.interp txparams.interp 	%argrw{"wr"}
	assign		___718_alphaParams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:338
#             alphaParams.firstchannel += 3;    // XXX: Assume RGBA
	add		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel $const5 	%line{338} %argrw{"wrr"}
	assign		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:339
#             a = PxrTextureLookup(filename, txcoords, alphaParams);
	functioncall	$const18 3065 	%line{339} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha ___718_alphaParams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		___714_a filename3 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 ___718_alphaParams.firstchannel $const20 ___718_alphaParams.blur $const21 ___652_missingalpha $const22 ___718_alphaParams.interp $const23 ___718_alphaParams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:342
#             alpha = mix(alpha, 1, a);
	mix		$tmp1282 $tmp1282 $const9 ___714_a 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{342} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:346
#         co += c * w;
	mul		$tmp1401 ___714_c ___716_w 	%line{346} %argrw{"wrr"}
	add		___714_co ___714_co $tmp1401 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:347
#         if (blendingContrast > 0)
	gt		$tmp1402 blendingContrast $const2 	%line{347} %argrw{"wrr"}
	if		$tmp1402 3081 3081 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:348
#             hexTileAccumulate(c, w, hexTex, hexCol);
	functioncall	$const96 3081 	%line{348} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:274
#     result.value += pow(tex, htx.powerTtoG) * weight;
	pow		$tmp1403 ___714_c $tmp1280.powerTtoG 	%line{274} %argrw{"wrr"}
	mul		$tmp1404 $tmp1403 ___716_w 	%argrw{"wrr"}
	add		___714_hexCol.value ___714_hexCol.value $tmp1404 	%argrw{"wrr"}
	assign		___714_hexCol.value ___714_hexCol.value 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:275
#     result.norm += weight * weight;
	mul		$tmp1405 ___716_w ___716_w 	%line{275} %argrw{"wrr"}
	add		___714_hexCol.norm ___714_hexCol.norm $tmp1405 	%argrw{"wrr"}
	assign		___714_hexCol.norm ___714_hexCol.norm 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:276
#     result.powerGtoT += htx.powerGtoT * weight;
	mul		$tmp1406 $tmp1280.powerGtoT ___716_w 	%line{276} %argrw{"wrr"}
	add		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT $tmp1406 	%argrw{"wrr"}
	assign		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	assign		$tmp1407 ___715_i 	%line{315} %argrw{"wr"}
	add		___715_i ___715_i $const3 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:350
#     if (blendingContrast > 0)
	gt		$tmp1408 blendingContrast $const2 	%line{350} %argrw{"wrr"}
	if		$tmp1408 3094 3094 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:351
#         cc = hexTileFinalColor(hexCol);
	functioncall	$const97 3094 	%line{351} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:284
#     float norm = 1.0 / sqrt(in.norm);
	sqrt		$tmp1409 ___714_hexCol.norm 	%line{284} %argrw{"wr"}
	div		___713_norm $const9 $tmp1409 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:285
#     color result = norm * (in.value - HEXT_GCENTER) + HEXT_GCENTER;
	sub		$tmp1411 ___714_hexCol.value $const81 	%line{285} %argrw{"wrr"}
	mul		$tmp1412 ___713_norm $tmp1411 	%argrw{"wrr"}
	add		___713_result $tmp1412 $const81 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:287
#     result = max(result, color(0.0));
	max		___713_result ___713_result $const40 	%line{287} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:290
#     result = pow(result, in.powerGtoT);
	pow		___713_result ___713_result ___714_hexCol.powerGtoT 	%line{290} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:291
#     return result;
	assign		___714_cc ___713_result 	%line{291} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:353
#     return mix(co, cc, blendingContrast);
	mix		$tmp1279 ___714_co ___714_cc blendingContrast 	%line{353} %argrw{"wrrr"}
# PxrMultiTexture.osl:766
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aassign		alphas ___773_g $tmp1282 	%filename{"PxrMultiTexture.osl"} %line{766} %argrw{"wrr"}
	aassign		grads ___773_g $tmp1283 	%argrw{"wrr"}
# PxrMultiTexture.osl:763
#                     colors[g] = hexTileLookup(filename3, txparams, linearize, mipBias,
	aassign		colors ___773_g $tmp1279 	%line{763} %argrw{"wrr"}
# PxrMultiTexture.osl:768
#                 else if (texId == 4)
	eq		$tmp1415 ___775_texId $const34 	%line{768} %argrw{"wrr"}
	if		$tmp1415 3411 4974 	%argrw{"r"}
# PxrMultiTexture.osl:773
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aref		$tmp1417.powerTtoG hexTex.powerTtoG ___773_g 	%line{773} %argrw{"wrr"}
	aref		$tmp1417.powerGtoT hexTex.powerGtoT ___773_g 	%argrw{"wrr"}
	aref		$tmp1418.s hexData.s ___773_g 	%argrw{"wrr"}
	aref		$tmp1418.t hexData.t ___773_g 	%argrw{"wrr"}
	aref		$tmp1418.w hexData.w ___773_g 	%argrw{"wrr"}
	aref		$tmp1418.r hexData.r ___773_g 	%argrw{"wrr"}
	aref		$tmp1419 alphas ___773_g 	%argrw{"wrr"}
	aref		$tmp1420 grads ___773_g 	%argrw{"wrr"}
# PxrMultiTexture.osl:770
#                     colors[g] = hexTileLookup(filename4, txparams, linearize, mipBias,
	functioncall	$const82 3408 	%line{770} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:310
#     HexTileColor hexCol = HEXTILECOLOR_ZERO;
	assign		___714_hexCol.value $const40 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{310} %argrw{"wr"}
	assign		___714_hexCol.norm $const44 	%argrw{"wr"}
	assign		___714_hexCol.powerGtoT $const40 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:311
#     color co = 0, cc = 0, c;
	assign		___714_co $const2 	%line{311} %argrw{"wr"}
	assign		___714_cc $const2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:313
#     ng = 0;
	assign		$tmp1420 $const2 	%line{313} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	for		$tmp1422 3117 3119 3394 3396 	%line{315} %argrw{"r"}
	assign		___715_i $const2 	%argrw{"wr"}
	lt		$tmp1421 ___715_i $const5 	%argrw{"wrr"}
	neq		$tmp1422 $tmp1421 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:317
#         float w = hexData.w[i];
	compref		___716_w $tmp1418.w ___715_i 	%line{317} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:318
#         if (w == 0.0)
	eq		$tmp1423 ___716_w $const44 	%line{318} %argrw{"wrr"}
	if		$tmp1423 3123 3123 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:319
#             continue;
	continue	%line{319}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:322
#         TxCoords txcoords = initTxCoords(hexData.s[i], hexData.t[i], 0);
	compref		$tmp1424 $tmp1418.s ___715_i 	%line{322} %argrw{"wrr"}
	compref		$tmp1425 $tmp1418.t ___715_i 	%argrw{"wrr"}
	functioncall	$const16 3147 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 3133 3134 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{100} %argrw{"r"}
	functioncall	$const17 3133 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp1426 $tmp1425 	%line{48} %argrw{"wr"}
	add		$tmp1427 $tmp1426 $const9 	%argrw{"wrr"}
	floor		$tmp1428 $tmp1425 	%argrw{"wr"}
	sub		$tmp1429 $tmp1425 $tmp1428 	%argrw{"wrr"}
	sub		___636__tt $tmp1427 $tmp1429 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt $tmp1425 	%line{100} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:101
#     TxCoords coords = { ss, _tt, Dx(ss), Dy(ss), Dx(_tt), Dy(_tt) };
	assign		___636_coords.s $tmp1424 	%line{101} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx $tmp1424 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy $tmp1424 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     return coords;
	assign		___716_txcoords.s ___636_coords.s 	%line{102} %argrw{"wr"}
	assign		___716_txcoords.t ___636_coords.t 	%argrw{"wr"}
	assign		___716_txcoords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___716_txcoords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___716_txcoords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___716_txcoords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:323
#         if (mipBias != 0 || maxResolution != 0)
	neq		$tmp1430 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{323} %argrw{"wrr"}
	neq		$tmp1431 $tmp1430 $const2 	%argrw{"wrr"}
	if		$tmp1431 3150 3153 	%argrw{"r"}
	neq		$tmp1432 maxResolution $const2 	%argrw{"wrr"}
	neq		$tmp1433 $tmp1432 $const2 	%argrw{"wrr"}
	assign		$tmp1431 $tmp1433 	%argrw{"wr"}
	if		$tmp1431 3210 3210 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:324
#             PxrTxMipControls(mipBias, maxResolution, txcoords, txparams);
	functioncall	$const83 3210 	%line{324} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:153
#     float bias = (mipBias != 0) ? pow(2.0, mipBias) : 1.0;
	neq		$tmp1434 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{153} %argrw{"wrr"}
	if		$tmp1434 3159 3160 	%argrw{"r"}
	assign		$tmp1435 mipBias 	%argrw{"wr"}
	pow		___645_bias $const68 $tmp1435 	%argrw{"wrr"}
	assign		___645_bias $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:154
#     bias *= params.width;
	mul		___645_bias ___645_bias txparams.width 	%line{154} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:155
#     if (maxResolution <= 0)
	le		$tmp1436 maxResolution $const2 	%line{155} %argrw{"wrr"}
	if		$tmp1436 3164 3210 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:157
#         params.width = bias;
	assign		txparams.width ___645_bias 	%line{157} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:163
#         float minRadius = (maxResolution > 0.0) ? 1.0 / maxResolution : 0.0;
	gt		$tmp1437 maxResolution $const44 	%line{163} %argrw{"wrr"}
	if		$tmp1437 3167 3168 	%argrw{"r"}
	div		___647_minRadius $const9 maxResolution 	%argrw{"wrr"}
	assign		___647_minRadius $const44 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:165
#         float dsdx = max(minRadius, abs(coords.dsdx * bias)) * sign(coords.dsdx);
	mul		$tmp1440 ___716_txcoords.dsdx ___645_bias 	%line{165} %argrw{"wrr"}
	abs		$tmp1439 $tmp1440 	%argrw{"wr"}
	max		$tmp1438 ___647_minRadius $tmp1439 	%argrw{"wrr"}
	sign		$tmp1441 ___716_txcoords.dsdx 	%argrw{"wr"}
	mul		___647_dsdx $tmp1438 $tmp1441 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:166
#         float dtdx = max(minRadius, abs(coords.dtdx * bias)) * sign(coords.dtdx);
	mul		$tmp1444 ___716_txcoords.dtdx ___645_bias 	%line{166} %argrw{"wrr"}
	abs		$tmp1443 $tmp1444 	%argrw{"wr"}
	max		$tmp1442 ___647_minRadius $tmp1443 	%argrw{"wrr"}
	sign		$tmp1445 ___716_txcoords.dtdx 	%argrw{"wr"}
	mul		___647_dtdx $tmp1442 $tmp1445 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:167
#         float dsdy = max(minRadius, abs(coords.dsdy * bias)) * sign(coords.dsdy);
	mul		$tmp1448 ___716_txcoords.dsdy ___645_bias 	%line{167} %argrw{"wrr"}
	abs		$tmp1447 $tmp1448 	%argrw{"wr"}
	max		$tmp1446 ___647_minRadius $tmp1447 	%argrw{"wrr"}
	sign		$tmp1449 ___716_txcoords.dsdy 	%argrw{"wr"}
	mul		___647_dsdy $tmp1446 $tmp1449 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:168
#         float dtdy = max(minRadius, abs(coords.dtdy * bias)) * sign(coords.dtdy);
	mul		$tmp1452 ___716_txcoords.dtdy ___645_bias 	%line{168} %argrw{"wrr"}
	abs		$tmp1451 $tmp1452 	%argrw{"wr"}
	max		$tmp1450 ___647_minRadius $tmp1451 	%argrw{"wrr"}
	sign		$tmp1453 ___716_txcoords.dtdy 	%argrw{"wr"}
	mul		___647_dtdy $tmp1450 $tmp1453 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:169
#         vector v0 = point(coords.dsdx, coords.dtdx, 0) - point(coords.dsdy, coords.dtdy, 0);
	point		$tmp1454 ___716_txcoords.dsdx ___716_txcoords.dtdx $const44 	%line{169} %argrw{"wrrr"}
	point		$tmp1455 ___716_txcoords.dsdy ___716_txcoords.dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v0 $tmp1454 $tmp1455 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:170
#         vector v1 = point(dsdx, dtdx, 0) - point(dsdy, dtdy, 0);
	point		$tmp1456 ___647_dsdx ___647_dtdx $const44 	%line{170} %argrw{"wrrr"}
	point		$tmp1457 ___647_dsdy ___647_dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v1 $tmp1456 $tmp1457 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:171
#         params.width = (v1.x*v1.x + v1.y*v1.y) / (v0.x*v0.x + v1.y*v1.y);
	compref		$tmp1458 ___647_v1 $const2 	%line{171} %argrw{"wrr"}
	compref		$tmp1459 ___647_v1 $const2 	%argrw{"wrr"}
	mul		$tmp1460 $tmp1458 $tmp1459 	%argrw{"wrr"}
	compref		$tmp1461 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp1462 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp1463 $tmp1461 $tmp1462 	%argrw{"wrr"}
	add		$tmp1464 $tmp1460 $tmp1463 	%argrw{"wrr"}
	compref		$tmp1465 ___647_v0 $const2 	%argrw{"wrr"}
	compref		$tmp1466 ___647_v0 $const2 	%argrw{"wrr"}
	mul		$tmp1467 $tmp1465 $tmp1466 	%argrw{"wrr"}
	compref		$tmp1468 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp1469 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp1470 $tmp1468 $tmp1469 	%argrw{"wrr"}
	add		$tmp1471 $tmp1467 $tmp1470 	%argrw{"wrr"}
	div		txparams.width $tmp1464 $tmp1471 	%argrw{"wrr"}
	assign		txparams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:325
#         c = PxrTextureLookup(filename, txcoords, txparams);
	functioncall	$const18 3240 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{325} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename4 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp1472 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp1472 3219 3219 	%argrw{"r"}
	assign		___714_c ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename4 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp1473 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp1473 3225 3225 	%argrw{"r"}
	neq		$tmp1474 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp1473 $tmp1474 	%argrw{"wr"}
	if		$tmp1473 3239 3239 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp1475 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp1476 $tmp1475 $const2 	%argrw{"wrr"}
	if		$tmp1476 3229 3232 	%argrw{"r"}
	eq		$tmp1477 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp1478 $tmp1477 $const2 	%argrw{"wrr"}
	assign		$tmp1476 $tmp1478 	%argrw{"wr"}
	if		$tmp1476 3239 3239 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp1479 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp1479 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp1480 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp1480 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp1481 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp1481 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		___714_c ___649_finalResult 	%line{217} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:326
#         if (nMap.enabled)
	if		nMap.enabled 3342 3342 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{326} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:329
#             GenBasisTB(Tn, Bn, float2(hexData.s[i], hexData.t[i]), N);
	compref		$tmp1482.x $tmp1418.s ___715_i 	%line{329} %argrw{"wrr"}
	compref		$tmp1482.y $tmp1418.t ___715_i 	%argrw{"wrr"}
	functioncall	$const84 3290 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:55
#     vector sigmaX = dPdu - dot(dPdu, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp1483 dPdu N 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{55} %argrw{"wrr"}
	mul		$tmp1484 $tmp1483 N 	%argrw{"wrr"}
	sub		___684_sigmaX dPdu $tmp1484 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:56
#     vector sigmaY = dPdv - dot(dPdv, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp1485 dPdv N 	%line{56} %argrw{"wrr"}
	mul		$tmp1486 $tmp1485 N 	%argrw{"wrr"}
	sub		___684_sigmaY dPdv $tmp1486 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:57
#     float flip_sign = dot(dPdv, cross(nrmBaseNormal, dPdu)) < 0.0 ? -1.0 : 1.0;
	cross		$tmp1488 N dPdu 	%line{57} %argrw{"wrr"}
	dot		$tmp1487 dPdv $tmp1488 	%argrw{"wrr"}
	lt		$tmp1489 $tmp1487 $const44 	%argrw{"wrr"}
	if		$tmp1489 3255 3256 	%argrw{"r"}
	assign		___684_flip_sign $const85 	%argrw{"wr"}
	assign		___684_flip_sign $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:59
#     float2 dSTdx = Dx(texST);
	functioncall	$const86 3259 	%line{59} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:167
#     return float2(Dx(a.x), Dx(a.y));
	Dx		___684_dSTdx.x $tmp1482.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{167} %argrw{"wr"} %argderivs{1}
	Dx		___684_dSTdx.y $tmp1482.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:60
#     float2 dSTdy = Dy(texST);
	functioncall	$const87 3262 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{60} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:172
#     return float2(Dy(a.x), Dy(a.y));
	Dy		___684_dSTdy.x $tmp1482.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{172} %argrw{"wr"} %argderivs{1}
	Dy		___684_dSTdy.y $tmp1482.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:61
#     float det = dot(dSTdx, float2(dSTdy.y, -dSTdy.x));
	assign		$tmp1490.x ___684_dSTdy.y 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{61} %argrw{"wr"}
	neg		$tmp1490.y ___684_dSTdy.x 	%argrw{"wr"}
	functioncall	$const88 3268 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:162
#     return a.x * b.x + a.y * b.y;
	mul		$tmp1491 ___684_dSTdx.x $tmp1490.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{162} %argrw{"wrr"}
	mul		$tmp1492 ___684_dSTdx.y $tmp1490.y 	%argrw{"wrr"}
	add		___684_det $tmp1491 $tmp1492 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:62
#     float sign_det = det < 0.0 ? -1.0 : 1.0;
	lt		$tmp1493 ___684_det $const44 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{62} %argrw{"wrr"}
	if		$tmp1493 3271 3272 	%argrw{"r"}
	assign		___684_sign_det $const85 	%argrw{"wr"}
	assign		___684_sign_det $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:66
#     float2 invC0 = sign_det * float2(dSTdy.y, -dSTdx.y);
	assign		$tmp1494.x ___684_dSTdy.y 	%line{66} %argrw{"wr"}
	neg		$tmp1494.y ___684_dSTdx.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 3280 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:130
#     return b * float2(a, a);
	assign		$tmp1495.x ___684_sign_det 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{130} %argrw{"wr"}
	assign		$tmp1495.y ___684_sign_det 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 3280 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		___684_invC0.x $tmp1494.x $tmp1495.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		___684_invC0.y $tmp1494.y $tmp1495.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:67
#     vT = sigmaX * invC0.x + sigmaY * invC0.y;
	mul		$tmp1496 ___684_sigmaX ___684_invC0.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{67} %argrw{"wrr"}
	mul		$tmp1497 ___684_sigmaY ___684_invC0.y 	%argrw{"wrr"}
	add		___717_Tn $tmp1496 $tmp1497 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:68
#     if (abs(det) > 0.0) vT = normalize(vT);
	abs		$tmp1498 ___684_det 	%line{68} %argrw{"wr"}
	gt		$tmp1499 $tmp1498 $const44 	%argrw{"wrr"}
	if		$tmp1499 3287 3287 	%argrw{"r"}
	normalize	___717_Tn ___717_Tn 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:69
#     vB = (sign_det * flip_sign) * cross(nrmBaseNormal, vT);
	mul		$tmp1500 ___684_sign_det ___684_flip_sign 	%line{69} %argrw{"wrr"}
	cross		$tmp1501 N ___717_Tn 	%argrw{"wrr"}
	mul		___717_Bn $tmp1500 $tmp1501 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:330
#             setupNormalMapHex(nMap, c);
	functioncall	$const90 3309 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{330} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:171
#     color tsNormal = nmap * 2.0 - 1.0;
	mul		$tmp1502 ___714_c $const68 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{171} %argrw{"wrr"}
	sub		___694_tsNormal $tmp1502 $const9 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:173
#     if (nmp.orientation == k_opengl)
	eq		$tmp1503 nMap.orientation $const2 	%line{173} %argrw{"wrr"}
	if		$tmp1503 3295 3308 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:177
#     else if (nmp.orientation == k_directx)
	eq		$tmp1504 nMap.orientation $const3 	%line{177} %argrw{"wrr"}
	if		$tmp1504 3300 3308 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:179
#         tsNormal[1] = -tsNormal[1];
	compref		$tmp1505 ___694_tsNormal $const3 	%line{179} %argrw{"wrr"}
	neg		$tmp1506 $tmp1505 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp1506 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:183
#         if (nmp.flipX)
	if		nMap.flipX 3304 3304 	%line{183} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:184
#             tsNormal[0] = -tsNormal[0];
	compref		$tmp1507 ___694_tsNormal $const2 	%line{184} %argrw{"wrr"}
	neg		$tmp1508 $tmp1507 	%argrw{"wr"}
	compassign	___694_tsNormal $const2 $tmp1508 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:185
#         if (nmp.flipY)
	if		nMap.flipY 3308 3308 	%line{185} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:186
#             tsNormal[1] = -tsNormal[1];
	compref		$tmp1509 ___694_tsNormal $const3 	%line{186} %argrw{"wrr"}
	neg		$tmp1510 $tmp1509 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp1510 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:188
#     nmap = tsNormal;
	assign		___714_c ___694_tsNormal 	%line{188} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const91 3336 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:76
# 	float scale = 1.0 / 128.0;
	div		___685_scale $const9 $const92 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{76} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:80
# 	color vMa = abs(vM);
	abs		___685_vMa ___714_c 	%line{80} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:81
# 	float z_ma = max(vMa[2], scale * max(vMa[0], vMa[1]));
	compref		$tmp1513 ___685_vMa $const4 	%line{81} %argrw{"wrr"}
	compref		$tmp1515 ___685_vMa $const2 	%argrw{"wrr"}
	compref		$tmp1516 ___685_vMa $const3 	%argrw{"wrr"}
	max		$tmp1514 $tmp1515 $tmp1516 	%argrw{"wrr"}
	mul		$tmp1517 ___685_scale $tmp1514 	%argrw{"wrr"}
	max		___685_z_ma $tmp1513 $tmp1517 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:84
# 	int gFlipVertDeriv = 1;
	assign		___685_gFlipVertDeriv $const3 	%line{84} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:85
# 	float s = gFlipVertDeriv ? -1.0 : 1.0;
	if		___685_gFlipVertDeriv 3321 3322 	%line{85} %argrw{"r"}
	assign		___685_s $const85 	%argrw{"wr"}
	assign		___685_s $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	compref		$tmp1519.x ___714_c $const2 	%line{86} %argrw{"wrr"}
	compref		$tmp1520 ___714_c $const3 	%argrw{"wrr"}
	mul		$tmp1519.y ___685_s $tmp1520 	%argrw{"wrr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const93 3328 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:55
#     return float2(-a.x, -a.y);
	neg		$tmp1518.x $tmp1519.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{55} %argrw{"wr"}
	neg		$tmp1518.y $tmp1519.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const94 3335 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:146
#     float b_inv = 1.0/b;
	div		___678_b_inv $const9 ___685_z_ma 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{146} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:147
#     return a * float2(b_inv, b_inv);
	assign		$tmp1521.x ___678_b_inv 	%line{147} %argrw{"wr"}
	assign		$tmp1521.y ___678_b_inv 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 3335 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		$tmp1512.x $tmp1518.x $tmp1521.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		$tmp1512.y $tmp1518.y $tmp1521.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	return	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{86}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const95 3340 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:92
#     return deriv.x * vT + deriv.y * vB;
	mul		$tmp1522 $tmp1512.x ___717_Tn 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{92} %argrw{"wrr"}
	mul		$tmp1523 $tmp1512.y ___717_Bn 	%argrw{"wrr"}
	add		$tmp1511 $tmp1522 $tmp1523 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	mul		$tmp1524 $tmp1511 ___716_w 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"wrr"}
	add		$tmp1420 $tmp1420 $tmp1524 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:333
#         if (linearize) PxrLinearizeSRGB(c);
	if		linearize 3366 3366 	%line{333} %argrw{"r"}
	functioncall	$const25 3366 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 3349 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp1526 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp1527 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp1525 $tmp1527 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp1525 3366 3366 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp1529 3352 3354 3365 3366 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp1528 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp1529 $tmp1528 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp1530 ___714_c ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp1531 $tmp1530 $const29 	%argrw{"wrr"}
	if		$tmp1531 3360 3365 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp1532 ___714_c ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp1533 $tmp1532 $const30 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp1533 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp1535 ___714_c ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp1536 $tmp1535 $const31 	%argrw{"wrr"}
	mul		$tmp1537 $tmp1536 $const32 	%argrw{"wrr"}
	pow		$tmp1534 $tmp1537 $const33 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp1534 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:335
#         if (needAlpha)
	if		needAlpha 3379 3379 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{335} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:337
#             TxParams alphaParams = txparams;
	assign		___718_alphaParams.firstchannel txparams.firstchannel 	%line{337} %argrw{"wr"}
	assign		___718_alphaParams.blur txparams.blur 	%argrw{"wr"}
	assign		___718_alphaParams.missingcolor txparams.missingcolor 	%argrw{"wr"}
	assign		___718_alphaParams.missingalpha txparams.missingalpha 	%argrw{"wr"}
	assign		___718_alphaParams.interp txparams.interp 	%argrw{"wr"}
	assign		___718_alphaParams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:338
#             alphaParams.firstchannel += 3;    // XXX: Assume RGBA
	add		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel $const5 	%line{338} %argrw{"wrr"}
	assign		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:339
#             a = PxrTextureLookup(filename, txcoords, alphaParams);
	functioncall	$const18 3378 	%line{339} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha ___718_alphaParams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		___714_a filename4 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 ___718_alphaParams.firstchannel $const20 ___718_alphaParams.blur $const21 ___652_missingalpha $const22 ___718_alphaParams.interp $const23 ___718_alphaParams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:342
#             alpha = mix(alpha, 1, a);
	mix		$tmp1419 $tmp1419 $const9 ___714_a 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{342} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:346
#         co += c * w;
	mul		$tmp1538 ___714_c ___716_w 	%line{346} %argrw{"wrr"}
	add		___714_co ___714_co $tmp1538 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:347
#         if (blendingContrast > 0)
	gt		$tmp1539 blendingContrast $const2 	%line{347} %argrw{"wrr"}
	if		$tmp1539 3394 3394 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:348
#             hexTileAccumulate(c, w, hexTex, hexCol);
	functioncall	$const96 3394 	%line{348} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:274
#     result.value += pow(tex, htx.powerTtoG) * weight;
	pow		$tmp1540 ___714_c $tmp1417.powerTtoG 	%line{274} %argrw{"wrr"}
	mul		$tmp1541 $tmp1540 ___716_w 	%argrw{"wrr"}
	add		___714_hexCol.value ___714_hexCol.value $tmp1541 	%argrw{"wrr"}
	assign		___714_hexCol.value ___714_hexCol.value 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:275
#     result.norm += weight * weight;
	mul		$tmp1542 ___716_w ___716_w 	%line{275} %argrw{"wrr"}
	add		___714_hexCol.norm ___714_hexCol.norm $tmp1542 	%argrw{"wrr"}
	assign		___714_hexCol.norm ___714_hexCol.norm 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:276
#     result.powerGtoT += htx.powerGtoT * weight;
	mul		$tmp1543 $tmp1417.powerGtoT ___716_w 	%line{276} %argrw{"wrr"}
	add		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT $tmp1543 	%argrw{"wrr"}
	assign		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	assign		$tmp1544 ___715_i 	%line{315} %argrw{"wr"}
	add		___715_i ___715_i $const3 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:350
#     if (blendingContrast > 0)
	gt		$tmp1545 blendingContrast $const2 	%line{350} %argrw{"wrr"}
	if		$tmp1545 3407 3407 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:351
#         cc = hexTileFinalColor(hexCol);
	functioncall	$const97 3407 	%line{351} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:284
#     float norm = 1.0 / sqrt(in.norm);
	sqrt		$tmp1546 ___714_hexCol.norm 	%line{284} %argrw{"wr"}
	div		___713_norm $const9 $tmp1546 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:285
#     color result = norm * (in.value - HEXT_GCENTER) + HEXT_GCENTER;
	sub		$tmp1548 ___714_hexCol.value $const81 	%line{285} %argrw{"wrr"}
	mul		$tmp1549 ___713_norm $tmp1548 	%argrw{"wrr"}
	add		___713_result $tmp1549 $const81 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:287
#     result = max(result, color(0.0));
	max		___713_result ___713_result $const40 	%line{287} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:290
#     result = pow(result, in.powerGtoT);
	pow		___713_result ___713_result ___714_hexCol.powerGtoT 	%line{290} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:291
#     return result;
	assign		___714_cc ___713_result 	%line{291} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:353
#     return mix(co, cc, blendingContrast);
	mix		$tmp1416 ___714_co ___714_cc blendingContrast 	%line{353} %argrw{"wrrr"}
# PxrMultiTexture.osl:773
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aassign		alphas ___773_g $tmp1419 	%filename{"PxrMultiTexture.osl"} %line{773} %argrw{"wrr"}
	aassign		grads ___773_g $tmp1420 	%argrw{"wrr"}
# PxrMultiTexture.osl:770
#                     colors[g] = hexTileLookup(filename4, txparams, linearize, mipBias,
	aassign		colors ___773_g $tmp1416 	%line{770} %argrw{"wrr"}
# PxrMultiTexture.osl:775
#                 else if (texId == 5)
	eq		$tmp1552 ___775_texId $const35 	%line{775} %argrw{"wrr"}
	if		$tmp1552 3724 4974 	%argrw{"r"}
# PxrMultiTexture.osl:780
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aref		$tmp1554.powerTtoG hexTex.powerTtoG ___773_g 	%line{780} %argrw{"wrr"}
	aref		$tmp1554.powerGtoT hexTex.powerGtoT ___773_g 	%argrw{"wrr"}
	aref		$tmp1555.s hexData.s ___773_g 	%argrw{"wrr"}
	aref		$tmp1555.t hexData.t ___773_g 	%argrw{"wrr"}
	aref		$tmp1555.w hexData.w ___773_g 	%argrw{"wrr"}
	aref		$tmp1555.r hexData.r ___773_g 	%argrw{"wrr"}
	aref		$tmp1556 alphas ___773_g 	%argrw{"wrr"}
	aref		$tmp1557 grads ___773_g 	%argrw{"wrr"}
# PxrMultiTexture.osl:777
#                     colors[g] = hexTileLookup(filename5, txparams, linearize, mipBias,
	functioncall	$const82 3721 	%line{777} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:310
#     HexTileColor hexCol = HEXTILECOLOR_ZERO;
	assign		___714_hexCol.value $const40 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{310} %argrw{"wr"}
	assign		___714_hexCol.norm $const44 	%argrw{"wr"}
	assign		___714_hexCol.powerGtoT $const40 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:311
#     color co = 0, cc = 0, c;
	assign		___714_co $const2 	%line{311} %argrw{"wr"}
	assign		___714_cc $const2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:313
#     ng = 0;
	assign		$tmp1557 $const2 	%line{313} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	for		$tmp1559 3430 3432 3707 3709 	%line{315} %argrw{"r"}
	assign		___715_i $const2 	%argrw{"wr"}
	lt		$tmp1558 ___715_i $const5 	%argrw{"wrr"}
	neq		$tmp1559 $tmp1558 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:317
#         float w = hexData.w[i];
	compref		___716_w $tmp1555.w ___715_i 	%line{317} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:318
#         if (w == 0.0)
	eq		$tmp1560 ___716_w $const44 	%line{318} %argrw{"wrr"}
	if		$tmp1560 3436 3436 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:319
#             continue;
	continue	%line{319}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:322
#         TxCoords txcoords = initTxCoords(hexData.s[i], hexData.t[i], 0);
	compref		$tmp1561 $tmp1555.s ___715_i 	%line{322} %argrw{"wrr"}
	compref		$tmp1562 $tmp1555.t ___715_i 	%argrw{"wrr"}
	functioncall	$const16 3460 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 3446 3447 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{100} %argrw{"r"}
	functioncall	$const17 3446 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp1563 $tmp1562 	%line{48} %argrw{"wr"}
	add		$tmp1564 $tmp1563 $const9 	%argrw{"wrr"}
	floor		$tmp1565 $tmp1562 	%argrw{"wr"}
	sub		$tmp1566 $tmp1562 $tmp1565 	%argrw{"wrr"}
	sub		___636__tt $tmp1564 $tmp1566 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt $tmp1562 	%line{100} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:101
#     TxCoords coords = { ss, _tt, Dx(ss), Dy(ss), Dx(_tt), Dy(_tt) };
	assign		___636_coords.s $tmp1561 	%line{101} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx $tmp1561 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy $tmp1561 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     return coords;
	assign		___716_txcoords.s ___636_coords.s 	%line{102} %argrw{"wr"}
	assign		___716_txcoords.t ___636_coords.t 	%argrw{"wr"}
	assign		___716_txcoords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___716_txcoords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___716_txcoords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___716_txcoords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:323
#         if (mipBias != 0 || maxResolution != 0)
	neq		$tmp1567 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{323} %argrw{"wrr"}
	neq		$tmp1568 $tmp1567 $const2 	%argrw{"wrr"}
	if		$tmp1568 3463 3466 	%argrw{"r"}
	neq		$tmp1569 maxResolution $const2 	%argrw{"wrr"}
	neq		$tmp1570 $tmp1569 $const2 	%argrw{"wrr"}
	assign		$tmp1568 $tmp1570 	%argrw{"wr"}
	if		$tmp1568 3523 3523 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:324
#             PxrTxMipControls(mipBias, maxResolution, txcoords, txparams);
	functioncall	$const83 3523 	%line{324} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:153
#     float bias = (mipBias != 0) ? pow(2.0, mipBias) : 1.0;
	neq		$tmp1571 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{153} %argrw{"wrr"}
	if		$tmp1571 3472 3473 	%argrw{"r"}
	assign		$tmp1572 mipBias 	%argrw{"wr"}
	pow		___645_bias $const68 $tmp1572 	%argrw{"wrr"}
	assign		___645_bias $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:154
#     bias *= params.width;
	mul		___645_bias ___645_bias txparams.width 	%line{154} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:155
#     if (maxResolution <= 0)
	le		$tmp1573 maxResolution $const2 	%line{155} %argrw{"wrr"}
	if		$tmp1573 3477 3523 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:157
#         params.width = bias;
	assign		txparams.width ___645_bias 	%line{157} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:163
#         float minRadius = (maxResolution > 0.0) ? 1.0 / maxResolution : 0.0;
	gt		$tmp1574 maxResolution $const44 	%line{163} %argrw{"wrr"}
	if		$tmp1574 3480 3481 	%argrw{"r"}
	div		___647_minRadius $const9 maxResolution 	%argrw{"wrr"}
	assign		___647_minRadius $const44 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:165
#         float dsdx = max(minRadius, abs(coords.dsdx * bias)) * sign(coords.dsdx);
	mul		$tmp1577 ___716_txcoords.dsdx ___645_bias 	%line{165} %argrw{"wrr"}
	abs		$tmp1576 $tmp1577 	%argrw{"wr"}
	max		$tmp1575 ___647_minRadius $tmp1576 	%argrw{"wrr"}
	sign		$tmp1578 ___716_txcoords.dsdx 	%argrw{"wr"}
	mul		___647_dsdx $tmp1575 $tmp1578 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:166
#         float dtdx = max(minRadius, abs(coords.dtdx * bias)) * sign(coords.dtdx);
	mul		$tmp1581 ___716_txcoords.dtdx ___645_bias 	%line{166} %argrw{"wrr"}
	abs		$tmp1580 $tmp1581 	%argrw{"wr"}
	max		$tmp1579 ___647_minRadius $tmp1580 	%argrw{"wrr"}
	sign		$tmp1582 ___716_txcoords.dtdx 	%argrw{"wr"}
	mul		___647_dtdx $tmp1579 $tmp1582 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:167
#         float dsdy = max(minRadius, abs(coords.dsdy * bias)) * sign(coords.dsdy);
	mul		$tmp1585 ___716_txcoords.dsdy ___645_bias 	%line{167} %argrw{"wrr"}
	abs		$tmp1584 $tmp1585 	%argrw{"wr"}
	max		$tmp1583 ___647_minRadius $tmp1584 	%argrw{"wrr"}
	sign		$tmp1586 ___716_txcoords.dsdy 	%argrw{"wr"}
	mul		___647_dsdy $tmp1583 $tmp1586 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:168
#         float dtdy = max(minRadius, abs(coords.dtdy * bias)) * sign(coords.dtdy);
	mul		$tmp1589 ___716_txcoords.dtdy ___645_bias 	%line{168} %argrw{"wrr"}
	abs		$tmp1588 $tmp1589 	%argrw{"wr"}
	max		$tmp1587 ___647_minRadius $tmp1588 	%argrw{"wrr"}
	sign		$tmp1590 ___716_txcoords.dtdy 	%argrw{"wr"}
	mul		___647_dtdy $tmp1587 $tmp1590 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:169
#         vector v0 = point(coords.dsdx, coords.dtdx, 0) - point(coords.dsdy, coords.dtdy, 0);
	point		$tmp1591 ___716_txcoords.dsdx ___716_txcoords.dtdx $const44 	%line{169} %argrw{"wrrr"}
	point		$tmp1592 ___716_txcoords.dsdy ___716_txcoords.dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v0 $tmp1591 $tmp1592 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:170
#         vector v1 = point(dsdx, dtdx, 0) - point(dsdy, dtdy, 0);
	point		$tmp1593 ___647_dsdx ___647_dtdx $const44 	%line{170} %argrw{"wrrr"}
	point		$tmp1594 ___647_dsdy ___647_dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v1 $tmp1593 $tmp1594 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:171
#         params.width = (v1.x*v1.x + v1.y*v1.y) / (v0.x*v0.x + v1.y*v1.y);
	compref		$tmp1595 ___647_v1 $const2 	%line{171} %argrw{"wrr"}
	compref		$tmp1596 ___647_v1 $const2 	%argrw{"wrr"}
	mul		$tmp1597 $tmp1595 $tmp1596 	%argrw{"wrr"}
	compref		$tmp1598 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp1599 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp1600 $tmp1598 $tmp1599 	%argrw{"wrr"}
	add		$tmp1601 $tmp1597 $tmp1600 	%argrw{"wrr"}
	compref		$tmp1602 ___647_v0 $const2 	%argrw{"wrr"}
	compref		$tmp1603 ___647_v0 $const2 	%argrw{"wrr"}
	mul		$tmp1604 $tmp1602 $tmp1603 	%argrw{"wrr"}
	compref		$tmp1605 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp1606 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp1607 $tmp1605 $tmp1606 	%argrw{"wrr"}
	add		$tmp1608 $tmp1604 $tmp1607 	%argrw{"wrr"}
	div		txparams.width $tmp1601 $tmp1608 	%argrw{"wrr"}
	assign		txparams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:325
#         c = PxrTextureLookup(filename, txcoords, txparams);
	functioncall	$const18 3553 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{325} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename5 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp1609 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp1609 3532 3532 	%argrw{"r"}
	assign		___714_c ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename5 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp1610 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp1610 3538 3538 	%argrw{"r"}
	neq		$tmp1611 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp1610 $tmp1611 	%argrw{"wr"}
	if		$tmp1610 3552 3552 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp1612 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp1613 $tmp1612 $const2 	%argrw{"wrr"}
	if		$tmp1613 3542 3545 	%argrw{"r"}
	eq		$tmp1614 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp1615 $tmp1614 $const2 	%argrw{"wrr"}
	assign		$tmp1613 $tmp1615 	%argrw{"wr"}
	if		$tmp1613 3552 3552 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp1616 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp1616 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp1617 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp1617 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp1618 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp1618 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		___714_c ___649_finalResult 	%line{217} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:326
#         if (nMap.enabled)
	if		nMap.enabled 3655 3655 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{326} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:329
#             GenBasisTB(Tn, Bn, float2(hexData.s[i], hexData.t[i]), N);
	compref		$tmp1619.x $tmp1555.s ___715_i 	%line{329} %argrw{"wrr"}
	compref		$tmp1619.y $tmp1555.t ___715_i 	%argrw{"wrr"}
	functioncall	$const84 3603 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:55
#     vector sigmaX = dPdu - dot(dPdu, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp1620 dPdu N 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{55} %argrw{"wrr"}
	mul		$tmp1621 $tmp1620 N 	%argrw{"wrr"}
	sub		___684_sigmaX dPdu $tmp1621 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:56
#     vector sigmaY = dPdv - dot(dPdv, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp1622 dPdv N 	%line{56} %argrw{"wrr"}
	mul		$tmp1623 $tmp1622 N 	%argrw{"wrr"}
	sub		___684_sigmaY dPdv $tmp1623 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:57
#     float flip_sign = dot(dPdv, cross(nrmBaseNormal, dPdu)) < 0.0 ? -1.0 : 1.0;
	cross		$tmp1625 N dPdu 	%line{57} %argrw{"wrr"}
	dot		$tmp1624 dPdv $tmp1625 	%argrw{"wrr"}
	lt		$tmp1626 $tmp1624 $const44 	%argrw{"wrr"}
	if		$tmp1626 3568 3569 	%argrw{"r"}
	assign		___684_flip_sign $const85 	%argrw{"wr"}
	assign		___684_flip_sign $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:59
#     float2 dSTdx = Dx(texST);
	functioncall	$const86 3572 	%line{59} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:167
#     return float2(Dx(a.x), Dx(a.y));
	Dx		___684_dSTdx.x $tmp1619.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{167} %argrw{"wr"} %argderivs{1}
	Dx		___684_dSTdx.y $tmp1619.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:60
#     float2 dSTdy = Dy(texST);
	functioncall	$const87 3575 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{60} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:172
#     return float2(Dy(a.x), Dy(a.y));
	Dy		___684_dSTdy.x $tmp1619.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{172} %argrw{"wr"} %argderivs{1}
	Dy		___684_dSTdy.y $tmp1619.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:61
#     float det = dot(dSTdx, float2(dSTdy.y, -dSTdy.x));
	assign		$tmp1627.x ___684_dSTdy.y 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{61} %argrw{"wr"}
	neg		$tmp1627.y ___684_dSTdy.x 	%argrw{"wr"}
	functioncall	$const88 3581 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:162
#     return a.x * b.x + a.y * b.y;
	mul		$tmp1628 ___684_dSTdx.x $tmp1627.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{162} %argrw{"wrr"}
	mul		$tmp1629 ___684_dSTdx.y $tmp1627.y 	%argrw{"wrr"}
	add		___684_det $tmp1628 $tmp1629 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:62
#     float sign_det = det < 0.0 ? -1.0 : 1.0;
	lt		$tmp1630 ___684_det $const44 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{62} %argrw{"wrr"}
	if		$tmp1630 3584 3585 	%argrw{"r"}
	assign		___684_sign_det $const85 	%argrw{"wr"}
	assign		___684_sign_det $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:66
#     float2 invC0 = sign_det * float2(dSTdy.y, -dSTdx.y);
	assign		$tmp1631.x ___684_dSTdy.y 	%line{66} %argrw{"wr"}
	neg		$tmp1631.y ___684_dSTdx.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 3593 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:130
#     return b * float2(a, a);
	assign		$tmp1632.x ___684_sign_det 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{130} %argrw{"wr"}
	assign		$tmp1632.y ___684_sign_det 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 3593 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		___684_invC0.x $tmp1631.x $tmp1632.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		___684_invC0.y $tmp1631.y $tmp1632.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:67
#     vT = sigmaX * invC0.x + sigmaY * invC0.y;
	mul		$tmp1633 ___684_sigmaX ___684_invC0.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{67} %argrw{"wrr"}
	mul		$tmp1634 ___684_sigmaY ___684_invC0.y 	%argrw{"wrr"}
	add		___717_Tn $tmp1633 $tmp1634 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:68
#     if (abs(det) > 0.0) vT = normalize(vT);
	abs		$tmp1635 ___684_det 	%line{68} %argrw{"wr"}
	gt		$tmp1636 $tmp1635 $const44 	%argrw{"wrr"}
	if		$tmp1636 3600 3600 	%argrw{"r"}
	normalize	___717_Tn ___717_Tn 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:69
#     vB = (sign_det * flip_sign) * cross(nrmBaseNormal, vT);
	mul		$tmp1637 ___684_sign_det ___684_flip_sign 	%line{69} %argrw{"wrr"}
	cross		$tmp1638 N ___717_Tn 	%argrw{"wrr"}
	mul		___717_Bn $tmp1637 $tmp1638 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:330
#             setupNormalMapHex(nMap, c);
	functioncall	$const90 3622 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{330} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:171
#     color tsNormal = nmap * 2.0 - 1.0;
	mul		$tmp1639 ___714_c $const68 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{171} %argrw{"wrr"}
	sub		___694_tsNormal $tmp1639 $const9 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:173
#     if (nmp.orientation == k_opengl)
	eq		$tmp1640 nMap.orientation $const2 	%line{173} %argrw{"wrr"}
	if		$tmp1640 3608 3621 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:177
#     else if (nmp.orientation == k_directx)
	eq		$tmp1641 nMap.orientation $const3 	%line{177} %argrw{"wrr"}
	if		$tmp1641 3613 3621 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:179
#         tsNormal[1] = -tsNormal[1];
	compref		$tmp1642 ___694_tsNormal $const3 	%line{179} %argrw{"wrr"}
	neg		$tmp1643 $tmp1642 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp1643 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:183
#         if (nmp.flipX)
	if		nMap.flipX 3617 3617 	%line{183} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:184
#             tsNormal[0] = -tsNormal[0];
	compref		$tmp1644 ___694_tsNormal $const2 	%line{184} %argrw{"wrr"}
	neg		$tmp1645 $tmp1644 	%argrw{"wr"}
	compassign	___694_tsNormal $const2 $tmp1645 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:185
#         if (nmp.flipY)
	if		nMap.flipY 3621 3621 	%line{185} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:186
#             tsNormal[1] = -tsNormal[1];
	compref		$tmp1646 ___694_tsNormal $const3 	%line{186} %argrw{"wrr"}
	neg		$tmp1647 $tmp1646 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp1647 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:188
#     nmap = tsNormal;
	assign		___714_c ___694_tsNormal 	%line{188} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const91 3649 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:76
# 	float scale = 1.0 / 128.0;
	div		___685_scale $const9 $const92 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{76} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:80
# 	color vMa = abs(vM);
	abs		___685_vMa ___714_c 	%line{80} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:81
# 	float z_ma = max(vMa[2], scale * max(vMa[0], vMa[1]));
	compref		$tmp1650 ___685_vMa $const4 	%line{81} %argrw{"wrr"}
	compref		$tmp1652 ___685_vMa $const2 	%argrw{"wrr"}
	compref		$tmp1653 ___685_vMa $const3 	%argrw{"wrr"}
	max		$tmp1651 $tmp1652 $tmp1653 	%argrw{"wrr"}
	mul		$tmp1654 ___685_scale $tmp1651 	%argrw{"wrr"}
	max		___685_z_ma $tmp1650 $tmp1654 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:84
# 	int gFlipVertDeriv = 1;
	assign		___685_gFlipVertDeriv $const3 	%line{84} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:85
# 	float s = gFlipVertDeriv ? -1.0 : 1.0;
	if		___685_gFlipVertDeriv 3634 3635 	%line{85} %argrw{"r"}
	assign		___685_s $const85 	%argrw{"wr"}
	assign		___685_s $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	compref		$tmp1656.x ___714_c $const2 	%line{86} %argrw{"wrr"}
	compref		$tmp1657 ___714_c $const3 	%argrw{"wrr"}
	mul		$tmp1656.y ___685_s $tmp1657 	%argrw{"wrr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const93 3641 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:55
#     return float2(-a.x, -a.y);
	neg		$tmp1655.x $tmp1656.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{55} %argrw{"wr"}
	neg		$tmp1655.y $tmp1656.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const94 3648 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:146
#     float b_inv = 1.0/b;
	div		___678_b_inv $const9 ___685_z_ma 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{146} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:147
#     return a * float2(b_inv, b_inv);
	assign		$tmp1658.x ___678_b_inv 	%line{147} %argrw{"wr"}
	assign		$tmp1658.y ___678_b_inv 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 3648 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		$tmp1649.x $tmp1655.x $tmp1658.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		$tmp1649.y $tmp1655.y $tmp1658.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	return	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{86}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const95 3653 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:92
#     return deriv.x * vT + deriv.y * vB;
	mul		$tmp1659 $tmp1649.x ___717_Tn 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{92} %argrw{"wrr"}
	mul		$tmp1660 $tmp1649.y ___717_Bn 	%argrw{"wrr"}
	add		$tmp1648 $tmp1659 $tmp1660 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	mul		$tmp1661 $tmp1648 ___716_w 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"wrr"}
	add		$tmp1557 $tmp1557 $tmp1661 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:333
#         if (linearize) PxrLinearizeSRGB(c);
	if		linearize 3679 3679 	%line{333} %argrw{"r"}
	functioncall	$const25 3679 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 3662 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp1663 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp1664 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp1662 $tmp1664 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp1662 3679 3679 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp1666 3665 3667 3678 3679 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp1665 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp1666 $tmp1665 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp1667 ___714_c ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp1668 $tmp1667 $const29 	%argrw{"wrr"}
	if		$tmp1668 3673 3678 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp1669 ___714_c ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp1670 $tmp1669 $const30 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp1670 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp1672 ___714_c ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp1673 $tmp1672 $const31 	%argrw{"wrr"}
	mul		$tmp1674 $tmp1673 $const32 	%argrw{"wrr"}
	pow		$tmp1671 $tmp1674 $const33 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp1671 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:335
#         if (needAlpha)
	if		needAlpha 3692 3692 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{335} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:337
#             TxParams alphaParams = txparams;
	assign		___718_alphaParams.firstchannel txparams.firstchannel 	%line{337} %argrw{"wr"}
	assign		___718_alphaParams.blur txparams.blur 	%argrw{"wr"}
	assign		___718_alphaParams.missingcolor txparams.missingcolor 	%argrw{"wr"}
	assign		___718_alphaParams.missingalpha txparams.missingalpha 	%argrw{"wr"}
	assign		___718_alphaParams.interp txparams.interp 	%argrw{"wr"}
	assign		___718_alphaParams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:338
#             alphaParams.firstchannel += 3;    // XXX: Assume RGBA
	add		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel $const5 	%line{338} %argrw{"wrr"}
	assign		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:339
#             a = PxrTextureLookup(filename, txcoords, alphaParams);
	functioncall	$const18 3691 	%line{339} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha ___718_alphaParams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		___714_a filename5 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 ___718_alphaParams.firstchannel $const20 ___718_alphaParams.blur $const21 ___652_missingalpha $const22 ___718_alphaParams.interp $const23 ___718_alphaParams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:342
#             alpha = mix(alpha, 1, a);
	mix		$tmp1556 $tmp1556 $const9 ___714_a 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{342} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:346
#         co += c * w;
	mul		$tmp1675 ___714_c ___716_w 	%line{346} %argrw{"wrr"}
	add		___714_co ___714_co $tmp1675 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:347
#         if (blendingContrast > 0)
	gt		$tmp1676 blendingContrast $const2 	%line{347} %argrw{"wrr"}
	if		$tmp1676 3707 3707 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:348
#             hexTileAccumulate(c, w, hexTex, hexCol);
	functioncall	$const96 3707 	%line{348} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:274
#     result.value += pow(tex, htx.powerTtoG) * weight;
	pow		$tmp1677 ___714_c $tmp1554.powerTtoG 	%line{274} %argrw{"wrr"}
	mul		$tmp1678 $tmp1677 ___716_w 	%argrw{"wrr"}
	add		___714_hexCol.value ___714_hexCol.value $tmp1678 	%argrw{"wrr"}
	assign		___714_hexCol.value ___714_hexCol.value 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:275
#     result.norm += weight * weight;
	mul		$tmp1679 ___716_w ___716_w 	%line{275} %argrw{"wrr"}
	add		___714_hexCol.norm ___714_hexCol.norm $tmp1679 	%argrw{"wrr"}
	assign		___714_hexCol.norm ___714_hexCol.norm 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:276
#     result.powerGtoT += htx.powerGtoT * weight;
	mul		$tmp1680 $tmp1554.powerGtoT ___716_w 	%line{276} %argrw{"wrr"}
	add		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT $tmp1680 	%argrw{"wrr"}
	assign		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	assign		$tmp1681 ___715_i 	%line{315} %argrw{"wr"}
	add		___715_i ___715_i $const3 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:350
#     if (blendingContrast > 0)
	gt		$tmp1682 blendingContrast $const2 	%line{350} %argrw{"wrr"}
	if		$tmp1682 3720 3720 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:351
#         cc = hexTileFinalColor(hexCol);
	functioncall	$const97 3720 	%line{351} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:284
#     float norm = 1.0 / sqrt(in.norm);
	sqrt		$tmp1683 ___714_hexCol.norm 	%line{284} %argrw{"wr"}
	div		___713_norm $const9 $tmp1683 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:285
#     color result = norm * (in.value - HEXT_GCENTER) + HEXT_GCENTER;
	sub		$tmp1685 ___714_hexCol.value $const81 	%line{285} %argrw{"wrr"}
	mul		$tmp1686 ___713_norm $tmp1685 	%argrw{"wrr"}
	add		___713_result $tmp1686 $const81 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:287
#     result = max(result, color(0.0));
	max		___713_result ___713_result $const40 	%line{287} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:290
#     result = pow(result, in.powerGtoT);
	pow		___713_result ___713_result ___714_hexCol.powerGtoT 	%line{290} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:291
#     return result;
	assign		___714_cc ___713_result 	%line{291} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:353
#     return mix(co, cc, blendingContrast);
	mix		$tmp1553 ___714_co ___714_cc blendingContrast 	%line{353} %argrw{"wrrr"}
# PxrMultiTexture.osl:780
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aassign		alphas ___773_g $tmp1556 	%filename{"PxrMultiTexture.osl"} %line{780} %argrw{"wrr"}
	aassign		grads ___773_g $tmp1557 	%argrw{"wrr"}
# PxrMultiTexture.osl:777
#                     colors[g] = hexTileLookup(filename5, txparams, linearize, mipBias,
	aassign		colors ___773_g $tmp1553 	%line{777} %argrw{"wrr"}
# PxrMultiTexture.osl:782
#                 else if (texId == 6)
	eq		$tmp1689 ___775_texId $const36 	%line{782} %argrw{"wrr"}
	if		$tmp1689 4037 4974 	%argrw{"r"}
# PxrMultiTexture.osl:787
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aref		$tmp1691.powerTtoG hexTex.powerTtoG ___773_g 	%line{787} %argrw{"wrr"}
	aref		$tmp1691.powerGtoT hexTex.powerGtoT ___773_g 	%argrw{"wrr"}
	aref		$tmp1692.s hexData.s ___773_g 	%argrw{"wrr"}
	aref		$tmp1692.t hexData.t ___773_g 	%argrw{"wrr"}
	aref		$tmp1692.w hexData.w ___773_g 	%argrw{"wrr"}
	aref		$tmp1692.r hexData.r ___773_g 	%argrw{"wrr"}
	aref		$tmp1693 alphas ___773_g 	%argrw{"wrr"}
	aref		$tmp1694 grads ___773_g 	%argrw{"wrr"}
# PxrMultiTexture.osl:784
#                     colors[g] = hexTileLookup(filename6, txparams, linearize, mipBias,
	functioncall	$const82 4034 	%line{784} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:310
#     HexTileColor hexCol = HEXTILECOLOR_ZERO;
	assign		___714_hexCol.value $const40 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{310} %argrw{"wr"}
	assign		___714_hexCol.norm $const44 	%argrw{"wr"}
	assign		___714_hexCol.powerGtoT $const40 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:311
#     color co = 0, cc = 0, c;
	assign		___714_co $const2 	%line{311} %argrw{"wr"}
	assign		___714_cc $const2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:313
#     ng = 0;
	assign		$tmp1694 $const2 	%line{313} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	for		$tmp1696 3743 3745 4020 4022 	%line{315} %argrw{"r"}
	assign		___715_i $const2 	%argrw{"wr"}
	lt		$tmp1695 ___715_i $const5 	%argrw{"wrr"}
	neq		$tmp1696 $tmp1695 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:317
#         float w = hexData.w[i];
	compref		___716_w $tmp1692.w ___715_i 	%line{317} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:318
#         if (w == 0.0)
	eq		$tmp1697 ___716_w $const44 	%line{318} %argrw{"wrr"}
	if		$tmp1697 3749 3749 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:319
#             continue;
	continue	%line{319}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:322
#         TxCoords txcoords = initTxCoords(hexData.s[i], hexData.t[i], 0);
	compref		$tmp1698 $tmp1692.s ___715_i 	%line{322} %argrw{"wrr"}
	compref		$tmp1699 $tmp1692.t ___715_i 	%argrw{"wrr"}
	functioncall	$const16 3773 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 3759 3760 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{100} %argrw{"r"}
	functioncall	$const17 3759 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp1700 $tmp1699 	%line{48} %argrw{"wr"}
	add		$tmp1701 $tmp1700 $const9 	%argrw{"wrr"}
	floor		$tmp1702 $tmp1699 	%argrw{"wr"}
	sub		$tmp1703 $tmp1699 $tmp1702 	%argrw{"wrr"}
	sub		___636__tt $tmp1701 $tmp1703 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt $tmp1699 	%line{100} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:101
#     TxCoords coords = { ss, _tt, Dx(ss), Dy(ss), Dx(_tt), Dy(_tt) };
	assign		___636_coords.s $tmp1698 	%line{101} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx $tmp1698 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy $tmp1698 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     return coords;
	assign		___716_txcoords.s ___636_coords.s 	%line{102} %argrw{"wr"}
	assign		___716_txcoords.t ___636_coords.t 	%argrw{"wr"}
	assign		___716_txcoords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___716_txcoords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___716_txcoords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___716_txcoords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:323
#         if (mipBias != 0 || maxResolution != 0)
	neq		$tmp1704 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{323} %argrw{"wrr"}
	neq		$tmp1705 $tmp1704 $const2 	%argrw{"wrr"}
	if		$tmp1705 3776 3779 	%argrw{"r"}
	neq		$tmp1706 maxResolution $const2 	%argrw{"wrr"}
	neq		$tmp1707 $tmp1706 $const2 	%argrw{"wrr"}
	assign		$tmp1705 $tmp1707 	%argrw{"wr"}
	if		$tmp1705 3836 3836 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:324
#             PxrTxMipControls(mipBias, maxResolution, txcoords, txparams);
	functioncall	$const83 3836 	%line{324} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:153
#     float bias = (mipBias != 0) ? pow(2.0, mipBias) : 1.0;
	neq		$tmp1708 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{153} %argrw{"wrr"}
	if		$tmp1708 3785 3786 	%argrw{"r"}
	assign		$tmp1709 mipBias 	%argrw{"wr"}
	pow		___645_bias $const68 $tmp1709 	%argrw{"wrr"}
	assign		___645_bias $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:154
#     bias *= params.width;
	mul		___645_bias ___645_bias txparams.width 	%line{154} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:155
#     if (maxResolution <= 0)
	le		$tmp1710 maxResolution $const2 	%line{155} %argrw{"wrr"}
	if		$tmp1710 3790 3836 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:157
#         params.width = bias;
	assign		txparams.width ___645_bias 	%line{157} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:163
#         float minRadius = (maxResolution > 0.0) ? 1.0 / maxResolution : 0.0;
	gt		$tmp1711 maxResolution $const44 	%line{163} %argrw{"wrr"}
	if		$tmp1711 3793 3794 	%argrw{"r"}
	div		___647_minRadius $const9 maxResolution 	%argrw{"wrr"}
	assign		___647_minRadius $const44 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:165
#         float dsdx = max(minRadius, abs(coords.dsdx * bias)) * sign(coords.dsdx);
	mul		$tmp1714 ___716_txcoords.dsdx ___645_bias 	%line{165} %argrw{"wrr"}
	abs		$tmp1713 $tmp1714 	%argrw{"wr"}
	max		$tmp1712 ___647_minRadius $tmp1713 	%argrw{"wrr"}
	sign		$tmp1715 ___716_txcoords.dsdx 	%argrw{"wr"}
	mul		___647_dsdx $tmp1712 $tmp1715 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:166
#         float dtdx = max(minRadius, abs(coords.dtdx * bias)) * sign(coords.dtdx);
	mul		$tmp1718 ___716_txcoords.dtdx ___645_bias 	%line{166} %argrw{"wrr"}
	abs		$tmp1717 $tmp1718 	%argrw{"wr"}
	max		$tmp1716 ___647_minRadius $tmp1717 	%argrw{"wrr"}
	sign		$tmp1719 ___716_txcoords.dtdx 	%argrw{"wr"}
	mul		___647_dtdx $tmp1716 $tmp1719 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:167
#         float dsdy = max(minRadius, abs(coords.dsdy * bias)) * sign(coords.dsdy);
	mul		$tmp1722 ___716_txcoords.dsdy ___645_bias 	%line{167} %argrw{"wrr"}
	abs		$tmp1721 $tmp1722 	%argrw{"wr"}
	max		$tmp1720 ___647_minRadius $tmp1721 	%argrw{"wrr"}
	sign		$tmp1723 ___716_txcoords.dsdy 	%argrw{"wr"}
	mul		___647_dsdy $tmp1720 $tmp1723 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:168
#         float dtdy = max(minRadius, abs(coords.dtdy * bias)) * sign(coords.dtdy);
	mul		$tmp1726 ___716_txcoords.dtdy ___645_bias 	%line{168} %argrw{"wrr"}
	abs		$tmp1725 $tmp1726 	%argrw{"wr"}
	max		$tmp1724 ___647_minRadius $tmp1725 	%argrw{"wrr"}
	sign		$tmp1727 ___716_txcoords.dtdy 	%argrw{"wr"}
	mul		___647_dtdy $tmp1724 $tmp1727 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:169
#         vector v0 = point(coords.dsdx, coords.dtdx, 0) - point(coords.dsdy, coords.dtdy, 0);
	point		$tmp1728 ___716_txcoords.dsdx ___716_txcoords.dtdx $const44 	%line{169} %argrw{"wrrr"}
	point		$tmp1729 ___716_txcoords.dsdy ___716_txcoords.dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v0 $tmp1728 $tmp1729 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:170
#         vector v1 = point(dsdx, dtdx, 0) - point(dsdy, dtdy, 0);
	point		$tmp1730 ___647_dsdx ___647_dtdx $const44 	%line{170} %argrw{"wrrr"}
	point		$tmp1731 ___647_dsdy ___647_dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v1 $tmp1730 $tmp1731 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:171
#         params.width = (v1.x*v1.x + v1.y*v1.y) / (v0.x*v0.x + v1.y*v1.y);
	compref		$tmp1732 ___647_v1 $const2 	%line{171} %argrw{"wrr"}
	compref		$tmp1733 ___647_v1 $const2 	%argrw{"wrr"}
	mul		$tmp1734 $tmp1732 $tmp1733 	%argrw{"wrr"}
	compref		$tmp1735 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp1736 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp1737 $tmp1735 $tmp1736 	%argrw{"wrr"}
	add		$tmp1738 $tmp1734 $tmp1737 	%argrw{"wrr"}
	compref		$tmp1739 ___647_v0 $const2 	%argrw{"wrr"}
	compref		$tmp1740 ___647_v0 $const2 	%argrw{"wrr"}
	mul		$tmp1741 $tmp1739 $tmp1740 	%argrw{"wrr"}
	compref		$tmp1742 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp1743 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp1744 $tmp1742 $tmp1743 	%argrw{"wrr"}
	add		$tmp1745 $tmp1741 $tmp1744 	%argrw{"wrr"}
	div		txparams.width $tmp1738 $tmp1745 	%argrw{"wrr"}
	assign		txparams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:325
#         c = PxrTextureLookup(filename, txcoords, txparams);
	functioncall	$const18 3866 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{325} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename6 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp1746 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp1746 3845 3845 	%argrw{"r"}
	assign		___714_c ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename6 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp1747 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp1747 3851 3851 	%argrw{"r"}
	neq		$tmp1748 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp1747 $tmp1748 	%argrw{"wr"}
	if		$tmp1747 3865 3865 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp1749 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp1750 $tmp1749 $const2 	%argrw{"wrr"}
	if		$tmp1750 3855 3858 	%argrw{"r"}
	eq		$tmp1751 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp1752 $tmp1751 $const2 	%argrw{"wrr"}
	assign		$tmp1750 $tmp1752 	%argrw{"wr"}
	if		$tmp1750 3865 3865 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp1753 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp1753 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp1754 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp1754 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp1755 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp1755 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		___714_c ___649_finalResult 	%line{217} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:326
#         if (nMap.enabled)
	if		nMap.enabled 3968 3968 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{326} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:329
#             GenBasisTB(Tn, Bn, float2(hexData.s[i], hexData.t[i]), N);
	compref		$tmp1756.x $tmp1692.s ___715_i 	%line{329} %argrw{"wrr"}
	compref		$tmp1756.y $tmp1692.t ___715_i 	%argrw{"wrr"}
	functioncall	$const84 3916 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:55
#     vector sigmaX = dPdu - dot(dPdu, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp1757 dPdu N 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{55} %argrw{"wrr"}
	mul		$tmp1758 $tmp1757 N 	%argrw{"wrr"}
	sub		___684_sigmaX dPdu $tmp1758 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:56
#     vector sigmaY = dPdv - dot(dPdv, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp1759 dPdv N 	%line{56} %argrw{"wrr"}
	mul		$tmp1760 $tmp1759 N 	%argrw{"wrr"}
	sub		___684_sigmaY dPdv $tmp1760 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:57
#     float flip_sign = dot(dPdv, cross(nrmBaseNormal, dPdu)) < 0.0 ? -1.0 : 1.0;
	cross		$tmp1762 N dPdu 	%line{57} %argrw{"wrr"}
	dot		$tmp1761 dPdv $tmp1762 	%argrw{"wrr"}
	lt		$tmp1763 $tmp1761 $const44 	%argrw{"wrr"}
	if		$tmp1763 3881 3882 	%argrw{"r"}
	assign		___684_flip_sign $const85 	%argrw{"wr"}
	assign		___684_flip_sign $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:59
#     float2 dSTdx = Dx(texST);
	functioncall	$const86 3885 	%line{59} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:167
#     return float2(Dx(a.x), Dx(a.y));
	Dx		___684_dSTdx.x $tmp1756.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{167} %argrw{"wr"} %argderivs{1}
	Dx		___684_dSTdx.y $tmp1756.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:60
#     float2 dSTdy = Dy(texST);
	functioncall	$const87 3888 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{60} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:172
#     return float2(Dy(a.x), Dy(a.y));
	Dy		___684_dSTdy.x $tmp1756.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{172} %argrw{"wr"} %argderivs{1}
	Dy		___684_dSTdy.y $tmp1756.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:61
#     float det = dot(dSTdx, float2(dSTdy.y, -dSTdy.x));
	assign		$tmp1764.x ___684_dSTdy.y 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{61} %argrw{"wr"}
	neg		$tmp1764.y ___684_dSTdy.x 	%argrw{"wr"}
	functioncall	$const88 3894 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:162
#     return a.x * b.x + a.y * b.y;
	mul		$tmp1765 ___684_dSTdx.x $tmp1764.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{162} %argrw{"wrr"}
	mul		$tmp1766 ___684_dSTdx.y $tmp1764.y 	%argrw{"wrr"}
	add		___684_det $tmp1765 $tmp1766 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:62
#     float sign_det = det < 0.0 ? -1.0 : 1.0;
	lt		$tmp1767 ___684_det $const44 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{62} %argrw{"wrr"}
	if		$tmp1767 3897 3898 	%argrw{"r"}
	assign		___684_sign_det $const85 	%argrw{"wr"}
	assign		___684_sign_det $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:66
#     float2 invC0 = sign_det * float2(dSTdy.y, -dSTdx.y);
	assign		$tmp1768.x ___684_dSTdy.y 	%line{66} %argrw{"wr"}
	neg		$tmp1768.y ___684_dSTdx.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 3906 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:130
#     return b * float2(a, a);
	assign		$tmp1769.x ___684_sign_det 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{130} %argrw{"wr"}
	assign		$tmp1769.y ___684_sign_det 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 3906 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		___684_invC0.x $tmp1768.x $tmp1769.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		___684_invC0.y $tmp1768.y $tmp1769.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:67
#     vT = sigmaX * invC0.x + sigmaY * invC0.y;
	mul		$tmp1770 ___684_sigmaX ___684_invC0.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{67} %argrw{"wrr"}
	mul		$tmp1771 ___684_sigmaY ___684_invC0.y 	%argrw{"wrr"}
	add		___717_Tn $tmp1770 $tmp1771 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:68
#     if (abs(det) > 0.0) vT = normalize(vT);
	abs		$tmp1772 ___684_det 	%line{68} %argrw{"wr"}
	gt		$tmp1773 $tmp1772 $const44 	%argrw{"wrr"}
	if		$tmp1773 3913 3913 	%argrw{"r"}
	normalize	___717_Tn ___717_Tn 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:69
#     vB = (sign_det * flip_sign) * cross(nrmBaseNormal, vT);
	mul		$tmp1774 ___684_sign_det ___684_flip_sign 	%line{69} %argrw{"wrr"}
	cross		$tmp1775 N ___717_Tn 	%argrw{"wrr"}
	mul		___717_Bn $tmp1774 $tmp1775 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:330
#             setupNormalMapHex(nMap, c);
	functioncall	$const90 3935 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{330} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:171
#     color tsNormal = nmap * 2.0 - 1.0;
	mul		$tmp1776 ___714_c $const68 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{171} %argrw{"wrr"}
	sub		___694_tsNormal $tmp1776 $const9 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:173
#     if (nmp.orientation == k_opengl)
	eq		$tmp1777 nMap.orientation $const2 	%line{173} %argrw{"wrr"}
	if		$tmp1777 3921 3934 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:177
#     else if (nmp.orientation == k_directx)
	eq		$tmp1778 nMap.orientation $const3 	%line{177} %argrw{"wrr"}
	if		$tmp1778 3926 3934 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:179
#         tsNormal[1] = -tsNormal[1];
	compref		$tmp1779 ___694_tsNormal $const3 	%line{179} %argrw{"wrr"}
	neg		$tmp1780 $tmp1779 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp1780 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:183
#         if (nmp.flipX)
	if		nMap.flipX 3930 3930 	%line{183} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:184
#             tsNormal[0] = -tsNormal[0];
	compref		$tmp1781 ___694_tsNormal $const2 	%line{184} %argrw{"wrr"}
	neg		$tmp1782 $tmp1781 	%argrw{"wr"}
	compassign	___694_tsNormal $const2 $tmp1782 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:185
#         if (nmp.flipY)
	if		nMap.flipY 3934 3934 	%line{185} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:186
#             tsNormal[1] = -tsNormal[1];
	compref		$tmp1783 ___694_tsNormal $const3 	%line{186} %argrw{"wrr"}
	neg		$tmp1784 $tmp1783 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp1784 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:188
#     nmap = tsNormal;
	assign		___714_c ___694_tsNormal 	%line{188} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const91 3962 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:76
# 	float scale = 1.0 / 128.0;
	div		___685_scale $const9 $const92 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{76} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:80
# 	color vMa = abs(vM);
	abs		___685_vMa ___714_c 	%line{80} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:81
# 	float z_ma = max(vMa[2], scale * max(vMa[0], vMa[1]));
	compref		$tmp1787 ___685_vMa $const4 	%line{81} %argrw{"wrr"}
	compref		$tmp1789 ___685_vMa $const2 	%argrw{"wrr"}
	compref		$tmp1790 ___685_vMa $const3 	%argrw{"wrr"}
	max		$tmp1788 $tmp1789 $tmp1790 	%argrw{"wrr"}
	mul		$tmp1791 ___685_scale $tmp1788 	%argrw{"wrr"}
	max		___685_z_ma $tmp1787 $tmp1791 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:84
# 	int gFlipVertDeriv = 1;
	assign		___685_gFlipVertDeriv $const3 	%line{84} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:85
# 	float s = gFlipVertDeriv ? -1.0 : 1.0;
	if		___685_gFlipVertDeriv 3947 3948 	%line{85} %argrw{"r"}
	assign		___685_s $const85 	%argrw{"wr"}
	assign		___685_s $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	compref		$tmp1793.x ___714_c $const2 	%line{86} %argrw{"wrr"}
	compref		$tmp1794 ___714_c $const3 	%argrw{"wrr"}
	mul		$tmp1793.y ___685_s $tmp1794 	%argrw{"wrr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const93 3954 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:55
#     return float2(-a.x, -a.y);
	neg		$tmp1792.x $tmp1793.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{55} %argrw{"wr"}
	neg		$tmp1792.y $tmp1793.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const94 3961 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:146
#     float b_inv = 1.0/b;
	div		___678_b_inv $const9 ___685_z_ma 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{146} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:147
#     return a * float2(b_inv, b_inv);
	assign		$tmp1795.x ___678_b_inv 	%line{147} %argrw{"wr"}
	assign		$tmp1795.y ___678_b_inv 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 3961 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		$tmp1786.x $tmp1792.x $tmp1795.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		$tmp1786.y $tmp1792.y $tmp1795.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	return	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{86}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const95 3966 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:92
#     return deriv.x * vT + deriv.y * vB;
	mul		$tmp1796 $tmp1786.x ___717_Tn 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{92} %argrw{"wrr"}
	mul		$tmp1797 $tmp1786.y ___717_Bn 	%argrw{"wrr"}
	add		$tmp1785 $tmp1796 $tmp1797 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	mul		$tmp1798 $tmp1785 ___716_w 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"wrr"}
	add		$tmp1694 $tmp1694 $tmp1798 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:333
#         if (linearize) PxrLinearizeSRGB(c);
	if		linearize 3992 3992 	%line{333} %argrw{"r"}
	functioncall	$const25 3992 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 3975 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp1800 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp1801 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp1799 $tmp1801 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp1799 3992 3992 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp1803 3978 3980 3991 3992 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp1802 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp1803 $tmp1802 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp1804 ___714_c ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp1805 $tmp1804 $const29 	%argrw{"wrr"}
	if		$tmp1805 3986 3991 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp1806 ___714_c ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp1807 $tmp1806 $const30 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp1807 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp1809 ___714_c ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp1810 $tmp1809 $const31 	%argrw{"wrr"}
	mul		$tmp1811 $tmp1810 $const32 	%argrw{"wrr"}
	pow		$tmp1808 $tmp1811 $const33 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp1808 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:335
#         if (needAlpha)
	if		needAlpha 4005 4005 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{335} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:337
#             TxParams alphaParams = txparams;
	assign		___718_alphaParams.firstchannel txparams.firstchannel 	%line{337} %argrw{"wr"}
	assign		___718_alphaParams.blur txparams.blur 	%argrw{"wr"}
	assign		___718_alphaParams.missingcolor txparams.missingcolor 	%argrw{"wr"}
	assign		___718_alphaParams.missingalpha txparams.missingalpha 	%argrw{"wr"}
	assign		___718_alphaParams.interp txparams.interp 	%argrw{"wr"}
	assign		___718_alphaParams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:338
#             alphaParams.firstchannel += 3;    // XXX: Assume RGBA
	add		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel $const5 	%line{338} %argrw{"wrr"}
	assign		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:339
#             a = PxrTextureLookup(filename, txcoords, alphaParams);
	functioncall	$const18 4004 	%line{339} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha ___718_alphaParams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		___714_a filename6 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 ___718_alphaParams.firstchannel $const20 ___718_alphaParams.blur $const21 ___652_missingalpha $const22 ___718_alphaParams.interp $const23 ___718_alphaParams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:342
#             alpha = mix(alpha, 1, a);
	mix		$tmp1693 $tmp1693 $const9 ___714_a 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{342} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:346
#         co += c * w;
	mul		$tmp1812 ___714_c ___716_w 	%line{346} %argrw{"wrr"}
	add		___714_co ___714_co $tmp1812 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:347
#         if (blendingContrast > 0)
	gt		$tmp1813 blendingContrast $const2 	%line{347} %argrw{"wrr"}
	if		$tmp1813 4020 4020 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:348
#             hexTileAccumulate(c, w, hexTex, hexCol);
	functioncall	$const96 4020 	%line{348} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:274
#     result.value += pow(tex, htx.powerTtoG) * weight;
	pow		$tmp1814 ___714_c $tmp1691.powerTtoG 	%line{274} %argrw{"wrr"}
	mul		$tmp1815 $tmp1814 ___716_w 	%argrw{"wrr"}
	add		___714_hexCol.value ___714_hexCol.value $tmp1815 	%argrw{"wrr"}
	assign		___714_hexCol.value ___714_hexCol.value 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:275
#     result.norm += weight * weight;
	mul		$tmp1816 ___716_w ___716_w 	%line{275} %argrw{"wrr"}
	add		___714_hexCol.norm ___714_hexCol.norm $tmp1816 	%argrw{"wrr"}
	assign		___714_hexCol.norm ___714_hexCol.norm 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:276
#     result.powerGtoT += htx.powerGtoT * weight;
	mul		$tmp1817 $tmp1691.powerGtoT ___716_w 	%line{276} %argrw{"wrr"}
	add		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT $tmp1817 	%argrw{"wrr"}
	assign		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	assign		$tmp1818 ___715_i 	%line{315} %argrw{"wr"}
	add		___715_i ___715_i $const3 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:350
#     if (blendingContrast > 0)
	gt		$tmp1819 blendingContrast $const2 	%line{350} %argrw{"wrr"}
	if		$tmp1819 4033 4033 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:351
#         cc = hexTileFinalColor(hexCol);
	functioncall	$const97 4033 	%line{351} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:284
#     float norm = 1.0 / sqrt(in.norm);
	sqrt		$tmp1820 ___714_hexCol.norm 	%line{284} %argrw{"wr"}
	div		___713_norm $const9 $tmp1820 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:285
#     color result = norm * (in.value - HEXT_GCENTER) + HEXT_GCENTER;
	sub		$tmp1822 ___714_hexCol.value $const81 	%line{285} %argrw{"wrr"}
	mul		$tmp1823 ___713_norm $tmp1822 	%argrw{"wrr"}
	add		___713_result $tmp1823 $const81 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:287
#     result = max(result, color(0.0));
	max		___713_result ___713_result $const40 	%line{287} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:290
#     result = pow(result, in.powerGtoT);
	pow		___713_result ___713_result ___714_hexCol.powerGtoT 	%line{290} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:291
#     return result;
	assign		___714_cc ___713_result 	%line{291} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:353
#     return mix(co, cc, blendingContrast);
	mix		$tmp1690 ___714_co ___714_cc blendingContrast 	%line{353} %argrw{"wrrr"}
# PxrMultiTexture.osl:787
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aassign		alphas ___773_g $tmp1693 	%filename{"PxrMultiTexture.osl"} %line{787} %argrw{"wrr"}
	aassign		grads ___773_g $tmp1694 	%argrw{"wrr"}
# PxrMultiTexture.osl:784
#                     colors[g] = hexTileLookup(filename6, txparams, linearize, mipBias,
	aassign		colors ___773_g $tmp1690 	%line{784} %argrw{"wrr"}
# PxrMultiTexture.osl:789
#                 else if (texId == 7)
	eq		$tmp1826 ___775_texId $const37 	%line{789} %argrw{"wrr"}
	if		$tmp1826 4350 4974 	%argrw{"r"}
# PxrMultiTexture.osl:794
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aref		$tmp1828.powerTtoG hexTex.powerTtoG ___773_g 	%line{794} %argrw{"wrr"}
	aref		$tmp1828.powerGtoT hexTex.powerGtoT ___773_g 	%argrw{"wrr"}
	aref		$tmp1829.s hexData.s ___773_g 	%argrw{"wrr"}
	aref		$tmp1829.t hexData.t ___773_g 	%argrw{"wrr"}
	aref		$tmp1829.w hexData.w ___773_g 	%argrw{"wrr"}
	aref		$tmp1829.r hexData.r ___773_g 	%argrw{"wrr"}
	aref		$tmp1830 alphas ___773_g 	%argrw{"wrr"}
	aref		$tmp1831 grads ___773_g 	%argrw{"wrr"}
# PxrMultiTexture.osl:791
#                     colors[g] = hexTileLookup(filename7, txparams, linearize, mipBias,
	functioncall	$const82 4347 	%line{791} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:310
#     HexTileColor hexCol = HEXTILECOLOR_ZERO;
	assign		___714_hexCol.value $const40 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{310} %argrw{"wr"}
	assign		___714_hexCol.norm $const44 	%argrw{"wr"}
	assign		___714_hexCol.powerGtoT $const40 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:311
#     color co = 0, cc = 0, c;
	assign		___714_co $const2 	%line{311} %argrw{"wr"}
	assign		___714_cc $const2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:313
#     ng = 0;
	assign		$tmp1831 $const2 	%line{313} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	for		$tmp1833 4056 4058 4333 4335 	%line{315} %argrw{"r"}
	assign		___715_i $const2 	%argrw{"wr"}
	lt		$tmp1832 ___715_i $const5 	%argrw{"wrr"}
	neq		$tmp1833 $tmp1832 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:317
#         float w = hexData.w[i];
	compref		___716_w $tmp1829.w ___715_i 	%line{317} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:318
#         if (w == 0.0)
	eq		$tmp1834 ___716_w $const44 	%line{318} %argrw{"wrr"}
	if		$tmp1834 4062 4062 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:319
#             continue;
	continue	%line{319}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:322
#         TxCoords txcoords = initTxCoords(hexData.s[i], hexData.t[i], 0);
	compref		$tmp1835 $tmp1829.s ___715_i 	%line{322} %argrw{"wrr"}
	compref		$tmp1836 $tmp1829.t ___715_i 	%argrw{"wrr"}
	functioncall	$const16 4086 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 4072 4073 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{100} %argrw{"r"}
	functioncall	$const17 4072 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp1837 $tmp1836 	%line{48} %argrw{"wr"}
	add		$tmp1838 $tmp1837 $const9 	%argrw{"wrr"}
	floor		$tmp1839 $tmp1836 	%argrw{"wr"}
	sub		$tmp1840 $tmp1836 $tmp1839 	%argrw{"wrr"}
	sub		___636__tt $tmp1838 $tmp1840 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt $tmp1836 	%line{100} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:101
#     TxCoords coords = { ss, _tt, Dx(ss), Dy(ss), Dx(_tt), Dy(_tt) };
	assign		___636_coords.s $tmp1835 	%line{101} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx $tmp1835 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy $tmp1835 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     return coords;
	assign		___716_txcoords.s ___636_coords.s 	%line{102} %argrw{"wr"}
	assign		___716_txcoords.t ___636_coords.t 	%argrw{"wr"}
	assign		___716_txcoords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___716_txcoords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___716_txcoords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___716_txcoords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:323
#         if (mipBias != 0 || maxResolution != 0)
	neq		$tmp1841 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{323} %argrw{"wrr"}
	neq		$tmp1842 $tmp1841 $const2 	%argrw{"wrr"}
	if		$tmp1842 4089 4092 	%argrw{"r"}
	neq		$tmp1843 maxResolution $const2 	%argrw{"wrr"}
	neq		$tmp1844 $tmp1843 $const2 	%argrw{"wrr"}
	assign		$tmp1842 $tmp1844 	%argrw{"wr"}
	if		$tmp1842 4149 4149 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:324
#             PxrTxMipControls(mipBias, maxResolution, txcoords, txparams);
	functioncall	$const83 4149 	%line{324} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:153
#     float bias = (mipBias != 0) ? pow(2.0, mipBias) : 1.0;
	neq		$tmp1845 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{153} %argrw{"wrr"}
	if		$tmp1845 4098 4099 	%argrw{"r"}
	assign		$tmp1846 mipBias 	%argrw{"wr"}
	pow		___645_bias $const68 $tmp1846 	%argrw{"wrr"}
	assign		___645_bias $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:154
#     bias *= params.width;
	mul		___645_bias ___645_bias txparams.width 	%line{154} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:155
#     if (maxResolution <= 0)
	le		$tmp1847 maxResolution $const2 	%line{155} %argrw{"wrr"}
	if		$tmp1847 4103 4149 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:157
#         params.width = bias;
	assign		txparams.width ___645_bias 	%line{157} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:163
#         float minRadius = (maxResolution > 0.0) ? 1.0 / maxResolution : 0.0;
	gt		$tmp1848 maxResolution $const44 	%line{163} %argrw{"wrr"}
	if		$tmp1848 4106 4107 	%argrw{"r"}
	div		___647_minRadius $const9 maxResolution 	%argrw{"wrr"}
	assign		___647_minRadius $const44 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:165
#         float dsdx = max(minRadius, abs(coords.dsdx * bias)) * sign(coords.dsdx);
	mul		$tmp1851 ___716_txcoords.dsdx ___645_bias 	%line{165} %argrw{"wrr"}
	abs		$tmp1850 $tmp1851 	%argrw{"wr"}
	max		$tmp1849 ___647_minRadius $tmp1850 	%argrw{"wrr"}
	sign		$tmp1852 ___716_txcoords.dsdx 	%argrw{"wr"}
	mul		___647_dsdx $tmp1849 $tmp1852 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:166
#         float dtdx = max(minRadius, abs(coords.dtdx * bias)) * sign(coords.dtdx);
	mul		$tmp1855 ___716_txcoords.dtdx ___645_bias 	%line{166} %argrw{"wrr"}
	abs		$tmp1854 $tmp1855 	%argrw{"wr"}
	max		$tmp1853 ___647_minRadius $tmp1854 	%argrw{"wrr"}
	sign		$tmp1856 ___716_txcoords.dtdx 	%argrw{"wr"}
	mul		___647_dtdx $tmp1853 $tmp1856 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:167
#         float dsdy = max(minRadius, abs(coords.dsdy * bias)) * sign(coords.dsdy);
	mul		$tmp1859 ___716_txcoords.dsdy ___645_bias 	%line{167} %argrw{"wrr"}
	abs		$tmp1858 $tmp1859 	%argrw{"wr"}
	max		$tmp1857 ___647_minRadius $tmp1858 	%argrw{"wrr"}
	sign		$tmp1860 ___716_txcoords.dsdy 	%argrw{"wr"}
	mul		___647_dsdy $tmp1857 $tmp1860 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:168
#         float dtdy = max(minRadius, abs(coords.dtdy * bias)) * sign(coords.dtdy);
	mul		$tmp1863 ___716_txcoords.dtdy ___645_bias 	%line{168} %argrw{"wrr"}
	abs		$tmp1862 $tmp1863 	%argrw{"wr"}
	max		$tmp1861 ___647_minRadius $tmp1862 	%argrw{"wrr"}
	sign		$tmp1864 ___716_txcoords.dtdy 	%argrw{"wr"}
	mul		___647_dtdy $tmp1861 $tmp1864 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:169
#         vector v0 = point(coords.dsdx, coords.dtdx, 0) - point(coords.dsdy, coords.dtdy, 0);
	point		$tmp1865 ___716_txcoords.dsdx ___716_txcoords.dtdx $const44 	%line{169} %argrw{"wrrr"}
	point		$tmp1866 ___716_txcoords.dsdy ___716_txcoords.dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v0 $tmp1865 $tmp1866 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:170
#         vector v1 = point(dsdx, dtdx, 0) - point(dsdy, dtdy, 0);
	point		$tmp1867 ___647_dsdx ___647_dtdx $const44 	%line{170} %argrw{"wrrr"}
	point		$tmp1868 ___647_dsdy ___647_dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v1 $tmp1867 $tmp1868 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:171
#         params.width = (v1.x*v1.x + v1.y*v1.y) / (v0.x*v0.x + v1.y*v1.y);
	compref		$tmp1869 ___647_v1 $const2 	%line{171} %argrw{"wrr"}
	compref		$tmp1870 ___647_v1 $const2 	%argrw{"wrr"}
	mul		$tmp1871 $tmp1869 $tmp1870 	%argrw{"wrr"}
	compref		$tmp1872 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp1873 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp1874 $tmp1872 $tmp1873 	%argrw{"wrr"}
	add		$tmp1875 $tmp1871 $tmp1874 	%argrw{"wrr"}
	compref		$tmp1876 ___647_v0 $const2 	%argrw{"wrr"}
	compref		$tmp1877 ___647_v0 $const2 	%argrw{"wrr"}
	mul		$tmp1878 $tmp1876 $tmp1877 	%argrw{"wrr"}
	compref		$tmp1879 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp1880 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp1881 $tmp1879 $tmp1880 	%argrw{"wrr"}
	add		$tmp1882 $tmp1878 $tmp1881 	%argrw{"wrr"}
	div		txparams.width $tmp1875 $tmp1882 	%argrw{"wrr"}
	assign		txparams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:325
#         c = PxrTextureLookup(filename, txcoords, txparams);
	functioncall	$const18 4179 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{325} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename7 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp1883 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp1883 4158 4158 	%argrw{"r"}
	assign		___714_c ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename7 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp1884 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp1884 4164 4164 	%argrw{"r"}
	neq		$tmp1885 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp1884 $tmp1885 	%argrw{"wr"}
	if		$tmp1884 4178 4178 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp1886 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp1887 $tmp1886 $const2 	%argrw{"wrr"}
	if		$tmp1887 4168 4171 	%argrw{"r"}
	eq		$tmp1888 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp1889 $tmp1888 $const2 	%argrw{"wrr"}
	assign		$tmp1887 $tmp1889 	%argrw{"wr"}
	if		$tmp1887 4178 4178 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp1890 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp1890 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp1891 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp1891 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp1892 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp1892 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		___714_c ___649_finalResult 	%line{217} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:326
#         if (nMap.enabled)
	if		nMap.enabled 4281 4281 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{326} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:329
#             GenBasisTB(Tn, Bn, float2(hexData.s[i], hexData.t[i]), N);
	compref		$tmp1893.x $tmp1829.s ___715_i 	%line{329} %argrw{"wrr"}
	compref		$tmp1893.y $tmp1829.t ___715_i 	%argrw{"wrr"}
	functioncall	$const84 4229 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:55
#     vector sigmaX = dPdu - dot(dPdu, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp1894 dPdu N 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{55} %argrw{"wrr"}
	mul		$tmp1895 $tmp1894 N 	%argrw{"wrr"}
	sub		___684_sigmaX dPdu $tmp1895 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:56
#     vector sigmaY = dPdv - dot(dPdv, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp1896 dPdv N 	%line{56} %argrw{"wrr"}
	mul		$tmp1897 $tmp1896 N 	%argrw{"wrr"}
	sub		___684_sigmaY dPdv $tmp1897 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:57
#     float flip_sign = dot(dPdv, cross(nrmBaseNormal, dPdu)) < 0.0 ? -1.0 : 1.0;
	cross		$tmp1899 N dPdu 	%line{57} %argrw{"wrr"}
	dot		$tmp1898 dPdv $tmp1899 	%argrw{"wrr"}
	lt		$tmp1900 $tmp1898 $const44 	%argrw{"wrr"}
	if		$tmp1900 4194 4195 	%argrw{"r"}
	assign		___684_flip_sign $const85 	%argrw{"wr"}
	assign		___684_flip_sign $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:59
#     float2 dSTdx = Dx(texST);
	functioncall	$const86 4198 	%line{59} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:167
#     return float2(Dx(a.x), Dx(a.y));
	Dx		___684_dSTdx.x $tmp1893.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{167} %argrw{"wr"} %argderivs{1}
	Dx		___684_dSTdx.y $tmp1893.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:60
#     float2 dSTdy = Dy(texST);
	functioncall	$const87 4201 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{60} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:172
#     return float2(Dy(a.x), Dy(a.y));
	Dy		___684_dSTdy.x $tmp1893.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{172} %argrw{"wr"} %argderivs{1}
	Dy		___684_dSTdy.y $tmp1893.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:61
#     float det = dot(dSTdx, float2(dSTdy.y, -dSTdy.x));
	assign		$tmp1901.x ___684_dSTdy.y 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{61} %argrw{"wr"}
	neg		$tmp1901.y ___684_dSTdy.x 	%argrw{"wr"}
	functioncall	$const88 4207 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:162
#     return a.x * b.x + a.y * b.y;
	mul		$tmp1902 ___684_dSTdx.x $tmp1901.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{162} %argrw{"wrr"}
	mul		$tmp1903 ___684_dSTdx.y $tmp1901.y 	%argrw{"wrr"}
	add		___684_det $tmp1902 $tmp1903 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:62
#     float sign_det = det < 0.0 ? -1.0 : 1.0;
	lt		$tmp1904 ___684_det $const44 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{62} %argrw{"wrr"}
	if		$tmp1904 4210 4211 	%argrw{"r"}
	assign		___684_sign_det $const85 	%argrw{"wr"}
	assign		___684_sign_det $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:66
#     float2 invC0 = sign_det * float2(dSTdy.y, -dSTdx.y);
	assign		$tmp1905.x ___684_dSTdy.y 	%line{66} %argrw{"wr"}
	neg		$tmp1905.y ___684_dSTdx.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 4219 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:130
#     return b * float2(a, a);
	assign		$tmp1906.x ___684_sign_det 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{130} %argrw{"wr"}
	assign		$tmp1906.y ___684_sign_det 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 4219 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		___684_invC0.x $tmp1905.x $tmp1906.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		___684_invC0.y $tmp1905.y $tmp1906.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:67
#     vT = sigmaX * invC0.x + sigmaY * invC0.y;
	mul		$tmp1907 ___684_sigmaX ___684_invC0.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{67} %argrw{"wrr"}
	mul		$tmp1908 ___684_sigmaY ___684_invC0.y 	%argrw{"wrr"}
	add		___717_Tn $tmp1907 $tmp1908 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:68
#     if (abs(det) > 0.0) vT = normalize(vT);
	abs		$tmp1909 ___684_det 	%line{68} %argrw{"wr"}
	gt		$tmp1910 $tmp1909 $const44 	%argrw{"wrr"}
	if		$tmp1910 4226 4226 	%argrw{"r"}
	normalize	___717_Tn ___717_Tn 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:69
#     vB = (sign_det * flip_sign) * cross(nrmBaseNormal, vT);
	mul		$tmp1911 ___684_sign_det ___684_flip_sign 	%line{69} %argrw{"wrr"}
	cross		$tmp1912 N ___717_Tn 	%argrw{"wrr"}
	mul		___717_Bn $tmp1911 $tmp1912 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:330
#             setupNormalMapHex(nMap, c);
	functioncall	$const90 4248 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{330} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:171
#     color tsNormal = nmap * 2.0 - 1.0;
	mul		$tmp1913 ___714_c $const68 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{171} %argrw{"wrr"}
	sub		___694_tsNormal $tmp1913 $const9 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:173
#     if (nmp.orientation == k_opengl)
	eq		$tmp1914 nMap.orientation $const2 	%line{173} %argrw{"wrr"}
	if		$tmp1914 4234 4247 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:177
#     else if (nmp.orientation == k_directx)
	eq		$tmp1915 nMap.orientation $const3 	%line{177} %argrw{"wrr"}
	if		$tmp1915 4239 4247 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:179
#         tsNormal[1] = -tsNormal[1];
	compref		$tmp1916 ___694_tsNormal $const3 	%line{179} %argrw{"wrr"}
	neg		$tmp1917 $tmp1916 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp1917 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:183
#         if (nmp.flipX)
	if		nMap.flipX 4243 4243 	%line{183} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:184
#             tsNormal[0] = -tsNormal[0];
	compref		$tmp1918 ___694_tsNormal $const2 	%line{184} %argrw{"wrr"}
	neg		$tmp1919 $tmp1918 	%argrw{"wr"}
	compassign	___694_tsNormal $const2 $tmp1919 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:185
#         if (nmp.flipY)
	if		nMap.flipY 4247 4247 	%line{185} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:186
#             tsNormal[1] = -tsNormal[1];
	compref		$tmp1920 ___694_tsNormal $const3 	%line{186} %argrw{"wrr"}
	neg		$tmp1921 $tmp1920 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp1921 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:188
#     nmap = tsNormal;
	assign		___714_c ___694_tsNormal 	%line{188} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const91 4275 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:76
# 	float scale = 1.0 / 128.0;
	div		___685_scale $const9 $const92 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{76} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:80
# 	color vMa = abs(vM);
	abs		___685_vMa ___714_c 	%line{80} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:81
# 	float z_ma = max(vMa[2], scale * max(vMa[0], vMa[1]));
	compref		$tmp1924 ___685_vMa $const4 	%line{81} %argrw{"wrr"}
	compref		$tmp1926 ___685_vMa $const2 	%argrw{"wrr"}
	compref		$tmp1927 ___685_vMa $const3 	%argrw{"wrr"}
	max		$tmp1925 $tmp1926 $tmp1927 	%argrw{"wrr"}
	mul		$tmp1928 ___685_scale $tmp1925 	%argrw{"wrr"}
	max		___685_z_ma $tmp1924 $tmp1928 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:84
# 	int gFlipVertDeriv = 1;
	assign		___685_gFlipVertDeriv $const3 	%line{84} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:85
# 	float s = gFlipVertDeriv ? -1.0 : 1.0;
	if		___685_gFlipVertDeriv 4260 4261 	%line{85} %argrw{"r"}
	assign		___685_s $const85 	%argrw{"wr"}
	assign		___685_s $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	compref		$tmp1930.x ___714_c $const2 	%line{86} %argrw{"wrr"}
	compref		$tmp1931 ___714_c $const3 	%argrw{"wrr"}
	mul		$tmp1930.y ___685_s $tmp1931 	%argrw{"wrr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const93 4267 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:55
#     return float2(-a.x, -a.y);
	neg		$tmp1929.x $tmp1930.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{55} %argrw{"wr"}
	neg		$tmp1929.y $tmp1930.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const94 4274 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:146
#     float b_inv = 1.0/b;
	div		___678_b_inv $const9 ___685_z_ma 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{146} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:147
#     return a * float2(b_inv, b_inv);
	assign		$tmp1932.x ___678_b_inv 	%line{147} %argrw{"wr"}
	assign		$tmp1932.y ___678_b_inv 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 4274 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		$tmp1923.x $tmp1929.x $tmp1932.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		$tmp1923.y $tmp1929.y $tmp1932.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	return	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{86}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const95 4279 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:92
#     return deriv.x * vT + deriv.y * vB;
	mul		$tmp1933 $tmp1923.x ___717_Tn 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{92} %argrw{"wrr"}
	mul		$tmp1934 $tmp1923.y ___717_Bn 	%argrw{"wrr"}
	add		$tmp1922 $tmp1933 $tmp1934 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	mul		$tmp1935 $tmp1922 ___716_w 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"wrr"}
	add		$tmp1831 $tmp1831 $tmp1935 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:333
#         if (linearize) PxrLinearizeSRGB(c);
	if		linearize 4305 4305 	%line{333} %argrw{"r"}
	functioncall	$const25 4305 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 4288 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp1937 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp1938 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp1936 $tmp1938 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp1936 4305 4305 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp1940 4291 4293 4304 4305 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp1939 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp1940 $tmp1939 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp1941 ___714_c ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp1942 $tmp1941 $const29 	%argrw{"wrr"}
	if		$tmp1942 4299 4304 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp1943 ___714_c ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp1944 $tmp1943 $const30 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp1944 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp1946 ___714_c ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp1947 $tmp1946 $const31 	%argrw{"wrr"}
	mul		$tmp1948 $tmp1947 $const32 	%argrw{"wrr"}
	pow		$tmp1945 $tmp1948 $const33 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp1945 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:335
#         if (needAlpha)
	if		needAlpha 4318 4318 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{335} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:337
#             TxParams alphaParams = txparams;
	assign		___718_alphaParams.firstchannel txparams.firstchannel 	%line{337} %argrw{"wr"}
	assign		___718_alphaParams.blur txparams.blur 	%argrw{"wr"}
	assign		___718_alphaParams.missingcolor txparams.missingcolor 	%argrw{"wr"}
	assign		___718_alphaParams.missingalpha txparams.missingalpha 	%argrw{"wr"}
	assign		___718_alphaParams.interp txparams.interp 	%argrw{"wr"}
	assign		___718_alphaParams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:338
#             alphaParams.firstchannel += 3;    // XXX: Assume RGBA
	add		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel $const5 	%line{338} %argrw{"wrr"}
	assign		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:339
#             a = PxrTextureLookup(filename, txcoords, alphaParams);
	functioncall	$const18 4317 	%line{339} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha ___718_alphaParams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		___714_a filename7 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 ___718_alphaParams.firstchannel $const20 ___718_alphaParams.blur $const21 ___652_missingalpha $const22 ___718_alphaParams.interp $const23 ___718_alphaParams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:342
#             alpha = mix(alpha, 1, a);
	mix		$tmp1830 $tmp1830 $const9 ___714_a 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{342} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:346
#         co += c * w;
	mul		$tmp1949 ___714_c ___716_w 	%line{346} %argrw{"wrr"}
	add		___714_co ___714_co $tmp1949 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:347
#         if (blendingContrast > 0)
	gt		$tmp1950 blendingContrast $const2 	%line{347} %argrw{"wrr"}
	if		$tmp1950 4333 4333 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:348
#             hexTileAccumulate(c, w, hexTex, hexCol);
	functioncall	$const96 4333 	%line{348} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:274
#     result.value += pow(tex, htx.powerTtoG) * weight;
	pow		$tmp1951 ___714_c $tmp1828.powerTtoG 	%line{274} %argrw{"wrr"}
	mul		$tmp1952 $tmp1951 ___716_w 	%argrw{"wrr"}
	add		___714_hexCol.value ___714_hexCol.value $tmp1952 	%argrw{"wrr"}
	assign		___714_hexCol.value ___714_hexCol.value 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:275
#     result.norm += weight * weight;
	mul		$tmp1953 ___716_w ___716_w 	%line{275} %argrw{"wrr"}
	add		___714_hexCol.norm ___714_hexCol.norm $tmp1953 	%argrw{"wrr"}
	assign		___714_hexCol.norm ___714_hexCol.norm 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:276
#     result.powerGtoT += htx.powerGtoT * weight;
	mul		$tmp1954 $tmp1828.powerGtoT ___716_w 	%line{276} %argrw{"wrr"}
	add		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT $tmp1954 	%argrw{"wrr"}
	assign		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	assign		$tmp1955 ___715_i 	%line{315} %argrw{"wr"}
	add		___715_i ___715_i $const3 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:350
#     if (blendingContrast > 0)
	gt		$tmp1956 blendingContrast $const2 	%line{350} %argrw{"wrr"}
	if		$tmp1956 4346 4346 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:351
#         cc = hexTileFinalColor(hexCol);
	functioncall	$const97 4346 	%line{351} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:284
#     float norm = 1.0 / sqrt(in.norm);
	sqrt		$tmp1957 ___714_hexCol.norm 	%line{284} %argrw{"wr"}
	div		___713_norm $const9 $tmp1957 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:285
#     color result = norm * (in.value - HEXT_GCENTER) + HEXT_GCENTER;
	sub		$tmp1959 ___714_hexCol.value $const81 	%line{285} %argrw{"wrr"}
	mul		$tmp1960 ___713_norm $tmp1959 	%argrw{"wrr"}
	add		___713_result $tmp1960 $const81 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:287
#     result = max(result, color(0.0));
	max		___713_result ___713_result $const40 	%line{287} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:290
#     result = pow(result, in.powerGtoT);
	pow		___713_result ___713_result ___714_hexCol.powerGtoT 	%line{290} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:291
#     return result;
	assign		___714_cc ___713_result 	%line{291} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:353
#     return mix(co, cc, blendingContrast);
	mix		$tmp1827 ___714_co ___714_cc blendingContrast 	%line{353} %argrw{"wrrr"}
# PxrMultiTexture.osl:794
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aassign		alphas ___773_g $tmp1830 	%filename{"PxrMultiTexture.osl"} %line{794} %argrw{"wrr"}
	aassign		grads ___773_g $tmp1831 	%argrw{"wrr"}
# PxrMultiTexture.osl:791
#                     colors[g] = hexTileLookup(filename7, txparams, linearize, mipBias,
	aassign		colors ___773_g $tmp1827 	%line{791} %argrw{"wrr"}
# PxrMultiTexture.osl:796
#                 else if (texId == 8)
	eq		$tmp1963 ___775_texId $const38 	%line{796} %argrw{"wrr"}
	if		$tmp1963 4663 4974 	%argrw{"r"}
# PxrMultiTexture.osl:801
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aref		$tmp1965.powerTtoG hexTex.powerTtoG ___773_g 	%line{801} %argrw{"wrr"}
	aref		$tmp1965.powerGtoT hexTex.powerGtoT ___773_g 	%argrw{"wrr"}
	aref		$tmp1966.s hexData.s ___773_g 	%argrw{"wrr"}
	aref		$tmp1966.t hexData.t ___773_g 	%argrw{"wrr"}
	aref		$tmp1966.w hexData.w ___773_g 	%argrw{"wrr"}
	aref		$tmp1966.r hexData.r ___773_g 	%argrw{"wrr"}
	aref		$tmp1967 alphas ___773_g 	%argrw{"wrr"}
	aref		$tmp1968 grads ___773_g 	%argrw{"wrr"}
# PxrMultiTexture.osl:798
#                     colors[g] = hexTileLookup(filename8, txparams, linearize, mipBias,
	functioncall	$const82 4660 	%line{798} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:310
#     HexTileColor hexCol = HEXTILECOLOR_ZERO;
	assign		___714_hexCol.value $const40 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{310} %argrw{"wr"}
	assign		___714_hexCol.norm $const44 	%argrw{"wr"}
	assign		___714_hexCol.powerGtoT $const40 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:311
#     color co = 0, cc = 0, c;
	assign		___714_co $const2 	%line{311} %argrw{"wr"}
	assign		___714_cc $const2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:313
#     ng = 0;
	assign		$tmp1968 $const2 	%line{313} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	for		$tmp1970 4369 4371 4646 4648 	%line{315} %argrw{"r"}
	assign		___715_i $const2 	%argrw{"wr"}
	lt		$tmp1969 ___715_i $const5 	%argrw{"wrr"}
	neq		$tmp1970 $tmp1969 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:317
#         float w = hexData.w[i];
	compref		___716_w $tmp1966.w ___715_i 	%line{317} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:318
#         if (w == 0.0)
	eq		$tmp1971 ___716_w $const44 	%line{318} %argrw{"wrr"}
	if		$tmp1971 4375 4375 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:319
#             continue;
	continue	%line{319}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:322
#         TxCoords txcoords = initTxCoords(hexData.s[i], hexData.t[i], 0);
	compref		$tmp1972 $tmp1966.s ___715_i 	%line{322} %argrw{"wrr"}
	compref		$tmp1973 $tmp1966.t ___715_i 	%argrw{"wrr"}
	functioncall	$const16 4399 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 4385 4386 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{100} %argrw{"r"}
	functioncall	$const17 4385 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp1974 $tmp1973 	%line{48} %argrw{"wr"}
	add		$tmp1975 $tmp1974 $const9 	%argrw{"wrr"}
	floor		$tmp1976 $tmp1973 	%argrw{"wr"}
	sub		$tmp1977 $tmp1973 $tmp1976 	%argrw{"wrr"}
	sub		___636__tt $tmp1975 $tmp1977 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt $tmp1973 	%line{100} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:101
#     TxCoords coords = { ss, _tt, Dx(ss), Dy(ss), Dx(_tt), Dy(_tt) };
	assign		___636_coords.s $tmp1972 	%line{101} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx $tmp1972 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy $tmp1972 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     return coords;
	assign		___716_txcoords.s ___636_coords.s 	%line{102} %argrw{"wr"}
	assign		___716_txcoords.t ___636_coords.t 	%argrw{"wr"}
	assign		___716_txcoords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___716_txcoords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___716_txcoords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___716_txcoords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:323
#         if (mipBias != 0 || maxResolution != 0)
	neq		$tmp1978 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{323} %argrw{"wrr"}
	neq		$tmp1979 $tmp1978 $const2 	%argrw{"wrr"}
	if		$tmp1979 4402 4405 	%argrw{"r"}
	neq		$tmp1980 maxResolution $const2 	%argrw{"wrr"}
	neq		$tmp1981 $tmp1980 $const2 	%argrw{"wrr"}
	assign		$tmp1979 $tmp1981 	%argrw{"wr"}
	if		$tmp1979 4462 4462 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:324
#             PxrTxMipControls(mipBias, maxResolution, txcoords, txparams);
	functioncall	$const83 4462 	%line{324} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:153
#     float bias = (mipBias != 0) ? pow(2.0, mipBias) : 1.0;
	neq		$tmp1982 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{153} %argrw{"wrr"}
	if		$tmp1982 4411 4412 	%argrw{"r"}
	assign		$tmp1983 mipBias 	%argrw{"wr"}
	pow		___645_bias $const68 $tmp1983 	%argrw{"wrr"}
	assign		___645_bias $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:154
#     bias *= params.width;
	mul		___645_bias ___645_bias txparams.width 	%line{154} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:155
#     if (maxResolution <= 0)
	le		$tmp1984 maxResolution $const2 	%line{155} %argrw{"wrr"}
	if		$tmp1984 4416 4462 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:157
#         params.width = bias;
	assign		txparams.width ___645_bias 	%line{157} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:163
#         float minRadius = (maxResolution > 0.0) ? 1.0 / maxResolution : 0.0;
	gt		$tmp1985 maxResolution $const44 	%line{163} %argrw{"wrr"}
	if		$tmp1985 4419 4420 	%argrw{"r"}
	div		___647_minRadius $const9 maxResolution 	%argrw{"wrr"}
	assign		___647_minRadius $const44 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:165
#         float dsdx = max(minRadius, abs(coords.dsdx * bias)) * sign(coords.dsdx);
	mul		$tmp1988 ___716_txcoords.dsdx ___645_bias 	%line{165} %argrw{"wrr"}
	abs		$tmp1987 $tmp1988 	%argrw{"wr"}
	max		$tmp1986 ___647_minRadius $tmp1987 	%argrw{"wrr"}
	sign		$tmp1989 ___716_txcoords.dsdx 	%argrw{"wr"}
	mul		___647_dsdx $tmp1986 $tmp1989 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:166
#         float dtdx = max(minRadius, abs(coords.dtdx * bias)) * sign(coords.dtdx);
	mul		$tmp1992 ___716_txcoords.dtdx ___645_bias 	%line{166} %argrw{"wrr"}
	abs		$tmp1991 $tmp1992 	%argrw{"wr"}
	max		$tmp1990 ___647_minRadius $tmp1991 	%argrw{"wrr"}
	sign		$tmp1993 ___716_txcoords.dtdx 	%argrw{"wr"}
	mul		___647_dtdx $tmp1990 $tmp1993 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:167
#         float dsdy = max(minRadius, abs(coords.dsdy * bias)) * sign(coords.dsdy);
	mul		$tmp1996 ___716_txcoords.dsdy ___645_bias 	%line{167} %argrw{"wrr"}
	abs		$tmp1995 $tmp1996 	%argrw{"wr"}
	max		$tmp1994 ___647_minRadius $tmp1995 	%argrw{"wrr"}
	sign		$tmp1997 ___716_txcoords.dsdy 	%argrw{"wr"}
	mul		___647_dsdy $tmp1994 $tmp1997 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:168
#         float dtdy = max(minRadius, abs(coords.dtdy * bias)) * sign(coords.dtdy);
	mul		$tmp2000 ___716_txcoords.dtdy ___645_bias 	%line{168} %argrw{"wrr"}
	abs		$tmp1999 $tmp2000 	%argrw{"wr"}
	max		$tmp1998 ___647_minRadius $tmp1999 	%argrw{"wrr"}
	sign		$tmp2001 ___716_txcoords.dtdy 	%argrw{"wr"}
	mul		___647_dtdy $tmp1998 $tmp2001 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:169
#         vector v0 = point(coords.dsdx, coords.dtdx, 0) - point(coords.dsdy, coords.dtdy, 0);
	point		$tmp2002 ___716_txcoords.dsdx ___716_txcoords.dtdx $const44 	%line{169} %argrw{"wrrr"}
	point		$tmp2003 ___716_txcoords.dsdy ___716_txcoords.dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v0 $tmp2002 $tmp2003 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:170
#         vector v1 = point(dsdx, dtdx, 0) - point(dsdy, dtdy, 0);
	point		$tmp2004 ___647_dsdx ___647_dtdx $const44 	%line{170} %argrw{"wrrr"}
	point		$tmp2005 ___647_dsdy ___647_dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v1 $tmp2004 $tmp2005 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:171
#         params.width = (v1.x*v1.x + v1.y*v1.y) / (v0.x*v0.x + v1.y*v1.y);
	compref		$tmp2006 ___647_v1 $const2 	%line{171} %argrw{"wrr"}
	compref		$tmp2007 ___647_v1 $const2 	%argrw{"wrr"}
	mul		$tmp2008 $tmp2006 $tmp2007 	%argrw{"wrr"}
	compref		$tmp2009 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp2010 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp2011 $tmp2009 $tmp2010 	%argrw{"wrr"}
	add		$tmp2012 $tmp2008 $tmp2011 	%argrw{"wrr"}
	compref		$tmp2013 ___647_v0 $const2 	%argrw{"wrr"}
	compref		$tmp2014 ___647_v0 $const2 	%argrw{"wrr"}
	mul		$tmp2015 $tmp2013 $tmp2014 	%argrw{"wrr"}
	compref		$tmp2016 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp2017 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp2018 $tmp2016 $tmp2017 	%argrw{"wrr"}
	add		$tmp2019 $tmp2015 $tmp2018 	%argrw{"wrr"}
	div		txparams.width $tmp2012 $tmp2019 	%argrw{"wrr"}
	assign		txparams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:325
#         c = PxrTextureLookup(filename, txcoords, txparams);
	functioncall	$const18 4492 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{325} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename8 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp2020 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp2020 4471 4471 	%argrw{"r"}
	assign		___714_c ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename8 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp2021 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp2021 4477 4477 	%argrw{"r"}
	neq		$tmp2022 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp2021 $tmp2022 	%argrw{"wr"}
	if		$tmp2021 4491 4491 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp2023 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp2024 $tmp2023 $const2 	%argrw{"wrr"}
	if		$tmp2024 4481 4484 	%argrw{"r"}
	eq		$tmp2025 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp2026 $tmp2025 $const2 	%argrw{"wrr"}
	assign		$tmp2024 $tmp2026 	%argrw{"wr"}
	if		$tmp2024 4491 4491 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp2027 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp2027 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp2028 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp2028 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp2029 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp2029 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		___714_c ___649_finalResult 	%line{217} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:326
#         if (nMap.enabled)
	if		nMap.enabled 4594 4594 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{326} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:329
#             GenBasisTB(Tn, Bn, float2(hexData.s[i], hexData.t[i]), N);
	compref		$tmp2030.x $tmp1966.s ___715_i 	%line{329} %argrw{"wrr"}
	compref		$tmp2030.y $tmp1966.t ___715_i 	%argrw{"wrr"}
	functioncall	$const84 4542 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:55
#     vector sigmaX = dPdu - dot(dPdu, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp2031 dPdu N 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{55} %argrw{"wrr"}
	mul		$tmp2032 $tmp2031 N 	%argrw{"wrr"}
	sub		___684_sigmaX dPdu $tmp2032 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:56
#     vector sigmaY = dPdv - dot(dPdv, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp2033 dPdv N 	%line{56} %argrw{"wrr"}
	mul		$tmp2034 $tmp2033 N 	%argrw{"wrr"}
	sub		___684_sigmaY dPdv $tmp2034 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:57
#     float flip_sign = dot(dPdv, cross(nrmBaseNormal, dPdu)) < 0.0 ? -1.0 : 1.0;
	cross		$tmp2036 N dPdu 	%line{57} %argrw{"wrr"}
	dot		$tmp2035 dPdv $tmp2036 	%argrw{"wrr"}
	lt		$tmp2037 $tmp2035 $const44 	%argrw{"wrr"}
	if		$tmp2037 4507 4508 	%argrw{"r"}
	assign		___684_flip_sign $const85 	%argrw{"wr"}
	assign		___684_flip_sign $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:59
#     float2 dSTdx = Dx(texST);
	functioncall	$const86 4511 	%line{59} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:167
#     return float2(Dx(a.x), Dx(a.y));
	Dx		___684_dSTdx.x $tmp2030.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{167} %argrw{"wr"} %argderivs{1}
	Dx		___684_dSTdx.y $tmp2030.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:60
#     float2 dSTdy = Dy(texST);
	functioncall	$const87 4514 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{60} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:172
#     return float2(Dy(a.x), Dy(a.y));
	Dy		___684_dSTdy.x $tmp2030.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{172} %argrw{"wr"} %argderivs{1}
	Dy		___684_dSTdy.y $tmp2030.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:61
#     float det = dot(dSTdx, float2(dSTdy.y, -dSTdy.x));
	assign		$tmp2038.x ___684_dSTdy.y 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{61} %argrw{"wr"}
	neg		$tmp2038.y ___684_dSTdy.x 	%argrw{"wr"}
	functioncall	$const88 4520 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:162
#     return a.x * b.x + a.y * b.y;
	mul		$tmp2039 ___684_dSTdx.x $tmp2038.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{162} %argrw{"wrr"}
	mul		$tmp2040 ___684_dSTdx.y $tmp2038.y 	%argrw{"wrr"}
	add		___684_det $tmp2039 $tmp2040 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:62
#     float sign_det = det < 0.0 ? -1.0 : 1.0;
	lt		$tmp2041 ___684_det $const44 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{62} %argrw{"wrr"}
	if		$tmp2041 4523 4524 	%argrw{"r"}
	assign		___684_sign_det $const85 	%argrw{"wr"}
	assign		___684_sign_det $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:66
#     float2 invC0 = sign_det * float2(dSTdy.y, -dSTdx.y);
	assign		$tmp2042.x ___684_dSTdy.y 	%line{66} %argrw{"wr"}
	neg		$tmp2042.y ___684_dSTdx.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 4532 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:130
#     return b * float2(a, a);
	assign		$tmp2043.x ___684_sign_det 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{130} %argrw{"wr"}
	assign		$tmp2043.y ___684_sign_det 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 4532 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		___684_invC0.x $tmp2042.x $tmp2043.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		___684_invC0.y $tmp2042.y $tmp2043.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:67
#     vT = sigmaX * invC0.x + sigmaY * invC0.y;
	mul		$tmp2044 ___684_sigmaX ___684_invC0.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{67} %argrw{"wrr"}
	mul		$tmp2045 ___684_sigmaY ___684_invC0.y 	%argrw{"wrr"}
	add		___717_Tn $tmp2044 $tmp2045 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:68
#     if (abs(det) > 0.0) vT = normalize(vT);
	abs		$tmp2046 ___684_det 	%line{68} %argrw{"wr"}
	gt		$tmp2047 $tmp2046 $const44 	%argrw{"wrr"}
	if		$tmp2047 4539 4539 	%argrw{"r"}
	normalize	___717_Tn ___717_Tn 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:69
#     vB = (sign_det * flip_sign) * cross(nrmBaseNormal, vT);
	mul		$tmp2048 ___684_sign_det ___684_flip_sign 	%line{69} %argrw{"wrr"}
	cross		$tmp2049 N ___717_Tn 	%argrw{"wrr"}
	mul		___717_Bn $tmp2048 $tmp2049 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:330
#             setupNormalMapHex(nMap, c);
	functioncall	$const90 4561 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{330} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:171
#     color tsNormal = nmap * 2.0 - 1.0;
	mul		$tmp2050 ___714_c $const68 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{171} %argrw{"wrr"}
	sub		___694_tsNormal $tmp2050 $const9 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:173
#     if (nmp.orientation == k_opengl)
	eq		$tmp2051 nMap.orientation $const2 	%line{173} %argrw{"wrr"}
	if		$tmp2051 4547 4560 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:177
#     else if (nmp.orientation == k_directx)
	eq		$tmp2052 nMap.orientation $const3 	%line{177} %argrw{"wrr"}
	if		$tmp2052 4552 4560 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:179
#         tsNormal[1] = -tsNormal[1];
	compref		$tmp2053 ___694_tsNormal $const3 	%line{179} %argrw{"wrr"}
	neg		$tmp2054 $tmp2053 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp2054 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:183
#         if (nmp.flipX)
	if		nMap.flipX 4556 4556 	%line{183} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:184
#             tsNormal[0] = -tsNormal[0];
	compref		$tmp2055 ___694_tsNormal $const2 	%line{184} %argrw{"wrr"}
	neg		$tmp2056 $tmp2055 	%argrw{"wr"}
	compassign	___694_tsNormal $const2 $tmp2056 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:185
#         if (nmp.flipY)
	if		nMap.flipY 4560 4560 	%line{185} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:186
#             tsNormal[1] = -tsNormal[1];
	compref		$tmp2057 ___694_tsNormal $const3 	%line{186} %argrw{"wrr"}
	neg		$tmp2058 $tmp2057 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp2058 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:188
#     nmap = tsNormal;
	assign		___714_c ___694_tsNormal 	%line{188} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const91 4588 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:76
# 	float scale = 1.0 / 128.0;
	div		___685_scale $const9 $const92 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{76} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:80
# 	color vMa = abs(vM);
	abs		___685_vMa ___714_c 	%line{80} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:81
# 	float z_ma = max(vMa[2], scale * max(vMa[0], vMa[1]));
	compref		$tmp2061 ___685_vMa $const4 	%line{81} %argrw{"wrr"}
	compref		$tmp2063 ___685_vMa $const2 	%argrw{"wrr"}
	compref		$tmp2064 ___685_vMa $const3 	%argrw{"wrr"}
	max		$tmp2062 $tmp2063 $tmp2064 	%argrw{"wrr"}
	mul		$tmp2065 ___685_scale $tmp2062 	%argrw{"wrr"}
	max		___685_z_ma $tmp2061 $tmp2065 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:84
# 	int gFlipVertDeriv = 1;
	assign		___685_gFlipVertDeriv $const3 	%line{84} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:85
# 	float s = gFlipVertDeriv ? -1.0 : 1.0;
	if		___685_gFlipVertDeriv 4573 4574 	%line{85} %argrw{"r"}
	assign		___685_s $const85 	%argrw{"wr"}
	assign		___685_s $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	compref		$tmp2067.x ___714_c $const2 	%line{86} %argrw{"wrr"}
	compref		$tmp2068 ___714_c $const3 	%argrw{"wrr"}
	mul		$tmp2067.y ___685_s $tmp2068 	%argrw{"wrr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const93 4580 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:55
#     return float2(-a.x, -a.y);
	neg		$tmp2066.x $tmp2067.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{55} %argrw{"wr"}
	neg		$tmp2066.y $tmp2067.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const94 4587 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:146
#     float b_inv = 1.0/b;
	div		___678_b_inv $const9 ___685_z_ma 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{146} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:147
#     return a * float2(b_inv, b_inv);
	assign		$tmp2069.x ___678_b_inv 	%line{147} %argrw{"wr"}
	assign		$tmp2069.y ___678_b_inv 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 4587 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		$tmp2060.x $tmp2066.x $tmp2069.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		$tmp2060.y $tmp2066.y $tmp2069.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	return	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{86}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const95 4592 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:92
#     return deriv.x * vT + deriv.y * vB;
	mul		$tmp2070 $tmp2060.x ___717_Tn 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{92} %argrw{"wrr"}
	mul		$tmp2071 $tmp2060.y ___717_Bn 	%argrw{"wrr"}
	add		$tmp2059 $tmp2070 $tmp2071 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	mul		$tmp2072 $tmp2059 ___716_w 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"wrr"}
	add		$tmp1968 $tmp1968 $tmp2072 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:333
#         if (linearize) PxrLinearizeSRGB(c);
	if		linearize 4618 4618 	%line{333} %argrw{"r"}
	functioncall	$const25 4618 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 4601 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp2074 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp2075 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp2073 $tmp2075 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp2073 4618 4618 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp2077 4604 4606 4617 4618 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp2076 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp2077 $tmp2076 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp2078 ___714_c ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp2079 $tmp2078 $const29 	%argrw{"wrr"}
	if		$tmp2079 4612 4617 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp2080 ___714_c ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp2081 $tmp2080 $const30 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp2081 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp2083 ___714_c ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp2084 $tmp2083 $const31 	%argrw{"wrr"}
	mul		$tmp2085 $tmp2084 $const32 	%argrw{"wrr"}
	pow		$tmp2082 $tmp2085 $const33 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp2082 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:335
#         if (needAlpha)
	if		needAlpha 4631 4631 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{335} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:337
#             TxParams alphaParams = txparams;
	assign		___718_alphaParams.firstchannel txparams.firstchannel 	%line{337} %argrw{"wr"}
	assign		___718_alphaParams.blur txparams.blur 	%argrw{"wr"}
	assign		___718_alphaParams.missingcolor txparams.missingcolor 	%argrw{"wr"}
	assign		___718_alphaParams.missingalpha txparams.missingalpha 	%argrw{"wr"}
	assign		___718_alphaParams.interp txparams.interp 	%argrw{"wr"}
	assign		___718_alphaParams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:338
#             alphaParams.firstchannel += 3;    // XXX: Assume RGBA
	add		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel $const5 	%line{338} %argrw{"wrr"}
	assign		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:339
#             a = PxrTextureLookup(filename, txcoords, alphaParams);
	functioncall	$const18 4630 	%line{339} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha ___718_alphaParams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		___714_a filename8 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 ___718_alphaParams.firstchannel $const20 ___718_alphaParams.blur $const21 ___652_missingalpha $const22 ___718_alphaParams.interp $const23 ___718_alphaParams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:342
#             alpha = mix(alpha, 1, a);
	mix		$tmp1967 $tmp1967 $const9 ___714_a 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{342} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:346
#         co += c * w;
	mul		$tmp2086 ___714_c ___716_w 	%line{346} %argrw{"wrr"}
	add		___714_co ___714_co $tmp2086 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:347
#         if (blendingContrast > 0)
	gt		$tmp2087 blendingContrast $const2 	%line{347} %argrw{"wrr"}
	if		$tmp2087 4646 4646 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:348
#             hexTileAccumulate(c, w, hexTex, hexCol);
	functioncall	$const96 4646 	%line{348} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:274
#     result.value += pow(tex, htx.powerTtoG) * weight;
	pow		$tmp2088 ___714_c $tmp1965.powerTtoG 	%line{274} %argrw{"wrr"}
	mul		$tmp2089 $tmp2088 ___716_w 	%argrw{"wrr"}
	add		___714_hexCol.value ___714_hexCol.value $tmp2089 	%argrw{"wrr"}
	assign		___714_hexCol.value ___714_hexCol.value 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:275
#     result.norm += weight * weight;
	mul		$tmp2090 ___716_w ___716_w 	%line{275} %argrw{"wrr"}
	add		___714_hexCol.norm ___714_hexCol.norm $tmp2090 	%argrw{"wrr"}
	assign		___714_hexCol.norm ___714_hexCol.norm 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:276
#     result.powerGtoT += htx.powerGtoT * weight;
	mul		$tmp2091 $tmp1965.powerGtoT ___716_w 	%line{276} %argrw{"wrr"}
	add		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT $tmp2091 	%argrw{"wrr"}
	assign		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	assign		$tmp2092 ___715_i 	%line{315} %argrw{"wr"}
	add		___715_i ___715_i $const3 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:350
#     if (blendingContrast > 0)
	gt		$tmp2093 blendingContrast $const2 	%line{350} %argrw{"wrr"}
	if		$tmp2093 4659 4659 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:351
#         cc = hexTileFinalColor(hexCol);
	functioncall	$const97 4659 	%line{351} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:284
#     float norm = 1.0 / sqrt(in.norm);
	sqrt		$tmp2094 ___714_hexCol.norm 	%line{284} %argrw{"wr"}
	div		___713_norm $const9 $tmp2094 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:285
#     color result = norm * (in.value - HEXT_GCENTER) + HEXT_GCENTER;
	sub		$tmp2096 ___714_hexCol.value $const81 	%line{285} %argrw{"wrr"}
	mul		$tmp2097 ___713_norm $tmp2096 	%argrw{"wrr"}
	add		___713_result $tmp2097 $const81 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:287
#     result = max(result, color(0.0));
	max		___713_result ___713_result $const40 	%line{287} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:290
#     result = pow(result, in.powerGtoT);
	pow		___713_result ___713_result ___714_hexCol.powerGtoT 	%line{290} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:291
#     return result;
	assign		___714_cc ___713_result 	%line{291} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:353
#     return mix(co, cc, blendingContrast);
	mix		$tmp1964 ___714_co ___714_cc blendingContrast 	%line{353} %argrw{"wrrr"}
# PxrMultiTexture.osl:801
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aassign		alphas ___773_g $tmp1967 	%filename{"PxrMultiTexture.osl"} %line{801} %argrw{"wrr"}
	aassign		grads ___773_g $tmp1968 	%argrw{"wrr"}
# PxrMultiTexture.osl:798
#                     colors[g] = hexTileLookup(filename8, txparams, linearize, mipBias,
	aassign		colors ___773_g $tmp1964 	%line{798} %argrw{"wrr"}
# PxrMultiTexture.osl:808
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aref		$tmp2101.powerTtoG hexTex.powerTtoG ___773_g 	%line{808} %argrw{"wrr"}
	aref		$tmp2101.powerGtoT hexTex.powerGtoT ___773_g 	%argrw{"wrr"}
	aref		$tmp2102.s hexData.s ___773_g 	%argrw{"wrr"}
	aref		$tmp2102.t hexData.t ___773_g 	%argrw{"wrr"}
	aref		$tmp2102.w hexData.w ___773_g 	%argrw{"wrr"}
	aref		$tmp2102.r hexData.r ___773_g 	%argrw{"wrr"}
	aref		$tmp2103 alphas ___773_g 	%argrw{"wrr"}
	aref		$tmp2104 grads ___773_g 	%argrw{"wrr"}
# PxrMultiTexture.osl:805
#                     colors[g] = hexTileLookup(filename9, txparams, linearize, mipBias,
	functioncall	$const82 4971 	%line{805} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:310
#     HexTileColor hexCol = HEXTILECOLOR_ZERO;
	assign		___714_hexCol.value $const40 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{310} %argrw{"wr"}
	assign		___714_hexCol.norm $const44 	%argrw{"wr"}
	assign		___714_hexCol.powerGtoT $const40 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:311
#     color co = 0, cc = 0, c;
	assign		___714_co $const2 	%line{311} %argrw{"wr"}
	assign		___714_cc $const2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:313
#     ng = 0;
	assign		$tmp2104 $const2 	%line{313} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	for		$tmp2106 4680 4682 4957 4959 	%line{315} %argrw{"r"}
	assign		___715_i $const2 	%argrw{"wr"}
	lt		$tmp2105 ___715_i $const5 	%argrw{"wrr"}
	neq		$tmp2106 $tmp2105 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:317
#         float w = hexData.w[i];
	compref		___716_w $tmp2102.w ___715_i 	%line{317} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:318
#         if (w == 0.0)
	eq		$tmp2107 ___716_w $const44 	%line{318} %argrw{"wrr"}
	if		$tmp2107 4686 4686 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:319
#             continue;
	continue	%line{319}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:322
#         TxCoords txcoords = initTxCoords(hexData.s[i], hexData.t[i], 0);
	compref		$tmp2108 $tmp2102.s ___715_i 	%line{322} %argrw{"wrr"}
	compref		$tmp2109 $tmp2102.t ___715_i 	%argrw{"wrr"}
	functioncall	$const16 4710 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 4696 4697 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{100} %argrw{"r"}
	functioncall	$const17 4696 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp2110 $tmp2109 	%line{48} %argrw{"wr"}
	add		$tmp2111 $tmp2110 $const9 	%argrw{"wrr"}
	floor		$tmp2112 $tmp2109 	%argrw{"wr"}
	sub		$tmp2113 $tmp2109 $tmp2112 	%argrw{"wrr"}
	sub		___636__tt $tmp2111 $tmp2113 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt $tmp2109 	%line{100} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:101
#     TxCoords coords = { ss, _tt, Dx(ss), Dy(ss), Dx(_tt), Dy(_tt) };
	assign		___636_coords.s $tmp2108 	%line{101} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx $tmp2108 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy $tmp2108 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     return coords;
	assign		___716_txcoords.s ___636_coords.s 	%line{102} %argrw{"wr"}
	assign		___716_txcoords.t ___636_coords.t 	%argrw{"wr"}
	assign		___716_txcoords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___716_txcoords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___716_txcoords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___716_txcoords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:323
#         if (mipBias != 0 || maxResolution != 0)
	neq		$tmp2114 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{323} %argrw{"wrr"}
	neq		$tmp2115 $tmp2114 $const2 	%argrw{"wrr"}
	if		$tmp2115 4713 4716 	%argrw{"r"}
	neq		$tmp2116 maxResolution $const2 	%argrw{"wrr"}
	neq		$tmp2117 $tmp2116 $const2 	%argrw{"wrr"}
	assign		$tmp2115 $tmp2117 	%argrw{"wr"}
	if		$tmp2115 4773 4773 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:324
#             PxrTxMipControls(mipBias, maxResolution, txcoords, txparams);
	functioncall	$const83 4773 	%line{324} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:153
#     float bias = (mipBias != 0) ? pow(2.0, mipBias) : 1.0;
	neq		$tmp2118 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{153} %argrw{"wrr"}
	if		$tmp2118 4722 4723 	%argrw{"r"}
	assign		$tmp2119 mipBias 	%argrw{"wr"}
	pow		___645_bias $const68 $tmp2119 	%argrw{"wrr"}
	assign		___645_bias $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:154
#     bias *= params.width;
	mul		___645_bias ___645_bias txparams.width 	%line{154} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:155
#     if (maxResolution <= 0)
	le		$tmp2120 maxResolution $const2 	%line{155} %argrw{"wrr"}
	if		$tmp2120 4727 4773 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:157
#         params.width = bias;
	assign		txparams.width ___645_bias 	%line{157} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:163
#         float minRadius = (maxResolution > 0.0) ? 1.0 / maxResolution : 0.0;
	gt		$tmp2121 maxResolution $const44 	%line{163} %argrw{"wrr"}
	if		$tmp2121 4730 4731 	%argrw{"r"}
	div		___647_minRadius $const9 maxResolution 	%argrw{"wrr"}
	assign		___647_minRadius $const44 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:165
#         float dsdx = max(minRadius, abs(coords.dsdx * bias)) * sign(coords.dsdx);
	mul		$tmp2124 ___716_txcoords.dsdx ___645_bias 	%line{165} %argrw{"wrr"}
	abs		$tmp2123 $tmp2124 	%argrw{"wr"}
	max		$tmp2122 ___647_minRadius $tmp2123 	%argrw{"wrr"}
	sign		$tmp2125 ___716_txcoords.dsdx 	%argrw{"wr"}
	mul		___647_dsdx $tmp2122 $tmp2125 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:166
#         float dtdx = max(minRadius, abs(coords.dtdx * bias)) * sign(coords.dtdx);
	mul		$tmp2128 ___716_txcoords.dtdx ___645_bias 	%line{166} %argrw{"wrr"}
	abs		$tmp2127 $tmp2128 	%argrw{"wr"}
	max		$tmp2126 ___647_minRadius $tmp2127 	%argrw{"wrr"}
	sign		$tmp2129 ___716_txcoords.dtdx 	%argrw{"wr"}
	mul		___647_dtdx $tmp2126 $tmp2129 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:167
#         float dsdy = max(minRadius, abs(coords.dsdy * bias)) * sign(coords.dsdy);
	mul		$tmp2132 ___716_txcoords.dsdy ___645_bias 	%line{167} %argrw{"wrr"}
	abs		$tmp2131 $tmp2132 	%argrw{"wr"}
	max		$tmp2130 ___647_minRadius $tmp2131 	%argrw{"wrr"}
	sign		$tmp2133 ___716_txcoords.dsdy 	%argrw{"wr"}
	mul		___647_dsdy $tmp2130 $tmp2133 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:168
#         float dtdy = max(minRadius, abs(coords.dtdy * bias)) * sign(coords.dtdy);
	mul		$tmp2136 ___716_txcoords.dtdy ___645_bias 	%line{168} %argrw{"wrr"}
	abs		$tmp2135 $tmp2136 	%argrw{"wr"}
	max		$tmp2134 ___647_minRadius $tmp2135 	%argrw{"wrr"}
	sign		$tmp2137 ___716_txcoords.dtdy 	%argrw{"wr"}
	mul		___647_dtdy $tmp2134 $tmp2137 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:169
#         vector v0 = point(coords.dsdx, coords.dtdx, 0) - point(coords.dsdy, coords.dtdy, 0);
	point		$tmp2138 ___716_txcoords.dsdx ___716_txcoords.dtdx $const44 	%line{169} %argrw{"wrrr"}
	point		$tmp2139 ___716_txcoords.dsdy ___716_txcoords.dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v0 $tmp2138 $tmp2139 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:170
#         vector v1 = point(dsdx, dtdx, 0) - point(dsdy, dtdy, 0);
	point		$tmp2140 ___647_dsdx ___647_dtdx $const44 	%line{170} %argrw{"wrrr"}
	point		$tmp2141 ___647_dsdy ___647_dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v1 $tmp2140 $tmp2141 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:171
#         params.width = (v1.x*v1.x + v1.y*v1.y) / (v0.x*v0.x + v1.y*v1.y);
	compref		$tmp2142 ___647_v1 $const2 	%line{171} %argrw{"wrr"}
	compref		$tmp2143 ___647_v1 $const2 	%argrw{"wrr"}
	mul		$tmp2144 $tmp2142 $tmp2143 	%argrw{"wrr"}
	compref		$tmp2145 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp2146 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp2147 $tmp2145 $tmp2146 	%argrw{"wrr"}
	add		$tmp2148 $tmp2144 $tmp2147 	%argrw{"wrr"}
	compref		$tmp2149 ___647_v0 $const2 	%argrw{"wrr"}
	compref		$tmp2150 ___647_v0 $const2 	%argrw{"wrr"}
	mul		$tmp2151 $tmp2149 $tmp2150 	%argrw{"wrr"}
	compref		$tmp2152 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp2153 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp2154 $tmp2152 $tmp2153 	%argrw{"wrr"}
	add		$tmp2155 $tmp2151 $tmp2154 	%argrw{"wrr"}
	div		txparams.width $tmp2148 $tmp2155 	%argrw{"wrr"}
	assign		txparams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:325
#         c = PxrTextureLookup(filename, txcoords, txparams);
	functioncall	$const18 4803 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{325} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename9 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp2156 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp2156 4782 4782 	%argrw{"r"}
	assign		___714_c ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename9 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp2157 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp2157 4788 4788 	%argrw{"r"}
	neq		$tmp2158 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp2157 $tmp2158 	%argrw{"wr"}
	if		$tmp2157 4802 4802 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp2159 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp2160 $tmp2159 $const2 	%argrw{"wrr"}
	if		$tmp2160 4792 4795 	%argrw{"r"}
	eq		$tmp2161 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp2162 $tmp2161 $const2 	%argrw{"wrr"}
	assign		$tmp2160 $tmp2162 	%argrw{"wr"}
	if		$tmp2160 4802 4802 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp2163 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp2163 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp2164 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp2164 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp2165 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp2165 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		___714_c ___649_finalResult 	%line{217} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:326
#         if (nMap.enabled)
	if		nMap.enabled 4905 4905 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{326} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:329
#             GenBasisTB(Tn, Bn, float2(hexData.s[i], hexData.t[i]), N);
	compref		$tmp2166.x $tmp2102.s ___715_i 	%line{329} %argrw{"wrr"}
	compref		$tmp2166.y $tmp2102.t ___715_i 	%argrw{"wrr"}
	functioncall	$const84 4853 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:55
#     vector sigmaX = dPdu - dot(dPdu, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp2167 dPdu N 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{55} %argrw{"wrr"}
	mul		$tmp2168 $tmp2167 N 	%argrw{"wrr"}
	sub		___684_sigmaX dPdu $tmp2168 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:56
#     vector sigmaY = dPdv - dot(dPdv, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp2169 dPdv N 	%line{56} %argrw{"wrr"}
	mul		$tmp2170 $tmp2169 N 	%argrw{"wrr"}
	sub		___684_sigmaY dPdv $tmp2170 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:57
#     float flip_sign = dot(dPdv, cross(nrmBaseNormal, dPdu)) < 0.0 ? -1.0 : 1.0;
	cross		$tmp2172 N dPdu 	%line{57} %argrw{"wrr"}
	dot		$tmp2171 dPdv $tmp2172 	%argrw{"wrr"}
	lt		$tmp2173 $tmp2171 $const44 	%argrw{"wrr"}
	if		$tmp2173 4818 4819 	%argrw{"r"}
	assign		___684_flip_sign $const85 	%argrw{"wr"}
	assign		___684_flip_sign $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:59
#     float2 dSTdx = Dx(texST);
	functioncall	$const86 4822 	%line{59} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:167
#     return float2(Dx(a.x), Dx(a.y));
	Dx		___684_dSTdx.x $tmp2166.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{167} %argrw{"wr"} %argderivs{1}
	Dx		___684_dSTdx.y $tmp2166.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:60
#     float2 dSTdy = Dy(texST);
	functioncall	$const87 4825 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{60} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:172
#     return float2(Dy(a.x), Dy(a.y));
	Dy		___684_dSTdy.x $tmp2166.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{172} %argrw{"wr"} %argderivs{1}
	Dy		___684_dSTdy.y $tmp2166.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:61
#     float det = dot(dSTdx, float2(dSTdy.y, -dSTdy.x));
	assign		$tmp2174.x ___684_dSTdy.y 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{61} %argrw{"wr"}
	neg		$tmp2174.y ___684_dSTdy.x 	%argrw{"wr"}
	functioncall	$const88 4831 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:162
#     return a.x * b.x + a.y * b.y;
	mul		$tmp2175 ___684_dSTdx.x $tmp2174.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{162} %argrw{"wrr"}
	mul		$tmp2176 ___684_dSTdx.y $tmp2174.y 	%argrw{"wrr"}
	add		___684_det $tmp2175 $tmp2176 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:62
#     float sign_det = det < 0.0 ? -1.0 : 1.0;
	lt		$tmp2177 ___684_det $const44 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{62} %argrw{"wrr"}
	if		$tmp2177 4834 4835 	%argrw{"r"}
	assign		___684_sign_det $const85 	%argrw{"wr"}
	assign		___684_sign_det $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:66
#     float2 invC0 = sign_det * float2(dSTdy.y, -dSTdx.y);
	assign		$tmp2178.x ___684_dSTdy.y 	%line{66} %argrw{"wr"}
	neg		$tmp2178.y ___684_dSTdx.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 4843 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:130
#     return b * float2(a, a);
	assign		$tmp2179.x ___684_sign_det 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{130} %argrw{"wr"}
	assign		$tmp2179.y ___684_sign_det 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 4843 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		___684_invC0.x $tmp2178.x $tmp2179.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		___684_invC0.y $tmp2178.y $tmp2179.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:67
#     vT = sigmaX * invC0.x + sigmaY * invC0.y;
	mul		$tmp2180 ___684_sigmaX ___684_invC0.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{67} %argrw{"wrr"}
	mul		$tmp2181 ___684_sigmaY ___684_invC0.y 	%argrw{"wrr"}
	add		___717_Tn $tmp2180 $tmp2181 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:68
#     if (abs(det) > 0.0) vT = normalize(vT);
	abs		$tmp2182 ___684_det 	%line{68} %argrw{"wr"}
	gt		$tmp2183 $tmp2182 $const44 	%argrw{"wrr"}
	if		$tmp2183 4850 4850 	%argrw{"r"}
	normalize	___717_Tn ___717_Tn 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:69
#     vB = (sign_det * flip_sign) * cross(nrmBaseNormal, vT);
	mul		$tmp2184 ___684_sign_det ___684_flip_sign 	%line{69} %argrw{"wrr"}
	cross		$tmp2185 N ___717_Tn 	%argrw{"wrr"}
	mul		___717_Bn $tmp2184 $tmp2185 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:330
#             setupNormalMapHex(nMap, c);
	functioncall	$const90 4872 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{330} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:171
#     color tsNormal = nmap * 2.0 - 1.0;
	mul		$tmp2186 ___714_c $const68 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{171} %argrw{"wrr"}
	sub		___694_tsNormal $tmp2186 $const9 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:173
#     if (nmp.orientation == k_opengl)
	eq		$tmp2187 nMap.orientation $const2 	%line{173} %argrw{"wrr"}
	if		$tmp2187 4858 4871 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:177
#     else if (nmp.orientation == k_directx)
	eq		$tmp2188 nMap.orientation $const3 	%line{177} %argrw{"wrr"}
	if		$tmp2188 4863 4871 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:179
#         tsNormal[1] = -tsNormal[1];
	compref		$tmp2189 ___694_tsNormal $const3 	%line{179} %argrw{"wrr"}
	neg		$tmp2190 $tmp2189 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp2190 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:183
#         if (nmp.flipX)
	if		nMap.flipX 4867 4867 	%line{183} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:184
#             tsNormal[0] = -tsNormal[0];
	compref		$tmp2191 ___694_tsNormal $const2 	%line{184} %argrw{"wrr"}
	neg		$tmp2192 $tmp2191 	%argrw{"wr"}
	compassign	___694_tsNormal $const2 $tmp2192 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:185
#         if (nmp.flipY)
	if		nMap.flipY 4871 4871 	%line{185} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:186
#             tsNormal[1] = -tsNormal[1];
	compref		$tmp2193 ___694_tsNormal $const3 	%line{186} %argrw{"wrr"}
	neg		$tmp2194 $tmp2193 	%argrw{"wr"}
	compassign	___694_tsNormal $const3 $tmp2194 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:188
#     nmap = tsNormal;
	assign		___714_c ___694_tsNormal 	%line{188} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const91 4899 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:76
# 	float scale = 1.0 / 128.0;
	div		___685_scale $const9 $const92 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{76} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:80
# 	color vMa = abs(vM);
	abs		___685_vMa ___714_c 	%line{80} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:81
# 	float z_ma = max(vMa[2], scale * max(vMa[0], vMa[1]));
	compref		$tmp2197 ___685_vMa $const4 	%line{81} %argrw{"wrr"}
	compref		$tmp2199 ___685_vMa $const2 	%argrw{"wrr"}
	compref		$tmp2200 ___685_vMa $const3 	%argrw{"wrr"}
	max		$tmp2198 $tmp2199 $tmp2200 	%argrw{"wrr"}
	mul		$tmp2201 ___685_scale $tmp2198 	%argrw{"wrr"}
	max		___685_z_ma $tmp2197 $tmp2201 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:84
# 	int gFlipVertDeriv = 1;
	assign		___685_gFlipVertDeriv $const3 	%line{84} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:85
# 	float s = gFlipVertDeriv ? -1.0 : 1.0;
	if		___685_gFlipVertDeriv 4884 4885 	%line{85} %argrw{"r"}
	assign		___685_s $const85 	%argrw{"wr"}
	assign		___685_s $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	compref		$tmp2203.x ___714_c $const2 	%line{86} %argrw{"wrr"}
	compref		$tmp2204 ___714_c $const3 	%argrw{"wrr"}
	mul		$tmp2203.y ___685_s $tmp2204 	%argrw{"wrr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const93 4891 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:55
#     return float2(-a.x, -a.y);
	neg		$tmp2202.x $tmp2203.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{55} %argrw{"wr"}
	neg		$tmp2202.y $tmp2203.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const94 4898 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:146
#     float b_inv = 1.0/b;
	div		___678_b_inv $const9 ___685_z_ma 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{146} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:147
#     return a * float2(b_inv, b_inv);
	assign		$tmp2205.x ___678_b_inv 	%line{147} %argrw{"wr"}
	assign		$tmp2205.y ___678_b_inv 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 4898 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		$tmp2196.x $tmp2202.x $tmp2205.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		$tmp2196.y $tmp2202.y $tmp2205.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	return	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{86}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	functioncall	$const95 4903 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:92
#     return deriv.x * vT + deriv.y * vB;
	mul		$tmp2206 $tmp2196.x ___717_Tn 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{92} %argrw{"wrr"}
	mul		$tmp2207 $tmp2196.y ___717_Bn 	%argrw{"wrr"}
	add		$tmp2195 $tmp2206 $tmp2207 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:331
#             ng += SurfgradFromTBN(TspaceNormalToDerivative(c), Tn, Bn) * w;
	mul		$tmp2208 $tmp2195 ___716_w 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{331} %argrw{"wrr"}
	add		$tmp2104 $tmp2104 $tmp2208 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:333
#         if (linearize) PxrLinearizeSRGB(c);
	if		linearize 4929 4929 	%line{333} %argrw{"r"}
	functioncall	$const25 4929 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 4912 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp2210 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp2211 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp2209 $tmp2211 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp2209 4929 4929 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp2213 4915 4917 4928 4929 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp2212 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp2213 $tmp2212 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp2214 ___714_c ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp2215 $tmp2214 $const29 	%argrw{"wrr"}
	if		$tmp2215 4923 4928 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp2216 ___714_c ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp2217 $tmp2216 $const30 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp2217 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp2219 ___714_c ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp2220 $tmp2219 $const31 	%argrw{"wrr"}
	mul		$tmp2221 $tmp2220 $const32 	%argrw{"wrr"}
	pow		$tmp2218 $tmp2221 $const33 	%argrw{"wrr"}
	compassign	___714_c ___641_i $tmp2218 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:335
#         if (needAlpha)
	if		needAlpha 4942 4942 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{335} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:337
#             TxParams alphaParams = txparams;
	assign		___718_alphaParams.firstchannel txparams.firstchannel 	%line{337} %argrw{"wr"}
	assign		___718_alphaParams.blur txparams.blur 	%argrw{"wr"}
	assign		___718_alphaParams.missingcolor txparams.missingcolor 	%argrw{"wr"}
	assign		___718_alphaParams.missingalpha txparams.missingalpha 	%argrw{"wr"}
	assign		___718_alphaParams.interp txparams.interp 	%argrw{"wr"}
	assign		___718_alphaParams.width txparams.width 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:338
#             alphaParams.firstchannel += 3;    // XXX: Assume RGBA
	add		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel $const5 	%line{338} %argrw{"wrr"}
	assign		___718_alphaParams.firstchannel ___718_alphaParams.firstchannel 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:339
#             a = PxrTextureLookup(filename, txcoords, alphaParams);
	functioncall	$const18 4941 	%line{339} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha ___718_alphaParams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		___714_a filename9 ___716_txcoords.s ___716_txcoords.t ___716_txcoords.dsdx ___716_txcoords.dtdx ___716_txcoords.dsdy ___716_txcoords.dtdy $const19 ___718_alphaParams.firstchannel $const20 ___718_alphaParams.blur $const21 ___652_missingalpha $const22 ___718_alphaParams.interp $const23 ___718_alphaParams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:342
#             alpha = mix(alpha, 1, a);
	mix		$tmp2103 $tmp2103 $const9 ___714_a 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{342} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:346
#         co += c * w;
	mul		$tmp2222 ___714_c ___716_w 	%line{346} %argrw{"wrr"}
	add		___714_co ___714_co $tmp2222 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:347
#         if (blendingContrast > 0)
	gt		$tmp2223 blendingContrast $const2 	%line{347} %argrw{"wrr"}
	if		$tmp2223 4957 4957 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:348
#             hexTileAccumulate(c, w, hexTex, hexCol);
	functioncall	$const96 4957 	%line{348} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:274
#     result.value += pow(tex, htx.powerTtoG) * weight;
	pow		$tmp2224 ___714_c $tmp2101.powerTtoG 	%line{274} %argrw{"wrr"}
	mul		$tmp2225 $tmp2224 ___716_w 	%argrw{"wrr"}
	add		___714_hexCol.value ___714_hexCol.value $tmp2225 	%argrw{"wrr"}
	assign		___714_hexCol.value ___714_hexCol.value 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:275
#     result.norm += weight * weight;
	mul		$tmp2226 ___716_w ___716_w 	%line{275} %argrw{"wrr"}
	add		___714_hexCol.norm ___714_hexCol.norm $tmp2226 	%argrw{"wrr"}
	assign		___714_hexCol.norm ___714_hexCol.norm 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:276
#     result.powerGtoT += htx.powerGtoT * weight;
	mul		$tmp2227 $tmp2101.powerGtoT ___716_w 	%line{276} %argrw{"wrr"}
	add		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT $tmp2227 	%argrw{"wrr"}
	assign		___714_hexCol.powerGtoT ___714_hexCol.powerGtoT 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:315
#     for (int i=0; i<3; i++)
	assign		$tmp2228 ___715_i 	%line{315} %argrw{"wr"}
	add		___715_i ___715_i $const3 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:350
#     if (blendingContrast > 0)
	gt		$tmp2229 blendingContrast $const2 	%line{350} %argrw{"wrr"}
	if		$tmp2229 4970 4970 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:351
#         cc = hexTileFinalColor(hexCol);
	functioncall	$const97 4970 	%line{351} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:284
#     float norm = 1.0 / sqrt(in.norm);
	sqrt		$tmp2230 ___714_hexCol.norm 	%line{284} %argrw{"wr"}
	div		___713_norm $const9 $tmp2230 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:285
#     color result = norm * (in.value - HEXT_GCENTER) + HEXT_GCENTER;
	sub		$tmp2232 ___714_hexCol.value $const81 	%line{285} %argrw{"wrr"}
	mul		$tmp2233 ___713_norm $tmp2232 	%argrw{"wrr"}
	add		___713_result $tmp2233 $const81 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:287
#     result = max(result, color(0.0));
	max		___713_result ___713_result $const40 	%line{287} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:290
#     result = pow(result, in.powerGtoT);
	pow		___713_result ___713_result ___714_hexCol.powerGtoT 	%line{290} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:291
#     return result;
	assign		___714_cc ___713_result 	%line{291} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:353
#     return mix(co, cc, blendingContrast);
	mix		$tmp2100 ___714_co ___714_cc blendingContrast 	%line{353} %argrw{"wrrr"}
# PxrMultiTexture.osl:808
#                                               hexTex[g], hexData[g], alphas[g], grads[g]);
	aassign		alphas ___773_g $tmp2103 	%filename{"PxrMultiTexture.osl"} %line{808} %argrw{"wrr"}
	aassign		grads ___773_g $tmp2104 	%argrw{"wrr"}
# PxrMultiTexture.osl:805
#                     colors[g] = hexTileLookup(filename9, txparams, linearize, mipBias,
	aassign		colors ___773_g $tmp2100 	%line{805} %argrw{"wrr"}
# PxrMultiTexture.osl:814
#                 TxCoords txcoords = initTxCoords(sta[g][0], sta[g][1], invertT);
	aref		$tmp2237 sta ___773_g 	%line{814} %argrw{"wrr"}
	compref		$tmp2236 $tmp2237 $const2 	%argrw{"wrr"}
	aref		$tmp2239 sta ___773_g 	%argrw{"wrr"}
	compref		$tmp2238 $tmp2239 $const3 	%argrw{"wrr"}
	functioncall	$const16 5000 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		invertT 4986 4987 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{100} %argrw{"r"}
	functioncall	$const17 4986 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp2240 $tmp2238 	%line{48} %argrw{"wr"}
	add		$tmp2241 $tmp2240 $const9 	%argrw{"wrr"}
	floor		$tmp2242 $tmp2238 	%argrw{"wr"}
	sub		$tmp2243 $tmp2238 $tmp2242 	%argrw{"wrr"}
	sub		___636__tt $tmp2241 $tmp2243 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:100
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt $tmp2238 	%line{100} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:101
#     TxCoords coords = { ss, _tt, Dx(ss), Dy(ss), Dx(_tt), Dy(_tt) };
	assign		___636_coords.s $tmp2236 	%line{101} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx $tmp2236 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy $tmp2236 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     return coords;
	assign		___803_txcoords.s ___636_coords.s 	%line{102} %argrw{"wr"}
	assign		___803_txcoords.t ___636_coords.t 	%argrw{"wr"}
	assign		___803_txcoords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___803_txcoords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___803_txcoords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___803_txcoords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# PxrMultiTexture.osl:815
#                 if (mipBias != 0 || maxResolution != 0)
	neq		$tmp2244 mipBias $const2 	%filename{"PxrMultiTexture.osl"} %line{815} %argrw{"wrr"}
	neq		$tmp2245 $tmp2244 $const2 	%argrw{"wrr"}
	if		$tmp2245 5003 5006 	%argrw{"r"}
	neq		$tmp2246 maxResolution $const2 	%argrw{"wrr"}
	neq		$tmp2247 $tmp2246 $const2 	%argrw{"wrr"}
	assign		$tmp2245 $tmp2247 	%argrw{"wr"}
	if		$tmp2245 5063 5063 	%argrw{"r"}
# PxrMultiTexture.osl:816
#                     PxrTxMipControls(mipBias, maxResolution, txcoords, txparams);
	functioncall	$const83 5063 	%line{816} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:153
#     float bias = (mipBias != 0) ? pow(2.0, mipBias) : 1.0;
	neq		$tmp2248 mipBias $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{153} %argrw{"wrr"}
	if		$tmp2248 5012 5013 	%argrw{"r"}
	assign		$tmp2249 mipBias 	%argrw{"wr"}
	pow		___645_bias $const68 $tmp2249 	%argrw{"wrr"}
	assign		___645_bias $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:154
#     bias *= params.width;
	mul		___645_bias ___645_bias txparams.width 	%line{154} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:155
#     if (maxResolution <= 0)
	le		$tmp2250 maxResolution $const2 	%line{155} %argrw{"wrr"}
	if		$tmp2250 5017 5063 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:157
#         params.width = bias;
	assign		txparams.width ___645_bias 	%line{157} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:163
#         float minRadius = (maxResolution > 0.0) ? 1.0 / maxResolution : 0.0;
	gt		$tmp2251 maxResolution $const44 	%line{163} %argrw{"wrr"}
	if		$tmp2251 5020 5021 	%argrw{"r"}
	div		___647_minRadius $const9 maxResolution 	%argrw{"wrr"}
	assign		___647_minRadius $const44 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:165
#         float dsdx = max(minRadius, abs(coords.dsdx * bias)) * sign(coords.dsdx);
	mul		$tmp2254 ___803_txcoords.dsdx ___645_bias 	%line{165} %argrw{"wrr"}
	abs		$tmp2253 $tmp2254 	%argrw{"wr"}
	max		$tmp2252 ___647_minRadius $tmp2253 	%argrw{"wrr"}
	sign		$tmp2255 ___803_txcoords.dsdx 	%argrw{"wr"}
	mul		___647_dsdx $tmp2252 $tmp2255 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:166
#         float dtdx = max(minRadius, abs(coords.dtdx * bias)) * sign(coords.dtdx);
	mul		$tmp2258 ___803_txcoords.dtdx ___645_bias 	%line{166} %argrw{"wrr"}
	abs		$tmp2257 $tmp2258 	%argrw{"wr"}
	max		$tmp2256 ___647_minRadius $tmp2257 	%argrw{"wrr"}
	sign		$tmp2259 ___803_txcoords.dtdx 	%argrw{"wr"}
	mul		___647_dtdx $tmp2256 $tmp2259 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:167
#         float dsdy = max(minRadius, abs(coords.dsdy * bias)) * sign(coords.dsdy);
	mul		$tmp2262 ___803_txcoords.dsdy ___645_bias 	%line{167} %argrw{"wrr"}
	abs		$tmp2261 $tmp2262 	%argrw{"wr"}
	max		$tmp2260 ___647_minRadius $tmp2261 	%argrw{"wrr"}
	sign		$tmp2263 ___803_txcoords.dsdy 	%argrw{"wr"}
	mul		___647_dsdy $tmp2260 $tmp2263 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:168
#         float dtdy = max(minRadius, abs(coords.dtdy * bias)) * sign(coords.dtdy);
	mul		$tmp2266 ___803_txcoords.dtdy ___645_bias 	%line{168} %argrw{"wrr"}
	abs		$tmp2265 $tmp2266 	%argrw{"wr"}
	max		$tmp2264 ___647_minRadius $tmp2265 	%argrw{"wrr"}
	sign		$tmp2267 ___803_txcoords.dtdy 	%argrw{"wr"}
	mul		___647_dtdy $tmp2264 $tmp2267 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:169
#         vector v0 = point(coords.dsdx, coords.dtdx, 0) - point(coords.dsdy, coords.dtdy, 0);
	point		$tmp2268 ___803_txcoords.dsdx ___803_txcoords.dtdx $const44 	%line{169} %argrw{"wrrr"}
	point		$tmp2269 ___803_txcoords.dsdy ___803_txcoords.dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v0 $tmp2268 $tmp2269 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:170
#         vector v1 = point(dsdx, dtdx, 0) - point(dsdy, dtdy, 0);
	point		$tmp2270 ___647_dsdx ___647_dtdx $const44 	%line{170} %argrw{"wrrr"}
	point		$tmp2271 ___647_dsdy ___647_dtdy $const44 	%argrw{"wrrr"}
	sub		___647_v1 $tmp2270 $tmp2271 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:171
#         params.width = (v1.x*v1.x + v1.y*v1.y) / (v0.x*v0.x + v1.y*v1.y);
	compref		$tmp2272 ___647_v1 $const2 	%line{171} %argrw{"wrr"}
	compref		$tmp2273 ___647_v1 $const2 	%argrw{"wrr"}
	mul		$tmp2274 $tmp2272 $tmp2273 	%argrw{"wrr"}
	compref		$tmp2275 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp2276 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp2277 $tmp2275 $tmp2276 	%argrw{"wrr"}
	add		$tmp2278 $tmp2274 $tmp2277 	%argrw{"wrr"}
	compref		$tmp2279 ___647_v0 $const2 	%argrw{"wrr"}
	compref		$tmp2280 ___647_v0 $const2 	%argrw{"wrr"}
	mul		$tmp2281 $tmp2279 $tmp2280 	%argrw{"wrr"}
	compref		$tmp2282 ___647_v1 $const3 	%argrw{"wrr"}
	compref		$tmp2283 ___647_v1 $const3 	%argrw{"wrr"}
	mul		$tmp2284 $tmp2282 $tmp2283 	%argrw{"wrr"}
	add		$tmp2285 $tmp2281 $tmp2284 	%argrw{"wrr"}
	div		txparams.width $tmp2278 $tmp2285 	%argrw{"wrr"}
	assign		txparams.width txparams.width 	%argrw{"wr"}
# PxrMultiTexture.osl:818
#                 if (texId == 0) // This if-else awkwardness is to work-around XPU's texturing limitations
	eq		$tmp2286 ___775_texId $const2 	%filename{"PxrMultiTexture.osl"} %line{818} %argrw{"wrr"}
	if		$tmp2286 5096 5391 	%argrw{"r"}
# PxrMultiTexture.osl:820
#                     colors[g] = PxrTextureLookup(filename0, txcoords, txparams);
	functioncall	$const18 5095 	%line{820} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename0 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp2288 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp2288 5074 5074 	%argrw{"r"}
	assign		$tmp2287 ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename0 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp2289 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp2289 5080 5080 	%argrw{"r"}
	neq		$tmp2290 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp2289 $tmp2290 	%argrw{"wr"}
	if		$tmp2289 5094 5094 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp2291 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp2292 $tmp2291 $const2 	%argrw{"wrr"}
	if		$tmp2292 5084 5087 	%argrw{"r"}
	eq		$tmp2293 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp2294 $tmp2293 $const2 	%argrw{"wrr"}
	assign		$tmp2292 $tmp2294 	%argrw{"wr"}
	if		$tmp2292 5094 5094 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp2295 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp2295 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp2296 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp2296 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp2297 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp2297 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		$tmp2287 ___649_finalResult 	%line{217} %argrw{"wr"}
# PxrMultiTexture.osl:820
#                     colors[g] = PxrTextureLookup(filename0, txcoords, txparams);
	aassign		colors ___773_g $tmp2287 	%filename{"PxrMultiTexture.osl"} %line{820} %argrw{"wrr"}
# PxrMultiTexture.osl:822
#                 else if (texId == 1)
	eq		$tmp2298 ___775_texId $const3 	%line{822} %argrw{"wrr"}
	if		$tmp2298 5129 5391 	%argrw{"r"}
# PxrMultiTexture.osl:824
#                     colors[g] = PxrTextureLookup(filename1, txcoords, txparams);
	functioncall	$const18 5128 	%line{824} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename1 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp2300 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp2300 5107 5107 	%argrw{"r"}
	assign		$tmp2299 ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename1 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp2301 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp2301 5113 5113 	%argrw{"r"}
	neq		$tmp2302 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp2301 $tmp2302 	%argrw{"wr"}
	if		$tmp2301 5127 5127 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp2303 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp2304 $tmp2303 $const2 	%argrw{"wrr"}
	if		$tmp2304 5117 5120 	%argrw{"r"}
	eq		$tmp2305 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp2306 $tmp2305 $const2 	%argrw{"wrr"}
	assign		$tmp2304 $tmp2306 	%argrw{"wr"}
	if		$tmp2304 5127 5127 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp2307 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp2307 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp2308 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp2308 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp2309 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp2309 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		$tmp2299 ___649_finalResult 	%line{217} %argrw{"wr"}
# PxrMultiTexture.osl:824
#                     colors[g] = PxrTextureLookup(filename1, txcoords, txparams);
	aassign		colors ___773_g $tmp2299 	%filename{"PxrMultiTexture.osl"} %line{824} %argrw{"wrr"}
# PxrMultiTexture.osl:826
#                 else if (texId == 2)
	eq		$tmp2310 ___775_texId $const4 	%line{826} %argrw{"wrr"}
	if		$tmp2310 5162 5391 	%argrw{"r"}
# PxrMultiTexture.osl:828
#                     colors[g] = PxrTextureLookup(filename2, txcoords, txparams);
	functioncall	$const18 5161 	%line{828} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename2 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp2312 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp2312 5140 5140 	%argrw{"r"}
	assign		$tmp2311 ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename2 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp2313 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp2313 5146 5146 	%argrw{"r"}
	neq		$tmp2314 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp2313 $tmp2314 	%argrw{"wr"}
	if		$tmp2313 5160 5160 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp2315 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp2316 $tmp2315 $const2 	%argrw{"wrr"}
	if		$tmp2316 5150 5153 	%argrw{"r"}
	eq		$tmp2317 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp2318 $tmp2317 $const2 	%argrw{"wrr"}
	assign		$tmp2316 $tmp2318 	%argrw{"wr"}
	if		$tmp2316 5160 5160 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp2319 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp2319 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp2320 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp2320 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp2321 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp2321 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		$tmp2311 ___649_finalResult 	%line{217} %argrw{"wr"}
# PxrMultiTexture.osl:828
#                     colors[g] = PxrTextureLookup(filename2, txcoords, txparams);
	aassign		colors ___773_g $tmp2311 	%filename{"PxrMultiTexture.osl"} %line{828} %argrw{"wrr"}
# PxrMultiTexture.osl:830
#                 else if (texId == 3)
	eq		$tmp2322 ___775_texId $const5 	%line{830} %argrw{"wrr"}
	if		$tmp2322 5195 5391 	%argrw{"r"}
# PxrMultiTexture.osl:832
#                    colors[g] = PxrTextureLookup(filename3, txcoords, txparams);
	functioncall	$const18 5194 	%line{832} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename3 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp2324 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp2324 5173 5173 	%argrw{"r"}
	assign		$tmp2323 ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename3 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp2325 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp2325 5179 5179 	%argrw{"r"}
	neq		$tmp2326 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp2325 $tmp2326 	%argrw{"wr"}
	if		$tmp2325 5193 5193 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp2327 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp2328 $tmp2327 $const2 	%argrw{"wrr"}
	if		$tmp2328 5183 5186 	%argrw{"r"}
	eq		$tmp2329 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp2330 $tmp2329 $const2 	%argrw{"wrr"}
	assign		$tmp2328 $tmp2330 	%argrw{"wr"}
	if		$tmp2328 5193 5193 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp2331 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp2331 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp2332 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp2332 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp2333 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp2333 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		$tmp2323 ___649_finalResult 	%line{217} %argrw{"wr"}
# PxrMultiTexture.osl:832
#                    colors[g] = PxrTextureLookup(filename3, txcoords, txparams);
	aassign		colors ___773_g $tmp2323 	%filename{"PxrMultiTexture.osl"} %line{832} %argrw{"wrr"}
# PxrMultiTexture.osl:834
#                 else if (texId == 4)
	eq		$tmp2334 ___775_texId $const34 	%line{834} %argrw{"wrr"}
	if		$tmp2334 5228 5391 	%argrw{"r"}
# PxrMultiTexture.osl:836
#                     colors[g] = PxrTextureLookup(filename4, txcoords, txparams);
	functioncall	$const18 5227 	%line{836} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename4 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp2336 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp2336 5206 5206 	%argrw{"r"}
	assign		$tmp2335 ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename4 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp2337 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp2337 5212 5212 	%argrw{"r"}
	neq		$tmp2338 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp2337 $tmp2338 	%argrw{"wr"}
	if		$tmp2337 5226 5226 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp2339 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp2340 $tmp2339 $const2 	%argrw{"wrr"}
	if		$tmp2340 5216 5219 	%argrw{"r"}
	eq		$tmp2341 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp2342 $tmp2341 $const2 	%argrw{"wrr"}
	assign		$tmp2340 $tmp2342 	%argrw{"wr"}
	if		$tmp2340 5226 5226 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp2343 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp2343 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp2344 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp2344 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp2345 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp2345 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		$tmp2335 ___649_finalResult 	%line{217} %argrw{"wr"}
# PxrMultiTexture.osl:836
#                     colors[g] = PxrTextureLookup(filename4, txcoords, txparams);
	aassign		colors ___773_g $tmp2335 	%filename{"PxrMultiTexture.osl"} %line{836} %argrw{"wrr"}
# PxrMultiTexture.osl:838
#                 else if (texId == 5)
	eq		$tmp2346 ___775_texId $const35 	%line{838} %argrw{"wrr"}
	if		$tmp2346 5261 5391 	%argrw{"r"}
# PxrMultiTexture.osl:840
#                     colors[g] = PxrTextureLookup(filename5, txcoords, txparams);
	functioncall	$const18 5260 	%line{840} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename5 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp2348 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp2348 5239 5239 	%argrw{"r"}
	assign		$tmp2347 ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename5 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp2349 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp2349 5245 5245 	%argrw{"r"}
	neq		$tmp2350 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp2349 $tmp2350 	%argrw{"wr"}
	if		$tmp2349 5259 5259 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp2351 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp2352 $tmp2351 $const2 	%argrw{"wrr"}
	if		$tmp2352 5249 5252 	%argrw{"r"}
	eq		$tmp2353 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp2354 $tmp2353 $const2 	%argrw{"wrr"}
	assign		$tmp2352 $tmp2354 	%argrw{"wr"}
	if		$tmp2352 5259 5259 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp2355 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp2355 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp2356 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp2356 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp2357 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp2357 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		$tmp2347 ___649_finalResult 	%line{217} %argrw{"wr"}
# PxrMultiTexture.osl:840
#                     colors[g] = PxrTextureLookup(filename5, txcoords, txparams);
	aassign		colors ___773_g $tmp2347 	%filename{"PxrMultiTexture.osl"} %line{840} %argrw{"wrr"}
# PxrMultiTexture.osl:842
#                 else if (texId == 6)
	eq		$tmp2358 ___775_texId $const36 	%line{842} %argrw{"wrr"}
	if		$tmp2358 5294 5391 	%argrw{"r"}
# PxrMultiTexture.osl:844
#                     colors[g] = PxrTextureLookup(filename6, txcoords, txparams);
	functioncall	$const18 5293 	%line{844} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename6 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp2360 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp2360 5272 5272 	%argrw{"r"}
	assign		$tmp2359 ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename6 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp2361 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp2361 5278 5278 	%argrw{"r"}
	neq		$tmp2362 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp2361 $tmp2362 	%argrw{"wr"}
	if		$tmp2361 5292 5292 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp2363 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp2364 $tmp2363 $const2 	%argrw{"wrr"}
	if		$tmp2364 5282 5285 	%argrw{"r"}
	eq		$tmp2365 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp2366 $tmp2365 $const2 	%argrw{"wrr"}
	assign		$tmp2364 $tmp2366 	%argrw{"wr"}
	if		$tmp2364 5292 5292 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp2367 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp2367 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp2368 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp2368 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp2369 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp2369 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		$tmp2359 ___649_finalResult 	%line{217} %argrw{"wr"}
# PxrMultiTexture.osl:844
#                     colors[g] = PxrTextureLookup(filename6, txcoords, txparams);
	aassign		colors ___773_g $tmp2359 	%filename{"PxrMultiTexture.osl"} %line{844} %argrw{"wrr"}
# PxrMultiTexture.osl:846
#                 else if (texId == 7)
	eq		$tmp2370 ___775_texId $const37 	%line{846} %argrw{"wrr"}
	if		$tmp2370 5327 5391 	%argrw{"r"}
# PxrMultiTexture.osl:848
#                     colors[g] = PxrTextureLookup(filename7, txcoords, txparams);
	functioncall	$const18 5326 	%line{848} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename7 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp2372 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp2372 5305 5305 	%argrw{"r"}
	assign		$tmp2371 ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename7 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp2373 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp2373 5311 5311 	%argrw{"r"}
	neq		$tmp2374 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp2373 $tmp2374 	%argrw{"wr"}
	if		$tmp2373 5325 5325 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp2375 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp2376 $tmp2375 $const2 	%argrw{"wrr"}
	if		$tmp2376 5315 5318 	%argrw{"r"}
	eq		$tmp2377 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp2378 $tmp2377 $const2 	%argrw{"wrr"}
	assign		$tmp2376 $tmp2378 	%argrw{"wr"}
	if		$tmp2376 5325 5325 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp2379 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp2379 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp2380 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp2380 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp2381 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp2381 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		$tmp2371 ___649_finalResult 	%line{217} %argrw{"wr"}
# PxrMultiTexture.osl:848
#                     colors[g] = PxrTextureLookup(filename7, txcoords, txparams);
	aassign		colors ___773_g $tmp2371 	%filename{"PxrMultiTexture.osl"} %line{848} %argrw{"wrr"}
# PxrMultiTexture.osl:850
#                 else if (texId == 8)
	eq		$tmp2382 ___775_texId $const38 	%line{850} %argrw{"wrr"}
	if		$tmp2382 5360 5391 	%argrw{"r"}
# PxrMultiTexture.osl:852
#                     colors[g] = PxrTextureLookup(filename8, txcoords, txparams);
	functioncall	$const18 5359 	%line{852} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename8 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp2384 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp2384 5338 5338 	%argrw{"r"}
	assign		$tmp2383 ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename8 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp2385 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp2385 5344 5344 	%argrw{"r"}
	neq		$tmp2386 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp2385 $tmp2386 	%argrw{"wr"}
	if		$tmp2385 5358 5358 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp2387 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp2388 $tmp2387 $const2 	%argrw{"wrr"}
	if		$tmp2388 5348 5351 	%argrw{"r"}
	eq		$tmp2389 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp2390 $tmp2389 $const2 	%argrw{"wrr"}
	assign		$tmp2388 $tmp2390 	%argrw{"wr"}
	if		$tmp2388 5358 5358 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp2391 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp2391 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp2392 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp2392 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp2393 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp2393 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		$tmp2383 ___649_finalResult 	%line{217} %argrw{"wr"}
# PxrMultiTexture.osl:852
#                     colors[g] = PxrTextureLookup(filename8, txcoords, txparams);
	aassign		colors ___773_g $tmp2383 	%filename{"PxrMultiTexture.osl"} %line{852} %argrw{"wrr"}
# PxrMultiTexture.osl:856
#                     colors[g] = PxrTextureLookup(filename9, txcoords, txparams);
	functioncall	$const18 5390 	%line{856} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#     int success = 0;
	assign		___649_success $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{185} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:186
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{186} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{187} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color result = texture(filename,
	texture		___649_result filename9 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 txparams.missingcolor $const22 txparams.interp $const23 txparams.width 	%line{189} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:199
#     if (result == params.missingcolor) return result;
	eq		$tmp2395 ___649_result txparams.missingcolor 	%line{199} %argrw{"wrr"}
	if		$tmp2395 5369 5369 	%argrw{"r"}
	assign		$tmp2394 ___649_result 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:202
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{202} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:205
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success filename9 $const24 ___649_nchannels 	%line{205} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:206
#     if (success && nchannels)
	neq		$tmp2396 ___649_success $const2 	%line{206} %argrw{"wrr"}
	if		$tmp2396 5375 5375 	%argrw{"r"}
	neq		$tmp2397 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp2396 $tmp2397 	%argrw{"wr"}
	if		$tmp2396 5389 5389 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp2398 ___649_nchannels $const3 	%line{208} %argrw{"wrr"}
	neq		$tmp2399 $tmp2398 $const2 	%argrw{"wrr"}
	if		$tmp2399 5379 5382 	%argrw{"r"}
	eq		$tmp2400 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp2401 $tmp2400 $const2 	%argrw{"wrr"}
	assign		$tmp2399 $tmp2401 	%argrw{"wr"}
	if		$tmp2399 5389 5389 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:211
#             finalResult[0] = result[0];
	compref		$tmp2402 ___649_result $const2 	%line{211} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp2402 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:212
#             finalResult[1] = result[0];
	compref		$tmp2403 ___649_result $const2 	%line{212} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp2403 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[2] = result[0];
	compref		$tmp2404 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp2404 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return finalResult;
	assign		$tmp2394 ___649_finalResult 	%line{217} %argrw{"wr"}
# PxrMultiTexture.osl:856
#                     colors[g] = PxrTextureLookup(filename9, txcoords, txparams);
	aassign		colors ___773_g $tmp2394 	%filename{"PxrMultiTexture.osl"} %line{856} %argrw{"wrr"}
# PxrMultiTexture.osl:858
#                 if (linearize) PxrLinearizeSRGB(colors[g]);
	if		linearize 5417 5417 	%line{858} %argrw{"r"}
	aref		$tmp2405 colors ___773_g 	%argrw{"wrr"}
	functioncall	$const25 5416 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	functioncall	$const26 5399 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#     string foo = "";
	assign		___638_foo $const27 	%line{118} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#     getattribute("user:ociocolorspacename", foo);
	getattribute	$tmp2407 $const28 ___638_foo 	%line{119} %argrw{"wrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#     return int(foo == "");
	eq		$tmp2408 ___638_foo $const27 	%line{120} %argrw{"wrr"}
	assign		$tmp2406 $tmp2408 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:125
#     if (ocioDisabled())
	if		$tmp2406 5416 5416 	%line{125} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	for		$tmp2410 5402 5404 5415 5416 	%line{127} %argrw{"r"}
	assign		___641_i $const2 	%argrw{"wr"}
	lt		$tmp2409 ___641_i $const5 	%argrw{"wrr"}
	neq		$tmp2410 $tmp2409 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:129
#             if (inout[i] < 0.04045)
	compref		$tmp2411 $tmp2405 ___641_i 	%line{129} %argrw{"wrr"}
	lt		$tmp2412 $tmp2411 $const29 	%argrw{"wrr"}
	if		$tmp2412 5410 5415 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:130
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp2413 $tmp2405 ___641_i 	%line{130} %argrw{"wrr"}
	mul		$tmp2414 $tmp2413 $const30 	%argrw{"wrr"}
	compassign	$tmp2405 ___641_i $tmp2414 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:132
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp2416 $tmp2405 ___641_i 	%line{132} %argrw{"wrr"}
	add		$tmp2417 $tmp2416 $const31 	%argrw{"wrr"}
	mul		$tmp2418 $tmp2417 $const32 	%argrw{"wrr"}
	pow		$tmp2415 $tmp2418 $const33 	%argrw{"wrr"}
	compassign	$tmp2405 ___641_i $tmp2415 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:127
#         for (int i = 0; i < 3; ++i)
	add		___641_i ___641_i $const3 	%line{127} %argrw{"wrr"}
# PxrMultiTexture.osl:858
#                 if (linearize) PxrLinearizeSRGB(colors[g]);
	aassign		colors ___773_g $tmp2405 	%filename{"PxrMultiTexture.osl"} %line{858} %argrw{"wrr"}
# PxrMultiTexture.osl:861
#                 if (isconnected(resultNG) && texturesAreNormalMaps)
	isconnected	$tmp2419 resultNG 	%line{861} %argrw{"wr"}
	neq		$tmp2420 $tmp2419 $const2 	%argrw{"wrr"}
	if		$tmp2420 5422 5422 	%argrw{"r"}
	neq		$tmp2421 texturesAreNormalMaps $const2 	%argrw{"wrr"}
	assign		$tmp2420 $tmp2421 	%argrw{"wr"}
	if		$tmp2420 5489 5489 	%argrw{"r"}
# PxrMultiTexture.osl:863
#                     vector tbn = colors[g];
	aref		___814_tbn colors ___773_g 	%line{863} %argrw{"wrr"}
# PxrMultiTexture.osl:864
#                     setupNormalMap(nMap, tbn);
	functioncall	$const98 5455 	%line{864} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:144
#     color tsNormal = nmap * 2.0 - 1.0;
	mul		$tmp2422 ___814_tbn $const68 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{144} %argrw{"wrr"}
	sub		___690_tsNormal $tmp2422 $const9 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:146
#     tsNormal[0] = - tsNormal[0];
	compref		$tmp2423 ___690_tsNormal $const2 	%line{146} %argrw{"wrr"}
	neg		$tmp2424 $tmp2423 	%argrw{"wr"}
	compassign	___690_tsNormal $const2 $tmp2424 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:147
#     tsNormal[1] = - tsNormal[1];
	compref		$tmp2425 ___690_tsNormal $const3 	%line{147} %argrw{"wrr"}
	neg		$tmp2426 $tmp2425 	%argrw{"wr"}
	compassign	___690_tsNormal $const3 $tmp2426 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:150
#     if (nmp.orientation == k_opengl)
	eq		$tmp2427 nMap.orientation $const2 	%line{150} %argrw{"wrr"}
	if		$tmp2427 5438 5454 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:152
#         tsNormal[0] = -tsNormal[0];
	compref		$tmp2428 ___690_tsNormal $const2 	%line{152} %argrw{"wrr"}
	neg		$tmp2429 $tmp2428 	%argrw{"wr"}
	compassign	___690_tsNormal $const2 $tmp2429 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:154
#     else if (nmp.orientation == k_directx)
	eq		$tmp2430 nMap.orientation $const3 	%line{154} %argrw{"wrr"}
	if		$tmp2430 5446 5454 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:156
#         tsNormal[0] = -tsNormal[0];
	compref		$tmp2431 ___690_tsNormal $const2 	%line{156} %argrw{"wrr"}
	neg		$tmp2432 $tmp2431 	%argrw{"wr"}
	compassign	___690_tsNormal $const2 $tmp2432 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:157
#         tsNormal[1] = -tsNormal[1];
	compref		$tmp2433 ___690_tsNormal $const3 	%line{157} %argrw{"wrr"}
	neg		$tmp2434 $tmp2433 	%argrw{"wr"}
	compassign	___690_tsNormal $const3 $tmp2434 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:161
#         if (nmp.flipX)
	if		nMap.flipX 5450 5450 	%line{161} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:162
#             tsNormal[0] = -tsNormal[0];
	compref		$tmp2435 ___690_tsNormal $const2 	%line{162} %argrw{"wrr"}
	neg		$tmp2436 $tmp2435 	%argrw{"wr"}
	compassign	___690_tsNormal $const2 $tmp2436 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:163
#         if (nmp.flipY)
	if		nMap.flipY 5454 5454 	%line{163} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:164
#             tsNormal[1] = -tsNormal[1];
	compref		$tmp2437 ___690_tsNormal $const3 	%line{164} %argrw{"wrr"}
	neg		$tmp2438 $tmp2437 	%argrw{"wr"}
	compassign	___690_tsNormal $const3 $tmp2438 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:166
#     nmap = tsNormal;
	assign		___814_tbn ___690_tsNormal 	%line{166} %argrw{"wr"}
# PxrMultiTexture.osl:865
#                     grads[g] = SurfgradFromTBN(TspaceNormalToDerivative(tbn),
	functioncall	$const91 5482 	%filename{"PxrMultiTexture.osl"} %line{865} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:76
# 	float scale = 1.0 / 128.0;
	div		___685_scale $const9 $const92 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{76} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:80
# 	color vMa = abs(vM);
	abs		___685_vMa ___814_tbn 	%line{80} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:81
# 	float z_ma = max(vMa[2], scale * max(vMa[0], vMa[1]));
	compref		$tmp2441 ___685_vMa $const4 	%line{81} %argrw{"wrr"}
	compref		$tmp2443 ___685_vMa $const2 	%argrw{"wrr"}
	compref		$tmp2444 ___685_vMa $const3 	%argrw{"wrr"}
	max		$tmp2442 $tmp2443 $tmp2444 	%argrw{"wrr"}
	mul		$tmp2445 ___685_scale $tmp2442 	%argrw{"wrr"}
	max		___685_z_ma $tmp2441 $tmp2445 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:84
# 	int gFlipVertDeriv = 1;
	assign		___685_gFlipVertDeriv $const3 	%line{84} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:85
# 	float s = gFlipVertDeriv ? -1.0 : 1.0;
	if		___685_gFlipVertDeriv 5467 5468 	%line{85} %argrw{"r"}
	assign		___685_s $const85 	%argrw{"wr"}
	assign		___685_s $const9 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	compref		$tmp2447.x ___814_tbn $const2 	%line{86} %argrw{"wrr"}
	compref		$tmp2448 ___814_tbn $const3 	%argrw{"wrr"}
	mul		$tmp2447.y ___685_s $tmp2448 	%argrw{"wrr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const93 5474 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:55
#     return float2(-a.x, -a.y);
	neg		$tmp2446.x $tmp2447.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{55} %argrw{"wr"}
	neg		$tmp2446.y $tmp2447.y 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const94 5481 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:146
#     float b_inv = 1.0/b;
	div		___678_b_inv $const9 ___685_z_ma 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{146} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:147
#     return a * float2(b_inv, b_inv);
	assign		$tmp2449.x ___678_b_inv 	%line{147} %argrw{"wr"}
	assign		$tmp2449.y ___678_b_inv 	%argrw{"wr"}
# PxrMultiTexture.osl:1025
# 
	functioncall	$const89 5481 	%filename{"PxrMultiTexture.osl"} %line{1025} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		$tmp2440.x $tmp2446.x $tmp2449.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		$tmp2440.y $tmp2446.y $tmp2449.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	return	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{86}
# PxrMultiTexture.osl:866
#                                                manifoldMulti.Tn[g], manifoldMulti.Bn[g]);
	aref		$tmp2450 manifoldMulti.Tn ___773_g 	%filename{"PxrMultiTexture.osl"} %line{866} %argrw{"wrr"}
	aref		$tmp2451 manifoldMulti.Bn ___773_g 	%argrw{"wrr"}
# PxrMultiTexture.osl:865
#                     grads[g] = SurfgradFromTBN(TspaceNormalToDerivative(tbn),
	functioncall	$const95 5488 	%line{865} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:92
#     return deriv.x * vT + deriv.y * vB;
	mul		$tmp2452 $tmp2440.x $tmp2450 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{92} %argrw{"wrr"}
	mul		$tmp2453 $tmp2440.y $tmp2451 	%argrw{"wrr"}
	add		$tmp2439 $tmp2452 $tmp2453 	%argrw{"wrr"}
# PxrMultiTexture.osl:865
#                     grads[g] = SurfgradFromTBN(TspaceNormalToDerivative(tbn),
	aassign		grads ___773_g $tmp2439 	%filename{"PxrMultiTexture.osl"} %line{865} %argrw{"wrr"}
# PxrMultiTexture.osl:869
#                 if (needAlpha)
	if		needAlpha 5552 5552 	%line{869} %argrw{"r"}
# PxrMultiTexture.osl:871
#                     txparams.firstchannel += 3;
	add		txparams.firstchannel txparams.firstchannel $const5 	%line{871} %argrw{"wrr"}
	assign		txparams.firstchannel txparams.firstchannel 	%argrw{"wr"}
# PxrMultiTexture.osl:872
#                     if (texId == 0) // This if-else awkwardness is to work-around XPU's texturing limitations
	eq		$tmp2454 ___775_texId $const2 	%line{872} %argrw{"wrr"}
	if		$tmp2454 5498 5552 	%argrw{"r"}
# PxrMultiTexture.osl:874
#                         alphas[g] = PxrTextureLookup(filename0, txcoords, txparams);
	functioncall	$const18 5497 	%line{874} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha txparams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		$tmp2455 filename0 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 ___652_missingalpha $const22 txparams.interp $const23 txparams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# PxrMultiTexture.osl:874
#                         alphas[g] = PxrTextureLookup(filename0, txcoords, txparams);
	aassign		alphas ___773_g $tmp2455 	%filename{"PxrMultiTexture.osl"} %line{874} %argrw{"wrr"}
# PxrMultiTexture.osl:876
#                     else if (texId == 1)
	eq		$tmp2456 ___775_texId $const3 	%line{876} %argrw{"wrr"}
	if		$tmp2456 5504 5552 	%argrw{"r"}
# PxrMultiTexture.osl:878
#                         alphas[g] = PxrTextureLookup(filename1, txcoords, txparams);
	functioncall	$const18 5503 	%line{878} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha txparams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		$tmp2457 filename1 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 ___652_missingalpha $const22 txparams.interp $const23 txparams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# PxrMultiTexture.osl:878
#                         alphas[g] = PxrTextureLookup(filename1, txcoords, txparams);
	aassign		alphas ___773_g $tmp2457 	%filename{"PxrMultiTexture.osl"} %line{878} %argrw{"wrr"}
# PxrMultiTexture.osl:880
#                     else if (texId == 2)
	eq		$tmp2458 ___775_texId $const4 	%line{880} %argrw{"wrr"}
	if		$tmp2458 5510 5552 	%argrw{"r"}
# PxrMultiTexture.osl:882
#                         alphas[g] = PxrTextureLookup(filename2, txcoords, txparams);
	functioncall	$const18 5509 	%line{882} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha txparams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		$tmp2459 filename2 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 ___652_missingalpha $const22 txparams.interp $const23 txparams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# PxrMultiTexture.osl:882
#                         alphas[g] = PxrTextureLookup(filename2, txcoords, txparams);
	aassign		alphas ___773_g $tmp2459 	%filename{"PxrMultiTexture.osl"} %line{882} %argrw{"wrr"}
# PxrMultiTexture.osl:884
#                     else if (texId == 3)
	eq		$tmp2460 ___775_texId $const5 	%line{884} %argrw{"wrr"}
	if		$tmp2460 5516 5552 	%argrw{"r"}
# PxrMultiTexture.osl:886
#                         alphas[g] = PxrTextureLookup(filename3, txcoords, txparams);
	functioncall	$const18 5515 	%line{886} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha txparams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		$tmp2461 filename3 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 ___652_missingalpha $const22 txparams.interp $const23 txparams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# PxrMultiTexture.osl:886
#                         alphas[g] = PxrTextureLookup(filename3, txcoords, txparams);
	aassign		alphas ___773_g $tmp2461 	%filename{"PxrMultiTexture.osl"} %line{886} %argrw{"wrr"}
# PxrMultiTexture.osl:888
#                     else if (texId == 4)
	eq		$tmp2462 ___775_texId $const34 	%line{888} %argrw{"wrr"}
	if		$tmp2462 5522 5552 	%argrw{"r"}
# PxrMultiTexture.osl:890
#                         alphas[g] = PxrTextureLookup(filename4, txcoords, txparams);
	functioncall	$const18 5521 	%line{890} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha txparams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		$tmp2463 filename4 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 ___652_missingalpha $const22 txparams.interp $const23 txparams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# PxrMultiTexture.osl:890
#                         alphas[g] = PxrTextureLookup(filename4, txcoords, txparams);
	aassign		alphas ___773_g $tmp2463 	%filename{"PxrMultiTexture.osl"} %line{890} %argrw{"wrr"}
# PxrMultiTexture.osl:892
#                     else if (texId == 5)
	eq		$tmp2464 ___775_texId $const35 	%line{892} %argrw{"wrr"}
	if		$tmp2464 5528 5552 	%argrw{"r"}
# PxrMultiTexture.osl:894
#                         alphas[g] = PxrTextureLookup(filename5, txcoords, txparams);
	functioncall	$const18 5527 	%line{894} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha txparams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		$tmp2465 filename5 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 ___652_missingalpha $const22 txparams.interp $const23 txparams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# PxrMultiTexture.osl:894
#                         alphas[g] = PxrTextureLookup(filename5, txcoords, txparams);
	aassign		alphas ___773_g $tmp2465 	%filename{"PxrMultiTexture.osl"} %line{894} %argrw{"wrr"}
# PxrMultiTexture.osl:896
#                     else if (texId == 6)
	eq		$tmp2466 ___775_texId $const36 	%line{896} %argrw{"wrr"}
	if		$tmp2466 5534 5552 	%argrw{"r"}
# PxrMultiTexture.osl:898
#                         alphas[g] = PxrTextureLookup(filename6, txcoords, txparams);
	functioncall	$const18 5533 	%line{898} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha txparams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		$tmp2467 filename6 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 ___652_missingalpha $const22 txparams.interp $const23 txparams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# PxrMultiTexture.osl:898
#                         alphas[g] = PxrTextureLookup(filename6, txcoords, txparams);
	aassign		alphas ___773_g $tmp2467 	%filename{"PxrMultiTexture.osl"} %line{898} %argrw{"wrr"}
# PxrMultiTexture.osl:900
#                     else if (texId == 7)
	eq		$tmp2468 ___775_texId $const37 	%line{900} %argrw{"wrr"}
	if		$tmp2468 5540 5552 	%argrw{"r"}
# PxrMultiTexture.osl:902
#                         alphas[g] = PxrTextureLookup(filename7, txcoords, txparams);
	functioncall	$const18 5539 	%line{902} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha txparams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		$tmp2469 filename7 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 ___652_missingalpha $const22 txparams.interp $const23 txparams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# PxrMultiTexture.osl:902
#                         alphas[g] = PxrTextureLookup(filename7, txcoords, txparams);
	aassign		alphas ___773_g $tmp2469 	%filename{"PxrMultiTexture.osl"} %line{902} %argrw{"wrr"}
# PxrMultiTexture.osl:904
#                     else if (texId == 8)
	eq		$tmp2470 ___775_texId $const38 	%line{904} %argrw{"wrr"}
	if		$tmp2470 5546 5552 	%argrw{"r"}
# PxrMultiTexture.osl:906
#                         alphas[g] = PxrTextureLookup(filename8, txcoords, txparams);
	functioncall	$const18 5545 	%line{906} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha txparams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		$tmp2471 filename8 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 ___652_missingalpha $const22 txparams.interp $const23 txparams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# PxrMultiTexture.osl:906
#                         alphas[g] = PxrTextureLookup(filename8, txcoords, txparams);
	aassign		alphas ___773_g $tmp2471 	%filename{"PxrMultiTexture.osl"} %line{906} %argrw{"wrr"}
# PxrMultiTexture.osl:908
#                     else if (texId == 9)
	eq		$tmp2472 ___775_texId $const39 	%line{908} %argrw{"wrr"}
	if		$tmp2472 5552 5552 	%argrw{"r"}
# PxrMultiTexture.osl:910
#                         alphas[g] = PxrTextureLookup(filename9, txcoords, txparams);
	functioncall	$const18 5551 	%line{910} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:223
#     color missingalpha = params.missingalpha;
	assign		___652_missingalpha txparams.missingalpha 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{223} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#     return texture(filename,
	texture		$tmp2473 filename9 ___803_txcoords.s ___803_txcoords.t ___803_txcoords.dsdx ___803_txcoords.dtdx ___803_txcoords.dsdy ___803_txcoords.dtdy $const19 txparams.firstchannel $const20 txparams.blur $const21 ___652_missingalpha $const22 txparams.interp $const23 txparams.width 	%line{224} %argrw{"wrrrrrrrrrrrrrrrrr"}
# PxrMultiTexture.osl:910
#                         alphas[g] = PxrTextureLookup(filename9, txcoords, txparams);
	aassign		alphas ___773_g $tmp2473 	%filename{"PxrMultiTexture.osl"} %line{910} %argrw{"wrr"}
# PxrMultiTexture.osl:917
#             if (randomize)
	if		randomize 5910 5910 	%line{917} %argrw{"r"}
# PxrMultiTexture.osl:919
#                 point ps = point(idf[g][0] + objSeed,
	aref		$tmp2475 idf ___773_g 	%line{919} %argrw{"wrr"}
	compref		$tmp2474 $tmp2475 $const2 	%argrw{"wrr"}
	add		$tmp2476 $tmp2474 objSeed 	%argrw{"wrr"}
# PxrMultiTexture.osl:920
#                                  idf[g][1] + objSeed,
	aref		$tmp2478 idf ___773_g 	%line{920} %argrw{"wrr"}
	compref		$tmp2477 $tmp2478 $const3 	%argrw{"wrr"}
	add		$tmp2479 $tmp2477 objSeed 	%argrw{"wrr"}
# PxrMultiTexture.osl:921
#                                  idf[g][0] + idf[g][1] + objSeed);
	aref		$tmp2481 idf ___773_g 	%line{921} %argrw{"wrr"}
	compref		$tmp2480 $tmp2481 $const2 	%argrw{"wrr"}
	aref		$tmp2483 idf ___773_g 	%argrw{"wrr"}
	compref		$tmp2482 $tmp2483 $const3 	%argrw{"wrr"}
	add		$tmp2484 $tmp2480 $tmp2482 	%argrw{"wrr"}
	add		$tmp2485 $tmp2484 objSeed 	%argrw{"wrr"}
# PxrMultiTexture.osl:919
#                 point ps = point(idf[g][0] + objSeed,
	point		___826_ps $tmp2476 $tmp2479 $tmp2485 	%line{919} %argrw{"wrrr"}
# PxrMultiTexture.osl:922
#                 point r = matchCppPattern ? rxcellnoise(ps) : noise("cell", ps);
	if		matchCppPattern 5825 5826 	%line{922} %argrw{"r"}
	functioncall	$const56 5825 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:954
#     noise_parameters np = {3, 3, INPUT3W(seed), point(0), NONPERIODIC};
	assign		___601_np.domain $const5 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h"} %line{954} %argrw{"wr"}
	assign		___601_np.range $const5 	%argrw{"wr"}
	compref		$tmp2487 ___826_ps $const2 	%argrw{"wrr"}
	fmod		$tmp2486 $tmp2487 $const55 	%argrw{"wrr"}
	aassign		___601_np.input $const2 $tmp2486 	%argrw{"wrr"}
	compref		$tmp2489 ___826_ps $const3 	%argrw{"wrr"}
	fmod		$tmp2488 $tmp2489 $const55 	%argrw{"wrr"}
	aassign		___601_np.input $const3 $tmp2488 	%argrw{"wrr"}
	compref		$tmp2491 ___826_ps $const4 	%argrw{"wrr"}
	fmod		$tmp2490 $tmp2491 $const55 	%argrw{"wrr"}
	aassign		___601_np.input $const4 $tmp2490 	%argrw{"wrr"}
	aassign		___601_np.input $const5 $const2 	%argrw{"wrr"}
	assign		___601_np.result $const6 	%argrw{"wr"}
	assign		___601_np.periodic $const2 	%argrw{"wr"}
	assign		___601_np.period $const57 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:955
#     rx_cell_noise(np);
	functioncall	$const58 5821 	%line{955} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:68
#     float rxcellrandtable[4096] = {
	assign		___538_rxcellrandtable $const59 	%line{68} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:582
#     int rxcellpermute[4096] = {
	assign		___538_rxcellpermute $const60 	%line{582} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:904
#     int k = 0;
	assign		___538_k $const2 	%line{904} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:905
#     if (np.domain == 1)
	eq		$tmp2492 ___601_np.domain $const3 	%line{905} %argrw{"wrr"}
	if		$tmp2492 5617 5821 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:907
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp2493 ___601_np.input $const2 	%line{907} %argrw{"wrr"}
	add		___538_v0 $tmp2493 $const61 	%argrw{"wrr"}
	lt		$tmp2494 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp2494 5598 5602 	%argrw{"r"}
	lt		$tmp2495 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp2495 5596 5598 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp2496 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp2496 $const3 	%argrw{"wrr"}
	gt		$tmp2497 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp2497 5601 5602 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:908
#         for (i = np.range; i > 0; i--, int00 += 7)
	for		$tmp2499 5604 5606 5614 5617 	%line{908} %argrw{"r"}
	assign		___538_i ___601_np.range 	%argrw{"wr"}
	gt		$tmp2498 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp2499 $tmp2498 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:910
#             v0 = rxcellrandtable[CELLPERMUTE(int00)];
	shl		$tmp2500 $const3 $const64 	%line{910} %argrw{"wrr"}
	sub		$tmp2501 $tmp2500 $const3 	%argrw{"wrr"}
	bitand		$tmp2502 ___538_int00 $tmp2501 	%argrw{"wrr"}
	aref		$tmp2503 ___538_rxcellpermute $tmp2502 	%argrw{"wrr"}
	aref		___538_v0 ___538_rxcellrandtable $tmp2503 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:911
#             np.result[k++] = v0;
	assign		$tmp2504 ___538_k 	%line{911} %argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___601_np.result $tmp2504 ___538_v0 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:908
#         for (i = np.range; i > 0; i--, int00 += 7)
	assign		$tmp2505 ___538_i 	%line{908} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:914
#     else if (np.domain == 2)
	eq		$tmp2506 ___601_np.domain $const4 	%line{914} %argrw{"wrr"}
	if		$tmp2506 5666 5821 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:916
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp2507 ___601_np.input $const2 	%line{916} %argrw{"wrr"}
	add		___538_v0 $tmp2507 $const61 	%argrw{"wrr"}
	lt		$tmp2508 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp2508 5628 5632 	%argrw{"r"}
	lt		$tmp2509 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp2509 5626 5628 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp2510 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp2510 $const3 	%argrw{"wrr"}
	gt		$tmp2511 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp2511 5631 5632 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:917
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp2512 ___601_np.input $const3 	%line{917} %argrw{"wrr"}
	add		___538_v0 $tmp2512 $const61 	%argrw{"wrr"}
	lt		$tmp2513 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp2513 5641 5645 	%argrw{"r"}
	lt		$tmp2514 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp2514 5639 5641 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		$tmp2515 ___538_v0 	%argrw{"wr"}
	sub		___538_int01 $tmp2515 $const3 	%argrw{"wrr"}
	gt		$tmp2516 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp2516 5644 5645 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		___538_int01 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:918
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7)
	for		$tmp2518 5647 5649 5662 5666 	%line{918} %argrw{"r"}
	assign		___538_i ___601_np.range 	%argrw{"wr"}
	gt		$tmp2517 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp2518 $tmp2517 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:920
#             iy = CELLPERMUTE(int01);
	shl		$tmp2519 $const3 $const64 	%line{920} %argrw{"wrr"}
	sub		$tmp2520 $tmp2519 $const3 	%argrw{"wrr"}
	bitand		$tmp2521 ___538_int01 $tmp2520 	%argrw{"wrr"}
	aref		___538_iy ___538_rxcellpermute $tmp2521 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:921
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(iy + int00)];
	add		$tmp2522 ___538_iy ___538_int00 	%line{921} %argrw{"wrr"}
	shl		$tmp2523 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp2524 $tmp2523 $const3 	%argrw{"wrr"}
	bitand		$tmp2525 $tmp2522 $tmp2524 	%argrw{"wrr"}
	aref		$tmp2526 ___538_rxcellpermute $tmp2525 	%argrw{"wrr"}
	aref		$tmp2527 ___538_rxcellrandtable $tmp2526 	%argrw{"wrr"}
	assign		$tmp2528 ___538_k 	%argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___601_np.result $tmp2528 $tmp2527 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:918
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7)
	assign		$tmp2529 ___538_i 	%line{918} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
	add		___538_int01 ___538_int01 $const37 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:924
#     else if (np.domain == 3)
	eq		$tmp2530 ___601_np.domain $const5 	%line{924} %argrw{"wrr"}
	if		$tmp2530 5734 5821 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:926
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp2531 ___601_np.input $const2 	%line{926} %argrw{"wrr"}
	add		___538_v0 $tmp2531 $const61 	%argrw{"wrr"}
	lt		$tmp2532 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp2532 5677 5681 	%argrw{"r"}
	lt		$tmp2533 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp2533 5675 5677 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp2534 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp2534 $const3 	%argrw{"wrr"}
	gt		$tmp2535 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp2535 5680 5681 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:927
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp2536 ___601_np.input $const3 	%line{927} %argrw{"wrr"}
	add		___538_v0 $tmp2536 $const61 	%argrw{"wrr"}
	lt		$tmp2537 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp2537 5690 5694 	%argrw{"r"}
	lt		$tmp2538 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp2538 5688 5690 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		$tmp2539 ___538_v0 	%argrw{"wr"}
	sub		___538_int01 $tmp2539 $const3 	%argrw{"wrr"}
	gt		$tmp2540 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp2540 5693 5694 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		___538_int01 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:928
#         SETUP_CELL_DOMAIN(2, int02);
	aref		$tmp2541 ___601_np.input $const4 	%line{928} %argrw{"wrr"}
	add		___538_v0 $tmp2541 $const61 	%argrw{"wrr"}
	lt		$tmp2542 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp2542 5703 5707 	%argrw{"r"}
	lt		$tmp2543 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp2543 5701 5703 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		$tmp2544 ___538_v0 	%argrw{"wr"}
	sub		___538_int02 $tmp2544 $const3 	%argrw{"wrr"}
	gt		$tmp2545 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp2545 5706 5707 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		___538_int02 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:929
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3)
	for		$tmp2547 5709 5711 5729 5734 	%line{929} %argrw{"r"}
	assign		___538_i ___601_np.range 	%argrw{"wr"}
	gt		$tmp2546 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp2547 $tmp2546 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:931
#             iz = CELLPERMUTE(int02);
	shl		$tmp2548 $const3 $const64 	%line{931} %argrw{"wrr"}
	sub		$tmp2549 $tmp2548 $const3 	%argrw{"wrr"}
	bitand		$tmp2550 ___538_int02 $tmp2549 	%argrw{"wrr"}
	aref		___538_iz ___538_rxcellpermute $tmp2550 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:932
#             iy = CELLPERMUTE(int01 + iz);
	add		$tmp2551 ___538_int01 ___538_iz 	%line{932} %argrw{"wrr"}
	shl		$tmp2552 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp2553 $tmp2552 $const3 	%argrw{"wrr"}
	bitand		$tmp2554 $tmp2551 $tmp2553 	%argrw{"wrr"}
	aref		___538_iy ___538_rxcellpermute $tmp2554 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:933
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(int00 + iy)];
	add		$tmp2555 ___538_int00 ___538_iy 	%line{933} %argrw{"wrr"}
	shl		$tmp2556 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp2557 $tmp2556 $const3 	%argrw{"wrr"}
	bitand		$tmp2558 $tmp2555 $tmp2557 	%argrw{"wrr"}
	aref		$tmp2559 ___538_rxcellpermute $tmp2558 	%argrw{"wrr"}
	aref		$tmp2560 ___538_rxcellrandtable $tmp2559 	%argrw{"wrr"}
	assign		$tmp2561 ___538_k 	%argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___601_np.result $tmp2561 $tmp2560 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:929
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3)
	assign		$tmp2562 ___538_i 	%line{929} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
	add		___538_int01 ___538_int01 $const37 	%argrw{"wrr"}
	add		___538_int02 ___538_int02 $const5 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:936
#     else if (np.domain == 4)
	eq		$tmp2563 ___601_np.domain $const34 	%line{936} %argrw{"wrr"}
	if		$tmp2563 5821 5821 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:938
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp2564 ___601_np.input $const2 	%line{938} %argrw{"wrr"}
	add		___538_v0 $tmp2564 $const61 	%argrw{"wrr"}
	lt		$tmp2565 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp2565 5745 5749 	%argrw{"r"}
	lt		$tmp2566 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp2566 5743 5745 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		$tmp2567 ___538_v0 	%argrw{"wr"}
	sub		___538_int00 $tmp2567 $const3 	%argrw{"wrr"}
	gt		$tmp2568 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp2568 5748 5749 	%argrw{"r"}
	assign		___538_int00 $const2 	%argrw{"wr"}
	assign		___538_int00 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:939
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp2569 ___601_np.input $const3 	%line{939} %argrw{"wrr"}
	add		___538_v0 $tmp2569 $const61 	%argrw{"wrr"}
	lt		$tmp2570 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp2570 5758 5762 	%argrw{"r"}
	lt		$tmp2571 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp2571 5756 5758 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		$tmp2572 ___538_v0 	%argrw{"wr"}
	sub		___538_int01 $tmp2572 $const3 	%argrw{"wrr"}
	gt		$tmp2573 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp2573 5761 5762 	%argrw{"r"}
	assign		___538_int01 $const2 	%argrw{"wr"}
	assign		___538_int01 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:940
#         SETUP_CELL_DOMAIN(2, int02);
	aref		$tmp2574 ___601_np.input $const4 	%line{940} %argrw{"wrr"}
	add		___538_v0 $tmp2574 $const61 	%argrw{"wrr"}
	lt		$tmp2575 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp2575 5771 5775 	%argrw{"r"}
	lt		$tmp2576 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp2576 5769 5771 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		$tmp2577 ___538_v0 	%argrw{"wr"}
	sub		___538_int02 $tmp2577 $const3 	%argrw{"wrr"}
	gt		$tmp2578 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp2578 5774 5775 	%argrw{"r"}
	assign		___538_int02 $const2 	%argrw{"wr"}
	assign		___538_int02 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:941
#         SETUP_CELL_DOMAIN(3, int03);
	aref		$tmp2579 ___601_np.input $const5 	%line{941} %argrw{"wrr"}
	add		___538_v0 $tmp2579 $const61 	%argrw{"wrr"}
	lt		$tmp2580 ___538_v0 $const44 	%argrw{"wrr"}
	if		$tmp2580 5784 5788 	%argrw{"r"}
	lt		$tmp2581 ___538_v0 $const62 	%argrw{"wrr"}
	if		$tmp2581 5782 5784 	%argrw{"r"}
	assign		___538_int03 $const2 	%argrw{"wr"}
	assign		$tmp2582 ___538_v0 	%argrw{"wr"}
	sub		___538_int03 $tmp2582 $const3 	%argrw{"wrr"}
	gt		$tmp2583 ___538_v0 $const63 	%argrw{"wrr"}
	if		$tmp2583 5787 5788 	%argrw{"r"}
	assign		___538_int03 $const2 	%argrw{"wr"}
	assign		___538_int03 ___538_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:942
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3, int03 += 15)
	for		$tmp2585 5790 5792 5815 5821 	%line{942} %argrw{"r"}
	assign		___538_i ___601_np.range 	%argrw{"wr"}
	gt		$tmp2584 ___538_i $const2 	%argrw{"wrr"}
	neq		$tmp2585 $tmp2584 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:944
#             iz = CELLPERMUTE(int02 + CELLPERMUTE(int03));
	shl		$tmp2586 $const3 $const64 	%line{944} %argrw{"wrr"}
	sub		$tmp2587 $tmp2586 $const3 	%argrw{"wrr"}
	bitand		$tmp2588 ___538_int03 $tmp2587 	%argrw{"wrr"}
	aref		$tmp2589 ___538_rxcellpermute $tmp2588 	%argrw{"wrr"}
	add		$tmp2590 ___538_int02 $tmp2589 	%argrw{"wrr"}
	shl		$tmp2591 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp2592 $tmp2591 $const3 	%argrw{"wrr"}
	bitand		$tmp2593 $tmp2590 $tmp2592 	%argrw{"wrr"}
	aref		___538_iz ___538_rxcellpermute $tmp2593 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:945
#             iy = CELLPERMUTE(int01 + iz);
	add		$tmp2594 ___538_int01 ___538_iz 	%line{945} %argrw{"wrr"}
	shl		$tmp2595 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp2596 $tmp2595 $const3 	%argrw{"wrr"}
	bitand		$tmp2597 $tmp2594 $tmp2596 	%argrw{"wrr"}
	aref		___538_iy ___538_rxcellpermute $tmp2597 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:946
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(int00 + iy)];
	add		$tmp2598 ___538_int00 ___538_iy 	%line{946} %argrw{"wrr"}
	shl		$tmp2599 $const3 $const64 	%argrw{"wrr"}
	sub		$tmp2600 $tmp2599 $const3 	%argrw{"wrr"}
	bitand		$tmp2601 $tmp2598 $tmp2600 	%argrw{"wrr"}
	aref		$tmp2602 ___538_rxcellpermute $tmp2601 	%argrw{"wrr"}
	aref		$tmp2603 ___538_rxcellrandtable $tmp2602 	%argrw{"wrr"}
	assign		$tmp2604 ___538_k 	%argrw{"wr"}
	add		___538_k ___538_k $const3 	%argrw{"wrr"}
	compassign	___601_np.result $tmp2604 $tmp2603 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:942
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3, int03 += 15)
	assign		$tmp2605 ___538_i 	%line{942} %argrw{"wr"}
	sub		___538_i ___538_i $const3 	%argrw{"wrr"}
	add		___538_int00 ___538_int00 $const37 	%argrw{"wrr"}
	add		___538_int01 ___538_int01 $const37 	%argrw{"wrr"}
	add		___538_int02 ___538_int02 $const5 	%argrw{"wrr"}
	add		___538_int03 ___538_int03 $const65 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:956
#     return point(np.result[0], np.result[1], np.result[2]);
	compref		$tmp2606 ___601_np.result $const2 	%line{956} %argrw{"wrr"}
	compref		$tmp2607 ___601_np.result $const3 	%argrw{"wrr"}
	compref		$tmp2608 ___601_np.result $const4 	%argrw{"wrr"}
	point		___826_r $tmp2606 $tmp2607 $tmp2608 	%argrw{"wrrr"}
# PxrMultiTexture.osl:922
#                 point r = matchCppPattern ? rxcellnoise(ps) : noise("cell", ps);
	noise		___826_r $const66 ___826_ps 	%filename{"PxrMultiTexture.osl"} %line{922} %argrw{"wrr"}
# PxrMultiTexture.osl:924
#                 randomizeHLSG(hueMode, saturationMode, luminanceMode, gammaMode,
	functioncall	$const99 5871 	%line{924} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:130
#     float g = (rnd[0] + rnd[1] + rnd[2]) * 0.333333;
	compref		$tmp2609 ___826_r $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h"} %line{130} %argrw{"wrr"}
	compref		$tmp2610 ___826_r $const3 	%argrw{"wrr"}
	add		$tmp2611 $tmp2609 $tmp2610 	%argrw{"wrr"}
	compref		$tmp2612 ___826_r $const4 	%argrw{"wrr"}
	add		$tmp2613 $tmp2611 $tmp2612 	%argrw{"wrr"}
	mul		___767_g $tmp2613 $const100 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:131
#     hue *= (hueMode == k_rnd_centered) ? rnd[0] - 0.5 :
	eq		$tmp2615 hueMode $const2 	%line{131} %argrw{"wrr"}
	if		$tmp2615 5837 5842 	%argrw{"r"}
	compref		$tmp2616 ___826_r $const2 	%argrw{"wrr"}
	sub		$tmp2614 $tmp2616 $const78 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:132
#            (hueMode == k_rnd_additive) ? rnd[0] : -rnd[0];
	eq		$tmp2617 hueMode $const3 	%line{132} %argrw{"wrr"}
	if		$tmp2617 5840 5842 	%argrw{"r"}
	compref		$tmp2614 ___826_r $const2 	%argrw{"wrr"}
	compref		$tmp2618 ___826_r $const2 	%argrw{"wrr"}
	neg		$tmp2614 $tmp2618 	%argrw{"wr"}
	mul		rHue rHue $tmp2614 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:133
#     sat *= (satMode == k_rnd_centered) ? rnd[1] - 0.5 :
	eq		$tmp2620 saturationMode $const2 	%line{133} %argrw{"wrr"}
	if		$tmp2620 5847 5852 	%argrw{"r"}
	compref		$tmp2621 ___826_r $const3 	%argrw{"wrr"}
	sub		$tmp2619 $tmp2621 $const78 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:134
#            (satMode == k_rnd_additive) ? rnd[1] : -rnd[1];
	eq		$tmp2622 saturationMode $const3 	%line{134} %argrw{"wrr"}
	if		$tmp2622 5850 5852 	%argrw{"r"}
	compref		$tmp2619 ___826_r $const3 	%argrw{"wrr"}
	compref		$tmp2623 ___826_r $const3 	%argrw{"wrr"}
	neg		$tmp2619 $tmp2623 	%argrw{"wr"}
	mul		rSat rSat $tmp2619 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:135
#     lum *= (lumMode == k_rnd_centered) ? rnd[2] - 0.5 :
	eq		$tmp2625 luminanceMode $const2 	%line{135} %argrw{"wrr"}
	if		$tmp2625 5857 5862 	%argrw{"r"}
	compref		$tmp2626 ___826_r $const4 	%argrw{"wrr"}
	sub		$tmp2624 $tmp2626 $const78 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:136
#            (lumMode == k_rnd_additive) ? rnd[2] : -rnd[2];
	eq		$tmp2627 luminanceMode $const3 	%line{136} %argrw{"wrr"}
	if		$tmp2627 5860 5862 	%argrw{"r"}
	compref		$tmp2624 ___826_r $const4 	%argrw{"wrr"}
	compref		$tmp2628 ___826_r $const4 	%argrw{"wrr"}
	neg		$tmp2624 $tmp2628 	%argrw{"wr"}
	mul		rLum rLum $tmp2624 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:137
#     gam *= (gamMode == k_rnd_centered) ? g - 0.5 :
	eq		$tmp2630 gammaMode $const2 	%line{137} %argrw{"wrr"}
	if		$tmp2630 5866 5870 	%argrw{"r"}
	sub		$tmp2629 ___767_g $const78 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:138
#            (gamMode == k_rnd_additive) ? g : -g;
	eq		$tmp2631 gammaMode $const3 	%line{138} %argrw{"wrr"}
	if		$tmp2631 5869 5870 	%argrw{"r"}
	assign		$tmp2629 ___767_g 	%argrw{"wr"}
	neg		$tmp2629 ___767_g 	%argrw{"wr"}
	mul		rGam rGam $tmp2629 	%argrw{"wrr"}
# PxrMultiTexture.osl:926
#                 colors[g] = varyColor(colors[g], rHue, rSat, rLum, rGam);
	aref		$tmp2633 colors ___773_g 	%filename{"PxrMultiTexture.osl"} %line{926} %argrw{"wrr"}
	functioncall	$const101 5909 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:144
#     color out = in;
	assign		___768_out $tmp2633 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h"} %line{144} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:145
#     if (hue || sat || lum)
	neq		$tmp2634 rHue $const44 	%line{145} %argrw{"wrr"}
	if		$tmp2634 5876 5878 	%argrw{"r"}
	neq		$tmp2635 rSat $const44 	%argrw{"wrr"}
	assign		$tmp2634 $tmp2635 	%argrw{"wr"}
	neq		$tmp2636 $tmp2634 $const2 	%argrw{"wrr"}
	if		$tmp2636 5880 5882 	%argrw{"r"}
	neq		$tmp2637 rLum $const44 	%argrw{"wrr"}
	assign		$tmp2636 $tmp2637 	%argrw{"wr"}
	if		$tmp2636 5902 5902 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:147
#         color hsl = transformc("rgb", "hsl", out);
	transformc	___769_hsl $const102 $const103 ___768_out 	%line{147} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:148
#         hsl[0] = fmod(hsl[0] + hue, 1.0);
	compref		$tmp2639 ___769_hsl $const2 	%line{148} %argrw{"wrr"}
	add		$tmp2640 $tmp2639 rHue 	%argrw{"wrr"}
	fmod		$tmp2638 $tmp2640 $const9 	%argrw{"wrr"}
	compassign	___769_hsl $const2 $tmp2638 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:149
#         hsl[1] = clamp(hsl[1] + sat, 0.0, 1.0);
	compref		$tmp2642 ___769_hsl $const3 	%line{149} %argrw{"wrr"}
	add		$tmp2643 $tmp2642 rSat 	%argrw{"wrr"}
	functioncall	$const104 5893 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp2644 $tmp2643 $const9 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		$tmp2641 $tmp2644 $const44 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:149
#         hsl[1] = clamp(hsl[1] + sat, 0.0, 1.0);
	compassign	___769_hsl $const3 $tmp2641 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h"} %line{149} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:150
#         hsl[2] = clamp(hsl[2] + lum, 0.0, 1.0);
	compref		$tmp2646 ___769_hsl $const4 	%line{150} %argrw{"wrr"}
	add		$tmp2647 $tmp2646 rLum 	%argrw{"wrr"}
	functioncall	$const104 5899 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp2648 $tmp2647 $const9 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		$tmp2645 $tmp2648 $const44 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:150
#         hsl[2] = clamp(hsl[2] + lum, 0.0, 1.0);
	compassign	___769_hsl $const4 $tmp2645 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h"} %line{150} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:151
#         out = max(color(0), transformc("hsl", "rgb", hsl));
	transformc	$tmp2650 $const103 $const102 ___769_hsl 	%line{151} %argrw{"wrrr"}
	max		___768_out $const40 $tmp2650 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:153
#     if (gam)
	neq		$tmp2651 rGam $const44 	%line{153} %argrw{"wrr"}
	if		$tmp2651 5908 5908 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:155
#         out = pow(out, 1.0 / max(1.0e-4, 1.0 + gam));
	add		$tmp2653 $const9 rGam 	%line{155} %argrw{"wrr"}
	max		$tmp2652 $const61 $tmp2653 	%argrw{"wrr"}
	div		$tmp2654 $const9 $tmp2652 	%argrw{"wrr"}
	pow		___768_out ___768_out $tmp2654 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:157
#     return out;
	assign		$tmp2632 ___768_out 	%line{157} %argrw{"wr"}
# PxrMultiTexture.osl:926
#                 colors[g] = varyColor(colors[g], rHue, rSat, rLum, rGam);
	aassign		colors ___773_g $tmp2632 	%filename{"PxrMultiTexture.osl"} %line{926} %argrw{"wrr"}
# PxrMultiTexture.osl:931
#             colors[g] = 0;
	assign		$tmp2655 $const2 	%line{931} %argrw{"wr"}
	aassign		colors ___773_g $tmp2655 	%argrw{"wrr"}
# PxrMultiTexture.osl:932
#             alphas[g] = 0;
	aassign		alphas ___773_g $const2 	%line{932} %argrw{"wrr"}
# PxrMultiTexture.osl:933
#             grads[g] = 0;
	assign		$tmp2656 $const2 	%line{933} %argrw{"wr"}
	aassign		grads ___773_g $tmp2656 	%argrw{"wrr"}
# PxrMultiTexture.osl:630
#     for (int g = 0; g < NUM_STGRPS; g++)
	assign		$tmp2657 ___773_g 	%line{630} %argrw{"wr"}
	add		___773_g ___773_g $const3 	%argrw{"wrr"}
# PxrMultiTexture.osl:938
#     resultRGB = 0.0;
	assign		resultRGB $const44 	%line{938} %argrw{"wr"}
# PxrMultiTexture.osl:940
#     if (blendingContrast > 0)
	gt		$tmp2658 blendingContrast $const2 	%line{940} %argrw{"wrr"}
	if		$tmp2658 5968 5994 	%argrw{"r"}
# PxrMultiTexture.osl:943
#         HexTileColor hcol = HEXTILECOLOR_ZERO;
	assign		___828_hcol.value $const40 	%line{943} %argrw{"wr"}
	assign		___828_hcol.norm $const44 	%argrw{"wr"}
	assign		___828_hcol.powerGtoT $const40 	%argrw{"wr"}
# PxrMultiTexture.osl:944
#         for (int g = 0; g < NUM_STGRPS; g++)
	for		$tmp2660 5925 5927 5956 5958 	%line{944} %argrw{"r"}
	assign		___829_g $const2 	%argrw{"wr"}
	lt		$tmp2659 ___829_g $const34 	%argrw{"wrr"}
	neq		$tmp2660 $tmp2659 $const2 	%argrw{"wrr"}
# PxrMultiTexture.osl:946
#             if (enable[g])
	aref		$tmp2661 enable ___829_g 	%line{946} %argrw{"wrr"}
	if		$tmp2661 5956 5956 	%argrw{"r"}
# PxrMultiTexture.osl:948
#                 resultRGB += idf[g][2] * sta[g][2] * colors[g];
	aref		$tmp2663 idf ___829_g 	%line{948} %argrw{"wrr"}
	compref		$tmp2662 $tmp2663 $const4 	%argrw{"wrr"}
	aref		$tmp2665 sta ___829_g 	%argrw{"wrr"}
	compref		$tmp2664 $tmp2665 $const4 	%argrw{"wrr"}
	mul		$tmp2666 $tmp2662 $tmp2664 	%argrw{"wrr"}
	aref		$tmp2667 colors ___829_g 	%argrw{"wrr"}
	mul		$tmp2668 $tmp2666 $tmp2667 	%argrw{"wrr"}
	add		resultRGB resultRGB $tmp2668 	%argrw{"wrr"}
# PxrMultiTexture.osl:949
#                 hexTileAccumulate(colors[g], idf[g][2] * sta[g][2],
	aref		$tmp2669 colors ___829_g 	%line{949} %argrw{"wrr"}
	aref		$tmp2671 idf ___829_g 	%argrw{"wrr"}
	compref		$tmp2670 $tmp2671 $const4 	%argrw{"wrr"}
	aref		$tmp2673 sta ___829_g 	%argrw{"wrr"}
	compref		$tmp2672 $tmp2673 $const4 	%argrw{"wrr"}
	mul		$tmp2674 $tmp2670 $tmp2672 	%argrw{"wrr"}
# PxrMultiTexture.osl:950
#                                     hexTex[g], hcol);
	aref		$tmp2675.powerTtoG hexTex.powerTtoG ___829_g 	%line{950} %argrw{"wrr"}
	aref		$tmp2675.powerGtoT hexTex.powerGtoT ___829_g 	%argrw{"wrr"}
# PxrMultiTexture.osl:949
#                 hexTileAccumulate(colors[g], idf[g][2] * sta[g][2],
	functioncall	$const96 5956 	%line{949} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:274
#     result.value += pow(tex, htx.powerTtoG) * weight;
	pow		$tmp2676 $tmp2669 $tmp2675.powerTtoG 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{274} %argrw{"wrr"}
	mul		$tmp2677 $tmp2676 $tmp2674 	%argrw{"wrr"}
	add		___828_hcol.value ___828_hcol.value $tmp2677 	%argrw{"wrr"}
	assign		___828_hcol.value ___828_hcol.value 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:275
#     result.norm += weight * weight;
	mul		$tmp2678 $tmp2674 $tmp2674 	%line{275} %argrw{"wrr"}
	add		___828_hcol.norm ___828_hcol.norm $tmp2678 	%argrw{"wrr"}
	assign		___828_hcol.norm ___828_hcol.norm 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:276
#     result.powerGtoT += htx.powerGtoT * weight;
	mul		$tmp2679 $tmp2675.powerGtoT $tmp2674 	%line{276} %argrw{"wrr"}
	add		___828_hcol.powerGtoT ___828_hcol.powerGtoT $tmp2679 	%argrw{"wrr"}
	assign		___828_hcol.powerGtoT ___828_hcol.powerGtoT 	%argrw{"wr"}
# PxrMultiTexture.osl:944
#         for (int g = 0; g < NUM_STGRPS; g++)
	assign		$tmp2680 ___829_g 	%filename{"PxrMultiTexture.osl"} %line{944} %argrw{"wr"}
	add		___829_g ___829_g $const3 	%argrw{"wrr"}
# PxrMultiTexture.osl:953
#         color corrected  = hexTileFinalColor(hcol);
	functioncall	$const97 5967 	%line{953} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:284
#     float norm = 1.0 / sqrt(in.norm);
	sqrt		$tmp2681 ___828_hcol.norm 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{284} %argrw{"wr"}
	div		___713_norm $const9 $tmp2681 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:285
#     color result = norm * (in.value - HEXT_GCENTER) + HEXT_GCENTER;
	sub		$tmp2683 ___828_hcol.value $const81 	%line{285} %argrw{"wrr"}
	mul		$tmp2684 ___713_norm $tmp2683 	%argrw{"wrr"}
	add		___713_result $tmp2684 $const81 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:287
#     result = max(result, color(0.0));
	max		___713_result ___713_result $const40 	%line{287} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:290
#     result = pow(result, in.powerGtoT);
	pow		___713_result ___713_result ___828_hcol.powerGtoT 	%line{290} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:291
#     return result;
	assign		___828_corrected ___713_result 	%line{291} %argrw{"wr"}
# PxrMultiTexture.osl:955
#         resultRGB = mix(resultRGB, corrected, blendingContrast);
	mix		resultRGB resultRGB ___828_corrected blendingContrast 	%filename{"PxrMultiTexture.osl"} %line{955} %argrw{"wrrr"}
# PxrMultiTexture.osl:960
#         for (int g = 0; g < NUM_STGRPS; g++)
	for		$tmp2688 5970 5972 5992 5994 	%line{960} %argrw{"r"}
	assign		___833_g $const2 	%argrw{"wr"}
	lt		$tmp2687 ___833_g $const34 	%argrw{"wrr"}
	neq		$tmp2688 $tmp2687 $const2 	%argrw{"wrr"}
# PxrMultiTexture.osl:962
#             if (enable[g])
	aref		$tmp2689 enable ___833_g 	%line{962} %argrw{"wrr"}
	if		$tmp2689 5992 5992 	%argrw{"r"}
# PxrMultiTexture.osl:964
#                 resultRGB += idf[g][2] * sta[g][2] * colors[g];
	aref		$tmp2691 idf ___833_g 	%line{964} %argrw{"wrr"}
	compref		$tmp2690 $tmp2691 $const4 	%argrw{"wrr"}
	aref		$tmp2693 sta ___833_g 	%argrw{"wrr"}
	compref		$tmp2692 $tmp2693 $const4 	%argrw{"wrr"}
	mul		$tmp2694 $tmp2690 $tmp2692 	%argrw{"wrr"}
	aref		$tmp2695 colors ___833_g 	%argrw{"wrr"}
	mul		$tmp2696 $tmp2694 $tmp2695 	%argrw{"wrr"}
	add		resultRGB resultRGB $tmp2696 	%argrw{"wrr"}
# PxrMultiTexture.osl:965
#                 if (isconnected(resultNG))
	isconnected	$tmp2697 resultNG 	%line{965} %argrw{"wr"}
	if		$tmp2697 5992 5992 	%argrw{"r"}
# PxrMultiTexture.osl:966
#                     resultNG += idf[g][2] * sta[g][2] * grads[g];
	aref		$tmp2699 idf ___833_g 	%line{966} %argrw{"wrr"}
	compref		$tmp2698 $tmp2699 $const4 	%argrw{"wrr"}
	aref		$tmp2701 sta ___833_g 	%argrw{"wrr"}
	compref		$tmp2700 $tmp2701 $const4 	%argrw{"wrr"}
	mul		$tmp2702 $tmp2698 $tmp2700 	%argrw{"wrr"}
	aref		$tmp2703 grads ___833_g 	%argrw{"wrr"}
	mul		$tmp2704 $tmp2702 $tmp2703 	%argrw{"wrr"}
	add		resultNG resultNG $tmp2704 	%argrw{"wrr"}
# PxrMultiTexture.osl:960
#         for (int g = 0; g < NUM_STGRPS; g++)
	assign		$tmp2705 ___833_g 	%line{960} %argrw{"wr"}
	add		___833_g ___833_g $const3 	%argrw{"wrr"}
# PxrMultiTexture.osl:971
#     if (needAlpha)
	if		needAlpha 6012 6012 	%line{971} %argrw{"r"}
# PxrMultiTexture.osl:973
#         resultA = 0.0;
	assign		resultA $const44 	%line{973} %argrw{"wr"}
# PxrMultiTexture.osl:974
#         for (int g=0; g<numRequested; g++)
	for		$tmp2707 5998 6000 6007 6009 	%line{974} %argrw{"r"}
	assign		___837_g $const2 	%argrw{"wr"}
	lt		$tmp2706 ___837_g numRequested 	%argrw{"wrr"}
	neq		$tmp2707 $tmp2706 $const2 	%argrw{"wrr"}
# PxrMultiTexture.osl:976
#             if (enable[g])
	aref		$tmp2708 enable ___837_g 	%line{976} %argrw{"wrr"}
	if		$tmp2708 6007 6007 	%argrw{"r"}
# PxrMultiTexture.osl:977
#                 resultA += sta[g][2] * alphas[g];
	aref		$tmp2710 sta ___837_g 	%line{977} %argrw{"wrr"}
	compref		$tmp2709 $tmp2710 $const4 	%argrw{"wrr"}
	aref		$tmp2711 alphas ___837_g 	%argrw{"wrr"}
	mul		$tmp2712 $tmp2709 $tmp2711 	%argrw{"wrr"}
	add		resultA resultA $tmp2712 	%argrw{"wrr"}
# PxrMultiTexture.osl:974
#         for (int g=0; g<numRequested; g++)
	assign		$tmp2713 ___837_g 	%line{974} %argrw{"wr"}
	add		___837_g ___837_g $const3 	%argrw{"wrr"}
# PxrMultiTexture.osl:979
#         resultA = clamp( resultA, 0.0, 1.0);
	functioncall	$const104 6012 	%line{979} %argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp2714 resultA $const9 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		resultA $tmp2714 $const44 	%argrw{"wrr"}
# PxrMultiTexture.osl:983
#     if (showGrid)
	if		showGrid 6070 6070 	%filename{"PxrMultiTexture.osl"} %line{983} %argrw{"r"}
# PxrMultiTexture.osl:985
#         float mask = 0;
	assign		___839_mask $const2 	%line{985} %argrw{"wr"}
# PxrMultiTexture.osl:986
#         for (int i=0; i<NUM_STGRPS; i++)
	for		$tmp2716 6016 6018 6067 6069 	%line{986} %argrw{"r"}
	assign		___840_i $const2 	%argrw{"wr"}
	lt		$tmp2715 ___840_i $const34 	%argrw{"wrr"}
	neq		$tmp2716 $tmp2715 $const2 	%argrw{"wrr"}
# PxrMultiTexture.osl:988
#             if (doHexTile)
	if		doHexTile 6049 6067 	%line{988} %argrw{"r"}
# PxrMultiTexture.osl:990
#                 if (validHexTileData(hexData[i]))
	aref		$tmp2718.s hexData.s ___840_i 	%line{990} %argrw{"wrr"}
	aref		$tmp2718.t hexData.t ___840_i 	%argrw{"wrr"}
	aref		$tmp2718.w hexData.w ___840_i 	%argrw{"wrr"}
	aref		$tmp2718.r hexData.r ___840_i 	%argrw{"wrr"}
	functioncall	$const41 6029 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:78
#     return hxt.w == INVALID_HEXTILE_WEIGHT ? 0 : 1;
	eq		$tmp2720 $tmp2718.w $const7 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{78} %argrw{"wrr"}
	if		$tmp2720 6027 6028 	%argrw{"r"}
	assign		$tmp2717 $const2 	%argrw{"wr"}
	assign		$tmp2717 $const3 	%argrw{"wr"}
	return
# PxrMultiTexture.osl:990
#                 if (validHexTileData(hexData[i]))
	if		$tmp2717 6049 6049 	%filename{"PxrMultiTexture.osl"} %line{990} %argrw{"r"}
# PxrMultiTexture.osl:991
#                     mask = max(mask, hexTileGrid(hexData[i]) * sta[i][2]);
	aref		$tmp2722.s hexData.s ___840_i 	%line{991} %argrw{"wrr"}
	aref		$tmp2722.t hexData.t ___840_i 	%argrw{"wrr"}
	aref		$tmp2722.w hexData.w ___840_i 	%argrw{"wrr"}
	aref		$tmp2722.r hexData.r ___840_i 	%argrw{"wrr"}
	functioncall	$const105 6045 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:239
#     float minw = min(hexData.w[0], min(hexData.w[1], hexData.w[2]));
	compref		$tmp2723 $tmp2722.w $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{239} %argrw{"wrr"}
	compref		$tmp2725 $tmp2722.w $const3 	%argrw{"wrr"}
	compref		$tmp2726 $tmp2722.w $const4 	%argrw{"wrr"}
	min		$tmp2724 $tmp2725 $tmp2726 	%argrw{"wrr"}
	min		___710_minw $tmp2723 $tmp2724 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:240
#     float grid = step(1.0 - filterwidth(minw), 1.0 - minw);
	filterwidth	$tmp2727 ___710_minw 	%line{240} %argrw{"wr"} %argderivs{1}
	sub		$tmp2728 $const9 $tmp2727 	%argrw{"wrr"}
	sub		$tmp2729 $const9 ___710_minw 	%argrw{"wrr"}
	step		___710_grid $tmp2728 $tmp2729 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:242
#     return grid;
	assign		$tmp2721 ___710_grid 	%line{242} %argrw{"wr"}
# PxrMultiTexture.osl:991
#                     mask = max(mask, hexTileGrid(hexData[i]) * sta[i][2]);
	aref		$tmp2731 sta ___840_i 	%filename{"PxrMultiTexture.osl"} %line{991} %argrw{"wrr"}
	compref		$tmp2730 $tmp2731 $const4 	%argrw{"wrr"}
	mul		$tmp2732 $tmp2721 $tmp2730 	%argrw{"wrr"}
	max		___839_mask ___839_mask $tmp2732 	%argrw{"wrr"}
# PxrMultiTexture.osl:995
#                 for (int j=0; j<2; j++)
	for		$tmp2734 6051 6053 6065 6067 	%line{995} %argrw{"r"}
	assign		___844_j $const2 	%argrw{"wr"}
	lt		$tmp2733 ___844_j $const4 	%argrw{"wrr"}
	neq		$tmp2734 $tmp2733 $const2 	%argrw{"wrr"}
# PxrMultiTexture.osl:997
#                     float f = fmod(100000.0 + sta[i][j], 1.0);
	aref		$tmp2736 sta ___840_i 	%line{997} %argrw{"wrr"}
	compref		$tmp2735 $tmp2736 ___844_j 	%argrw{"wrr"}
	add		$tmp2737 $const106 $tmp2735 	%argrw{"wrr"}
	fmod		___845_f $tmp2737 $const9 	%argrw{"wrr"}
# PxrMultiTexture.osl:998
#                     float fw = 2.0 * filterwidth(f);
	filterwidth	$tmp2738 ___845_f 	%line{998} %argrw{"wr"} %argderivs{1}
	mul		___845_fw $const68 $tmp2738 	%argrw{"wrr"}
# PxrMultiTexture.osl:999
#                     mask = max(mask, step(1.0 - fw, f) * sta[i][2]);
	sub		$tmp2740 $const9 ___845_fw 	%line{999} %argrw{"wrr"}
	step		$tmp2739 $tmp2740 ___845_f 	%argrw{"wrr"}
	aref		$tmp2742 sta ___840_i 	%argrw{"wrr"}
	compref		$tmp2741 $tmp2742 $const4 	%argrw{"wrr"}
	mul		$tmp2743 $tmp2739 $tmp2741 	%argrw{"wrr"}
	max		___839_mask ___839_mask $tmp2743 	%argrw{"wrr"}
# PxrMultiTexture.osl:995
#                 for (int j=0; j<2; j++)
	assign		$tmp2744 ___844_j 	%line{995} %argrw{"wr"}
	add		___844_j ___844_j $const3 	%argrw{"wrr"}
# PxrMultiTexture.osl:986
#         for (int i=0; i<NUM_STGRPS; i++)
	assign		$tmp2745 ___840_i 	%line{986} %argrw{"wr"}
	add		___840_i ___840_i $const3 	%argrw{"wrr"}
# PxrMultiTexture.osl:1003
#         resultRGB = mix(resultRGB, gridColor, mask);
	mix		resultRGB resultRGB gridColor ___839_mask 	%line{1003} %argrw{"wrrr"}
# PxrMultiTexture.osl:1007
#     if (isconnected(resultNG) && !texturesAreNormalMaps)
	isconnected	$tmp2746 resultNG 	%line{1007} %argrw{"wr"}
	neq		$tmp2747 $tmp2746 $const2 	%argrw{"wrr"}
	if		$tmp2747 6076 6076 	%argrw{"r"}
	eq		$tmp2748 texturesAreNormalMaps $const2 	%argrw{"wrr"}
	neq		$tmp2749 $tmp2748 $const2 	%argrw{"wrr"}
	assign		$tmp2747 $tmp2749 	%argrw{"wr"}
	if		$tmp2747 6090 6090 	%argrw{"r"}
# PxrMultiTexture.osl:1010
#         normal bumpN = normalize(calculatenormal(P + N * (luminance(resultRGB) - 0.5)));
	luminance	$tmp2751 resultRGB 	%line{1010} %argrw{"wr"}
	sub		$tmp2752 $tmp2751 $const78 	%argrw{"wrr"}
	mul		$tmp2753 N $tmp2752 	%argrw{"wrr"}
	add		$tmp2754 P $tmp2753 	%argrw{"wrr"}
	calculatenormal	$tmp2750 $tmp2754 	%argrw{"wr"} %argderivs{1}
	normalize	___846_bumpN $tmp2750 	%argrw{"wr"}
# PxrMultiTexture.osl:1011
#         resultNG = surfgradFromPerturbedNormal(bumpN, N);
	functioncall	$const107 6090 	%line{1011} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:100
# 	float k = dot(Nn, bN);
	dot		___687_k N ___846_bumpN 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{100} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:101
# 	return (k * Nn - bN) / max(1.0e-8, abs(k));
	mul		$tmp2755 ___687_k N 	%line{101} %argrw{"wrr"}
	sub		$tmp2756 $tmp2755 ___846_bumpN 	%argrw{"wrr"}
	abs		$tmp2758 ___687_k 	%argrw{"wr"}
	max		$tmp2757 $const108 $tmp2758 	%argrw{"wrr"}
	div		resultNG $tmp2756 $tmp2757 	%argrw{"wrr"}
# PxrMultiTexture.osl:1015
#     resultRGB = Color_Saturate(resultRGB, saturation);
	functioncall	$const109 6095 	%filename{"PxrMultiTexture.osl"} %line{1015} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:76
#     color tmpColor = inputColor;
	assign		___734_tmpColor resultRGB 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{76} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:77
#     float intensity = luminance(tmpColor);
	luminance	___734_intensity ___734_tmpColor 	%line{77} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:78
#     return mix(color(intensity), tmpColor, sat);
	assign		$tmp2759 ___734_intensity 	%line{78} %argrw{"wr"}
	mix		resultRGB $tmp2759 ___734_tmpColor saturation 	%argrw{"wrrr"}
# PxrMultiTexture.osl:1016
#     resultRGB = resultRGB * colorScale + colorOffset;
	mul		$tmp2760 resultRGB colorScale 	%filename{"PxrMultiTexture.osl"} %line{1016} %argrw{"wrr"}
	add		resultRGB $tmp2760 colorOffset 	%argrw{"wrr"}
# PxrMultiTexture.osl:1017
#     resultA = resultA * alphaScale + alphaOffset;
	mul		$tmp2761 resultA alphaScale 	%line{1017} %argrw{"wrr"}
	add		resultA $tmp2761 alphaOffset 	%argrw{"wrr"}
# PxrMultiTexture.osl:1020
#     resultR = resultRGB[0];
	compref		resultR resultRGB $const2 	%line{1020} %argrw{"wrr"}
# PxrMultiTexture.osl:1021
#     resultG = resultRGB[1];
	compref		resultG resultRGB $const3 	%line{1021} %argrw{"wrr"}
# PxrMultiTexture.osl:1022
#     resultB = resultRGB[2];
	compref		resultB resultRGB $const4 	%line{1022} %argrw{"wrr"}
	end
