OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: -DOSX -I/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include -I/data/build/ratbuild/rmanshare/RIS/include -I/data/build/ratbuild/rmanshare/RIS/include/common -I/data/build/ratbuild/rmanshare/RIS/pattern/osl -I/data/build/ratbuild/rmanshare/RIS/include/osl -o /data/build/ratbuild/rmanshare/_built/osxMojave_x86-64_clang10_external_release/osl/PxrGamma.osl/obj/PxrGamma.oso
shader PxrGamma	%meta{int,rfm_nodeid,1053428} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/color"} %meta{string,rfh_classification,"Pattern/Color"} %meta{string,help,"Adjust the exposure of the input color by the given gamma."} 
param	color	inputRGB	0 0 0		%meta{string,widget,"color"} %meta{string,help,"Plug a color pattern here"} %meta{string,label,"Input Color"}  %read{1,30} %write{2147483647,-1}
param	float	gamma	1		%meta{string,widget,"default"} %meta{string,help,"The amount of gamma to adjust the input"} %meta{string,label,"Gamma"} %meta{float,min,0} %meta{int,slider,1} %meta{float,slidermax,4} %meta{float,slidermin,0}  %read{22,22} %write{2147483647,-1}
oparam	color	resultRGB	0 0 0		%read{33,35} %write{17,32}
oparam	float	resultR	0		%read{2147483647,-1} %write{33,33}
oparam	float	resultG	0		%read{2147483647,-1} %write{34,34}
oparam	float	resultB	0		%read{2147483647,-1} %write{35,35}
local	float	invg	%read{25,31} %write{0,23}
const	float	$const1	0		%read{0,0} %write{2147483647,-1}
const	int	$const2	0		%read{1,33} %write{2147483647,-1}
temp	float	$tmp1	%read{2,2} %write{1,1}
const	float	$const3	9.99999997e-07		%read{2,12} %write{2147483647,-1}
temp	int	$tmp2	%read{3,3} %write{2,2}
temp	int	$tmp3	%read{4,9} %write{3,8}
const	int	$const4	1		%read{5,34} %write{2147483647,-1}
temp	float	$tmp4	%read{6,6} %write{5,5}
temp	int	$tmp5	%read{7,7} %write{6,6}
temp	int	$tmp6	%read{8,8} %write{7,7}
temp	int	$tmp7	%read{10,15} %write{9,14}
const	int	$const5	2		%read{11,35} %write{2147483647,-1}
temp	float	$tmp8	%read{12,12} %write{11,11}
temp	int	$tmp9	%read{13,13} %write{12,12}
temp	int	$tmp10	%read{14,14} %write{13,13}
temp	float	$tmp11	%read{17,17} %write{16,16}
temp	float	$tmp12	%read{19,19} %write{18,18}
temp	float	$tmp13	%read{21,21} %write{20,20}
const	float	$const6	1		%read{23,23} %write{2147483647,-1}
temp	float	$tmp14	%read{23,23} %write{22,22}
const	float	$const7	0.00039999999		%read{22,22} %write{2147483647,-1}
temp	float	$tmp15	%read{26,26} %write{25,25}
temp	float	$tmp16	%read{25,25} %write{24,24}
temp	float	$tmp17	%read{29,29} %write{28,28}
temp	float	$tmp18	%read{28,28} %write{27,27}
temp	float	$tmp19	%read{32,32} %write{31,31}
temp	float	$tmp20	%read{31,31} %write{30,30}
code ___main___
# PxrGamma.osl:68
#     float invg = 0.0;
	assign		invg $const1 	%filename{"PxrGamma.osl"} %line{68} %argrw{"wr"}
# PxrGamma.osl:71
#     if (inputRGB[0] < EPSILON && inputRGB[1] < EPSILON && inputRGB[2] < EPSILON)
	compref		$tmp1 inputRGB $const2 	%line{71} %argrw{"wrr"}
	lt		$tmp2 $tmp1 $const3 	%argrw{"wrr"}
	neq		$tmp3 $tmp2 $const2 	%argrw{"wrr"}
	if		$tmp3 9 9 	%argrw{"r"}
	compref		$tmp4 inputRGB $const4 	%argrw{"wrr"}
	lt		$tmp5 $tmp4 $const3 	%argrw{"wrr"}
	neq		$tmp6 $tmp5 $const2 	%argrw{"wrr"}
	assign		$tmp3 $tmp6 	%argrw{"wr"}
	neq		$tmp7 $tmp3 $const2 	%argrw{"wrr"}
	if		$tmp7 15 15 	%argrw{"r"}
	compref		$tmp8 inputRGB $const5 	%argrw{"wrr"}
	lt		$tmp9 $tmp8 $const3 	%argrw{"wrr"}
	neq		$tmp10 $tmp9 $const2 	%argrw{"wrr"}
	assign		$tmp7 $tmp10 	%argrw{"wr"}
	if		$tmp7 22 33 	%argrw{"r"}
# PxrGamma.osl:76
#         resultRGB[0] = inputRGB[0];
	compref		$tmp11 inputRGB $const2 	%line{76} %argrw{"wrr"}
	compassign	resultRGB $const2 $tmp11 	%argrw{"wrr"}
# PxrGamma.osl:77
#         resultRGB[1] = inputRGB[1];
	compref		$tmp12 inputRGB $const4 	%line{77} %argrw{"wrr"}
	compassign	resultRGB $const4 $tmp12 	%argrw{"wrr"}
# PxrGamma.osl:78
#         resultRGB[2] = inputRGB[2];
	compref		$tmp13 inputRGB $const5 	%line{78} %argrw{"wrr"}
	compassign	resultRGB $const5 $tmp13 	%argrw{"wrr"}
# PxrGamma.osl:82
#         invg = 1.0 / max(0.0004, gamma);
	max		$tmp14 $const7 gamma 	%line{82} %argrw{"wrr"}
	div		invg $const6 $tmp14 	%argrw{"wrr"}
# PxrGamma.osl:85
#         resultRGB[0] = pow(inputRGB[0], invg);
	compref		$tmp16 inputRGB $const2 	%line{85} %argrw{"wrr"}
	pow		$tmp15 $tmp16 invg 	%argrw{"wrr"}
	compassign	resultRGB $const2 $tmp15 	%argrw{"wrr"}
# PxrGamma.osl:86
#         resultRGB[1] = pow(inputRGB[1], invg);
	compref		$tmp18 inputRGB $const4 	%line{86} %argrw{"wrr"}
	pow		$tmp17 $tmp18 invg 	%argrw{"wrr"}
	compassign	resultRGB $const4 $tmp17 	%argrw{"wrr"}
# PxrGamma.osl:87
#         resultRGB[2] = pow(inputRGB[2], invg);
	compref		$tmp20 inputRGB $const5 	%line{87} %argrw{"wrr"}
	pow		$tmp19 $tmp20 invg 	%argrw{"wrr"}
	compassign	resultRGB $const5 $tmp19 	%argrw{"wrr"}
# PxrGamma.osl:90
#     resultR = resultRGB[0];
	compref		resultR resultRGB $const2 	%line{90} %argrw{"wrr"}
# PxrGamma.osl:91
#     resultG = resultRGB[1];
	compref		resultG resultRGB $const4 	%line{91} %argrw{"wrr"}
# PxrGamma.osl:92
#     resultB = resultRGB[2];
	compref		resultB resultRGB $const5 	%line{92} %argrw{"wrr"}
	end
