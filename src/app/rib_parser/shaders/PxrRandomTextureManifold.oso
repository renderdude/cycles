OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: -DOSX -I/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include -I/data/build/ratbuild/rmanshare/RIS/include -I/data/build/ratbuild/rmanshare/RIS/include/common -I/data/build/ratbuild/rmanshare/RIS/pattern/osl -I/data/build/ratbuild/rmanshare/RIS/include/osl -o /data/build/ratbuild/rmanshare/_built/osxMojave_x86-64_clang10_external_release/osl/PxrRandomTextureManifold.osl/obj/PxrRandomTextureManifold.oso
shader PxrRandomTextureManifold	%meta{int,rfm_nodeid,1053278} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/manifold"} %meta{string,rfh_classification,"Pattern/Manifold"} %meta{string,help,"Used with PxrMultiTexture, allows to randomly pick a texture per object.<br>PxrRandomTextureManifold supports stochastic tiling for non-repeating tiling."} 
param	int	numTextures	1		%meta{string,widget,"default"} %meta{string,help,"The number of texture you want to use. You should have at least one<br>texture and PxrMultiTexture supports up to 10 textures.<br><br>numTextures (int)"} %meta{int,connectable,0} %meta{string,label,"Number of Textures"} %meta{int,max,10} %meta{int,min,1}  %read{61,139} %write{2147483647,-1}
param	int	textureOrder	1		%meta{string,widget,"mapper"} %meta{string,help,"The number of textures you want to use.<br><br>textureOrder (int)"} %meta{string,options,"Ordered:0|Random:1"} %meta{int,connectable,0} %meta{string,label,"Texture Order"}  %read{62,62} %write{2147483647,-1}
param	int	tilingMode	0		%meta{string,page,"Tiling"} %meta{int,page_open,1} %meta{string,label,"Tiling Mode"} %meta{string,widget,"mapper"} %meta{string,options,"Regular:0|Hexagonal:1"} %meta{int,connectable,0}  %read{500,776} %write{2147483647,-1}
param	float	frequency	1		%meta{string,page,"Tiling"} %meta{int,page_open,1} %meta{string,help,"frequency (float)"} %meta{int,connectable,0} %meta{string,label,"Frequency"} %meta{float,min,0.00100000005} %meta{int,slider,1} %meta{float,slidermax,10} %meta{float,slidermin,0.00100000005}  %read{498,498} %write{2147483647,-1} %derivs
param	float	textureFrequency	1		%meta{string,page,"Tiling"} %meta{string,help,"Secondary scale of texture in the cell."} %meta{string,label,"Texture Frequency"} %meta{float,min,0.100000001} %meta{float,slidermax,1} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisPath,"../tilingMode"} %meta{string,conditionalVisValue,"1"}  %read{543,717} %write{2147483647,-1}
param	float	blendWidth	1		%meta{string,page,"Tiling"} %meta{string,label,"Blend Width"} %meta{string,help,"Exponentiated blending as described by Burley.<br>The exponent varies from 8 (blendWidth = 0.0) to 1 (blendWidth = 1.0)."} %meta{float,min,0} %meta{float,max,1}  %read{733,735} %write{2147483647,-1}
param	float	translateJitter	1		%meta{string,page,"Tiling"} %meta{string,label,"Translate Jitter"} %meta{int,page_open,1} %meta{string,help,"Amount of random offset."} %meta{float,min,0} %meta{float,slidermax,1} %meta{int,connectable,0} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisPath,"../tilingMode"} %meta{string,conditionalVisValue,"1"}  %read{727,729} %write{2147483647,-1}
param	float	rotateJitter	1		%meta{string,page,"Tiling"} %meta{string,label,"Rotate Jitter"} %meta{string,help,"Amount of random rotation."} %meta{float,min,0} %meta{float,slidermax,1} %meta{int,connectable,0} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisPath,"../tilingMode"} %meta{string,conditionalVisValue,"1"}  %read{550,619} %write{2147483647,-1}
param	float	scaleJitter	0.100000001		%meta{string,page,"Tiling"} %meta{string,label,"Scale Jitter"} %meta{string,help,"Amount of random scale."} %meta{float,min,0} %meta{float,slidermax,1} %meta{int,connectable,0} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisPath,"../tilingMode"} %meta{string,conditionalVisValue,"1"}  %read{546,711} %write{2147483647,-1}
param	int	randomSource	0		%meta{string,widget,"mapper"} %meta{string,page,"Randomize"} %meta{int,page_open,1} %meta{string,help,"randomSource (int)"} %meta{string,options,"Object Id:0|Object Name:1|textureID PrimVar:2"} %meta{int,connectable,0} %meta{string,label,"Random Source"}  %read{67,769} %write{2147483647,-1}
param	float	randomExtraSeed	0		%meta{string,widget,"default"} %meta{string,page,"Randomize"} %meta{string,help,"randomExtraSeed (float)"} %meta{int,connectable,0} %meta{string,label,"Extra Seed"}  %read{64,130} %write{2147483647,-1} %derivs
param	int	randomOrientation	0		%meta{string,widget,"checkBox"} %meta{string,page,"Randomize"} %meta{string,help,"randomOrientation (int)"} %meta{int,connectable,0} %meta{string,label,"Random Orientation"}  %read{455,455} %write{2147483647,-1}
param	int	randomFlipS	0		%meta{string,widget,"checkBox"} %meta{string,page,"Randomize"} %meta{string,help,"randomFlipS (int)"} %meta{int,connectable,0} %meta{string,label,"Random S Flip"}  %read{468,468} %write{2147483647,-1}
param	int	randomFlipT	0		%meta{string,widget,"checkBox"} %meta{string,page,"Randomize"} %meta{string,help,"randomFlipT (int)"} %meta{int,connectable,0} %meta{string,label,"Random T Flip"}  %read{478,478} %write{2147483647,-1}
param	int	randomOffsetS	0		%meta{string,widget,"checkBox"} %meta{string,page,"Randomize"} %meta{string,help,"randomOffsetS (int)"} %meta{int,connectable,0} %meta{string,label,"Random S Offset"}  %read{488,488} %write{2147483647,-1}
param	int	randomOffsetT	0		%meta{string,widget,"checkBox"} %meta{string,page,"Randomize"} %meta{string,help,"randomOffsetT (int)"} %meta{int,connectable,0} %meta{string,label,"Random T Offset"}  %read{493,493} %write{2147483647,-1}
param	float	angle	0		%meta{string,page,"Manifold 2D"} %meta{int,page_open,1} %meta{string,help,"Rotation angle around origin<br><br>angle (float)"} %meta{string,label,"Angle"} %meta{float,max,180} %meta{float,min,-180}  %read{151,157} %write{2147483647,-1} %derivs
param	float	globalScale	1		%meta{string,widget,"default"} %meta{string,page,"Manifold 2D"} %meta{string,help,"Scale while preserving the aspect ratio defined by<br>scaleS and scaleT<br><br>globalScale (float)"} %meta{string,label,"Global Scale"} %meta{int,slider,1} %meta{float,slidermax,10} %meta{float,slidermin,-10}  %read{174,186} %write{2147483647,-1} %derivs
param	float	scaleS	1		%meta{string,widget,"default"} %meta{string,page,"Manifold 2D"} %meta{string,help,"Frequency of feature in S<br><br>scaleS (float)"} %meta{string,label,"Scale S"} %meta{int,slider,1} %meta{float,slidermax,10} %meta{float,slidermin,-10}  %read{174,184} %write{2147483647,-1} %derivs
param	float	scaleT	1		%meta{string,widget,"default"} %meta{string,page,"Manifold 2D"} %meta{string,help,"Frequency of feature in T<br><br>scaleT (float)"} %meta{string,label,"Scale T"} %meta{int,slider,1} %meta{float,slidermax,10} %meta{float,slidermin,-10}  %read{179,186} %write{2147483647,-1} %derivs
param	float	offsetS	0		%meta{string,widget,"default"} %meta{string,page,"Manifold 2D"} %meta{string,help,"Offset from origin in S<br><br>offsetS (float)"} %meta{string,label,"Offset S"} %meta{int,slider,1} %meta{float,slidermax,10} %meta{float,slidermin,-10}  %read{177,177} %write{2147483647,-1} %derivs
param	float	offsetT	0		%meta{string,widget,"default"} %meta{string,page,"Manifold 2D"} %meta{string,help,"Offset from origin in T<br><br>offsetT (float)"} %meta{string,label,"Offset T"} %meta{int,slider,1} %meta{float,slidermax,10} %meta{float,slidermin,-10}  %read{182,182} %write{2147483647,-1} %derivs
param	int	invertT	1		%meta{string,widget,"checkBox"} %meta{string,page,"Manifold 2D"} %meta{string,help,"Flip along T<br><br>invertT (int)"} %meta{int,connectable,0} %meta{string,label,"Invert T"}  %read{142,142} %write{2147483647,-1}
param	string	primvarS	""		%meta{string,widget,"string"} %meta{string,page,"Manifold 2D"} %meta{string,help,"Name of custom 1D S or 2D ST primvar<br><br>primvarS (string)"} %meta{int,connectable,0} %meta{string,label,"PrimVar S/ST"}  %read{24,43} %write{2147483647,-1} %derivs
param	string	primvarT	""		%meta{string,widget,"string"} %meta{string,page,"Manifold 2D"} %meta{string,help,"Name of custom 1D T primvar<br><br>primvarT (string)"} %meta{int,connectable,0} %meta{string,label,"PrimVar T"}  %read{25,46} %write{2147483647,-1} %derivs
param	int	matchCppPattern	0		%meta{string,widget,"checkBox"} %meta{string,label,"Match C++ patterns"} %meta{int,connectable,0} %meta{string,help,"Match RenderMan 23 C++ scenes but may slow down your render. Use only when necessary."}  %read{74,195} %write{2147483647,-1}
oparam	struct Manifold	result			%meta{string,help,"result (struct)"}  %read{2147483647,-1} %write{2147483647,-1} %struct{"Manifold"} %structfields{Q,QN,Qradius} %structfieldtypes{"pnf"} %structnfields{3}
oparam	point	result.Q	0 0 0		%meta{string,help,"result (struct)"}  %read{42,833} %write{36,499} %mystruct{result} %mystructfield{0} %derivs
oparam	normal	result.QN	0 0 1		%meta{string,help,"result (struct)"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{result} %mystructfield{1}
oparam	float	result.Qradius	0		%meta{string,help,"result (struct)"}  %read{60,775} %write{59,189} %mystruct{result} %mystructfield{2}
oparam	float	resultS	0		%meta{string,help,"resultS (float)"}  %read{2147483647,-1} %write{832,832}
oparam	float	resultT	0		%meta{string,help,"resultT (float)"}  %read{2147483647,-1} %write{833,833}
oparam	struct PxrManifoldMulti	resultMulti			%meta{string,help,"resultMulti (struct)"}  %read{190,190} %write{2147483647,-1} %struct{"PxrManifoldMulti"} %structfields{minNumTextures,numTextures,textureOrder,stAlpha0,stAlpha1,stAlpha2,stAlpha3,tileidRunflag0,tileidRunflag1,tileidRunflag2,tileidRunflag3,Tn,Bn,radius,hextile0,hextile1,hextile2,hextile3} %structfieldtypes{"iiippppppppv[4]v[4]fp[4]p[4]p[4]p[4]"} %structnfields{18}
oparam	int	resultMulti.minNumTextures	0		%meta{string,help,"resultMulti (struct)"}  %read{2147483647,-1} %write{63,63} %mystruct{resultMulti} %mystructfield{0}
oparam	int	resultMulti.numTextures	0		%meta{string,help,"resultMulti (struct)"}  %read{2147483647,-1} %write{61,61} %mystruct{resultMulti} %mystructfield{1}
oparam	int	resultMulti.textureOrder	0		%meta{string,help,"resultMulti (struct)"}  %read{2147483647,-1} %write{62,62} %mystruct{resultMulti} %mystructfield{2}
oparam	point	resultMulti.stAlpha0	-1 -1 -1		%meta{string,help,"resultMulti (struct)"}  %read{768,781} %write{767,768} %mystruct{resultMulti} %mystructfield{3} %derivs
oparam	point	resultMulti.stAlpha1	-1 -1 -1		%meta{string,help,"resultMulti (struct)"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{resultMulti} %mystructfield{4}
oparam	point	resultMulti.stAlpha2	-1 -1 -1		%meta{string,help,"resultMulti (struct)"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{resultMulti} %mystructfield{5}
oparam	point	resultMulti.stAlpha3	-1 -1 -1		%meta{string,help,"resultMulti (struct)"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{resultMulti} %mystructfield{6}
oparam	point	resultMulti.tileidRunflag0	0 0 0		%meta{string,help,"resultMulti (struct)"}  %read{772,774} %write{771,774} %mystruct{resultMulti} %mystructfield{7}
oparam	point	resultMulti.tileidRunflag1	0 0 0		%meta{string,help,"resultMulti (struct)"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{resultMulti} %mystructfield{8}
oparam	point	resultMulti.tileidRunflag2	0 0 0		%meta{string,help,"resultMulti (struct)"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{resultMulti} %mystructfield{9}
oparam	point	resultMulti.tileidRunflag3	0 0 0		%meta{string,help,"resultMulti (struct)"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{resultMulti} %mystructfield{10}
oparam	vector[4]	resultMulti.Tn	0 0 0		%meta{string,help,"resultMulti (struct)"}  %read{778,778} %write{0,829} %mystruct{resultMulti} %mystructfield{11} %initexpr
oparam	vector[4]	resultMulti.Bn	0 0 0		%meta{string,help,"resultMulti (struct)"}  %read{779,779} %write{4,830} %mystruct{resultMulti} %mystructfield{12} %initexpr
oparam	float	resultMulti.radius	0		%meta{string,help,"resultMulti (struct)"}  %read{2147483647,-1} %write{775,775} %mystruct{resultMulti} %mystructfield{13}
oparam	point[4]	resultMulti.hextile0	0 0 0		%meta{string,help,"resultMulti (struct)"}  %read{2147483647,-1} %write{8,764} %mystruct{resultMulti} %mystructfield{14} %initexpr
oparam	point[4]	resultMulti.hextile1	0 0 0		%meta{string,help,"resultMulti (struct)"}  %read{2147483647,-1} %write{12,15} %mystruct{resultMulti} %mystructfield{15} %initexpr
oparam	point[4]	resultMulti.hextile2	0 0 0		%meta{string,help,"resultMulti (struct)"}  %read{2147483647,-1} %write{16,19} %mystruct{resultMulti} %mystructfield{16} %initexpr
oparam	point[4]	resultMulti.hextile3	0 0 0		%meta{string,help,"resultMulti (struct)"}  %read{2147483647,-1} %write{20,23} %mystruct{resultMulti} %mystructfield{17} %initexpr
oparam	color	resultMask	0 0 0		%meta{string,help,"resultMask (color)"}  %read{2147483647,-1} %write{831,831}
global	normal	N	%read{783,827} %write{2147483647,-1}
global	vector	dPdu	%read{783,789} %write{2147483647,-1}
global	vector	dPdv	%read{786,790} %write{2147483647,-1}
local	float	___356_cosAng	%read{637,692} %write{634,682}
local	float	___356_sinAng	%read{639,690} %write{634,682}
local	float[4096]	___566_rxcellrandtable	%read{233,449} %write{213,213} %derivs
local	int[4096]	___566_rxcellpermute	%read{233,449} %write{214,214} %derivs
local	int	___566_i	%read{233,449} %write{232,449}
local	int	___566_iz	%read{338,449} %write{338,449} %derivs
local	int	___566_iy	%read{276,449} %write{276,449} %derivs
local	float	___566_v0	%read{220,416} %write{219,405} %derivs
local	int	___566_int00	%read{233,449} %write{224,449} %derivs
local	int	___566_int01	%read{276,449} %write{267,449} %derivs
local	int	___566_int02	%read{338,449} %write{329,449} %derivs
local	int	___566_int03	%read{419,449} %write{410,449} %derivs
local	int	___566_k	%read{233,449} %write{215,449} %derivs
local	int	___629_np.domain	%read{216,363} %write{197,197} %mystruct{___629_np} %mystructfield{0}
local	int	___629_np.range	%read{232,449} %write{198,198} %mystruct{___629_np} %mystructfield{1}
local	float[4]	___629_np.input	%read{218,404} %write{201,208} %mystruct{___629_np} %mystructfield{2} %derivs
local	point	___629_np.result	%read{450,452} %write{209,449} %mystruct{___629_np} %mystructfield{3} %derivs
local	int	___629_np.periodic	%read{2147483647,-1} %write{210,210} %mystruct{___629_np} %mystructfield{4}
local	int[4]	___629_np.period	%read{2147483647,-1} %write{211,211} %mystruct{___629_np} %mystructfield{5}
local	vector	___684_sigmaX	%read{819,819} %write{785,785}
local	vector	___684_sigmaY	%read{820,820} %write{788,788}
local	float	___684_flip_sign	%read{826,826} %write{793,794}
local	float	___684_dSTdx.x	%read{804,804} %write{796,796} %mystruct{___684_dSTdx} %mystructfield{0}
local	float	___684_dSTdx.y	%read{805,812} %write{797,797} %mystruct{___684_dSTdx} %mystructfield{1}
local	float	___684_dSTdy.x	%read{802,802} %write{799,799} %mystruct{___684_dSTdy} %mystructfield{0}
local	float	___684_dSTdy.y	%read{801,811} %write{800,800} %mystruct{___684_dSTdy} %mystructfield{1}
local	float	___684_det	%read{807,822} %write{806,806}
local	float	___684_sign_det	%read{814,826} %write{809,810}
local	float	___684_invC0.x	%read{819,819} %write{817,817} %mystruct{___684_invC0} %mystructfield{0}
local	float	___684_invC0.y	%read{820,820} %write{818,818} %mystruct{___684_invC0} %mystructfield{1}
local	float	___703_cellRotation	%read{554,758} %write{506,506}
local	float	___703_r1	%read{627,757} %write{507,610}
local	float	___703_r2	%read{651,757} %write{508,618}
local	float	___703_r3	%read{675,757} %write{509,626}
local	float	___703_s	%read{516,542} %write{510,510}
local	float	___703_t	%read{514,542} %write{511,511}
local	float	___703_Yscale	%read{514,514} %write{512,512}
local	float	___703_invYscale	%read{566,580} %write{513,513}
local	float	___703_cellY	%read{515,520} %write{514,514}
local	float	___703_cellX	%read{517,519} %write{516,516}
local	float	___703_cellXInt	%read{519,533} %write{517,517}
local	float	___703_cellYInt	%read{520,534} %write{518,518}
local	float	___703_cellXFract	%read{526,530} %write{519,519}
local	float	___703_cellYFract	%read{527,530} %write{520,520}
local	point	___703_cellV1	%read{561,721} %write{521,535}
local	point	___703_cellV2	%read{568,723} %write{523,523}
local	point	___703_cellV3	%read{575,725} %write{525,525}
local	float	___703_cellW1	%read{536,755} %write{527,742}
local	float	___703_cellW2	%read{539,755} %write{528,743}
local	float	___703_cellW3	%read{537,755} %write{529,744}
local	point	___703_textureST1	%read{582,750} %write{540,730}
local	point	___703_textureST2	%read{583,751} %write{541,731}
local	point	___703_textureST3	%read{584,752} %write{542,732}
local	point	___705_cellOffset1	%read{582,718} %write{567,567}
local	point	___705_cellOffset2	%read{583,719} %write{574,574}
local	point	___705_cellOffset3	%read{584,720} %write{581,581}
local	point	___705_origin1	%read{636,718} %write{582,715}
local	point	___705_origin2	%read{660,719} %write{583,716}
local	point	___705_origin3	%read{684,720} %write{584,717}
local	point	___705_noiseV1	%read{604,701} %write{586,586}
local	point	___705_noiseV2	%read{612,705} %write{588,588}
local	point	___705_noiseV3	%read{620,709} %write{590,590}
local	float	___706_angle	%read{607,623} %write{600,602}
local	point	___703_noiseV1	%read{727,730} %write{722,727}
local	point	___703_noiseV2	%read{728,731} %write{724,728}
local	point	___703_noiseV3	%read{729,732} %write{726,729}
local	float	___709_transExp	%read{736,738} %write{735,735}
local	float	___709_normW	%read{742,744} %write{741,741}
local	float	___731_seed	%read{122,129} %write{66,128} %derivs
local	int	___732_itmp	%read{70,70} %write{69,69} %derivs
local	string	___734_idname	%read{84,84} %write{82,83} %derivs
local	int	___736_iseed	%read{96,96} %write{91,92} %derivs
local	string	___738_pvar	%read{110,110} %write{105,106} %derivs
local	float	___741_procPrimId	%read{122,122} %write{119,120} %derivs
local	vector	___747_a	%read{58,58} %write{57,57}
local	int	hasPrimVarS	%read{26,26} %write{24,24}
local	int	hasPrimVarT	%read{29,39} %write{25,25}
local	float[2]	___748_st	%read{35,37} %write{33,34} %derivs
local	float	seed	%read{192,194} %write{64,64} %derivs
local	float	id_seed	%read{132,831} %write{129,132} %derivs
local	float	id_pvar	%read{771,771} %write{135,141}
local	float	___751_rx	%read{172,172} %write{153,166} %derivs
local	float	___751_ry	%read{173,173} %write{154,171} %derivs
local	float	___751_cs	%read{163,170} %write{155,161} %derivs
local	float	___751_sn	%read{165,168} %write{156,161} %derivs
local	point	___752_ps	%read{199,454} %write{194,194} %derivs
local	point	___752_rnd	%read{457,495} %write{453,454} %derivs
local	float	___753_tmp	%read{467,467} %write{464,464} %derivs
local	point	___754_hxt.s	%read{749,761} %write{748,749} %mystruct{___754_hxt} %mystructfield{0}
local	point	___754_hxt.t	%read{754,762} %write{753,754} %mystruct{___754_hxt} %mystructfield{1}
local	point	___754_hxt.w	%read{756,763} %write{755,756} %mystruct{___754_hxt} %mystructfield{2}
local	point	___754_hxt.r	%read{760,764} %write{759,760} %mystruct{___754_hxt} %mystructfield{3}
const	vector	$const1	0 0 0		%read{0,7} %write{2147483647,-1}
const	int	$const2	0		%read{0,832} %write{2147483647,-1}
const	int	$const3	1		%read{1,833} %write{2147483647,-1}
const	int	$const4	2		%read{2,769} %write{2147483647,-1}
const	int	$const5	3		%read{3,764} %write{2147483647,-1}
const	point	$const6	0 0 0		%read{8,209} %write{2147483647,-1}
const	point	$const7	-1 -1 -1		%read{10,22} %write{2147483647,-1}
const	string	$const8	""		%read{24,105} %write{2147483647,-1}
temp	int	$tmp25	%read{27,27} %write{26,26}
temp	int	$tmp26	%read{28,32} %write{27,31}
temp	int	$tmp27	%read{30,30} %write{29,29}
temp	int	$tmp28	%read{31,31} %write{30,30}
const	float[2]	$const9	0 0 		%read{33,33} %write{2147483647,-1}
temp	int	$tmp29	%read{2147483647,-1} %write{34,34}
const	string	$const10	"primvar"		%read{34,106} %write{2147483647,-1}
const	string	$const11	"st"		%read{34,34} %write{2147483647,-1}
temp	float	$tmp30	%read{36,36} %write{35,35} %derivs
temp	float	$tmp31	%read{38,38} %write{37,37} %derivs
temp	int	$tmp32	%read{40,40} %write{39,39}
temp	int	$tmp33	%read{2147483647,-1} %write{41,41}
temp	int	$tmp34	%read{2147483647,-1} %write{43,43}
temp	float	$tmp35	%read{44,44} %write{42,43} %derivs
temp	int	$tmp36	%read{2147483647,-1} %write{46,46}
temp	float	$tmp37	%read{47,47} %write{45,46} %derivs
temp	float	$tmp38	%read{51,52} %write{48,48} %derivs
temp	float	$tmp39	%read{54,55} %write{49,49} %derivs
const	string	$const12	"radius"		%read{50,50} %write{2147483647,-1}
temp	point	$tmp40	%read{57,57} %write{53,53}
temp	float	$tmp41	%read{53,53} %write{51,51}
temp	float	$tmp42	%read{53,53} %write{52,52}
const	float	$const13	0		%read{53,823} %write{2147483647,-1}
temp	point	$tmp43	%read{57,57} %write{56,56}
temp	float	$tmp44	%read{56,56} %write{54,54}
temp	float	$tmp45	%read{56,56} %write{55,55}
temp	float	$tmp46	%read{59,59} %write{58,58}
const	float	$const14	0.5		%read{59,621} %write{2147483647,-1}
const	float	$const15	173		%read{64,64} %write{2147483647,-1}
const	string	$const16	"textureID"		%read{92,106} %write{2147483647,-1}
const	string	$const17	"getVariationSeed"		%read{65,65} %write{2147483647,-1}
temp	int	$tmp47	%read{68,68} %write{67,67}
temp	int	$tmp48	%read{2147483647,-1} %write{69,69}
const	string	$const18	"builtin"		%read{69,69} %write{2147483647,-1}
const	string	$const19	"id"		%read{69,69} %write{2147483647,-1}
const	int	$const20	65535		%read{70,70} %write{2147483647,-1}
temp	int	$tmp49	%read{71,71} %write{70,70} %derivs
temp	int	$tmp50	%read{73,73} %write{72,72}
temp	int	$tmp51	%read{75,75} %write{74,74}
temp	int	$tmp52	%read{76,81} %write{75,80}
temp	int	$tmp53	%read{78,78} %write{77,77}
const	string	$const21	"user:rixhash"		%read{77,77} %write{2147483647,-1}
temp	int	$tmp54	%read{79,79} %write{78,78}
temp	int	$tmp55	%read{80,80} %write{79,79}
temp	int	$tmp56	%read{2147483647,-1} %write{83,83}
const	string	$const22	"identifier:name"		%read{83,83} %write{2147483647,-1}
temp	int	$tmp57	%read{85,85} %write{84,84} %derivs
const	int	$const23	65536		%read{85,85} %write{2147483647,-1}
temp	int	$tmp58	%read{86,86} %write{85,85} %derivs
temp	int	$tmp59	%read{88,88} %write{87,87}
temp	int	$tmp60	%read{90,90} %write{89,89}
temp	int	$tmp61	%read{93,93} %write{92,92}
temp	int	$tmp62	%read{94,94} %write{93,93}
temp	int	$tmp63	%read{98,98} %write{97,97}
temp	int	$tmp64	%read{100,100} %write{99,99}
temp	int	$tmp65	%read{101,101} %write{100,100}
temp	int	$tmp66	%read{104,104} %write{103,103}
temp	int	$tmp67	%read{107,107} %write{106,106}
temp	int	$tmp68	%read{108,108} %write{107,107}
temp	int	$tmp69	%read{111,111} %write{110,110} %derivs
const	string	$const24	"getVariationSeed: un-supported primvar type !"		%read{112,112} %write{2147483647,-1}
temp	int	$tmp70	%read{114,114} %write{113,113}
const	string	$const25	"getVariationSeed : Unknow random source -> %d"		%read{116,116} %write{2147483647,-1}
temp	int	$tmp71	%read{118,118} %write{117,117}
temp	int	$tmp72	%read{121,121} %write{120,120}
const	string	$const26	"user:procprimid"		%read{120,120} %write{2147483647,-1}
temp	float	$tmp73	%read{128,128} %write{127,127} %derivs
temp	float	$tmp74	%read{124,127} %write{122,122} %derivs
const	float	$const27	65536		%read{124,206} %write{2147483647,-1}
const	string	$const28	"mod"		%read{123,123} %write{2147483647,-1}
temp	float	$tmp75	%read{126,126} %write{125,125} %derivs
temp	float	$tmp76	%read{125,125} %write{124,124} %derivs
temp	float	$tmp77	%read{127,127} %write{126,126} %derivs
temp	float	$tmp78	%read{132,132} %write{131,131} %derivs
const	float	$const29	7		%read{130,130} %write{2147483647,-1}
temp	float	$tmp79	%read{131,131} %write{130,130} %derivs
temp	int	$tmp80	%read{134,134} %write{133,133}
temp	int	$tmp81	%read{137,137} %write{136,136}
const	float	$const30	65535		%read{138,138} %write{2147483647,-1}
temp	float	$tmp82	%read{140,140} %write{138,138}
temp	float	$tmp83	%read{140,140} %write{139,139}
temp	float	$tmp84	%read{150,150} %write{149,149} %derivs
temp	float	$tmp85	%read{145,148} %write{143,143} %derivs
const	string	$const31	"invertCoord"		%read{144,144} %write{2147483647,-1}
temp	float	$tmp86	%read{146,146} %write{145,145} %derivs
const	float	$const32	1		%read{146,810} %write{2147483647,-1}
temp	float	$tmp87	%read{149,149} %write{146,146} %derivs
temp	float	$tmp88	%read{148,148} %write{147,147} %derivs
temp	float	$tmp89	%read{149,149} %write{148,148} %derivs
temp	int	$tmp90	%read{152,152} %write{151,151}
temp	float	$tmp91	%read{161,161} %write{160,160} %derivs
temp	float	$tmp92	%read{160,160} %write{157,157} %derivs
const	string	$const33	"radians"		%read{158,679} %write{2147483647,-1}
const	float	$const34	3.14159274		%read{159,680} %write{2147483647,-1}
const	float	$const35	180		%read{159,680} %write{2147483647,-1}
temp	float	$tmp93	%read{160,160} %write{159,159} %derivs
temp	float	$tmp94	%read{163,163} %write{162,162} %derivs
temp	float	$tmp95	%read{166,166} %write{163,163} %derivs
temp	float	$tmp96	%read{165,165} %write{164,164} %derivs
temp	float	$tmp97	%read{166,166} %write{165,165} %derivs
temp	float	$tmp98	%read{168,168} %write{167,167} %derivs
temp	float	$tmp99	%read{171,171} %write{168,168} %derivs
temp	float	$tmp100	%read{170,170} %write{169,169} %derivs
temp	float	$tmp101	%read{171,171} %write{170,170} %derivs
temp	float	$tmp102	%read{176,176} %write{174,174} %derivs
temp	float	$tmp103	%read{176,176} %write{175,175} %derivs
temp	float	$tmp104	%read{177,177} %write{176,176} %derivs
temp	float	$tmp105	%read{178,178} %write{177,177} %derivs
temp	float	$tmp106	%read{181,181} %write{179,179} %derivs
temp	float	$tmp107	%read{181,181} %write{180,180} %derivs
temp	float	$tmp108	%read{182,182} %write{181,181} %derivs
temp	float	$tmp109	%read{183,183} %write{182,182} %derivs
temp	float	$tmp110	%read{185,185} %write{184,184}
temp	float	$tmp111	%read{188,188} %write{185,185}
temp	float	$tmp112	%read{187,187} %write{186,186}
temp	float	$tmp113	%read{188,188} %write{187,187}
temp	int	$tmp114	%read{191,191} %write{190,190}
temp	float	$tmp115	%read{194,194} %write{192,192} %derivs
temp	float	$tmp116	%read{194,194} %write{193,193} %derivs
const	string	$const36	"rxcellnoise"		%read{196,196} %write{2147483647,-1}
temp	float	$tmp117	%read{201,201} %write{200,200} %derivs
temp	float	$tmp118	%read{200,200} %write{199,199} %derivs
temp	float	$tmp119	%read{204,204} %write{203,203} %derivs
temp	float	$tmp120	%read{203,203} %write{202,202} %derivs
temp	float	$tmp121	%read{207,207} %write{206,206} %derivs
temp	float	$tmp122	%read{206,206} %write{205,205} %derivs
const	int[4]	$const37	0 0 0 0 		%read{211,211} %write{2147483647,-1}
const	string	$const38	"rx_cell_noise"		%read{212,212} %write{2147483647,-1}
const	float[4096]	$const39	0.266395003 0.633545995 0.973936975 0.910194993 0.264102995 0.354968995 0.315187991 0.871517003 0.0166095998 0.229700997 0.948787987 0.383789986 0.297724009 0.723987997 0.269015014 0.209977999 0.588165998 0.171146005 0.401838988 0.687545002 0.512377977 0.566577017 0.736636996 0.636132002 0.501501024 0.211778998 0.748574018 0.351062 0.119280003 0.856431007 0.313887 0.385675013 0.489977002 0.287824988 0.295870006 0.754079998 0.642794013 0.611057997 0.625597 0.65940398 0.840758979 0.574384987 0.0431938991 0.138483003 0.298373014 0.312207997 0.348461002 0.886538029 0.483354986 0.75029999 0.574082971 0.995732009 0.316877007 0.310719997 0.631864011 0.818377972 0.522499979 0.380438 0.169440001 0.641780019 0.236869007 0.483327001 0.0274548996 0.726846993 0.77115202 0.323325008 0.480926991 0.413946003 0.934382975 0.106523 0.0733494982 0.775143027 0.680908024 0.116543002 0.913626015 0.979281008 0.428752005 0.262086987 0.865818977 0.912106991 0.0123869004 0.439902991 0.907839 0.329263985 0.750622988 0.539703012 0.147642002 0.273122996 0.920140982 0.317081988 0.914902985 0.157011002 0.800409019 0.942357004 0.883857012 0.571560979 0.265682995 0.364784002 0.985507011 0.200066 0.471307009 0.0588560998 0.975208998 0.152215004 0.175400004 0.888834 0.131495997 0.604151011 0.150921002 0.99731499 0.516258001 0.163307995 0.43721801 0.424097002 0.49257201 0.187840998 0.963801026 0.640214026 0.460963011 0.883942008 0.957296014 0.375865996 0.0409528017 0.757704973 0.318223 0.924809992 0.329266012 0.583905995 0.289593995 0.31477201 0.783972025 0.760900974 0.37362799 0.759180009 0.913115025 0.549027979 0.648015022 0.0446113013 0.153179005 0.798936009 0.0419264995 0.669438004 0.962243974 0.479144007 0.0935349986 0.454816014 0.666984975 0.0573357008 0.095029898 0.127948999 0.941277981 0.0523258001 0.503814995 0.982230008 0.810030997 0.822037995 0.90704 0.139295995 0.40594399 0.196633995 0.454068005 0.189916 0.957535028 0.827696979 0.949096024 0.870649993 0.376724005 0.597110987 0.915261984 0.529904008 0.396046013 0.95718801 0.199340999 0.358289987 0.436331987 0.292876005 0.813106 0.103317 0.350212008 0.90813601 0.231266007 0.291489989 0.960461974 0.735081017 0.273719996 0.770492017 0.557119012 0.180760995 0.909788013 0.963063002 0.377395004 0.363857001 0.152978003 0.334930003 0.191552997 0.102073997 0.205579996 0.568278015 0.699185014 0.120840997 0.0981817022 0.0952309966 0.0780292973 0.297522992 0.453521013 0.514361978 0.590399981 0.266627014 0.617679 0.940612018 0.174762994 0.848945022 0.232100993 0.135224 0.584025979 0.505822003 0.905716002 0.141145006 0.686582029 0.815505028 0.104207002 0.0639773011 0.179361999 0.257185012 0.398907006 0.370914996 0.359259009 0.604487002 0.93919301 0.0584441014 0.725328028 0.0373747014 0.153675005 0.803358018 0.334897995 0.607195973 0.317719012 0.925297022 0.873822987 0.935397983 0.86590898 0.0485858992 0.784344018 0.0980103016 0.183809996 0.368369997 0.603832006 0.0895266011 0.509513974 0.290414006 0.905031979 0.613721013 0.354391992 0.084393099 0.870907009 0.753298998 0.45530799 0.230166003 0.357784986 0.394501001 0.288610011 0.0831137002 0.431876004 0.442285001 0.886470973 0.766773999 0.0494818017 0.204190999 0.692071021 0.923304975 0.139588997 0.557980001 0.971890986 0.923933029 0.655990005 0.155700997 0.292302012 0.259822011 0.245228007 0.801815987 0.550235987 0.150259003 0.415538013 0.904627979 0.234651998 0.286444992 0.657926977 0.689961016 0.51661098 0.0157123003 0.0844618008 0.805221021 0.0988259986 0.516337991 0.247507006 0.985297024 0.283111006 0.29698801 0.189487994 0.97518301 0.220293 0.329077005 0.533161998 0.192184001 0.253010005 0.189153001 0.347885996 0.545311987 0.448974997 0.593113005 0.347128004 0.999211013 0.743372977 0.762665987 0.903840005 0.978025019 0.0491108 0.561766028 0.667985976 0.565721989 0.577479005 0.752447009 0.37094301 0.676304996 0.268785 0.618448973 0.66160202 0.551896989 0.915437996 0.851090014 0.527078986 0.135730997 0.180167004 0.0602415986 0.327915013 0.433176011 0.249394 0.675800979 0.978488028 0.698369026 0.268914014 0.325616002 0.697580993 0.0122868996 0.0882825032 0.601419985 0.99031198 0.137392998 0.163185999 0.658297002 0.703114986 0.740665019 0.410744995 0.0740574971 0.416970015 0.679530025 0.692507029 0.0785717964 0.231426999 0.607944012 0.929661989 0.758506 0.743676007 0.109829001 0.818746984 0.0715909973 0.54300499 0.068141602 0.747391999 0.521493018 0.766511023 0.0163062997 0.847109973 0.464091003 0.0285931006 0.935392022 0.0655115023 0.0189049002 0.0727853999 0.228698 0.677201986 0.775900006 0.969362974 0.0879471973 0.849958003 0.386332989 0.767476976 0.542464972 0.464904994 0.99890399 0.150408998 0.394566 0.757408977 0.89408499 0.504395008 0.576156974 0.96567601 0.0473999009 0.644298017 0.713068008 0.568893015 0.41080901 0.729373991 0.416002989 0.874899983 0.757966995 0.351395011 0.940411985 0.776871979 0.424180001 0.16911 0.454073995 0.200080007 0.138473004 0.542020977 0.0500381999 0.524806023 0.309498996 0.592503011 0.989709973 0.308402002 0.742911994 0.384276986 0.0658115968 0.636995971 0.888671994 0.641968012 0.602671981 0.936070979 0.286265999 0.315739989 0.504965007 0.697075009 0.0451133996 0.920966983 0.571974993 0.803080022 0.272361994 0.512386978 0.579952002 0.696542025 0.681496978 0.0340264998 0.896623015 0.819970012 0.576048017 0.946660995 0.344776005 0.885546982 0.539164007 0.334486008 0.193948999 0.282074988 0.718761981 0.259759992 0.919071972 0.607433975 0.901728988 0.521744013 0.543505013 0.187995002 0.837482989 0.0484699011 0.885070026 0.882597029 0.969437003 0.457044989 0.685676992 0.241798997 0.969431996 0.265628994 0.938341975 0.650929987 0.299656004 0.834963977 0.470898986 0.87570399 0.781624973 0.81567502 0.761250019 0.320789009 0.150160998 0.955199003 0.602864027 0.868923008 0.214959994 0.521935999 0.476357013 0.116687998 0.0436795019 0.0198624991 0.304683 0.881163001 0.0683325008 0.189752996 0.763759017 0.0377697013 0.646798015 0.449436009 0.279569 0.616231024 0.715066016 0.217911005 0.267159998 0.0147213005 0.0528746992 0.738059998 0.890425026 0.834500015 0.553735018 0.651674986 0.155288994 0.703894973 0.606875002 0.758153021 0.572818995 0.821834981 0.280088007 0.0491758995 0.938522995 0.32376799 0.0690383986 0.243205994 0.204931006 0.137371004 0.43295899 0.968689978 0.175141007 0.0797571987 0.418125987 0.454710007 0.695987999 0.133192003 0.672619998 0.963147998 0.147912994 0.725494981 0.701207995 0.0383381993 0.559994996 0.254942 0.690014005 0.715282977 0.958837986 0.296887994 0.473435998 0.531656027 0.118722998 0.753524005 0.580832005 0.0572457984 0.0772918016 0.649870992 0.300451994 0.282222003 0.787241995 0.733411014 0.250912011 0.962382019 0.813167989 0.669037998 0.417091995 0.509155989 0.80223 0.0897118002 0.472303987 0.95014298 0.815207005 0.173511997 0.988480985 0.375200987 0.428454012 0.67849499 0.0904844031 0.387291998 0.975383997 0.563920021 0.918947995 0.0941065997 0.317443997 0.499781013 0.151352003 0.394735992 0.149651006 0.451804012 0.676958025 0.936892986 0.185214996 0.927869976 0.899275005 0.998382986 0.596908987 0.316367 0.507538974 0.399138987 0.406078994 0.979842007 0.349281996 0.221285 0.153354004 0.337763011 0.596486986 0.581807971 0.0162585992 0.686971009 0.969099998 0.991641998 0.250891 0.888047993 0.0857487991 0.568334997 0.387829006 0.237101004 0.963070989 0.537479997 0.688905001 0.640029013 0.474373013 0.874119997 0.567898989 0.373647988 0.872502983 0.164808005 0.690015018 0.380041987 0.563947022 0.0960939005 0.359883994 0.913228989 0.317378998 0.513238013 0.250992 0.913865983 0.0950466022 0.267251015 0.600836992 0.0641466007 0.258893013 0.851728022 0.952194989 0.344642013 0.420062989 0.340023994 0.581743002 0.383134007 0.877503991 0.270648986 0.0231628008 0.351877004 0.144768998 0.591062009 0.725525975 0.0172720999 0.755869985 0.415540993 0.397314012 0.319817007 0.511635005 0.757197976 0.233045995 0.829014003 0.270435989 0.484037995 0.742879987 0.365482986 0.75128901 0.343717009 0.429628998 0.0101824999 0.195444003 0.381823987 0.35482499 0.615507007 0.721848011 0.936568022 0.998641014 0.599352002 0.207216993 0.0218038 0.95122999 0.351985991 0.612865984 0.676755011 0.369257987 0.368735999 0.0922963023 0.766570985 0.688552976 0.60393101 0.523769021 0.921598971 0.432945013 0.79420501 0.405638009 0.175825 0.159687996 0.156927004 0.519541025 0.589317977 0.167109996 0.714986026 0.971141994 0.521933973 0.330493003 0.692990005 0.458501995 0.329133987 0.292342991 0.665718019 0.350937992 0.243572995 0.0177039001 0.963804007 0.920328021 0.386961013 0.332540005 0.0126243997 0.153532997 0.0210931003 0.616554976 0.677302003 0.942691982 0.0495004989 0.471507013 0.348329991 0.225325003 0.631195009 0.50525701 0.744867027 0.220513001 0.672366023 0.45985201 0.191654995 0.194300994 0.790345013 0.884644985 0.652801991 0.119479001 0.176988006 0.318520993 0.470416993 0.420560986 0.336225003 0.434219986 0.340889007 0.723186016 0.766759992 0.353513002 0.876718998 0.787853003 0.970068991 0.554021001 0.730544984 0.0195693001 0.0255277995 0.0788754001 0.244894996 0.656723022 0.584132016 0.989760995 0.877236009 0.256498992 0.449613988 0.0688909963 0.450800002 0.239959002 0.953535974 0.103602 0.359438002 0.130523995 0.422122985 0.829854012 0.551084995 0.758346975 0.264075011 0.891973972 0.481534004 0.0308344997 0.245487005 0.358251989 0.818687022 0.215555996 0.91227299 0.549233019 0.235126004 0.937801003 0.628108025 0.480019987 0.594524026 0.212240994 0.469781995 0.471760005 0.468739986 0.91939503 0.540651023 0.919538975 0.159354001 0.494186997 0.0231413003 0.518791974 0.62471199 0.445264012 0.348645985 0.175797001 0.203612 0.612721026 0.0677710995 0.68514502 0.643554986 0.313259006 0.0433975011 0.462242991 0.528814971 0.955671012 0.0114757 0.76394099 0.893471003 0.639584005 0.243961006 0.487994999 0.851824999 0.713742018 0.959756017 0.320564985 0.633136988 0.500406981 0.240104005 0.792491019 0.994593978 0.263244987 0.311282992 0.619306028 0.708509028 0.659928977 0.795103014 0.912120998 0.272650003 0.862873971 0.597266018 0.916204989 0.176133007 0.640663981 0.378448009 0.704948008 0.596333981 0.38992399 0.468888015 0.489805996 0.0295075998 0.712849021 0.977801025 0.88133198 0.426591009 0.937556982 0.201896995 0.0597289018 0.437963009 0.442000985 0.852219999 0.432558 0.705245972 0.163503006 0.051863499 0.413755 0.823432028 0.846966028 0.325875998 0.0960822999 0.70984 0.923142016 0.0122873997 0.885972977 0.563805997 0.390735 0.590920985 0.160139993 0.78065902 0.0598088987 0.649945021 0.810167015 0.77265799 0.627746999 0.691498995 0.199248999 0.565303028 0.89339602 0.258978009 0.00326664001 0.335397005 0.111198999 0.435824007 0.0406426005 0.274702013 0.487688005 0.454398006 0.0981341973 0.334654003 0.780273974 0.194215998 0.0444944017 0.70341599 0.206504002 0.930468023 0.267221987 0.597239017 0.521387994 0.427361012 0.377898008 0.581197023 0.0773068964 0.188065007 0.353855014 0.705052972 0.879563987 0.553103983 0.270357013 0.772960007 0.812083006 0.27362299 0.108355999 0.923281014 0.70944798 0.148999006 0.197982997 0.197135001 0.603395998 0.296117008 0.531789005 0.383670002 0.490334004 0.576283991 0.0870862976 0.696838021 0.506751001 0.354308009 0.294077009 0.0281393006 0.781669021 0.671975017 0.609336019 0.858976007 0.860040009 0.963190973 0.564029992 0.739602983 0.516296029 0.834387004 0.51256299 0.328379005 0.108010001 0.620918989 0.251659989 0.81745702 0.769918025 0.449642986 0.0145925004 0.373313993 0.745760977 0.54638201 0.756985009 0.236093998 0.122665003 0.844070971 0.932932019 0.629415989 0.198378995 0.227008 0.657554984 0.980048001 0.898983002 0.266891986 0.839025021 0.759023011 0.230083004 0.403053999 0.498625994 0.746379018 0.237441003 0.0111889001 0.0747578964 0.345450997 0.632107973 0.326418012 0.162908003 0.402025998 0.776060998 0.177500993 0.775340021 0.521821976 0.72388202 0.532324016 0.757915974 0.846547008 0.376394987 0.690847993 0.47596401 0.574774027 0.917855978 0.133518994 0.554822028 0.81683898 0.40041101 0.393846989 0.57586199 0.630493999 0.796900988 0.0744881034 0.376872987 0.0343424007 0.0856769979 0.45163101 0.379792988 0.717785001 0.778048992 0.542701006 0.11981 0.554109991 0.720202029 0.895150006 0.0759316981 0.444083989 0.427473992 0.833848 0.29063201 0.803869009 0.524694979 0.766595006 0.378643006 0.442550987 0.900114 0.933466017 0.259389997 0.30052501 0.327311993 0.835251987 0.931019008 0.124214001 0.909740984 0.307891995 0.158555999 0.995418012 0.759522974 0.538348973 0.713202 0.537572026 0.0810509026 0.833012998 0.0916818008 0.801253021 0.728163004 0.167613998 0.245337993 0.155636996 0.00146108004 0.535969019 0.959506989 0.526156008 0.302565008 0.338149995 0.968707025 0.202678993 0.271614999 0.228098005 0.503203988 0.598927975 0.0633499026 0.434222996 0.723141015 0.973089993 0.742115021 0.881698012 0.968508005 0.501637995 0.420046985 0.681710005 0.0392098017 0.501097977 0.514723003 0.130891994 0.302350998 0.242886007 0.298505008 0.547688007 0.398523003 0.299966007 0.083657898 0.358029008 0.826121986 0.386222988 0.696178973 0.794830024 0.588901997 0.967795014 0.0229272004 0.0921060964 0.566721976 0.0862770975 0.526328981 0.289864004 0.0593673997 0.268444002 0.171561003 0.0278753992 0.770081997 0.591607988 0.709586024 0.809292018 0.0927060992 0.224308997 0.940183997 0.395056993 0.467193991 0.238689005 0.94274497 0.865716994 0.538654983 0.0264033992 0.223747 0.364778012 0.412625998 0.919925988 0.159606993 0.00152808998 0.887719989 0.182533994 0.0936342031 0.454443008 0.268810987 0.61996299 0.744306028 0.328179002 0.888408005 0.915867984 0.356054008 0.658490002 0.507475972 0.0656398013 0.467781991 0.600181997 0.289947987 0.407965988 0.995239019 0.757143021 0.646655023 0.937985003 0.622860014 0.185310006 0.964388013 0.846607029 0.550086975 0.377014011 0.766532004 0.709694982 0.378542006 0.654253006 0.892229021 0.472175986 0.108695 0.161039993 0.0921398029 0.853002012 0.48921901 0.980548024 0.768868983 0.845273018 0.639038026 0.276345015 0.910912991 0.106820002 0.876527011 0.200861007 0.514786005 0.871766984 0.958003998 0.161440998 0.809750974 0.580864012 0.346751004 0.774138987 0.427471012 0.896838009 0.151152998 0.194003001 0.606532991 0.529694974 0.848255992 0.498762012 0.00187152997 0.956951022 0.65980202 0.0940114036 0.809952974 0.149021 0.0745590031 0.578822017 0.994293988 0.713597 0.855167985 0.905206978 0.820416987 0.731694996 0.106068999 0.335202992 0.603461981 0.0640726984 0.49664399 0.413213015 0.644936979 0.843394995 0.187352002 0.0724077001 0.740233004 0.338505 0.266411006 0.346765995 0.868200004 0.114666998 0.845528007 0.870072007 0.0716186017 0.505330026 0.964083016 0.881572008 0.654352009 0.0386418998 0.460393995 0.648645997 0.752238989 0.31556201 0.553852975 0.572655976 0.047257401 0.659922004 0.907859027 0.650718987 0.72399497 0.404502988 0.0639320984 0.368930995 0.247896999 0.251284003 0.441338986 0.988130987 0.589788973 0.707750022 0.334897012 0.457989007 0.822417021 0.180425003 0.328060001 0.894035995 0.685756028 0.292142987 0.775608003 0.340108007 0.330785006 0.236001998 0.988753021 0.0830236971 0.551563978 0.542607009 0.655678988 0.598821998 0.202528998 0.563538015 0.249541 0.92652297 0.968039989 0.313472986 0.295455009 0.215938002 0.564756989 0.736793995 0.204069003 0.154545993 0.444543988 0.538966 0.612533987 0.266961008 0.719390988 0.940594018 0.160997003 0.405146986 0.232738003 0.936604977 0.745254993 0.563521981 0.172607005 0.734008014 0.646546006 0.724170983 0.276614994 0.302224994 0.32299301 0.479142994 0.865763009 0.572534025 0.405667007 0.833804011 0.886007011 0.701120973 0.0497415997 0.450764 0.437914997 0.253809988 0.60530901 0.882458985 0.792775989 0.217843994 0.149419993 0.512166977 0.158437997 0.31041801 0.917313993 0.391175985 0.247023001 0.662568986 0.954698026 0.419629991 0.396577001 0.601243973 0.143801004 0.673192024 0.90346998 0.466794014 0.152335003 0.769232988 0.0393276997 0.558001995 0.603037 0.92533499 0.259122998 0.652778029 0.376098007 0.697037995 0.906588018 0.981408 0.57949698 0.699364007 0.199250996 0.728917003 0.211531997 0.357688993 0.0393345989 0.128846005 0.748865008 0.286356986 0.791414976 0.703562975 0.705986977 0.187992007 0.304807007 0.84978801 0.861182988 0.208276004 0.316581994 0.0135185998 0.977509022 0.355910003 0.571519971 0.580546021 0.28124401 0.830642998 0.233324006 0.657342017 0.527680993 0.139911994 0.638750017 0.107178003 0.839277029 0.838001013 0.836094975 0.0508081988 0.195690006 0.875428975 0.179654002 0.944554985 0.161787003 0.971068978 0.648117006 0.86777401 0.159061 0.952924013 0.717561007 0.0202440992 0.161200002 0.0341431983 0.0337627009 0.138708994 0.390053004 0.605283022 0.719254971 0.671297014 0.43592599 0.952579021 0.328639001 0.963607013 0.0924908966 0.967388988 0.0707852021 0.931766987 0.80539 0.906880021 0.982576013 0.00107978994 0.782310009 0.16223 0.945634007 0.944096029 0.133298993 0.593751013 0.811869979 0.292358994 0.546675026 0.529430985 0.312602997 0.707875013 0.563574016 0.346365988 0.846584976 0.95362699 0.95164901 0.565840006 0.624924004 0.387575001 0.518418014 0.953562975 0.351182997 0.610908985 0.920952022 0.421968013 0.542676985 0.726342022 0.328848004 0.525252998 0.727421999 0.111157998 0.687481999 0.673056006 0.0552540012 0.820780993 0.26680699 0.867124021 0.113140002 0.813483 0.396555007 0.425743997 0.521358013 0.960129023 0.772109985 0.367942989 0.913756013 0.723758996 0.933781981 0.538680017 0.111334004 0.452201009 0.492242992 0.462516993 0.0631102994 0.413195014 0.884485006 0.605786979 0.139537007 0.213332996 0.131040007 0.866958022 0.324490994 0.818521976 0.540014029 0.379745007 0.639303029 0.806822002 0.246868998 0.752443016 0.620303988 0.643423975 0.178186998 0.141662002 0.603552997 0.950296998 0.50960499 0.51730901 0.674055994 0.443387002 0.0559896007 0.785390973 0.895587981 0.548232973 0.247907996 0.958697975 0.961427987 0.132393003 0.564485013 0.100965001 0.345726013 0.695524991 0.967922986 0.670216978 0.514047027 0.507937014 0.0499624014 0.153349996 0.314758986 0.296831012 0.905793011 0.935063004 0.940254986 0.0839805976 0.0767249987 0.543807983 0.0342776999 0.586329997 0.0611172989 0.708334029 0.0297164004 0.117106996 0.493725002 0.925303996 0.665340006 0.741632998 0.88400197 0.626767993 0.874026 0.448487014 0.727732003 0.219751999 0.144012004 0.695656002 0.889970005 0.658059001 0.203593001 0.939931989 0.811408997 0.518351972 0.236763 0.717202008 0.453415006 0.177018002 0.801182985 0.530139983 0.72082603 0.83546102 0.116470002 0.781943023 0.54379499 0.146185994 0.899049997 0.0375192985 0.0714901984 0.564390004 0.779151976 0.95549202 0.191156998 0.653177977 0.403979987 0.918889999 0.87292999 0.547991991 0.614544988 0.762898982 0.206051007 0.818139017 0.70283097 0.0174599998 0.336490989 0.939593971 0.734661996 0.789906025 0.116612002 0.535844982 0.320046008 0.837437987 0.371306002 0.436515003 0.619381011 0.915100992 0.582701027 0.518431008 0.952620029 0.654191017 0.0828204975 0.731772006 0.60968399 0.273977995 0.384950012 0.0136636002 0.192867994 0.257878989 0.561655998 0.807412982 0.0207789 0.76770699 0.625551999 0.723609984 0.785166979 0.962041974 0.663204014 0.519828975 0.751947999 0.779815972 0.0556744002 0.0719935 0.617254019 0.426979989 0.50850898 0.236635 0.34208101 0.0912100971 0.755065978 0.29470101 0.745401978 0.837885976 0.0264730006 0.355085999 0.111864001 0.411422998 0.368748993 0.304731995 0.669301987 0.930405021 0.112144999 0.690081 0.698110998 0.737695992 0.413691014 0.483278006 0.699738979 0.0768954009 0.00310679991 0.451685995 0.856711984 0.0587811992 0.523679972 0.473966002 0.485762 0.0321886986 0.710600972 0.82784301 0.123398997 0.465667009 0.122543998 0.868799984 0.303552985 0.149017006 0.223885998 0.415416986 0.560438991 0.592634976 0.720148027 0.229741007 0.523039997 0.832292974 0.919821978 0.221150994 0.569989979 0.333512992 0.704428971 0.269728005 0.410409003 0.707535982 0.721414983 0.267120004 0.76631701 0.245094001 0.741086006 0.252077997 0.277283013 0.451687008 0.0799209028 0.400682002 0.917353988 0.202464998 0.269481987 0.220906004 0.351480991 0.493368 0.636322975 0.911920011 0.0860036016 0.356471002 0.141661003 0.609043002 0.188764006 0.0614835992 0.830193996 0.758754015 0.394997001 0.534623027 0.0284819007 0.805405021 0.242158994 0.74989599 0.0725255981 0.00847576 0.994991004 0.813611984 0.260553986 0.272273988 0.265298992 0.340474993 0.67295599 0.182652995 0.542940021 0.942438006 0.403558999 0.894420981 0.43580699 0.0398819 0.806340992 0.521811008 0.396353006 0.948001981 0.130853996 0.585117996 0.0094859302 0.961048007 0.343872011 0.404482991 0.495671988 0.372352988 0.209887996 0.737830997 0.122249998 0.282413989 0.746306002 0.117241003 0.0960254967 0.00686055003 0.389515013 0.361324012 0.347335994 0.0624708012 0.543977022 0.890275002 0.00490929 0.947535992 0.784695983 0.440715998 0.987417996 0.591036975 0.962526977 0.383771002 0.539039016 0.0933806971 0.968888998 0.548524976 0.054429099 0.312759995 0.953007996 0.550100982 0.685114026 0.162896007 0.287932009 0.807363987 0.445309013 0.0342379995 0.924603999 0.541334987 0.0410985015 0.314119011 0.902658999 0.388433993 0.376590014 0.446635991 0.278708994 0.381498992 0.394172013 0.0634050965 0.822215021 0.381590009 0.654442012 0.784741998 0.765361011 0.193480998 0.878122985 0.734250009 0.742006004 0.93255198 0.0470100008 0.695012987 0.482652992 0.732123971 0.857909024 0.770583987 0.539487004 0.303218007 0.804822028 0.464091986 0.844552994 0.84592098 0.778210998 0.747211993 0.234355003 0.154800996 0.193848997 0.513064027 0.536300004 0.58802098 0.576469004 0.358514994 0.969610989 0.230911002 0.143257007 0.734972 0.424392015 0.0213801991 0.469220996 0.166398004 0.953931987 0.516231 0.861410975 0.436585009 0.248355001 0.719319999 0.207169995 0.787841976 0.0225389004 0.011992 0.251933992 0.867092013 0.857913017 0.0301444009 0.614304006 0.0922679976 0.184945002 0.808152974 0.605332017 0.721244991 0.396174014 0.181802005 0.0797599033 0.365783989 0.412712991 0.223017007 0.100755997 0.837104976 0.244396999 0.569976985 0.0035027999 0.19833 0.0862087011 0.864914 0.634914994 0.334564 0.584235013 0.842083991 0.122405998 0.606773019 0.854076028 0.374339998 0.473865986 0.711988986 0.404484004 0.0881700963 0.804256976 0.589429021 0.896323025 0.409590006 0.310674012 0.292497009 0.591391027 0.390433997 0.658281028 0.00410436979 0.613451004 0.759037018 0.841208994 0.857847989 0.329014987 0.844712019 0.0561779998 0.415223002 0.709626019 0.691093028 0.749786973 0.293861002 0.533177018 0.872192979 0.900633991 0.387254 0.246533006 0.374500006 0.0992432013 0.65101701 0.462669998 0.903500974 0.240446001 0.358992994 0.313089997 0.551119983 0.651489973 0.904482007 0.941552997 0.309771001 0.908586025 0.555004001 0.0688085034 0.74979502 0.412851989 0.397823006 0.594507992 0.469029993 0.813046992 0.304134011 0.160123006 0.562834024 0.597994983 0.693300009 0.435027003 0.498629004 0.080554001 0.681559026 0.87312901 0.179796994 0.332576007 0.335799009 0.0832977965 0.573022008 0.694791973 0.396387994 0.124141 0.346282005 0.300870001 0.065694198 0.656053007 0.209455997 0.620697975 0.724861979 0.959250987 0.0335502997 0.122685 0.553758979 0.502581 0.935730994 0.85789299 0.662703991 0.498564988 0.45588699 0.356004 0.933591008 0.954515994 0.436558008 0.615150988 0.827645004 0.616355002 0.947726011 0.163443998 0.699653029 0.520748019 0.858235002 0.0960408971 0.644888997 0.204517007 0.396910995 0.710582972 0.860570014 0.606366992 0.33128199 0.585431993 0.565617979 0.364832014 0.708115995 0.119377002 0.867411971 0.643848002 0.977270007 0.530116022 0.142413005 0.433156997 0.886120021 0.0760039985 0.387672991 0.322676986 0.691155016 0.215317994 0.939032018 0.638881028 0.378762007 0.638684988 0.159629002 0.236998007 0.734726012 0.804517984 0.441514999 0.131637007 0.515102029 0.302085012 0.738004029 0.846382976 0.887516975 0.303622007 0.211215004 0.59563297 0.422998011 0.0786276013 0.239481002 0.400267988 0.608743012 0.381893009 0.833424985 0.494863003 0.457897007 0.221099004 0.81753999 0.149051994 0.436417013 0.756573021 0.787932992 0.81517899 0.395258009 0.947562993 0.0521767996 0.129984006 0.752080977 0.493692011 0.261620998 0.267183006 0.79577601 0.999625027 0.113565996 0.683292985 0.303245991 0.324781001 0.278926015 0.726244986 0.403409004 0.518406987 0.126513004 0.0121523002 0.900300026 0.95993799 0.50701499 0.358197987 0.181036994 0.324555993 0.507250011 0.617453992 0.0811287016 0.295183003 0.432633013 0.476386994 0.242744997 0.484809995 0.606370986 0.994826019 0.978501976 0.867992997 0.262008995 0.774277985 0.867617011 0.375575006 0.457571 0.170864001 0.70035702 0.736497998 0.897108972 0.103765003 0.254904002 0.0236219 0.115918003 0.155204996 0.983560026 0.622932971 0.513401985 0.164597005 0.947489023 0.0206518993 0.78205198 0.0286174994 0.315834999 0.214684993 0.505003989 0.558579981 0.699495018 0.111376002 0.553406 0.677996993 0.979367971 0.815415025 0.452275008 0.846985996 0.190990999 0.909846008 0.0178497992 0.891346991 0.646344006 0.914959013 0.995112002 0.901247978 0.93858099 0.111029997 0.0564530008 0.922141016 0.733963013 0.569854975 0.0867383033 0.681451976 0.590506971 0.868789971 0.710069001 0.90634203 0.0834748 0.215074003 0.464922011 0.782970011 0.32644999 0.0183281004 0.460967004 0.305817991 0.833742976 0.913241982 0.152804002 0.0247338992 0.82308799 0.170653999 0.916081011 0.469431996 0.0856124014 0.911193013 0.370680004 0.024193 0.0222234 0.427132994 0.946334004 0.756187022 0.996987998 0.0330720991 0.437638015 0.587495029 0.901862025 0.147707999 0.493836999 0.985337019 0.362782001 0.95875901 0.768306971 0.689230978 0.977087021 0.229273006 0.995049 0.810829997 0.142515004 0.147853002 0.835564017 0.965602994 0.318506986 0.751645029 0.435034007 0.404119015 0.662838995 0.805714011 0.428312004 0.685061991 0.232847005 0.374646008 0.441248 0.229835004 0.407718003 0.878886998 0.817330003 0.309579998 0.0265947003 0.311167002 0.294916987 0.389376014 0.269926012 0.0632231012 0.0786074027 0.247013003 0.292495996 0.0736564994 0.0578433014 0.435010999 0.221508995 0.893408 0.400613993 0.540015996 0.645053029 0.835648 0.94413501 0.307891011 0.641362011 0.372447014 0.992953002 0.874207973 0.747093022 0.434201986 0.104042999 0.154810995 0.313089013 0.92137301 0.464390993 0.339682996 0.232539997 0.759307981 0.729058981 0.502466023 0.822530985 0.807667017 0.749478996 0.115027003 0.88132298 0.807322979 0.55003798 0.102833003 0.700730026 0.95065099 0.642849028 0.345782995 0.78629899 0.586983979 0.653674006 0.427661002 0.959432006 0.646627009 0.301869005 0.706525028 0.0808288977 0.405912012 0.861335993 0.393916994 0.327284992 0.325726986 0.733600974 0.559825003 0.0850344971 0.462660015 0.0622913986 0.907564998 0.270327002 0.811770976 0.0225920994 0.151649997 0.619093001 0.572629988 0.254483014 0.319822997 0.523280978 0.897332013 0.665606022 0.309581012 0.484315991 0.319279999 0.73724103 0.443747014 0.965907991 0.0391101018 0.150271997 0.0467365012 0.445021987 0.0116079999 0.44065401 0.772306979 0.337334991 0.174254 0.332132012 0.422369003 0.636914015 0.394423991 0.329935014 0.907240987 0.206193998 0.352526993 0.0588913001 0.825287998 0.925157011 0.313374013 0.145110995 0.448437989 0.210705996 0.810716987 0.75801897 0.695021987 0.129997998 0.49526 0.138769001 0.0959054977 0.534370005 0.289041013 0.142642006 0.979391992 0.300648987 0.583296001 0.751698971 0.637983978 0.757550001 0.0838309973 0.0603533983 0.394464999 0.47825399 0.390287995 0.301705986 0.684449017 0.742815018 0.360597014 0.509736001 0.667971015 0.673972011 0.654847026 0.116410002 0.884676993 0.465564996 0.874427974 0.57969898 0.595561981 0.369688004 0.71846801 0.691468 0.90405798 0.00750896009 0.834110022 0.883449972 0.30815801 0.417405993 0.635149002 0.946142018 0.174955994 0.718980014 0.00649531977 0.569420993 0.197235003 0.396782994 0.871127009 0.881684005 0.139597997 0.231723994 0.391420007 0.807569027 0.905695975 0.0462668985 0.923978984 0.790373027 0.511830986 0.798407018 0.370072007 0.107394002 0.168096006 0.0885401964 0.79886198 0.0721542016 0.0960491002 0.632970989 0.95560497 0.404206991 0.0503770001 0.590753973 0.350349009 0.225333005 0.309733987 0.356844008 0.794754028 0.506968975 0.753628016 0.665880978 0.38865301 0.893226027 0.897605002 0.780071974 0.700794995 0.803300977 0.826339006 0.624773979 0.593675017 0.338171005 0.423182011 0.963747025 0.445564002 0.591277003 0.0522871017 0.244425997 0.663432002 0.148335993 0.877397001 0.619036019 0.552542984 0.927774012 0.209790006 0.902891994 0.153107002 0.519523978 0.259737015 0.947861016 0.0264935996 0.0133645004 0.613741994 0.415145993 0.906589985 0.511346996 0.195217997 0.60738498 0.314648986 0.0215576999 0.232159004 0.90832299 0.359728009 0.655341029 0.872070014 0.805293024 0.246618003 0.924356997 0.0497188009 0.910049975 0.0726936981 0.927115977 0.529085994 0.625236988 0.854889989 0.738875985 0.528129995 0.00799768046 0.258401006 0.787865996 0.955859005 0.28489399 0.801231027 0.569600999 0.700040996 0.707821012 0.0809481964 0.895259023 0.315205991 0.395597011 0.916817009 0.547366023 0.303920001 0.276544988 0.202706993 0.175990999 0.0818378031 0.449324995 0.100348003 0.131557003 0.359375 0.173041999 0.0586728007 0.888460994 0.798278987 0.913563013 0.627337992 0.326407999 0.921561003 0.885739028 0.114275001 0.877420008 0.170633003 0.915506005 0.447021008 0.870674014 0.623327017 0.527969003 0.765932977 0.938533008 0.923565984 0.682748973 0.485899001 0.227485999 0.959294021 0.688606024 0.403477013 0.0411320999 0.137931004 0.503825009 0.172689006 0.497307003 0.676865995 0.231361002 0.385767996 0.475145012 0.144924998 0.0131059997 0.801554024 0.0664855987 0.898845017 0.91582799 0.943904996 0.0694776997 0.831333995 0.390926003 0.940150976 0.454661012 0.918895006 0.706084013 0.39319399 0.842459977 0.388832986 0.879094005 0.0699461997 0.348127007 0.567700028 0.473423004 0.389259011 0.705631018 0.977247 0.561948001 0.202938005 0.654114008 0.793309987 0.588706017 0.129259005 0.938233972 0.601812005 0.930813015 0.00471981987 0.500657022 0.846641004 0.948625028 0.570133984 0.677976012 0.339551002 0.510285974 0.132636994 0.258444995 0.216370001 0.525830984 0.100906 0.605202973 0.404924005 0.170852005 0.95332998 0.972624004 0.64427501 0.342588991 0.678255022 0.621522009 0.904537022 0.881192982 0.275635988 0.697847009 0.469898999 0.404895008 0.63608098 0.0717113018 0.335707992 0.640801013 0.572368026 0.182348996 0.589425981 0.142501995 0.860324979 0.928977013 0.652787983 0.992960989 0.187423006 0.86915803 0.518791974 0.288327992 0.474359989 0.923716009 0.459179997 0.427689999 0.896340013 0.103455 0.770280004 0.574595988 0.724977016 0.674817026 0.455789 0.000612734992 0.372664005 0.925688028 0.405508012 0.00874562003 0.997399986 0.741216004 0.649546981 0.569768012 0.92356497 0.238973007 0.712270021 0.783890009 0.167950004 0.365058005 0.776850998 0.355372995 0.234216005 0.295643002 0.643701017 0.708576024 0.219359994 0.102880999 0.136265993 0.115699999 0.206336007 0.906545997 0.690295994 0.931312978 0.581363022 0.146084994 0.931926012 0.95402801 0.0717732012 0.33743301 0.962773025 0.0691727027 0.0786492005 0.612320006 0.638939977 0.00221436005 0.851293027 0.351209998 0.786104023 0.0192431007 0.716268003 0.562955976 0.374615997 0.950483978 0.858599007 0.0183169991 0.659060001 0.0779590979 0.121197999 0.795325994 0.193660006 0.32753399 0.701871991 0.883956015 0.258846998 0.283235013 0.0300407 0.190772995 0.237262994 0.101814002 0.528205991 0.200036004 0.170986995 0.606854975 0.812355995 0.809926987 0.609070003 0.663649023 0.161137 0.395173997 0.682892025 0.877404988 0.958130002 0.0575078987 0.827889025 0.816729009 0.0758247972 0.486948997 0.89468801 0.197023004 0.282274991 0.0883475989 0.524556994 0.984147012 0.972302973 0.783405006 0.267381996 0.00234391005 0.974177003 0.50464499 0.104157999 0.502382994 0.704680979 0.275144011 0.109238997 0.517036974 0.0850709975 0.718308985 0.180685997 0.246207997 0.113482997 0.863578022 0.123613 0.0716124997 0.921086013 0.951502025 0.88834101 0.996910989 0.438450992 0.78302902 0.193933994 0.720725 0.871376991 0.718491018 0.704873025 0.843680024 0.501896024 0.972254992 0.846023977 0.476072997 0.476900011 0.950182021 0.978456974 0.181582004 0.225326002 0.0876955017 0.698619008 0.310396999 0.806003988 0.879306018 0.556604981 0.919487 0.74288398 0.680217981 0.991099 0.663969994 0.631720006 0.879441023 0.660880983 0.0701700971 0.662469983 0.854815006 0.790895998 0.533846974 0.573306978 0.495768011 0.377528012 0.0752025023 0.468023002 0.223552004 0.551276028 0.944922984 0.173733994 0.529731989 0.126505002 0.399060011 0.617428005 0.825124025 0.70945698 0.423431993 0.704429984 0.266061991 0.342918992 0.447313994 0.946280003 0.334017992 0.111284003 0.577998996 0.213459 0.772165 0.648168981 0.875928998 0.626980007 0.439065009 0.409776002 0.200286001 0.93483299 0.787303984 0.275489002 0.402855992 0.0108556999 0.826763988 0.347779006 0.184588999 0.35649699 0.474285007 0.58364898 0.973924994 0.299409002 0.29310599 0.397356987 0.00383896008 0.559167981 0.740275025 0.45115301 0.505447984 0.0742935017 0.562435985 0.0834472999 0.287752002 0.334601015 0.731616974 0.163681999 0.961580992 0.170681998 0.573458016 0.161866993 0.105515003 0.360762 0.437355995 0.508370996 0.371618003 0.264120996 0.856149971 0.556207001 0.620616972 0.330435008 0.139855996 0.594542027 0.62984401 0.432962 0.991899014 0.633683026 0.992129982 0.732173979 0.0848354995 0.497577995 0.806466997 0.647271991 0.581026018 0.0942199007 0.981872976 0.312642008 0.257901996 0.943454027 0.483323991 0.831359982 0.105320998 0.588838995 0.192121997 0.542676985 0.0972094983 0.563739002 0.806797981 0.953360021 0.119946003 0.427415013 0.283794999 0.259802014 0.0219573006 0.913637996 0.692764997 0.0138558997 0.547321022 0.684894979 0.746029973 0.632157028 0.182473004 0.552497029 0.279428989 0.763499022 0.646717012 0.261301994 0.0761412978 0.904618979 0.204756007 0.559464991 0.735978007 0.310077012 0.148304 0.92809999 0.85275501 0.245514005 0.491838992 0.659552991 0.198872998 0.611784995 0.0869679973 0.482668012 0.871587992 0.108925 0.396306008 0.564351976 0.122781001 0.943628013 0.249247 0.868811011 0.575784981 0.431721002 0.421308011 0.855212986 0.195219994 0.0680254996 0.116515003 0.271360993 0.972643971 0.321271002 0.830825984 0.708622992 0.631349027 0.979130983 0.636722028 0.484104007 0.224644005 0.128562003 0.143656 0.423518002 0.740347028 0.230624005 0.906185985 0.611935019 0.339549989 0.302491993 0.176286995 0.462330997 0.246120006 0.42553401 0.331142008 0.821904004 0.857254982 0.752449989 0.677118003 0.0524746999 0.820475996 0.793632984 0.323835999 0.793120027 0.114905 0.154661998 0.501742005 0.746253014 0.133792996 0.138465002 0.230357006 0.358437002 0.267026007 0.37401399 0.78195399 0.0073731998 0.60463798 0.688139975 0.619307995 0.944187999 0.990631998 0.79559499 0.406518996 0.236751005 0.221129 0.737659991 0.0586557984 0.0783839002 0.49011001 0.735773981 0.130859002 0.310586005 0.529407024 0.454694003 0.103706002 0.644311011 0.609356999 0.605448008 0.390565008 0.743148983 0.743912995 0.620922029 0.101585999 0.0109393997 0.994935989 0.883539975 0.0183125995 0.599574029 0.571680009 0.637619972 0.543761015 0.562312007 0.433214992 0.950280011 0.799063981 0.654344022 0.687940001 0.857719004 0.732728004 0.178050995 0.593492985 0.863586009 0.488635987 0.122900002 0.318280995 0.592342019 0.76721102 0.927636981 0.197790995 0.157775998 0.670786977 0.941703975 0.778698027 0.772373021 0.952642977 0.773633003 0.655912995 0.970956028 0.373207003 0.227593005 0.608576 0.916967988 0.789905012 0.0417911001 0.867247999 0.588968992 0.696134984 0.555188 0.446687996 0.428862989 0.733237982 0.0401809998 0.292448997 0.221874997 0.163081005 0.610729992 0.814216971 0.930290997 0.538366973 0.0120077999 0.0880670026 0.209153995 0.953710973 0.866765022 0.981526971 0.90635401 0.640398026 0.637440026 0.877309978 0.0136046 0.865032971 0.485886008 0.930572987 0.654938996 0.527677 0.797819972 0.243908003 0.223811999 0.353008002 0.690595984 0.652674973 0.0862466991 0.730777025 0.945124984 0.308122009 0.893857002 0.555854976 0.122339003 0.824149013 0.0942220986 0.134347007 0.912216008 0.303375989 0.088057898 0.77898097 0.28490299 0.994412005 0.419378012 0.922343016 0.871722996 0.432983011 0.787375987 0.357609004 0.363555998 0.442315012 0.885285974 0.161375999 0.68622297 0.109099001 0.514383972 0.376819015 0.761774004 0.600630999 0.107594997 0.706898987 0.908752978 0.00145291002 0.26275301 0.0310916007 0.825601995 0.356974989 0.165437996 0.737818003 0.660351992 0.253495991 0.516798019 0.945254982 0.247907996 0.936177015 0.867597997 0.119631 0.369159997 0.654973984 0.477239996 0.732715011 0.0972890034 0.362526 0.894092023 0.783511996 0.471625 0.408475995 0.160329998 0.233399004 0.00910731964 0.267926008 0.940298021 0.917859972 0.26937899 0.203051999 0.948952019 0.0949803963 0.560027003 0.114390001 0.832798004 0.220378995 0.367886007 0.349595994 0.165634006 0.615794003 0.285773009 0.0332312994 0.735424995 0.654932976 0.688205004 0.212665007 0.387647986 0.78549403 0.575191975 0.28174001 0.569006026 0.0468169004 0.690216005 0.729336023 0.280216008 0.699322999 0.997262001 0.220514998 0.61718303 0.266640991 0.423566014 0.566134989 0.361620992 0.983592987 0.680525005 0.194418997 0.203971997 0.0484105013 0.54401499 0.369605988 0.664205015 0.829788029 0.402837008 0.39963001 0.484721005 0.0910425037 0.612294972 0.872368991 0.876537025 0.187487006 0.154109001 0.445542991 0.234303996 0.844323993 0.174879 0.514519989 0.543648005 0.172141001 0.735035002 0.160831004 0.438782007 0.158601001 0.726966023 0.800402999 0.142194003 0.407490999 0.994822025 0.346166998 0.455900997 0.538837016 0.715772986 0.120105997 0.368624985 0.118610002 0.519735992 0.853344977 0.209652007 0.132030994 0.725714028 0.0861890987 0.319518 0.879823029 0.531732023 0.553821981 0.724147022 0.706610978 0.0683422014 0.267794997 0.878751993 0.803376973 0.428626001 0.317532986 0.961978018 0.155591995 0.117936 0.104172997 0.56308198 0.112758003 0.450338989 0.0189836994 0.651593983 0.166112006 0.139090002 0.0202188995 0.284722 0.658825994 0.873564005 0.494374007 0.790857017 0.599277973 0.580563009 0.110375002 0.479101002 0.112295002 0.664197028 0.203247994 0.818906009 0.732538998 0.471042991 0.697658002 0.535916984 0.899667978 0.0151914004 0.497895002 0.0552602001 0.133128002 0.602066994 0.618342996 0.245885 0.052406501 0.637326002 0.897478998 0.218518004 0.776416004 0.917698026 0.503239989 0.435241997 0.791262984 0.99761498 0.226098999 0.390540987 0.578177989 0.336474001 0.869642019 0.69047302 0.000671559013 0.0728897974 0.509379029 0.733210981 0.543932021 0.207037002 0.269127995 0.443601012 0.222228006 0.767022014 0.498861015 0.355356008 0.369089007 0.117204003 0.601240993 0.421496004 0.754530013 0.49871999 0.640013993 0.53094703 0.416418999 0.143253997 0.966188014 0.207681 0.140869007 0.192287996 0.598222017 0.71904701 0.528761983 0.467864007 0.40952 0.529433012 0.54075402 0.918899 0.262643993 0.0846861005 0.125936002 0.531772017 0.528286994 0.348163992 0.298794001 0.0271483008 0.70352 0.667882979 0.144352004 0.304760993 0.0893787965 0.898882985 0.803480983 0.729393005 0.429829001 0.219899997 0.872646987 0.396017998 0.427581012 0.0135164 0.588304996 0.0258026998 0.732563019 0.117067002 0.493665993 0.142083004 0.646499991 0.0344199985 0.0609815009 0.909144998 0.119106002 0.186917007 0.440916985 0.647392988 0.535081029 0.739710987 0.674540997 0.238600999 0.407593995 0.818894029 0.543362021 0.496973008 0.717776 0.346843004 0.226365998 0.147605002 0.566742003 0.0990128964 0.543622971 0.994323015 0.112529002 0.131927997 0.0201255996 0.845091999 0.248995006 0.513791978 0.987174988 0.895494998 0.548211992 0.0481568016 0.804639995 0.667317986 0.235073999 0.245556995 0.314711004 0.770155013 0.985267997 0.989252985 0.00875579007 0.392861009 0.808146 0.55211699 0.889833987 0.525922 0.898959994 0.1162 0.673528016 0.465701997 0.215213001 0.217150003 0.460025012 0.32774201 0.349079013 0.480150998 0.172833994 0.598074019 0.993942976 0.160009995 0.493568987 0.542155027 0.208166003 0.298209012 0.209472999 0.443239987 0.543766022 0.524183989 0.213395 0.529034019 0.513436973 0.222150996 0.921895027 0.321583003 0.774267972 0.811729014 0.847504973 0.673228979 0.927928984 0.521032989 0.138931006 0.143141001 0.738183022 0.598955989 0.470883012 0.0872616023 0.0791067034 0.643718004 0.68533498 0.0730493963 0.803726971 0.178904995 0.615203977 0.0118938005 0.477113992 0.824676991 0.455134004 0.0208803006 0.348861009 0.668528974 0.549914002 0.862298012 0.890681028 0.471809 0.183881 0.664949 0.283538997 0.0313855 0.338178009 0.211467996 0.552417994 0.477108002 0.354609013 0.290600985 0.0760641024 0.825492978 0.37786299 0.155171007 0.469209999 0.0631979033 0.228220001 0.272938013 0.242101997 0.843424022 0.284830987 0.719215989 0.668102026 0.739965022 0.740096986 0.0169628002 0.408495009 0.290010989 0.879261017 0.299174994 0.761820018 0.0631411001 0.964124024 0.0453590006 0.0945265964 0.302302003 0.256826997 0.646945 0.779410005 0.611436009 0.937546015 0.855473995 0.436928004 0.315407991 0.0106450999 0.906139016 0.378605992 0.238865003 0.179076001 0.620707989 0.0822898 0.463907003 0.339924991 0.750391006 0.203872994 0.0800212994 0.767354012 0.612367988 0.370032012 0.646615028 0.911543012 0.131852001 0.709756017 0.875666976 0.177211002 0.80428201 0.177968994 0.434038013 0.451227009 0.957379997 0.0454736985 0.388772994 0.812853992 0.482401997 0.704181015 0.823499024 0.388541013 0.0827867016 0.0623641983 0.567616999 0.703495026 0.144654006 0.0315239988 0.0434198007 0.895044982 0.235396996 0.123441003 0.662400007 0.847764015 0.493472993 0.309013993 0.759307027 0.625325024 0.0187701993 0.634975016 0.802537024 0.823053002 0.812943995 0.236573994 0.274280012 0.770323992 0.282047987 0.663052022 0.583177984 0.764450014 0.367233008 0.406675994 0.152990997 0.450019985 0.46904099 0.720606983 0.153514996 0.613695025 0.752130985 0.196934998 0.508740008 0.987528026 0.320376009 0.171139002 0.835291982 0.813848972 0.480154008 0.594600022 0.439173996 0.498923987 0.229574993 0.241711006 0.32197699 0.0425187983 0.478285015 0.596256018 0.812843025 0.760334015 0.259308994 0.396019995 0.524784029 0.626541972 0.802697003 0.677775025 0.0765616 0.271737009 0.398382008 0.230076 0.885432005 0.150512993 0.427011013 0.394172013 0.138041005 0.747386992 0.565311015 0.973334014 0.561236024 0.0454647988 0.567933977 0.000409795 0.544389009 0.797508001 0.242120996 0.866366029 0.840026975 0.720405996 0.462621987 0.652869999 0.480740011 0.721930981 0.0488895997 0.00552337011 0.348473012 0.851585984 0.683297992 0.425033987 0.123323001 0.081679903 0.655111015 0.00875512045 0.232192993 0.0821217 0.402927011 0.370234996 0.829508007 0.968237996 0.343567997 0.390744001 0.0137026003 0.911502004 0.391153991 0.558090985 0.709010005 0.633274019 0.424457014 0.54903698 0.353680015 0.887079 0.201906994 0.834420025 0.609009981 0.25079599 0.839942992 0.957482994 0.102381997 0.523240983 0.38251701 0.225705996 0.604920983 0.0376277007 0.234460995 0.837113976 0.119749002 0.637387991 0.207349002 0.949258029 0.605624974 0.550917029 0.340002 0.619328022 0.462419003 0.731155992 0.177420005 0.171428993 0.36443001 0.601876974 0.720466018 0.718110025 0.488956004 0.922372997 0.552529991 0.0979655012 0.173169002 0.392473996 0.0554482006 0.275550991 0.915714979 0.437965006 0.501257002 0.520636022 0.475593001 0.735718012 0.357751012 0.59534198 0.373106003 0.565100014 0.54460001 0.978730977 0.116016999 0.88460201 0.598058999 0.578436017 0.615756989 0.775479019 0.749866009 0.980186999 0.377355009 0.470331997 0.698297977 0.866311014 0.392704993 0.250827998 0.964276016 0.565873981 0.643302023 0.0197247006 0.841425002 0.559017003 0.457690001 0.342682004 0.0796535984 0.933282971 0.078400299 0.43740499 0.528625011 0.451505989 0.00250448007 0.073224999 0.430236995 0.118522003 0.957826972 0.0282963999 0.696958005 0.57358402 0.803775012 0.446824014 0.553771019 0.181131005 0.917155981 0.252068996 0.0474415012 0.309861004 0.502897024 0.0117180003 0.875734985 0.146199003 0.0314427018 0.717159986 0.705215991 0.489133 0.0598421991 0.784870028 0.422414988 0.138243005 0.222275004 0.95104003 0.589748979 0.224778995 0.0242650993 0.0199858006 0.343300998 0.982092023 0.0482821018 0.0402589999 0.555675983 0.85205698 0.487082988 0.109448001 0.0331878997 0.404238999 0.361517012 0.0806294009 0.714100003 0.864413977 0.0923473984 0.589834988 0.0106130997 0.123790003 0.306995004 0.715829015 0.612923026 0.366836995 0.500698984 0.0353377014 0.505078971 0.722974002 0.986378014 0.0948280022 0.947753012 0.0106429998 0.114813998 0.29105401 0.992735028 0.163095996 0.331313014 0.548411012 0.0151532004 0.818395972 0.657859027 0.0483409986 0.222635001 0.0193755999 0.128969997 0.936734974 0.883790016 0.221318007 0.526569009 0.894402981 0.345108002 0.833563983 0.610231996 0.958029985 0.200400993 0.110932 0.99336803 0.70547998 0.833905995 0.979745984 0.800307989 0.781657994 0.990388989 0.915121973 0.072712101 0.983124018 0.0782177001 0.404024988 0.531535029 0.0933708027 0.222420007 0.189393997 0.141711995 0.445055008 0.208770007 0.270682007 0.381790012 0.0925592035 0.492000014 0.908358991 0.98696202 0.837108016 0.741922975 0.597194016 0.795138001 0.942323983 0.708126009 0.788505971 0.647804022 0.54203099 0.768252015 0.448112011 0.323689997 0.758641005 0.363234013 0.396402001 0.741765022 0.441451013 0.80042702 0.273299992 0.534821987 0.0228470992 0.462693989 0.676533997 0.467902005 0.671464026 0.947215974 0.849691987 0.764023006 0.439215988 0.758050978 0.750985026 0.276324004 0.499974012 0.348179013 0.0714624003 0.442297012 0.0563049987 0.85996902 0.0901011005 0.598336995 0.628220975 0.538213015 0.922025979 0.38686201 0.901446998 0.318428993 0.128627002 0.342898011 0.118855 0.401928008 0.877719998 0.141701996 0.864621997 0.554255009 0.609604001 0.53608501 0.501470983 0.459295988 0.300107986 0.940687001 0.217346996 0.0510929003 0.217012003 0.717320025 0.399271995 0.288473994 0.159618005 0.455576986 0.148442999 0.249718994 0.0539136007 0.776664019 0.787931979 0.975939989 0.163525999 0.689378023 0.294369012 0.292153001 0.0322766006 0.413224012 0.694081008 0.909996986 0.554925978 0.558701992 0.464251995 0.164531007 0.094787702 0.965722978 0.623826981 0.394896001 0.906409979 0.841172993 0.445989013 0.123421997 0.558493972 0.845260978 0.41189599 0.718110979 0.300837994 0.56033802 0.967830002 0.354750991 0.337002009 0.755761027 0.33069101 0.500527978 0.445140004 0.625060022 0.792680979 0.477416009 0.0382836983 0.486761987 0.387412995 0.593209982 0.045463901 0.85166502 0.757740021 0.140251994 0.817387998 0.381567001 0.535147011 0.723797977 0.222739995 0.981136024 0.84721899 0.781234026 0.826397002 0.25911501 0.499345005 0.127234995 0.819453001 0.467175007 0.481985986 0.156454995 0.222936004 0.812677026 0.656982005 0.668075979 0.437736988 0.449663013 0.145492002 0.476020992 0.936424971 0.532904983 0.0692308992 0.981889009 0.384570003 0.826970994 0.122139998 0.201958001 0.208537996 0.657288015 0.925755978 0.431279004 0.638423979 0.772975028 0.212513 0.464819998 0.0320900008 0.711857021 0.592055023 0.851543009 0.179031998 0.0740410015 0.00799787976 0.401968002 0.886717975 0.664979994 0.0700438991 0.324456006 0.114643998 0.215535998 0.800477028 0.0510682985 0.748440981 0.869708002 0.0329568982 0.133011997 0.696678996 0.155096993 0.334969997 0.905216992 0.812385023 0.260726005 0.336495996 0.450807989 0.0337007008 0.549008012 0.915629029 0.0657906979 0.260865986 0.507683992 0.91733402 0.439898014 0.581725001 0.92533201 0.841866016 0.468443006 0.590312004 0.911909997 0.792899013 0.704954982 0.127445996 0.593375027 0.756024003 0.875886977 0.463082999 0.78898102 0.00889910012 0.159761995 0.944078028 0.343869001 0.0649786964 0.756462991 0.604595006 0.401475012 0.207270995 0.638294995 0.950483024 0.122900002 0.704086006 0.211348996 0.630582988 0.621420026 0.651247025 0.212308004 0.546751022 0.493113011 0.680751026 0.137062997 0.405023009 0.473650008 0.842019022 0.532468975 0.0670249984 0.598042011 0.408356011 0.530107975 0.387023002 0.417255014 0.689868987 0.331101 0.761124015 0.754848003 0.0875632986 0.365718991 0.156323001 0.294833988 0.00401392998 0.106804997 0.417733997 0.708100021 0.318154007 0.0483171009 0.329519987 0.969401002 0.260625005 0.876271009 0.462513 0.941375971 0.0133338002 0.867536008 0.415026009 0.855351985 0.400005013 0.482051015 0.453395009 0.808360994 0.0121587999 0.840417981 0.225615993 0.702027977 0.171517998 0.986739993 0.45687601 0.25908199 0.352459013 0.613198996 0.553915977 0.356472999 0.720004022 0.971650004 0.0645724982 0.0381584018 0.0199666992 0.394091994 0.00755904987 0.280591995 0.270363003 0.470072001 0.221967995 0.283697009 0.33760801 0.636994004 0.139048994 0.737613022 0.119044997 0.592444003 0.545974016 0.131203994 0.432861 0.771589994 0.833231986 0.604380012 0.758329988 0.290109009 0.863461018 0.110788003 0.903307021 0.417376995 0.467260987 0.623311996 0.389026999 0.531834006 0.661469996 0.408993989 0.92592603 0.669028997 0.689585984 0.196288005 0.139101997 0.911553979 0.479984999 0.476709992 		%read{213,213} %write{2147483647,-1}
const	int[4096]	$const40	4010 3071 3902 1718 115 2901 1534 1064 604 2775 2174 655 1493 3178 1103 280 3488 23 3918 3030 2462 3951 1527 184 3396 1755 2675 3367 2993 1165 3924 4073 2213 1489 1491 2654 2872 1822 3681 1761 2704 2134 2193 502 1598 2299 2501 2446 1398 2845 2385 3170 2093 2459 3677 1973 3622 140 3765 3974 2231 1249 1804 3211 1949 3501 1295 3195 1237 2535 3023 859 3005 1465 1644 2423 2999 2025 3693 3318 3148 997 645 1190 2894 2128 3164 1759 990 1038 731 2526 1537 2210 1362 76 685 3576 1325 3944 3635 2592 2534 3800 968 1178 1486 73 17 4011 1044 3759 2906 3982 2411 2616 3073 4013 2532 1252 459 1713 1130 1515 1155 3105 377 1426 2771 3602 2320 1360 2165 3975 2051 2425 722 715 634 2044 2053 469 328 2256 1878 823 2726 1946 2508 828 2866 3750 1555 2080 3568 1467 1824 2557 2961 1752 150 559 170 1566 2745 1933 3565 3469 2665 466 2913 2731 4023 4066 2387 2179 3051 3858 1094 1696 1846 3200 1732 1214 4042 2873 3852 334 282 3097 2358 1917 2722 777 1647 1639 1981 2035 168 3 3031 1469 1475 3814 1215 1806 3438 448 835 1386 2930 3705 3490 2353 2811 3397 527 2955 2687 3523 2887 2300 2911 2987 3746 3238 490 2454 3432 1584 2634 1962 2769 3868 623 3994 2104 4037 2739 3752 3392 149 1192 2377 1197 2010 3327 1077 1404 965 376 894 3448 419 2916 2575 684 2308 2266 1569 611 3459 3317 2243 2027 3057 1414 3153 681 3708 2812 505 958 2926 1174 3249 426 2676 865 3537 2221 2319 3658 3033 1798 2235 2178 1576 1565 1832 964 2610 1690 2818 2200 116 2551 3710 1172 3962 633 1948 1133 2386 1241 3825 2058 3668 2263 2965 400 2113 2348 3599 2171 1517 1708 102 988 3224 2507 3846 1060 2500 3743 1766 1313 3531 2486 3122 2355 1988 1354 1167 888 1346 56 375 3984 1934 1101 1186 2273 1411 1055 1196 341 192 4035 829 1506 1596 2521 3662 1123 3615 1796 1222 1967 338 105 1159 2962 3847 1302 3326 296 644 1523 2249 240 2169 1773 3797 3177 555 3654 4006 1177 3679 1900 3616 3343 175 494 927 480 2857 3284 3194 939 3817 2672 272 1799 1227 1862 2110 1872 3225 3581 3694 2596 3016 1384 3323 3923 1582 82 1896 3810 3237 2228 3257 3160 3332 819 2874 163 3536 1960 875 641 1654 1204 4091 1285 2122 1397 3351 2601 3555 2120 3337 2107 197 3181 961 1474 241 3163 1016 2020 2620 108 2903 1121 2939 1107 3936 3115 2347 1028 86 2040 2997 593 226 3272 901 3015 2372 3277 2275 2255 2710 2400 3829 2748 2219 2130 128 3244 3945 3075 1736 631 2072 3805 3613 3841 541 2951 1074 2707 189 2121 1437 3029 739 673 2185 1136 2518 3799 3646 474 2499 146 2512 3229 3973 2013 3011 83 2765 1942 3424 3737 4 1052 3692 1757 940 3621 1758 903 2964 3771 2340 3818 3006 2980 4032 2212 1536 3769 754 220 439 3612 3893 1586 1369 3808 483 3473 3226 3663 3134 1557 2613 535 271 1134 3186 2131 2956 2369 1212 1790 1418 444 3625 2450 2815 252 2706 1571 805 297 3588 497 2555 3287 2641 1711 726 3431 692 1334 3339 2553 1826 3038 1589 4007 2202 603 1007 2248 565 1343 1232 2276 2084 34 1340 1224 1435 2796 2144 157 2772 3680 2844 1593 2880 1416 232 1444 2509 4025 3391 1018 962 3157 3095 736 2286 4001 3848 854 1068 2792 1011 713 1914 3942 1175 3529 3413 1141 2318 340 771 2984 2608 3836 3271 254 6 257 3299 3607 3670 687 1129 3428 1833 2824 772 161 2893 410 705 1507 2253 1993 804 3217 3907 124 2498 1831 1530 2696 3056 3932 2216 2018 3926 1600 463 440 2471 3492 2858 2236 1446 431 1680 3104 845 2191 4031 944 2938 2389 3198 2571 1870 3239 820 2705 3908 578 3690 3426 2048 144 3227 2569 1280 1579 3052 2002 2005 42 2305 957 3791 15 3374 2096 1339 2985 3861 1817 70 1573 708 1570 3772 3232 2545 1512 1568 3152 1612 2838 3495 1748 3508 3713 2428 2773 9 751 2609 77 2011 1070 4062 2750 1986 3634 2554 2077 53 3202 231 476 3509 635 389 3439 1844 222 3744 3839 2360 1069 3411 468 1529 2734 3313 686 556 1883 2442 2816 3363 580 2487 3410 18 1658 1261 4084 3185 2038 91 2561 627 174 1574 1388 4020 1481 1526 1541 3571 424 2393 302 3121 2814 3514 880 2979 388 3992 1978 3779 2559 1522 2701 2673 602 249 2989 519 3507 3486 4094 1972 4076 325 1808 1042 646 3010 638 693 4002 3865 1811 1468 135 3260 727 4074 674 1076 1937 2247 2343 1979 1504 2991 2208 661 3970 1488 2220 2426 1194 1876 1865 4015 4012 3436 1452 2907 666 978 1113 3456 3761 2280 2158 2936 3234 2761 668 2695 63 3897 1104 2172 1788 404 1372 788 2950 2378 1310 2009 3414 1769 3283 100 1618 1286 2691 1347 1381 1508 1723 612 3463 3368 2129 665 2070 138 1560 13 2270 3796 2277 2935 513 239 3474 2367 3768 3417 2371 3390 3532 1427 564 1963 2835 2527 290 1002 326 3447 93 40 3586 1084 3007 735 55 2827 2564 1350 3302 1797 2092 3527 969 1301 3596 2260 3922 3143 2227 1356 1202 270 1377 1454 2344 1109 3626 295 3809 3981 2855 782 2589 959 2793 1019 744 936 2097 2304 2599 3515 904 2716 2230 2605 3216 1945 1436 1987 2597 113 3280 1875 3147 642 1188 3980 2225 4070 2074 1866 1116 3449 2430 2579 851 1720 783 2483 2103 2801 3068 787 1494 2714 688 1409 3786 3014 724 3161 3437 1793 3623 919 640 2717 599 2278 2593 1063 1401 948 1665 371 3025 3731 2496 2445 3655 43 2822 3415 1901 551 2681 367 529 881 4024 3678 1730 396 4046 3493 3441 1601 2578 2828 3977 852 2990 1776 1047 472 218 1423 3295 1737 3755 2433 1765 818 3304 778 2106 669 347 461 1852 2127 74 554 2958 265 2373 235 2482 1124 3419 3320 3018 3416 2721 2934 3364 101 2059 2493 187 626 2751 213 2467 795 3087 632 2091 3551 2737 1787 3286 3175 3485 2587 1682 2350 3464 1037 3656 3904 553 779 2558 3591 4009 615 2660 570 2618 4079 1333 2679 2693 2802 2580 1296 3604 478 2854 2331 2474 824 246 2949 2456 729 2889 2786 3931 816 1551 3228 1378 1635 3298 1704 3569 2250 2206 3832 1807 3080 1902 2658 1088 2645 707 2503 3819 2680 1895 3285 677 1562 3892 3762 2226 50 1673 1610 275 3345 3627 2141 3742 3251 16 2797 3314 2124 3943 3712 3618 178 3265 3688 703 2723 2888 99 914 890 3706 860 3590 979 2849 3733 3489 2570 2590 1498 1738 3476 913 3702 1451 2408 47 740 1783 1415 2293 3103 662 1662 4028 1399 1577 709 2448 58 2135 1375 3562 2628 1923 3661 415 2342 566 3250 2760 911 601 967 172 1281 2082 2788 1138 2833 3561 3915 4053 44 1941 2422 3372 524 1725 2429 1849 1531 776 1421 3530 1269 3060 1563 3760 2406 2566 3092 2617 780 198 1277 3888 889 1580 2054 2041 110 989 162 2321 3792 3450 2457 2733 3155 418 838 421 1209 2163 1785 2069 1539 3502 3373 1630 925 945 1983 3961 577 2394 3406 2475 1525 2752 2821 2604 2380 2747 2388 872 188 3828 2978 2631 491 185 2542 1660 792 1839 3446 1448 562 2877 369 52 4030 3519 3162 1970 3963 1148 1638 2322 193 451 2823 3460 3281 1492 1689 3106 3999 1080 1653 587 710 3903 1999 3279 2749 305 3505 522 984 1843 1166 1944 1218 399 3203 3884 2034 2897 545 4081 3427 4064 3898 3526 416 1456 1484 3781 379 3241 3478 2290 3675 621 402 521 3719 719 712 870 3108 3826 1169 980 2218 3378 3361 2292 2444 2424 3650 3173 2505 3064 1590 2330 866 1176 3201 3835 3293 420 3947 862 1341 3403 2441 1540 2963 1326 1097 516 2257 286 3311 3117 2067 2264 2642 2332 339 3972 3862 1953 2730 1046 1888 97 1700 1053 181 2650 2927 938 1078 147 3550 1928 1430 1955 1352 3167 2764 1877 926 3461 1434 1929 3347 1715 539 2099 2167 1191 1389 2267 4039 1041 1363 2697 582 1898 799 2767 1631 1226 3732 3394 1413 3987 2484 2638 2100 2598 1217 37 1355 2883 360 4071 2994 1543 3102 2550 11 2843 831 4050 470 2924 2968 242 200 1049 2254 2504 1299 793 923 1650 3691 730 2794 2349 324 2405 2003 542 243 2595 3628 1108 2953 924 3517 1213 3082 3851 2859 1684 508 3440 4072 3223 3736 3171 1626 4014 1476 199 3466 1745 2837 3458 195 2809 2986 129 3289 2233 3206 1891 534 1128 1059 3110 2152 2830 1663 2674 2637 2328 2356 428 912 1936 1835 3845 3111 3274 1332 2574 2540 1925 3215 3156 2436 3113 3089 2295 117 3409 3775 2188 104 1441 3077 3451 3553 738 2995 3151 1920 1622 2339 2049 569 2614 1619 301 3567 3433 3965 759 349 158 180 3954 2242 3510 3316 2019 561 763 3222 2154 2123 119 1802 4058 2447 873 2651 2401 2439 1688 2203 3673 3619 2971 3278 510 357 1082 2715 3404 2309 975 745 1816 4044 1118 3369 1853 207 1656 885 1146 2461 143 485 560 2390 262 2241 3054 982 2046 3090 1764 1789 1950 1561 3388 1459 1255 216 3333 733 3631 2495 3766 928 145 1043 2000 2274 756 2301 2116 2519 1702 1160 1687 2176 3513 714 547 2819 3310 537 3534 3928 314 3714 2334 533 605 3940 2481 3158 2759 595 233 1608 1728 27 1985 1940 3639 433 3695 976 1370 996 3245 1594 3938 12 2363 3572 3190 1158 2420 1482 3783 1147 1464 259 2667 2414 120 1248 307 209 1329 3355 4063 2918 1181 1193 3556 496 594 1499 2779 387 293 3756 3718 3219 1161 3207 2919 1380 20 1712 2183 1304 2694 538 1616 3889 1664 992 3934 4029 3880 2063 3595 3269 2607 2062 2102 211 2146 2149 617 4034 3914 1072 963 1542 3740 983 285 462 2026 1996 2549 2326 628 2361 1014 183 1145 574 1823 3632 3895 2787 484 407 1567 1885 2881 1106 2460 3213 2683 3716 3221 3937 2937 2119 1173 1503 3085 1385 1746 1814 1012 2981 2848 4061 1314 217 3401 3370 457 2480 1851 3479 833 471 1815 3330 3471 3866 3482 2415 3587 667 3142 1599 3012 3542 3516 1786 3724 2876 2111 573 960 2417 3288 460 3867 3659 842 2860 29 1400 33 1910 2403 2602 3273 999 3539 3371 385 2915 1511 839 2056 3614 4003 274 2090 3429 362 3544 3988 509 1353 4038 1480 2834 3130 3019 406 2472 3671 994 1483 2306 10 3820 624 2364 3491 3894 268 454 3506 1627 3577 2269 1801 3648 401 3452 2181 373 2970 3001 3966 179 2967 1033 3091 1307 1510 2912 2302 321 575 1291 2211 2198 3065 2476 3948 3305 2523 1912 2740 525 1090 61 1235 3079 3123 648 1615 3827 1305 1572 1894 3268 2115 2336 313 2271 2988 2754 1455 3146 951 3811 1989 1760 2017 3512 2689 1208 837 2594 2395 2817 2762 597 344 2671 1290 45 791 1858 4040 2284 1111 3971 1005 2902 3946 3985 704 583 4060 1152 2803 1220 3838 3179 3748 974 3807 2890 3968 3328 746 2125 1282 2214 4049 1412 3776 1162 2488 2742 2663 1994 3043 1171 1908 3686 1595 2781 1820 1015 98 1879 136 84 918 2028 414 3230 1004 3028 1365 450 2156 3720 392 133 3657 39 2384 3099 1387 1458 600 1368 1597 370 1351 2904 2502 3906 2652 14 2175 2627 1701 2346 2688 929 3745 563 2677 1518 3541 3254 1240 3725 2690 409 682 1139 3533 21 3042 2477 2392 1023 943 2552 1754 2262 3747 92 2836 2237 456 785 1666 1856 3309 2782 3324 96 3566 1771 60 3303 1750 486 764 671 3135 2774 3709 907 3125 658 2806 1548 423 1686 2101 1681 3856 2098 1848 678 2506 1180 1366 1142 2438 826 3870 1538 3564 1675 3443 1095 3356 3955 2396 2861 3047 3074 1669 3329 238 1778 2272 2337 2086 3405 2538 1062 3500 679 2268 523 971 548 1122 801 814 2666 3703 3864 3511 3322 3605 905 1257 3017 855 3348 1228 3070 2943 1533 2303 946 2381 3267 3154 3045 1782 1628 1863 3624 2352 173 2776 3911 1479 1926 2878 3996 639 3782 1739 1216 51 3129 3402 977 3233 1869 203 608 515 813 1496 1911 1433 2288 3834 898 78 1714 1183 3128 2224 2161 586 834 1306 606 3188 1614 1623 798 1092 3629 2572 3912 784 329 1374 1591 2669 3276 1585 1520 303 543 3112 3494 1931 3729 2755 1231 327 36 869 3084 1956 3640 1199 3467 531 364 4057 649 488 1924 1303 1420 1244 585 3470 2865 2464 1058 1625 2478 840 766 3643 3721 1067 3773 368 352 310 1195 1021 1670 3258 846 1777 2142 2136 3008 1602 2969 691 728 1432 2863 85 2831 413 94 221 871 2933 3002 2582 452 348 3118 3837 3477 1607 3066 2075 3453 3362 3665 3704 675 549 3780 427 2622 3334 1505 652 2656 2910 3910 2636 2974 986 3101 1189 3462 2089 3606 2232 3549 1419 1930 1678 1449 2947 540 2882 1528 1009 160 3540 3667 3959 1234 237 3035 3575 670 1549 3480 1323 3243 3715 31 312 2259 1048 3180 2187 3109 1860 2314 916 3749 2296 3457 3359 3127 1293 2668 3253 1358 3685 1309 808 1919 442 3003 1699 3788 3308 2975 3174 747 3072 2780 75 3823 1402 2245 1756 2528 22 3044 1649 3187 2565 3589 2766 2316 3916 248 558 4082 879 1966 3890 2192 2711 397 19 2529 2366 1230 680 2768 374 204 3061 695 2252 322 2470 1463 3521 3967 2932 2612 930 2473 1781 3642 1775 2640 2530 1089 1668 2244 2201 2813 430 1198 1904 1794 867 3899 4008 2105 358 2850 1657 2443 1855 317 2522 269 223 3770 3849 1203 190 800 123 696 1762 2238 1324 2492 1837 3722 2898 1073 4027 1440 165 1205 126 568 455 2778 2709 1357 501 1606 95 3751 1450 1478 3958 481 1093 3997 1502 3353 1842 2539 3261 311 861 774 2583 1717 3538 1605 2853 2079 760 579 1373 1578 1532 2852 3726 2867 2928 1098 2159 981 390 3905 1470 767 122 1283 2524 2804 3282 2905 4090 2600 3126 1588 393 1344 3554 3383 3638 1692 3871 1320 306 2189 2432 3004 2229 1695 717 3969 2036 2150 1897 3442 850 2808 3398 300 1957 234 2313 546 1268 3375 3140 3145 636 1703 4078 1938 3777 1913 1429 4087 2515 748 2015 2088 2215 1110 810 2684 2619 817 796 3166 3247 1726 532 2662 3259 2810 2374 3795 4083 2966 435 1260 304 3833 4018 2588 1975 690 672 3138 1102 3830 1294 354 3548 2584 3041 3723 3983 3859 25 267 206 1829 1645 3913 900 3296 3196 1740 3088 610 2920 1609 3653 3560 629 1559 2197 3336 1747 2770 1137 2900 3393 1634 2643 3425 752 1460 1466 3798 1236 345 941 874 1242 1784 2095 3597 1000 3863 169 937 3498 2648 244 886 2455 3487 3034 3698 1513 2148 436 2485 3039 2073 3853 2763 3696 3141 2972 366 4069 1809 1428 613 794 2418 473 4075 3785 1311 700 107 1721 3700 3307 2925 3049 1767 3069 1698 3465 1026 1918 955 3869 2133 87 3753 2064 721 1617 1154 1027 3264 142 3360 1065 1850 2055 3570 2287 1947 3593 2379 1519 3522 2065 935 503 1672 3236 319 1864 2497 3352 2945 72 2076 2959 3644 2410 2644 1024 294 637 998 1394 2516 2289 111 809 3275 434 2655 3774 2941 49 398 1168 186 3891 2735 3941 2577 3739 1535 1100 1889 2412 3496 2646 2140 2030 3790 1643 857 3950 1297 1727 3053 2434 2952 2345 3132 2635 2686 2184 3816 3214 2783 758 2744 288 650 1495 571 1892 3610 3707 277 1770 2649 504 1187 1342 351 1907 1825 4004 841 2892 2820 1036 3794 425 3730 3009 1010 2871 630 909 109 1264 4045 3976 1439 1348 1632 3022 2170 4036 591 1322 155 3935 2864 1514 1079 1779 1828 2623 411 2222 3881 342 2234 2977 1501 103 1803 2973 1207 1376 2657 1182 2753 353 2008 1882 3964 3682 2452 3664 1827 1471 1020 3139 2531 1288 1383 2453 1603 69 2842 3684 1685 2155 1968 2899 1743 432 2391 26 1473 3601 2031 3674 2712 3189 2294 3499 1893 993 315 1284 1805 2606 2043 81 2562 1328 2490 1500 3878 697 1017 2404 3046 4059 2661 3199 1840 65 868 598 3917 878 1472 3335 2164 3191 1741 616 3078 3989 2139 4022 46 3400 477 1075 3855 1812 3927 3100 283 2375 2659 3301 2630 2624 877 1256 453 2914 3386 3546 2946 3990 1861 1564 3252 1163 1396 346 550 3365 1279 1899 651 3385 592 1253 1545 1040 2029 1629 3205 3319 718 1390 2194 3734 2160 1546 1300 1903 2944 3379 942 3919 171 1830 4026 2929 2023 1604 789 2653 3231 2996 48 2520 2190 2891 1308 3407 922 1317 802 2800 2205 656 2576 261 1575 3197 972 2261 2884 3778 88 208 3387 2001 2162 2362 3611 3901 3212 1791 176 132 3235 182 1990 2998 3358 3119 2114 3094 3209 1964 2085 3076 2297 2324 1364 3757 2196 2703 2311 1091 1050 443 1731 761 2757 1509 3637 2525 572 3633 3885 1246 1984 887 895 1086 893 153 3763 1915 2708 2805 3027 3882 4092 1697 2621 3350 3204 1887 2407 292 720 3430 2567 236 947 1266 1382 2382 1054 273 3872 908 3062 749 1 2039 492 1337 1952 2315 3652 3812 853 2083 28 742 1780 1392 1179 2204 3381 489 2359 1315 1932 1642 3669 1120 2047 148 281 2699 915 3341 260 1751 90 1262 1729 614 3354 3949 3842 112 308 1733 2670 2685 609 3454 3717 2586 1661 725 1112 3824 2713 66 848 2468 3840 2365 3991 2285 954 2118 24 2603 3357 1115 2413 1379 320 2732 557 741 3857 1992 2868 1149 3468 2258 1490 3418 1143 1056 3124 250 3312 1624 7 3242 1425 350 3263 1497 2357 2060 194 1554 803 2846 830 2743 1613 1722 3701 3159 2992 618 2832 3995 1126 438 884 3787 212 3666 3504 786 202 4067 3978 3116 1164 3875 1316 811 1270 3338 3218 1239 3651 2298 1735 3445 3325 412 333 1671 3874 2416 458 227 229 2573 3558 2632 3789 596 3048 276 1693 732 1818 356 2168 806 3822 32 3815 1646 2727 2829 382 1336 3960 253 932 4019 1225 2489 2209 1105 2798 815 1259 68 2826 1061 4005 2338 1691 1349 1800 1022 278 2157 1553 1674 536 2917 1276 1405 3900 130 408 191 3854 1694 2180 121 2957 1407 3114 2756 1243 201 1185 495 2639 797 544 676 3793 2922 2746 1874 3930 1909 403 2409 1408 3423 1006 1345 1119 3879 1287 2182 2022 781 279 205 3366 2940 1587 755 4000 391 4021 1982 3021 910 1221 2510 3528 847 3844 3420 507 2556 1417 64 38 2323 59 3711 4055 511 1921 1834 619 3689 3860 2736 2117 1206 812 2186 683 2368 769 518 2948 378 1035 2094 343 2265 1131 446 2541 2435 3727 4047 2370 4033 3660 1477 3246 3497 3256 1223 1873 737 1943 3921 528 1795 1431 167 2784 395 2847 863 35 2132 973 3270 3098 3525 445 1438 67 464 790 902 3032 2421 1592 2042 2799 2543 2664 1959 3524 151 1881 365 2398 1045 694 1939 363 3585 3291 3557 2431 2307 3552 4056 2012 3389 3620 2568 822 1768 3520 1001 3594 2458 2791 849 2354 2536 80 3266 1156 844 3093 465 689 3399 2068 225 1709 995 699 762 298 2895 1032 2879 2591 2317 3292 3262 2166 264 1641 2207 106 258 775 2533 1393 2682 177 698 156 3149 4068 467 1706 3939 2983 4077 702 1250 3193 864 309 2173 3472 2795 154 3055 1636 3434 159 1395 1445 1031 3608 1558 2376 701 2548 487 2333 3172 1457 765 953 757 384 1749 1238 4017 3956 1030 1289 991 2037 2 1170 3831 2921 3993 2007 2626 2560 3395 2153 1648 2514 1906 1868 2886 3573 1583 4016 706 383 2718 3037 552 3843 210 2061 3484 2513 1298 3641 1857 588 934 3636 3738 1201 2137 479 3957 891 251 3321 3169 2908 289 3920 1847 1210 3952 4051 3380 1927 2851 2032 856 1233 770 139 663 716 2437 152 291 3294 3131 3384 284 1258 230 1150 4041 892 3058 2537 1071 2647 1144 653 1391 1151 1916 1361 1081 1633 1273 3998 576 54 1272 514 429 2729 4089 475 3036 1890 3182 3804 3582 2931 1677 2329 3422 417 1406 422 1267 3600 3806 30 3887 3813 89 361 1066 1229 3063 62 3758 2151 3545 3574 3649 2312 897 316 1922 255 1057 1265 3137 1271 933 3026 2777 1424 1707 1247 3559 3784 3580 3349 2856 2494 3953 1013 1620 921 137 3315 2479 1245 2700 3024 394 647 2909 664 753 3444 335 114 2145 3168 1331 1544 1516 3306 1318 3909 2875 1096 4054 1859 3676 0 883 1969 2108 2563 622 3133 858 2071 118 3412 3579 3150 331 643 4052 836 2466 607 1667 1705 228 1312 437 224 1447 1025 215 2469 985 2611 1581 2014 1359 2678 1719 2251 3040 3802 2195 660 3107 2960 1854 3210 1884 3803 2885 3933 3876 359 1278 5 3592 4048 8 2702 41 1319 896 2698 1263 2633 299 2841 3377 584 3764 2399 1763 2976 2544 3645 1087 1153 330 1125 332 2547 3240 380 498 1886 3754 899 3120 2440 1821 1085 57 2016 2419 2177 3020 3481 2807 987 2585 832 3630 1880 1905 1403 3342 3741 827 1547 1651 3735 2066 1367 386 3382 2546 1327 2862 2052 2402 3598 2451 4080 2785 2728 3165 2050 3850 1991 1140 3877 2724 2246 2335 1958 581 1810 2109 882 3290 287 3376 2491 2629 2869 526 499 2738 3081 3421 750 821 3547 2310 743 1838 1184 917 196 3096 2720 2199 773 1679 530 3687 3535 2351 1836 1330 807 1485 512 1980 2147 134 4093 906 2004 2279 3728 2283 79 1724 1135 3683 1655 1935 2045 1845 2341 1051 1683 931 1998 2033 1867 2223 4095 355 825 2692 3208 381 711 1251 1995 2870 1039 3603 2217 2021 1157 256 71 3083 1652 3699 3483 1003 164 1422 2942 3543 2954 3672 482 1524 1410 2758 1029 447 1997 1974 2282 1734 214 2291 659 2923 2465 1976 1965 1977 2511 263 3518 654 3563 2078 1971 520 2383 3192 3086 1442 4086 1637 500 970 768 2982 2087 266 1774 3929 1083 1211 3767 2615 966 493 3408 1716 2397 1871 625 1453 2625 3067 3647 2725 1371 949 920 1461 950 1321 876 1462 2839 506 1219 2112 3144 567 166 2427 247 3300 3176 3979 2057 1550 1099 952 3220 1521 1772 3883 1710 2719 1819 3896 3986 3584 590 3475 2463 372 245 734 1338 657 1961 723 4043 843 3248 1008 1254 1640 2138 1114 2325 3583 3183 4088 3821 3059 2081 1813 2741 4065 3331 517 1132 219 3255 1742 3050 3609 2789 620 336 1127 1487 3340 3617 1621 2896 141 4085 2581 1954 3013 3801 127 1274 2024 323 3886 2517 2240 1117 3136 1292 3435 1200 3697 3000 2449 3297 1676 3184 1034 1552 3925 449 3503 2327 318 2239 337 2840 1841 1753 1792 3873 1443 3578 2143 2790 3455 956 1744 1951 1659 441 2825 405 1335 3346 2281 125 3344 589 2126 1611 131 1275 2006 1556 		%read{214,214} %write{2147483647,-1}
temp	int	$tmp123	%read{217,217} %write{216,216}
temp	float	$tmp124	%read{219,219} %write{218,218} %derivs
const	float	$const41	9.99999975e-05		%read{219,405} %write{2147483647,-1}
temp	int	$tmp125	%read{221,221} %write{220,220}
const	float	$const42	-100000000		%read{222,408} %write{2147483647,-1}
temp	int	$tmp126	%read{223,223} %write{222,222}
temp	int	$tmp127	%read{226,226} %write{225,225} %derivs
const	float	$const43	100000000		%read{227,413} %write{2147483647,-1}
temp	int	$tmp128	%read{228,228} %write{227,227}
temp	int	$tmp129	%read{233,245} %write{233,245}
temp	int	$tmp130	%read{231,245} %write{232,245}
const	int	$const44	12		%read{235,436} %write{2147483647,-1}
temp	int	$tmp131	%read{233,245} %write{233,245} %derivs
temp	int	$tmp132	%read{233,245} %write{233,245} %derivs
temp	int	$tmp133	%read{233,245} %write{233,245} %derivs
temp	int	$tmp134	%read{233,245} %write{233,245} %derivs
temp	int	$tmp135	%read{233,245} %write{233,245} %derivs
temp	int	$tmp136	%read{2147483647,-1} %write{233,245}
const	int	$const45	7		%read{245,447} %write{2147483647,-1}
temp	int	$tmp137	%read{247,247} %write{246,246}
temp	float	$tmp138	%read{249,249} %write{248,248} %derivs
temp	int	$tmp139	%read{251,251} %write{250,250}
temp	int	$tmp140	%read{253,253} %write{252,252}
temp	int	$tmp141	%read{256,256} %write{255,255} %derivs
temp	int	$tmp142	%read{258,258} %write{257,257}
temp	float	$tmp143	%read{262,262} %write{261,261} %derivs
temp	int	$tmp144	%read{264,264} %write{263,263}
temp	int	$tmp145	%read{266,266} %write{265,265}
temp	int	$tmp146	%read{269,269} %write{268,268} %derivs
temp	int	$tmp147	%read{271,271} %write{270,270}
temp	int	$tmp148	%read{276,294} %write{276,294}
temp	int	$tmp149	%read{274,294} %write{275,294}
temp	int	$tmp150	%read{276,294} %write{276,294} %derivs
temp	int	$tmp151	%read{276,294} %write{276,294} %derivs
temp	int	$tmp152	%read{276,294} %write{276,294} %derivs
temp	int	$tmp153	%read{276,294} %write{276,294} %derivs
temp	int	$tmp154	%read{276,294} %write{276,294} %derivs
temp	int	$tmp155	%read{276,294} %write{276,294} %derivs
temp	int	$tmp156	%read{276,294} %write{276,294} %derivs
temp	int	$tmp157	%read{276,294} %write{276,294} %derivs
temp	float	$tmp158	%read{276,294} %write{276,294} %derivs
temp	int	$tmp159	%read{276,294} %write{276,294} %derivs
temp	int	$tmp160	%read{2147483647,-1} %write{276,294}
temp	int	$tmp161	%read{296,296} %write{295,295}
temp	float	$tmp162	%read{298,298} %write{297,297} %derivs
temp	int	$tmp163	%read{300,300} %write{299,299}
temp	int	$tmp164	%read{302,302} %write{301,301}
temp	int	$tmp165	%read{305,305} %write{304,304} %derivs
temp	int	$tmp166	%read{307,307} %write{306,306}
temp	float	$tmp167	%read{311,311} %write{310,310} %derivs
temp	int	$tmp168	%read{313,313} %write{312,312}
temp	int	$tmp169	%read{315,315} %write{314,314}
temp	int	$tmp170	%read{318,318} %write{317,317} %derivs
temp	int	$tmp171	%read{320,320} %write{319,319}
temp	float	$tmp172	%read{324,324} %write{323,323} %derivs
temp	int	$tmp173	%read{326,326} %write{325,325}
temp	int	$tmp174	%read{328,328} %write{327,327}
temp	int	$tmp175	%read{331,331} %write{330,330} %derivs
temp	int	$tmp176	%read{333,333} %write{332,332}
temp	int	$tmp177	%read{338,362} %write{338,362}
temp	int	$tmp178	%read{336,362} %write{337,362}
temp	int	$tmp179	%read{338,362} %write{338,362} %derivs
temp	int	$tmp180	%read{338,362} %write{338,362} %derivs
temp	int	$tmp181	%read{338,362} %write{338,362} %derivs
temp	int	$tmp182	%read{338,362} %write{338,362} %derivs
temp	int	$tmp183	%read{338,362} %write{338,362} %derivs
temp	int	$tmp184	%read{338,362} %write{338,362} %derivs
temp	int	$tmp185	%read{338,362} %write{338,362} %derivs
temp	int	$tmp186	%read{338,362} %write{338,362} %derivs
temp	int	$tmp187	%read{338,362} %write{338,362} %derivs
temp	int	$tmp188	%read{338,362} %write{338,362} %derivs
temp	int	$tmp189	%read{338,362} %write{338,362} %derivs
temp	int	$tmp190	%read{338,362} %write{338,362} %derivs
temp	float	$tmp191	%read{338,362} %write{338,362} %derivs
temp	int	$tmp192	%read{338,362} %write{338,362} %derivs
temp	int	$tmp193	%read{2147483647,-1} %write{338,362}
const	int	$const46	4		%read{363,363} %write{2147483647,-1}
temp	int	$tmp194	%read{364,364} %write{363,363}
temp	float	$tmp195	%read{366,366} %write{365,365} %derivs
temp	int	$tmp196	%read{368,368} %write{367,367}
temp	int	$tmp197	%read{370,370} %write{369,369}
temp	int	$tmp198	%read{373,373} %write{372,372} %derivs
temp	int	$tmp199	%read{375,375} %write{374,374}
temp	float	$tmp200	%read{379,379} %write{378,378} %derivs
temp	int	$tmp201	%read{381,381} %write{380,380}
temp	int	$tmp202	%read{383,383} %write{382,382}
temp	int	$tmp203	%read{386,386} %write{385,385} %derivs
temp	int	$tmp204	%read{388,388} %write{387,387}
temp	float	$tmp205	%read{392,392} %write{391,391} %derivs
temp	int	$tmp206	%read{394,394} %write{393,393}
temp	int	$tmp207	%read{396,396} %write{395,395}
temp	int	$tmp208	%read{399,399} %write{398,398} %derivs
temp	int	$tmp209	%read{401,401} %write{400,400}
temp	float	$tmp210	%read{405,405} %write{404,404} %derivs
temp	int	$tmp211	%read{407,407} %write{406,406}
temp	int	$tmp212	%read{409,409} %write{408,408}
temp	int	$tmp213	%read{412,412} %write{411,411} %derivs
temp	int	$tmp214	%read{414,414} %write{413,413}
temp	int	$tmp215	%read{419,449} %write{419,449}
temp	int	$tmp216	%read{417,449} %write{418,449}
temp	int	$tmp217	%read{419,449} %write{419,449} %derivs
temp	int	$tmp218	%read{419,449} %write{419,449} %derivs
temp	int	$tmp219	%read{419,449} %write{419,449} %derivs
temp	int	$tmp220	%read{419,449} %write{419,449} %derivs
temp	int	$tmp221	%read{419,449} %write{419,449} %derivs
temp	int	$tmp222	%read{419,449} %write{419,449} %derivs
temp	int	$tmp223	%read{419,449} %write{419,449} %derivs
temp	int	$tmp224	%read{419,449} %write{419,449} %derivs
temp	int	$tmp225	%read{419,449} %write{419,449} %derivs
temp	int	$tmp226	%read{419,449} %write{419,449} %derivs
temp	int	$tmp227	%read{419,449} %write{419,449} %derivs
temp	int	$tmp228	%read{419,449} %write{419,449} %derivs
temp	int	$tmp229	%read{419,449} %write{419,449} %derivs
temp	int	$tmp230	%read{419,449} %write{419,449} %derivs
temp	int	$tmp231	%read{419,449} %write{419,449} %derivs
temp	int	$tmp232	%read{419,449} %write{419,449} %derivs
temp	int	$tmp233	%read{419,449} %write{419,449} %derivs
temp	float	$tmp234	%read{419,449} %write{419,449} %derivs
temp	int	$tmp235	%read{419,449} %write{419,449} %derivs
temp	int	$tmp236	%read{2147483647,-1} %write{419,449}
const	int	$const47	15		%read{449,449} %write{2147483647,-1}
temp	float	$tmp237	%read{453,453} %write{450,450} %derivs
temp	float	$tmp238	%read{453,453} %write{451,451} %derivs
temp	float	$tmp239	%read{453,453} %write{452,452} %derivs
const	string	$const48	"cell"		%read{454,454} %write{2147483647,-1}
temp	int	$tmp240	%read{456,463} %write{455,462}
temp	float	$tmp241	%read{459,459} %write{457,457}
temp	float	$tmp242	%read{459,459} %write{458,458}
temp	float	$tmp243	%read{460,460} %write{459,459}
temp	int	$tmp244	%read{461,461} %write{460,460}
temp	int	$tmp245	%read{462,462} %write{461,461}
temp	float	$tmp246	%read{466,466} %write{465,465} %derivs
temp	int	$tmp247	%read{469,474} %write{468,473}
temp	float	$tmp248	%read{471,471} %write{470,470}
temp	int	$tmp249	%read{472,472} %write{471,471}
temp	int	$tmp250	%read{473,473} %write{472,472}
temp	float	$tmp251	%read{476,476} %write{475,475} %derivs
temp	float	$tmp252	%read{477,477} %write{476,476} %derivs
temp	int	$tmp253	%read{479,484} %write{478,483}
temp	float	$tmp254	%read{481,481} %write{480,480}
temp	int	$tmp255	%read{482,482} %write{481,481}
temp	int	$tmp256	%read{483,483} %write{482,482}
temp	float	$tmp257	%read{486,486} %write{485,485} %derivs
temp	float	$tmp258	%read{487,487} %write{486,486} %derivs
temp	float	$tmp259	%read{491,491} %write{489,489} %derivs
temp	float	$tmp260	%read{491,491} %write{490,490} %derivs
temp	float	$tmp261	%read{492,492} %write{491,491} %derivs
temp	float	$tmp262	%read{496,496} %write{494,494} %derivs
temp	float	$tmp263	%read{496,496} %write{495,495} %derivs
temp	float	$tmp264	%read{497,497} %write{496,496} %derivs
temp	int	$tmp265	%read{501,501} %write{500,500}
temp	point	$tmp266	%read{510,511} %write{504,504}
temp	float	$tmp267	%read{504,504} %write{502,502}
temp	float	$tmp268	%read{504,504} %write{503,503}
const	string	$const49	"hexTile"		%read{505,505} %write{2147483647,-1}
const	float	$const50	1.15470052		%read{512,512} %write{2147483647,-1}
const	float	$const51	0.866025388		%read{513,513} %write{2147483647,-1}
temp	float	$tmp269	%read{516,516} %write{515,515}
temp	float	$tmp270	%read{523,523} %write{522,522}
temp	float	$tmp271	%read{525,525} %write{524,524}
temp	float	$tmp272	%read{527,527} %write{526,526}
temp	float	$tmp273	%read{531,531} %write{530,530}
temp	int	$tmp274	%read{532,532} %write{531,531}
temp	float	$tmp275	%read{535,535} %write{533,533}
temp	float	$tmp276	%read{535,535} %write{534,534}
temp	float	$tmp277	%read{539,539} %write{538,538}
temp	int	$tmp278	%read{544,544} %write{543,543}
temp	int	$tmp279	%read{545,548} %write{544,547}
temp	int	$tmp280	%read{547,547} %write{546,546}
temp	int	$tmp281	%read{549,552} %write{548,551}
temp	int	$tmp282	%read{551,551} %write{550,550}
temp	int	$tmp283	%read{553,556} %write{552,555}
temp	int	$tmp284	%read{555,555} %write{554,554}
temp	int	$tmp285	%read{557,560} %write{556,559}
temp	int	$tmp286	%read{559,559} %write{558,558}
temp	float	$tmp287	%read{564,564} %write{561,561}
temp	float	$tmp288	%read{563,563} %write{562,562}
temp	float	$tmp289	%read{564,564} %write{563,563}
temp	float	$tmp290	%read{567,567} %write{564,564}
temp	float	$tmp291	%read{566,566} %write{565,565}
temp	float	$tmp292	%read{567,567} %write{566,566}
temp	float	$tmp293	%read{571,571} %write{568,568}
temp	float	$tmp294	%read{570,570} %write{569,569}
temp	float	$tmp295	%read{571,571} %write{570,570}
temp	float	$tmp296	%read{574,574} %write{571,571}
temp	float	$tmp297	%read{573,573} %write{572,572}
temp	float	$tmp298	%read{574,574} %write{573,573}
temp	float	$tmp299	%read{578,578} %write{575,575}
temp	float	$tmp300	%read{577,577} %write{576,576}
temp	float	$tmp301	%read{578,578} %write{577,577}
temp	float	$tmp302	%read{581,581} %write{578,578}
temp	float	$tmp303	%read{580,580} %write{579,579}
temp	float	$tmp304	%read{581,581} %write{580,580}
const	point	$const52	123.456001 867.530884 555.121216		%read{585,589} %write{2147483647,-1}
temp	point	$tmp306	%read{586,586} %write{585,585}
temp	point	$tmp308	%read{588,588} %write{587,587}
temp	point	$tmp310	%read{590,590} %write{589,589}
temp	int	$tmp311	%read{592,595} %write{591,594}
temp	int	$tmp312	%read{594,594} %write{593,593}
temp	int	$tmp313	%read{596,599} %write{595,598}
temp	int	$tmp314	%read{598,598} %write{597,597}
const	float	$const53	6.28318548		%read{603,619} %write{2147483647,-1}
temp	float	$tmp315	%read{606,606} %write{603,603}
temp	float	$tmp316	%read{605,605} %write{604,604}
temp	float	$tmp317	%read{606,606} %write{605,605}
temp	float	$tmp318	%read{607,607} %write{606,606}
temp	float	$tmp319	%read{610,610} %write{607,607}
const	string	$const54	"degrees"		%read{608,624} %write{2147483647,-1}
temp	float	$tmp320	%read{610,610} %write{609,609}
temp	float	$tmp321	%read{614,614} %write{611,611}
temp	float	$tmp322	%read{613,613} %write{612,612}
temp	float	$tmp323	%read{614,614} %write{613,613}
temp	float	$tmp324	%read{615,615} %write{614,614}
temp	float	$tmp325	%read{618,618} %write{615,615}
temp	float	$tmp326	%read{618,618} %write{617,617}
temp	float	$tmp327	%read{622,622} %write{619,619}
temp	float	$tmp328	%read{621,621} %write{620,620}
temp	float	$tmp329	%read{622,622} %write{621,621}
temp	float	$tmp330	%read{623,623} %write{622,622}
temp	float	$tmp331	%read{626,626} %write{623,623}
temp	float	$tmp332	%read{626,626} %write{625,625}
temp	float	$tmp333	%read{629,633} %write{627,627}
const	string	$const55	"Math_RotateZ"		%read{628,683} %write{2147483647,-1}
temp	int	$tmp334	%read{630,630} %write{629,629}
temp	float	$tmp335	%read{634,634} %write{633,633}
temp	float	$tmp336	%read{633,633} %write{632,632}
temp	float	$tmp337	%read{637,637} %write{636,636}
temp	float	$tmp338	%read{640,640} %write{637,637}
temp	float	$tmp339	%read{639,639} %write{638,638}
temp	float	$tmp340	%read{640,640} %write{639,639}
temp	float	$tmp341	%read{647,647} %write{640,640}
temp	float	$tmp342	%read{642,642} %write{641,641}
temp	float	$tmp343	%read{645,645} %write{642,642}
temp	float	$tmp344	%read{644,644} %write{643,643}
temp	float	$tmp345	%read{645,645} %write{644,644}
temp	float	$tmp346	%read{647,647} %write{645,645}
temp	float	$tmp347	%read{647,647} %write{646,646}
temp	float	$tmp348	%read{653,657} %write{651,651}
temp	int	$tmp349	%read{654,654} %write{653,653}
temp	float	$tmp350	%read{658,658} %write{657,657}
temp	float	$tmp351	%read{657,657} %write{656,656}
temp	float	$tmp352	%read{661,661} %write{660,660}
temp	float	$tmp353	%read{664,664} %write{661,661}
temp	float	$tmp354	%read{663,663} %write{662,662}
temp	float	$tmp355	%read{664,664} %write{663,663}
temp	float	$tmp356	%read{671,671} %write{664,664}
temp	float	$tmp357	%read{666,666} %write{665,665}
temp	float	$tmp358	%read{669,669} %write{666,666}
temp	float	$tmp359	%read{668,668} %write{667,667}
temp	float	$tmp360	%read{669,669} %write{668,668}
temp	float	$tmp361	%read{671,671} %write{669,669}
temp	float	$tmp362	%read{671,671} %write{670,670}
temp	float	$tmp363	%read{677,681} %write{675,675}
temp	int	$tmp364	%read{678,678} %write{677,677}
temp	float	$tmp365	%read{682,682} %write{681,681}
temp	float	$tmp366	%read{681,681} %write{680,680}
temp	float	$tmp367	%read{685,685} %write{684,684}
temp	float	$tmp368	%read{688,688} %write{685,685}
temp	float	$tmp369	%read{687,687} %write{686,686}
temp	float	$tmp370	%read{688,688} %write{687,687}
temp	float	$tmp371	%read{695,695} %write{688,688}
temp	float	$tmp372	%read{690,690} %write{689,689}
temp	float	$tmp373	%read{693,693} %write{690,690}
temp	float	$tmp374	%read{692,692} %write{691,691}
temp	float	$tmp375	%read{693,693} %write{692,692}
temp	float	$tmp376	%read{695,695} %write{693,693}
temp	float	$tmp377	%read{695,695} %write{694,694}
temp	int	$tmp378	%read{700,700} %write{699,699}
temp	float	$tmp379	%read{704,704} %write{703,703}
const	float	$const56	2		%read{702,710} %write{2147483647,-1}
temp	float	$tmp380	%read{702,702} %write{701,701}
temp	float	$tmp381	%read{703,703} %write{702,702}
temp	float	$tmp382	%read{708,708} %write{707,707}
temp	float	$tmp383	%read{706,706} %write{705,705}
temp	float	$tmp384	%read{707,707} %write{706,706}
temp	float	$tmp385	%read{712,712} %write{711,711}
temp	float	$tmp386	%read{710,710} %write{709,709}
temp	float	$tmp387	%read{711,711} %write{710,710}
temp	int	$tmp388	%read{714,714} %write{713,713}
const	vector	$const57	555.121216 1234.56702 8675.30859		%read{721,725} %write{2147483647,-1}
temp	point	$tmp390	%read{722,722} %write{721,721}
temp	point	$tmp392	%read{724,724} %write{723,723}
temp	point	$tmp394	%read{726,726} %write{725,725}
temp	int	$tmp395	%read{734,734} %write{733,733}
const	float	$const58	8		%read{735,735} %write{2147483647,-1}
temp	float	$tmp396	%read{740,740} %write{739,739}
temp	float	$tmp397	%read{741,741} %write{740,740}
temp	float	$tmp398	%read{748,748} %write{745,745}
temp	float	$tmp399	%read{748,748} %write{746,746}
temp	float	$tmp400	%read{748,748} %write{747,747}
temp	float	$tmp401	%read{753,753} %write{750,750}
temp	float	$tmp402	%read{753,753} %write{751,751}
temp	float	$tmp403	%read{753,753} %write{752,752}
temp	point	$tmp404	%read{759,759} %write{757,757}
temp	point	$tmp405	%read{759,759} %write{758,758}
temp	float	$tmp406	%read{767,767} %write{765,765} %derivs
temp	float	$tmp407	%read{767,767} %write{766,766} %derivs
temp	int	$tmp408	%read{770,770} %write{769,769}
temp	int	$tmp409	%read{777,777} %write{776,776}
temp	vector	$tmp410	%read{825,829} %write{778,825}
temp	vector	$tmp411	%read{830,830} %write{779,828}
temp	float	$tmp412.x	%read{796,799} %write{780,780} %derivs
temp	float	$tmp412.y	%read{797,800} %write{781,781} %derivs
const	string	$const59	"GenBasisTB"		%read{782,782} %write{2147483647,-1}
temp	float	$tmp413	%read{784,784} %write{783,783}
temp	normal	$tmp414	%read{785,785} %write{784,784}
temp	float	$tmp415	%read{787,787} %write{786,786}
temp	normal	$tmp416	%read{788,788} %write{787,787}
temp	float	$tmp417	%read{791,791} %write{790,790}
temp	vector	$tmp418	%read{790,790} %write{789,789}
temp	int	$tmp419	%read{792,792} %write{791,791}
const	float	$const60	-1		%read{793,809} %write{2147483647,-1}
const	string	$const61	"Dx"		%read{795,795} %write{2147483647,-1}
const	string	$const62	"Dy"		%read{798,798} %write{2147483647,-1}
temp	float	$tmp420.x	%read{804,804} %write{801,801}
temp	float	$tmp420.y	%read{805,805} %write{802,802}
const	string	$const63	"dot"		%read{803,803} %write{2147483647,-1}
temp	float	$tmp421	%read{806,806} %write{804,804}
temp	float	$tmp422	%read{806,806} %write{805,805}
temp	int	$tmp423	%read{808,808} %write{807,807}
temp	float	$tmp424.x	%read{817,817} %write{811,811}
temp	float	$tmp424.y	%read{818,818} %write{812,812}
const	string	$const64	"__operator__mul__"		%read{813,816} %write{2147483647,-1}
temp	float	$tmp425.x	%read{817,817} %write{814,814}
temp	float	$tmp425.y	%read{818,818} %write{815,815}
temp	vector	$tmp426	%read{821,821} %write{819,819}
temp	vector	$tmp427	%read{821,821} %write{820,820}
temp	float	$tmp428	%read{823,823} %write{822,822}
temp	int	$tmp429	%read{824,824} %write{823,823}
temp	float	$tmp430	%read{828,828} %write{826,826}
temp	vector	$tmp431	%read{828,828} %write{827,827}
code resultMulti.Tn
# PxrRandomTextureManifold.osl:319
#     output PxrManifoldMulti resultMulti = MULTIMANIFOLD_ZERO
	aassign		resultMulti.Tn $const2 $const1 	%filename{"PxrRandomTextureManifold.osl"} %line{319} %argrw{"wrr"}
	aassign		resultMulti.Tn $const3 $const1 	%argrw{"wrr"}
	aassign		resultMulti.Tn $const4 $const1 	%argrw{"wrr"}
	aassign		resultMulti.Tn $const5 $const1 	%argrw{"wrr"}
code resultMulti.Bn
# PxrRandomTextureManifold.osl:319
#     output PxrManifoldMulti resultMulti = MULTIMANIFOLD_ZERO
	aassign		resultMulti.Bn $const2 $const1 	%filename{"PxrRandomTextureManifold.osl"} %line{319} %argrw{"wrr"}
	aassign		resultMulti.Bn $const3 $const1 	%argrw{"wrr"}
	aassign		resultMulti.Bn $const4 $const1 	%argrw{"wrr"}
	aassign		resultMulti.Bn $const5 $const1 	%argrw{"wrr"}
code resultMulti.hextile0
# PxrRandomTextureManifold.osl:319
#     output PxrManifoldMulti resultMulti = MULTIMANIFOLD_ZERO
	aassign		resultMulti.hextile0 $const2 $const6 	%filename{"PxrRandomTextureManifold.osl"} %line{319} %argrw{"wrr"}
	aassign		resultMulti.hextile0 $const3 $const6 	%argrw{"wrr"}
	aassign		resultMulti.hextile0 $const4 $const7 	%argrw{"wrr"}
	aassign		resultMulti.hextile0 $const5 $const6 	%argrw{"wrr"}
code resultMulti.hextile1
# PxrRandomTextureManifold.osl:319
#     output PxrManifoldMulti resultMulti = MULTIMANIFOLD_ZERO
	aassign		resultMulti.hextile1 $const2 $const6 	%filename{"PxrRandomTextureManifold.osl"} %line{319} %argrw{"wrr"}
	aassign		resultMulti.hextile1 $const3 $const6 	%argrw{"wrr"}
	aassign		resultMulti.hextile1 $const4 $const7 	%argrw{"wrr"}
	aassign		resultMulti.hextile1 $const5 $const6 	%argrw{"wrr"}
code resultMulti.hextile2
# PxrRandomTextureManifold.osl:319
#     output PxrManifoldMulti resultMulti = MULTIMANIFOLD_ZERO
	aassign		resultMulti.hextile2 $const2 $const6 	%filename{"PxrRandomTextureManifold.osl"} %line{319} %argrw{"wrr"}
	aassign		resultMulti.hextile2 $const3 $const6 	%argrw{"wrr"}
	aassign		resultMulti.hextile2 $const4 $const7 	%argrw{"wrr"}
	aassign		resultMulti.hextile2 $const5 $const6 	%argrw{"wrr"}
code resultMulti.hextile3
# PxrRandomTextureManifold.osl:319
#     output PxrManifoldMulti resultMulti = MULTIMANIFOLD_ZERO
	aassign		resultMulti.hextile3 $const2 $const6 	%filename{"PxrRandomTextureManifold.osl"} %line{319} %argrw{"wrr"}
	aassign		resultMulti.hextile3 $const3 $const6 	%argrw{"wrr"}
	aassign		resultMulti.hextile3 $const4 $const7 	%argrw{"wrr"}
	aassign		resultMulti.hextile3 $const5 $const6 	%argrw{"wrr"}
code ___main___
# PxrRandomTextureManifold.osl:332
#     int hasPrimVarS = primvarS != "";
	neq		hasPrimVarS primvarS $const8 	%filename{"PxrRandomTextureManifold.osl"} %line{332} %argrw{"wrr"}
# PxrRandomTextureManifold.osl:333
#     int hasPrimVarT = primvarT != "";
	neq		hasPrimVarT primvarT $const8 	%line{333} %argrw{"wrr"}
# PxrRandomTextureManifold.osl:334
#     if (!hasPrimVarS && !hasPrimVarT)
	eq		$tmp25 hasPrimVarS $const2 	%line{334} %argrw{"wrr"}
	neq		$tmp26 $tmp25 $const2 	%argrw{"wrr"}
	if		$tmp26 32 32 	%argrw{"r"}
	eq		$tmp27 hasPrimVarT $const2 	%argrw{"wrr"}
	neq		$tmp28 $tmp27 $const2 	%argrw{"wrr"}
	assign		$tmp26 $tmp28 	%argrw{"wr"}
	if		$tmp26 39 48 	%argrw{"r"}
# PxrRandomTextureManifold.osl:336
#         float st[2] = {0, 0};
	assign		___748_st $const9 	%line{336} %argrw{"wr"}
# PxrRandomTextureManifold.osl:337
#         getattribute("primvar", "st", st);
	getattribute	$tmp29 $const10 $const11 ___748_st 	%line{337} %argrw{"wrrw"}
# PxrRandomTextureManifold.osl:338
#         result.Q[0] = st[0];
	aref		$tmp30 ___748_st $const2 	%line{338} %argrw{"wrr"}
	compassign	result.Q $const2 $tmp30 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:339
#         result.Q[1] = st[1];
	aref		$tmp31 ___748_st $const3 	%line{339} %argrw{"wrr"}
	compassign	result.Q $const3 $tmp31 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:341
#     else if (!hasPrimVarT)
	eq		$tmp32 hasPrimVarT $const2 	%line{341} %argrw{"wrr"}
	if		$tmp32 42 48 	%argrw{"r"}
# PxrRandomTextureManifold.osl:343
#         getattribute("primvar", primvarS, result.Q);
	getattribute	$tmp33 $const10 primvarS result.Q 	%line{343} %argrw{"wrrw"}
# PxrRandomTextureManifold.osl:347
#         getattribute("primvar", primvarS, result.Q[0]);
	compref		$tmp35 result.Q $const2 	%line{347} %argrw{"wrr"}
	getattribute	$tmp34 $const10 primvarS $tmp35 	%argrw{"wrrw"}
	compassign	result.Q $const2 $tmp35 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:348
#         getattribute("primvar", primvarT, result.Q[1]);
	compref		$tmp37 result.Q $const3 	%line{348} %argrw{"wrr"}
	getattribute	$tmp36 $const10 primvarT $tmp37 	%argrw{"wrrw"}
	compassign	result.Q $const3 $tmp37 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:350
#     result.Qradius = radius(result.Q[0], result.Q[1]);
	compref		$tmp38 result.Q $const2 	%line{350} %argrw{"wrr"}
	compref		$tmp39 result.Q $const3 	%argrw{"wrr"}
	functioncall	$const12 60 	%argrw{"r"}
# PxrRandomTextureManifold.osl:49
#     vector a = point(Dx(s), Dy(s), 0) - point(Dx(t), Dy(t), 0);
	Dx		$tmp41 $tmp38 	%line{49} %argrw{"wr"} %argderivs{1}
	Dy		$tmp42 $tmp38 	%argrw{"wr"} %argderivs{1}
	point		$tmp40 $tmp41 $tmp42 $const13 	%argrw{"wrrr"}
	Dx		$tmp44 $tmp39 	%argrw{"wr"} %argderivs{1}
	Dy		$tmp45 $tmp39 	%argrw{"wr"} %argderivs{1}
	point		$tmp43 $tmp44 $tmp45 $const13 	%argrw{"wrrr"}
	sub		___747_a $tmp40 $tmp43 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:50
#     return length(a) * 0.5;
	length		$tmp46 ___747_a 	%line{50} %argrw{"wr"}
	mul		result.Qradius $tmp46 $const14 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:350
#     result.Qradius = radius(result.Q[0], result.Q[1]);
	assign		result.Qradius result.Qradius 	%line{350} %argrw{"wr"}
# PxrRandomTextureManifold.osl:353
#     resultMulti.numTextures = numTextures;
	assign		resultMulti.numTextures numTextures 	%line{353} %argrw{"wr"}
# PxrRandomTextureManifold.osl:354
#     resultMulti.textureOrder = textureOrder;
	assign		resultMulti.textureOrder textureOrder 	%line{354} %argrw{"wr"}
# PxrRandomTextureManifold.osl:355
#     resultMulti.minNumTextures = numTextures;
	assign		resultMulti.minNumTextures numTextures 	%line{355} %argrw{"wr"}
# PxrRandomTextureManifold.osl:357
#     float seed = randomExtraSeed * 173.0;
	mul		seed randomExtraSeed $const15 	%line{357} %argrw{"wrr"}
# PxrRandomTextureManifold.osl:360
#     float id_seed = getVariationSeed(randomSource, randomExtraSeed,
	functioncall	$const17 130 	%line{360} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:64
#     float seed = 0.0;
	assign		___731_seed $const13 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h"} %line{64} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:65
#     if (source == k_objectId)
	eq		$tmp47 randomSource $const2 	%line{65} %argrw{"wrr"}
	if		$tmp47 72 117 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:68
#         getattribute("builtin", "id", itmp);
	getattribute	$tmp48 $const18 $const19 ___732_itmp 	%line{68} %argrw{"wrrw"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:69
#         seed = itmp % 65535;
	mod		$tmp49 ___732_itmp $const20 	%line{69} %argrw{"wrr"}
	assign		___731_seed $tmp49 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:71
#     else if (source == k_objectName)
	eq		$tmp50 randomSource $const3 	%line{71} %argrw{"wrr"}
	if		$tmp50 87 117 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:74
#         COMPAT_NAME_HASH(seed);
	eq		$tmp51 matchCppPattern $const2 	%line{74} %argrw{"wrr"}
	neq		$tmp52 $tmp51 $const2 	%argrw{"wrr"}
	if		$tmp52 77 81 	%argrw{"r"}
	getattribute	$tmp53 $const21 ___731_seed 	%argrw{"wrw"}
	eq		$tmp54 $tmp53 $const2 	%argrw{"wrr"}
	neq		$tmp55 $tmp54 $const2 	%argrw{"wrr"}
	assign		$tmp52 $tmp55 	%argrw{"wr"}
	if		$tmp52 87 87 	%argrw{"r"}
	assign		___734_idname $const8 	%argrw{"wr"}
	getattribute	$tmp56 $const22 ___734_idname 	%argrw{"wrw"}
	hash		$tmp57 ___734_idname 	%argrw{"wr"}
	mod		$tmp58 $tmp57 $const23 	%argrw{"wrr"}
	assign		___731_seed $tmp58 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:76
#     else if (source == k_primVar)
	eq		$tmp59 randomSource $const4 	%line{76} %argrw{"wrr"}
	if		$tmp59 113 117 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:78
#         if (primvarType == k_pvar_int)
	eq		$tmp60 $const2 $const2 	%line{78} %argrw{"wrr"}
	if		$tmp60 97 113 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:80
#             int iseed = 0;
	assign		___736_iseed $const2 	%line{80} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:81
#             if (!getattribute("primvar", primvarName, iseed))
	getattribute	$tmp61 $const10 $const16 ___736_iseed 	%line{81} %argrw{"wrrw"}
	eq		$tmp62 $tmp61 $const2 	%argrw{"wrr"}
	if		$tmp62 96 97 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:82
#                 seed = fallbackValue;
	assign		___731_seed $const13 	%line{82} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:84
#                 seed = iseed;
	assign		___731_seed ___736_iseed 	%line{84} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:86
#         else if (primvarType == k_pvar_float)
	eq		$tmp63 $const2 $const3 	%line{86} %argrw{"wrr"}
	if		$tmp63 103 113 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:88
#             if (!getattribute("primvar", primvarName, seed))
	getattribute	$tmp64 $const10 $const16 ___731_seed 	%line{88} %argrw{"wrrw"}
	eq		$tmp65 $tmp64 $const2 	%argrw{"wrr"}
	if		$tmp65 103 103 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:89
#                 seed = fallbackValue;
	assign		___731_seed $const13 	%line{89} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:91
#         else if (primvarType == k_pvar_string)
	eq		$tmp66 $const2 $const4 	%line{91} %argrw{"wrr"}
	if		$tmp66 112 113 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:93
#             string pvar = "";
	assign		___738_pvar $const8 	%line{93} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:94
#             if (!getattribute("primvar", primvarName, pvar))
	getattribute	$tmp67 $const10 $const16 ___738_pvar 	%line{94} %argrw{"wrrw"}
	eq		$tmp68 $tmp67 $const2 	%argrw{"wrr"}
	if		$tmp68 110 112 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:95
#                 seed = fallbackValue;
	assign		___731_seed $const13 	%line{95} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:97
#                 seed = hash(pvar);
	hash		$tmp69 ___738_pvar 	%line{97} %argrw{"wr"}
	assign		___731_seed $tmp69 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:100
#             warning("getVariationSeed: un-supported primvar type !");
	warning		$const24 	%line{100} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:102
#     else if (source == k_constant)
	eq		$tmp70 randomSource $const5 	%line{102} %argrw{"wrr"}
	if		$tmp70 116 117 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:104
#         seed = fallbackValue;
	assign		___731_seed $const13 	%line{104} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:108
#         error("getVariationSeed : Unknow random source -> %d", source);
	error		$const25 randomSource 	%line{108} %argrw{"rr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:111
#     if (source != k_constant)
	neq		$tmp71 randomSource $const5 	%line{111} %argrw{"wrr"}
	if		$tmp71 129 129 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:113
#         float procPrimId = 0;
	assign		___741_procPrimId $const2 	%line{113} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:114
#         if (getattribute("user:procprimid", procPrimId))
	getattribute	$tmp72 $const26 ___741_procPrimId 	%line{114} %argrw{"wrw"}
	if		$tmp72 129 129 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:116
#             seed += mod(seed + procPrimId, 65536);
	add		$tmp74 ___731_seed ___741_procPrimId 	%line{116} %argrw{"wrr"}
	functioncall	$const28 128 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:154
# float  mod (float  a, float  b) { return a - b*floor(a/b); }
	div		$tmp76 $tmp74 $const27 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{154} %argrw{"wrr"}
	floor		$tmp75 $tmp76 	%argrw{"wr"}
	mul		$tmp77 $const27 $tmp75 	%argrw{"wrr"}
	sub		$tmp73 $tmp74 $tmp77 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:116
#             seed += mod(seed + procPrimId, 65536);
	add		___731_seed ___731_seed $tmp73 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h"} %line{116} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:119
#     return seed;
	assign		id_seed ___731_seed 	%line{119} %argrw{"wr"}
# PxrRandomTextureManifold.osl:363
#     id_seed += floor(randomExtraSeed * 7.0);
	mul		$tmp79 randomExtraSeed $const29 	%filename{"PxrRandomTextureManifold.osl"} %line{363} %argrw{"wrr"}
	floor		$tmp78 $tmp79 	%argrw{"wr"}
	add		id_seed id_seed $tmp78 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:364
#     float id_pvar = randomSource == k_primVar ?
	eq		$tmp80 randomSource $const4 	%line{364} %argrw{"wrr"}
	if		$tmp80 136 142 	%argrw{"r"}
# PxrRandomTextureManifold.osl:365
#                         floor(id_seed) :
	floor		id_pvar id_seed 	%line{365} %argrw{"wr"}
# PxrRandomTextureManifold.osl:366
#                         randomSource == k_objectId ?
	eq		$tmp81 randomSource $const2 	%line{366} %argrw{"wrr"}
	if		$tmp81 141 142 	%argrw{"r"}
# PxrRandomTextureManifold.osl:367
#                             (id_seed / 65535.0) * numTextures :
	div		$tmp82 id_seed $const30 	%line{367} %argrw{"wrr"}
	assign		$tmp83 numTextures 	%argrw{"wr"}
	mul		id_pvar $tmp82 $tmp83 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:366
#                         randomSource == k_objectId ?
	assign		id_pvar $const2 	%line{366} %argrw{"wr"}
# PxrRandomTextureManifold.osl:372
#     if (invertT)
	if		invertT 151 151 	%line{372} %argrw{"r"}
# PxrRandomTextureManifold.osl:373
#         result.Q[1] = invertCoord(result.Q[1]);
	compref		$tmp85 result.Q $const3 	%line{373} %argrw{"wrr"}
	functioncall	$const31 150 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp86 $tmp85 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{48} %argrw{"wr"}
	add		$tmp87 $tmp86 $const32 	%argrw{"wrr"}
	floor		$tmp88 $tmp85 	%argrw{"wr"}
	sub		$tmp89 $tmp85 $tmp88 	%argrw{"wrr"}
	sub		$tmp84 $tmp87 $tmp89 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:373
#         result.Q[1] = invertCoord(result.Q[1]);
	compassign	result.Q $const3 $tmp84 	%filename{"PxrRandomTextureManifold.osl"} %line{373} %argrw{"wrr"}
# PxrRandomTextureManifold.osl:378
#     if (angle != 0.0)
	neq		$tmp90 angle $const13 	%line{378} %argrw{"wrr"}
	if		$tmp90 174 174 	%argrw{"r"}
# PxrRandomTextureManifold.osl:380
#         float rx = 0, ry = 0;
	assign		___751_rx $const2 	%line{380} %argrw{"wr"}
	assign		___751_ry $const2 	%argrw{"wr"}
# PxrRandomTextureManifold.osl:381
#         float cs = 0, sn = 0;
	assign		___751_cs $const2 	%line{381} %argrw{"wr"}
	assign		___751_sn $const2 	%argrw{"wr"}
# PxrRandomTextureManifold.osl:382
#         sincos(radians(-angle), sn, cs);
	neg		$tmp92 angle 	%line{382} %argrw{"wr"}
	functioncall	$const33 161 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:88
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp93 $const34 $const35 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{88} %argrw{"wrr"}
	mul		$tmp91 $tmp92 $tmp93 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:382
#         sincos(radians(-angle), sn, cs);
	sincos		$tmp91 ___751_sn ___751_cs 	%filename{"PxrRandomTextureManifold.osl"} %line{382} %argrw{"rww"}
# PxrRandomTextureManifold.osl:383
#         rx = result.Q[0] * cs - result.Q[1] * sn;
	compref		$tmp94 result.Q $const2 	%line{383} %argrw{"wrr"}
	mul		$tmp95 $tmp94 ___751_cs 	%argrw{"wrr"}
	compref		$tmp96 result.Q $const3 	%argrw{"wrr"}
	mul		$tmp97 $tmp96 ___751_sn 	%argrw{"wrr"}
	sub		___751_rx $tmp95 $tmp97 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:384
#         ry = result.Q[0] * sn + result.Q[1] * cs;
	compref		$tmp98 result.Q $const2 	%line{384} %argrw{"wrr"}
	mul		$tmp99 $tmp98 ___751_sn 	%argrw{"wrr"}
	compref		$tmp100 result.Q $const3 	%argrw{"wrr"}
	mul		$tmp101 $tmp100 ___751_cs 	%argrw{"wrr"}
	add		___751_ry $tmp99 $tmp101 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:385
#         result.Q[0] = rx;
	compassign	result.Q $const2 ___751_rx 	%line{385} %argrw{"wrr"}
# PxrRandomTextureManifold.osl:386
#         result.Q[1] = ry;
	compassign	result.Q $const3 ___751_ry 	%line{386} %argrw{"wrr"}
# PxrRandomTextureManifold.osl:390
#     result.Q[0] = globalScale * scaleS * result.Q[0] + offsetS;
	mul		$tmp102 globalScale scaleS 	%line{390} %argrw{"wrr"}
	compref		$tmp103 result.Q $const2 	%argrw{"wrr"}
	mul		$tmp104 $tmp102 $tmp103 	%argrw{"wrr"}
	add		$tmp105 $tmp104 offsetS 	%argrw{"wrr"}
	compassign	result.Q $const2 $tmp105 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:391
#     result.Q[1] = globalScale * scaleT * result.Q[1] + offsetT;
	mul		$tmp106 globalScale scaleT 	%line{391} %argrw{"wrr"}
	compref		$tmp107 result.Q $const3 	%argrw{"wrr"}
	mul		$tmp108 $tmp106 $tmp107 	%argrw{"wrr"}
	add		$tmp109 $tmp108 offsetT 	%argrw{"wrr"}
	compassign	result.Q $const3 $tmp109 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:392
#     result.Qradius = min(globalScale * scaleS * result.Qradius,
	mul		$tmp110 globalScale scaleS 	%line{392} %argrw{"wrr"}
	mul		$tmp111 $tmp110 result.Qradius 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:393
#                     globalScale * scaleT * result.Qradius);
	mul		$tmp112 globalScale scaleT 	%line{393} %argrw{"wrr"}
	mul		$tmp113 $tmp112 result.Qradius 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:392
#     result.Qradius = min(globalScale * scaleS * result.Qradius,
	min		result.Qradius $tmp111 $tmp113 	%line{392} %argrw{"wrr"}
	assign		result.Qradius result.Qradius 	%argrw{"wr"}
# PxrRandomTextureManifold.osl:395
#     if (isconnected(resultMulti))
	isconnected	$tmp114 resultMulti 	%line{395} %argrw{"wr"}
	if		$tmp114 831 831 	%argrw{"r"}
# PxrRandomTextureManifold.osl:397
#         point ps = point(id_seed + seed, id_seed + seed, seed);
	add		$tmp115 id_seed seed 	%line{397} %argrw{"wrr"}
	add		$tmp116 id_seed seed 	%argrw{"wrr"}
	point		___752_ps $tmp115 $tmp116 seed 	%argrw{"wrrr"}
# PxrRandomTextureManifold.osl:398
#         point rnd = matchCppPattern ? rxcellnoise(ps) : noise("cell", ps);
	if		matchCppPattern 454 455 	%line{398} %argrw{"r"}
	functioncall	$const36 454 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:954
#     noise_parameters np = {3, 3, INPUT3W(seed), point(0), NONPERIODIC};
	assign		___629_np.domain $const5 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h"} %line{954} %argrw{"wr"}
	assign		___629_np.range $const5 	%argrw{"wr"}
	compref		$tmp118 ___752_ps $const2 	%argrw{"wrr"}
	fmod		$tmp117 $tmp118 $const27 	%argrw{"wrr"}
	aassign		___629_np.input $const2 $tmp117 	%argrw{"wrr"}
	compref		$tmp120 ___752_ps $const3 	%argrw{"wrr"}
	fmod		$tmp119 $tmp120 $const27 	%argrw{"wrr"}
	aassign		___629_np.input $const3 $tmp119 	%argrw{"wrr"}
	compref		$tmp122 ___752_ps $const4 	%argrw{"wrr"}
	fmod		$tmp121 $tmp122 $const27 	%argrw{"wrr"}
	aassign		___629_np.input $const4 $tmp121 	%argrw{"wrr"}
	aassign		___629_np.input $const5 $const2 	%argrw{"wrr"}
	assign		___629_np.result $const6 	%argrw{"wr"}
	assign		___629_np.periodic $const2 	%argrw{"wr"}
	assign		___629_np.period $const37 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:955
#     rx_cell_noise(np);
	functioncall	$const38 450 	%line{955} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:68
#     float rxcellrandtable[4096] = {
	assign		___566_rxcellrandtable $const39 	%line{68} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:582
#     int rxcellpermute[4096] = {
	assign		___566_rxcellpermute $const40 	%line{582} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:904
#     int k = 0;
	assign		___566_k $const2 	%line{904} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:905
#     if (np.domain == 1)
	eq		$tmp123 ___629_np.domain $const3 	%line{905} %argrw{"wrr"}
	if		$tmp123 246 450 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:907
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp124 ___629_np.input $const2 	%line{907} %argrw{"wrr"}
	add		___566_v0 $tmp124 $const41 	%argrw{"wrr"}
	lt		$tmp125 ___566_v0 $const13 	%argrw{"wrr"}
	if		$tmp125 227 231 	%argrw{"r"}
	lt		$tmp126 ___566_v0 $const42 	%argrw{"wrr"}
	if		$tmp126 225 227 	%argrw{"r"}
	assign		___566_int00 $const2 	%argrw{"wr"}
	assign		$tmp127 ___566_v0 	%argrw{"wr"}
	sub		___566_int00 $tmp127 $const3 	%argrw{"wrr"}
	gt		$tmp128 ___566_v0 $const43 	%argrw{"wrr"}
	if		$tmp128 230 231 	%argrw{"r"}
	assign		___566_int00 $const2 	%argrw{"wr"}
	assign		___566_int00 ___566_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:908
#         for (i = np.range; i > 0; i--, int00 += 7)
	for		$tmp130 233 235 243 246 	%line{908} %argrw{"r"}
	assign		___566_i ___629_np.range 	%argrw{"wr"}
	gt		$tmp129 ___566_i $const2 	%argrw{"wrr"}
	neq		$tmp130 $tmp129 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:910
#             v0 = rxcellrandtable[CELLPERMUTE(int00)];
	shl		$tmp131 $const3 $const44 	%line{910} %argrw{"wrr"}
	sub		$tmp132 $tmp131 $const3 	%argrw{"wrr"}
	bitand		$tmp133 ___566_int00 $tmp132 	%argrw{"wrr"}
	aref		$tmp134 ___566_rxcellpermute $tmp133 	%argrw{"wrr"}
	aref		___566_v0 ___566_rxcellrandtable $tmp134 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:911
#             np.result[k++] = v0;
	assign		$tmp135 ___566_k 	%line{911} %argrw{"wr"}
	add		___566_k ___566_k $const3 	%argrw{"wrr"}
	compassign	___629_np.result $tmp135 ___566_v0 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:908
#         for (i = np.range; i > 0; i--, int00 += 7)
	assign		$tmp136 ___566_i 	%line{908} %argrw{"wr"}
	sub		___566_i ___566_i $const3 	%argrw{"wrr"}
	add		___566_int00 ___566_int00 $const45 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:914
#     else if (np.domain == 2)
	eq		$tmp137 ___629_np.domain $const4 	%line{914} %argrw{"wrr"}
	if		$tmp137 295 450 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:916
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp138 ___629_np.input $const2 	%line{916} %argrw{"wrr"}
	add		___566_v0 $tmp138 $const41 	%argrw{"wrr"}
	lt		$tmp139 ___566_v0 $const13 	%argrw{"wrr"}
	if		$tmp139 257 261 	%argrw{"r"}
	lt		$tmp140 ___566_v0 $const42 	%argrw{"wrr"}
	if		$tmp140 255 257 	%argrw{"r"}
	assign		___566_int00 $const2 	%argrw{"wr"}
	assign		$tmp141 ___566_v0 	%argrw{"wr"}
	sub		___566_int00 $tmp141 $const3 	%argrw{"wrr"}
	gt		$tmp142 ___566_v0 $const43 	%argrw{"wrr"}
	if		$tmp142 260 261 	%argrw{"r"}
	assign		___566_int00 $const2 	%argrw{"wr"}
	assign		___566_int00 ___566_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:917
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp143 ___629_np.input $const3 	%line{917} %argrw{"wrr"}
	add		___566_v0 $tmp143 $const41 	%argrw{"wrr"}
	lt		$tmp144 ___566_v0 $const13 	%argrw{"wrr"}
	if		$tmp144 270 274 	%argrw{"r"}
	lt		$tmp145 ___566_v0 $const42 	%argrw{"wrr"}
	if		$tmp145 268 270 	%argrw{"r"}
	assign		___566_int01 $const2 	%argrw{"wr"}
	assign		$tmp146 ___566_v0 	%argrw{"wr"}
	sub		___566_int01 $tmp146 $const3 	%argrw{"wrr"}
	gt		$tmp147 ___566_v0 $const43 	%argrw{"wrr"}
	if		$tmp147 273 274 	%argrw{"r"}
	assign		___566_int01 $const2 	%argrw{"wr"}
	assign		___566_int01 ___566_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:918
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7)
	for		$tmp149 276 278 291 295 	%line{918} %argrw{"r"}
	assign		___566_i ___629_np.range 	%argrw{"wr"}
	gt		$tmp148 ___566_i $const2 	%argrw{"wrr"}
	neq		$tmp149 $tmp148 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:920
#             iy = CELLPERMUTE(int01);
	shl		$tmp150 $const3 $const44 	%line{920} %argrw{"wrr"}
	sub		$tmp151 $tmp150 $const3 	%argrw{"wrr"}
	bitand		$tmp152 ___566_int01 $tmp151 	%argrw{"wrr"}
	aref		___566_iy ___566_rxcellpermute $tmp152 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:921
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(iy + int00)];
	add		$tmp153 ___566_iy ___566_int00 	%line{921} %argrw{"wrr"}
	shl		$tmp154 $const3 $const44 	%argrw{"wrr"}
	sub		$tmp155 $tmp154 $const3 	%argrw{"wrr"}
	bitand		$tmp156 $tmp153 $tmp155 	%argrw{"wrr"}
	aref		$tmp157 ___566_rxcellpermute $tmp156 	%argrw{"wrr"}
	aref		$tmp158 ___566_rxcellrandtable $tmp157 	%argrw{"wrr"}
	assign		$tmp159 ___566_k 	%argrw{"wr"}
	add		___566_k ___566_k $const3 	%argrw{"wrr"}
	compassign	___629_np.result $tmp159 $tmp158 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:918
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7)
	assign		$tmp160 ___566_i 	%line{918} %argrw{"wr"}
	sub		___566_i ___566_i $const3 	%argrw{"wrr"}
	add		___566_int00 ___566_int00 $const45 	%argrw{"wrr"}
	add		___566_int01 ___566_int01 $const45 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:924
#     else if (np.domain == 3)
	eq		$tmp161 ___629_np.domain $const5 	%line{924} %argrw{"wrr"}
	if		$tmp161 363 450 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:926
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp162 ___629_np.input $const2 	%line{926} %argrw{"wrr"}
	add		___566_v0 $tmp162 $const41 	%argrw{"wrr"}
	lt		$tmp163 ___566_v0 $const13 	%argrw{"wrr"}
	if		$tmp163 306 310 	%argrw{"r"}
	lt		$tmp164 ___566_v0 $const42 	%argrw{"wrr"}
	if		$tmp164 304 306 	%argrw{"r"}
	assign		___566_int00 $const2 	%argrw{"wr"}
	assign		$tmp165 ___566_v0 	%argrw{"wr"}
	sub		___566_int00 $tmp165 $const3 	%argrw{"wrr"}
	gt		$tmp166 ___566_v0 $const43 	%argrw{"wrr"}
	if		$tmp166 309 310 	%argrw{"r"}
	assign		___566_int00 $const2 	%argrw{"wr"}
	assign		___566_int00 ___566_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:927
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp167 ___629_np.input $const3 	%line{927} %argrw{"wrr"}
	add		___566_v0 $tmp167 $const41 	%argrw{"wrr"}
	lt		$tmp168 ___566_v0 $const13 	%argrw{"wrr"}
	if		$tmp168 319 323 	%argrw{"r"}
	lt		$tmp169 ___566_v0 $const42 	%argrw{"wrr"}
	if		$tmp169 317 319 	%argrw{"r"}
	assign		___566_int01 $const2 	%argrw{"wr"}
	assign		$tmp170 ___566_v0 	%argrw{"wr"}
	sub		___566_int01 $tmp170 $const3 	%argrw{"wrr"}
	gt		$tmp171 ___566_v0 $const43 	%argrw{"wrr"}
	if		$tmp171 322 323 	%argrw{"r"}
	assign		___566_int01 $const2 	%argrw{"wr"}
	assign		___566_int01 ___566_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:928
#         SETUP_CELL_DOMAIN(2, int02);
	aref		$tmp172 ___629_np.input $const4 	%line{928} %argrw{"wrr"}
	add		___566_v0 $tmp172 $const41 	%argrw{"wrr"}
	lt		$tmp173 ___566_v0 $const13 	%argrw{"wrr"}
	if		$tmp173 332 336 	%argrw{"r"}
	lt		$tmp174 ___566_v0 $const42 	%argrw{"wrr"}
	if		$tmp174 330 332 	%argrw{"r"}
	assign		___566_int02 $const2 	%argrw{"wr"}
	assign		$tmp175 ___566_v0 	%argrw{"wr"}
	sub		___566_int02 $tmp175 $const3 	%argrw{"wrr"}
	gt		$tmp176 ___566_v0 $const43 	%argrw{"wrr"}
	if		$tmp176 335 336 	%argrw{"r"}
	assign		___566_int02 $const2 	%argrw{"wr"}
	assign		___566_int02 ___566_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:929
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3)
	for		$tmp178 338 340 358 363 	%line{929} %argrw{"r"}
	assign		___566_i ___629_np.range 	%argrw{"wr"}
	gt		$tmp177 ___566_i $const2 	%argrw{"wrr"}
	neq		$tmp178 $tmp177 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:931
#             iz = CELLPERMUTE(int02);
	shl		$tmp179 $const3 $const44 	%line{931} %argrw{"wrr"}
	sub		$tmp180 $tmp179 $const3 	%argrw{"wrr"}
	bitand		$tmp181 ___566_int02 $tmp180 	%argrw{"wrr"}
	aref		___566_iz ___566_rxcellpermute $tmp181 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:932
#             iy = CELLPERMUTE(int01 + iz);
	add		$tmp182 ___566_int01 ___566_iz 	%line{932} %argrw{"wrr"}
	shl		$tmp183 $const3 $const44 	%argrw{"wrr"}
	sub		$tmp184 $tmp183 $const3 	%argrw{"wrr"}
	bitand		$tmp185 $tmp182 $tmp184 	%argrw{"wrr"}
	aref		___566_iy ___566_rxcellpermute $tmp185 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:933
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(int00 + iy)];
	add		$tmp186 ___566_int00 ___566_iy 	%line{933} %argrw{"wrr"}
	shl		$tmp187 $const3 $const44 	%argrw{"wrr"}
	sub		$tmp188 $tmp187 $const3 	%argrw{"wrr"}
	bitand		$tmp189 $tmp186 $tmp188 	%argrw{"wrr"}
	aref		$tmp190 ___566_rxcellpermute $tmp189 	%argrw{"wrr"}
	aref		$tmp191 ___566_rxcellrandtable $tmp190 	%argrw{"wrr"}
	assign		$tmp192 ___566_k 	%argrw{"wr"}
	add		___566_k ___566_k $const3 	%argrw{"wrr"}
	compassign	___629_np.result $tmp192 $tmp191 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:929
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3)
	assign		$tmp193 ___566_i 	%line{929} %argrw{"wr"}
	sub		___566_i ___566_i $const3 	%argrw{"wrr"}
	add		___566_int00 ___566_int00 $const45 	%argrw{"wrr"}
	add		___566_int01 ___566_int01 $const45 	%argrw{"wrr"}
	add		___566_int02 ___566_int02 $const5 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:936
#     else if (np.domain == 4)
	eq		$tmp194 ___629_np.domain $const46 	%line{936} %argrw{"wrr"}
	if		$tmp194 450 450 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:938
#         SETUP_CELL_DOMAIN(0, int00);
	aref		$tmp195 ___629_np.input $const2 	%line{938} %argrw{"wrr"}
	add		___566_v0 $tmp195 $const41 	%argrw{"wrr"}
	lt		$tmp196 ___566_v0 $const13 	%argrw{"wrr"}
	if		$tmp196 374 378 	%argrw{"r"}
	lt		$tmp197 ___566_v0 $const42 	%argrw{"wrr"}
	if		$tmp197 372 374 	%argrw{"r"}
	assign		___566_int00 $const2 	%argrw{"wr"}
	assign		$tmp198 ___566_v0 	%argrw{"wr"}
	sub		___566_int00 $tmp198 $const3 	%argrw{"wrr"}
	gt		$tmp199 ___566_v0 $const43 	%argrw{"wrr"}
	if		$tmp199 377 378 	%argrw{"r"}
	assign		___566_int00 $const2 	%argrw{"wr"}
	assign		___566_int00 ___566_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:939
#         SETUP_CELL_DOMAIN(1, int01);
	aref		$tmp200 ___629_np.input $const3 	%line{939} %argrw{"wrr"}
	add		___566_v0 $tmp200 $const41 	%argrw{"wrr"}
	lt		$tmp201 ___566_v0 $const13 	%argrw{"wrr"}
	if		$tmp201 387 391 	%argrw{"r"}
	lt		$tmp202 ___566_v0 $const42 	%argrw{"wrr"}
	if		$tmp202 385 387 	%argrw{"r"}
	assign		___566_int01 $const2 	%argrw{"wr"}
	assign		$tmp203 ___566_v0 	%argrw{"wr"}
	sub		___566_int01 $tmp203 $const3 	%argrw{"wrr"}
	gt		$tmp204 ___566_v0 $const43 	%argrw{"wrr"}
	if		$tmp204 390 391 	%argrw{"r"}
	assign		___566_int01 $const2 	%argrw{"wr"}
	assign		___566_int01 ___566_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:940
#         SETUP_CELL_DOMAIN(2, int02);
	aref		$tmp205 ___629_np.input $const4 	%line{940} %argrw{"wrr"}
	add		___566_v0 $tmp205 $const41 	%argrw{"wrr"}
	lt		$tmp206 ___566_v0 $const13 	%argrw{"wrr"}
	if		$tmp206 400 404 	%argrw{"r"}
	lt		$tmp207 ___566_v0 $const42 	%argrw{"wrr"}
	if		$tmp207 398 400 	%argrw{"r"}
	assign		___566_int02 $const2 	%argrw{"wr"}
	assign		$tmp208 ___566_v0 	%argrw{"wr"}
	sub		___566_int02 $tmp208 $const3 	%argrw{"wrr"}
	gt		$tmp209 ___566_v0 $const43 	%argrw{"wrr"}
	if		$tmp209 403 404 	%argrw{"r"}
	assign		___566_int02 $const2 	%argrw{"wr"}
	assign		___566_int02 ___566_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:941
#         SETUP_CELL_DOMAIN(3, int03);
	aref		$tmp210 ___629_np.input $const5 	%line{941} %argrw{"wrr"}
	add		___566_v0 $tmp210 $const41 	%argrw{"wrr"}
	lt		$tmp211 ___566_v0 $const13 	%argrw{"wrr"}
	if		$tmp211 413 417 	%argrw{"r"}
	lt		$tmp212 ___566_v0 $const42 	%argrw{"wrr"}
	if		$tmp212 411 413 	%argrw{"r"}
	assign		___566_int03 $const2 	%argrw{"wr"}
	assign		$tmp213 ___566_v0 	%argrw{"wr"}
	sub		___566_int03 $tmp213 $const3 	%argrw{"wrr"}
	gt		$tmp214 ___566_v0 $const43 	%argrw{"wrr"}
	if		$tmp214 416 417 	%argrw{"r"}
	assign		___566_int03 $const2 	%argrw{"wr"}
	assign		___566_int03 ___566_v0 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:942
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3, int03 += 15)
	for		$tmp216 419 421 444 450 	%line{942} %argrw{"r"}
	assign		___566_i ___629_np.range 	%argrw{"wr"}
	gt		$tmp215 ___566_i $const2 	%argrw{"wrr"}
	neq		$tmp216 $tmp215 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:944
#             iz = CELLPERMUTE(int02 + CELLPERMUTE(int03));
	shl		$tmp217 $const3 $const44 	%line{944} %argrw{"wrr"}
	sub		$tmp218 $tmp217 $const3 	%argrw{"wrr"}
	bitand		$tmp219 ___566_int03 $tmp218 	%argrw{"wrr"}
	aref		$tmp220 ___566_rxcellpermute $tmp219 	%argrw{"wrr"}
	add		$tmp221 ___566_int02 $tmp220 	%argrw{"wrr"}
	shl		$tmp222 $const3 $const44 	%argrw{"wrr"}
	sub		$tmp223 $tmp222 $const3 	%argrw{"wrr"}
	bitand		$tmp224 $tmp221 $tmp223 	%argrw{"wrr"}
	aref		___566_iz ___566_rxcellpermute $tmp224 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:945
#             iy = CELLPERMUTE(int01 + iz);
	add		$tmp225 ___566_int01 ___566_iz 	%line{945} %argrw{"wrr"}
	shl		$tmp226 $const3 $const44 	%argrw{"wrr"}
	sub		$tmp227 $tmp226 $const3 	%argrw{"wrr"}
	bitand		$tmp228 $tmp225 $tmp227 	%argrw{"wrr"}
	aref		___566_iy ___566_rxcellpermute $tmp228 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:946
#             np.result[k++] = rxcellrandtable[CELLPERMUTE(int00 + iy)];
	add		$tmp229 ___566_int00 ___566_iy 	%line{946} %argrw{"wrr"}
	shl		$tmp230 $const3 $const44 	%argrw{"wrr"}
	sub		$tmp231 $tmp230 $const3 	%argrw{"wrr"}
	bitand		$tmp232 $tmp229 $tmp231 	%argrw{"wrr"}
	aref		$tmp233 ___566_rxcellpermute $tmp232 	%argrw{"wrr"}
	aref		$tmp234 ___566_rxcellrandtable $tmp233 	%argrw{"wrr"}
	assign		$tmp235 ___566_k 	%argrw{"wr"}
	add		___566_k ___566_k $const3 	%argrw{"wrr"}
	compassign	___629_np.result $tmp235 $tmp234 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:942
#         for (i = np.range; i > 0; i--, int00 += 7, int01 += 7, int02 += 3, int03 += 15)
	assign		$tmp236 ___566_i 	%line{942} %argrw{"wr"}
	sub		___566_i ___566_i $const3 	%argrw{"wrr"}
	add		___566_int00 ___566_int00 $const45 	%argrw{"wrr"}
	add		___566_int01 ___566_int01 $const45 	%argrw{"wrr"}
	add		___566_int02 ___566_int02 $const5 	%argrw{"wrr"}
	add		___566_int03 ___566_int03 $const47 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/rmanCellNoise.h:956
#     return point(np.result[0], np.result[1], np.result[2]);
	compref		$tmp237 ___629_np.result $const2 	%line{956} %argrw{"wrr"}
	compref		$tmp238 ___629_np.result $const3 	%argrw{"wrr"}
	compref		$tmp239 ___629_np.result $const4 	%argrw{"wrr"}
	point		___752_rnd $tmp237 $tmp238 $tmp239 	%argrw{"wrrr"}
# PxrRandomTextureManifold.osl:398
#         point rnd = matchCppPattern ? rxcellnoise(ps) : noise("cell", ps);
	noise		___752_rnd $const48 ___752_ps 	%filename{"PxrRandomTextureManifold.osl"} %line{398} %argrw{"wrr"}
# PxrRandomTextureManifold.osl:399
#         if (randomOrientation && rnd[1] + rnd[2] > 1.0)
	neq		$tmp240 randomOrientation $const2 	%line{399} %argrw{"wrr"}
	if		$tmp240 463 463 	%argrw{"r"}
	compref		$tmp241 ___752_rnd $const3 	%argrw{"wrr"}
	compref		$tmp242 ___752_rnd $const4 	%argrw{"wrr"}
	add		$tmp243 $tmp241 $tmp242 	%argrw{"wrr"}
	gt		$tmp244 $tmp243 $const32 	%argrw{"wrr"}
	neq		$tmp245 $tmp244 $const2 	%argrw{"wrr"}
	assign		$tmp240 $tmp245 	%argrw{"wr"}
	if		$tmp240 468 468 	%argrw{"r"}
# PxrRandomTextureManifold.osl:401
#             float tmp = result.Q[0];
	compref		___753_tmp result.Q $const2 	%line{401} %argrw{"wrr"}
# PxrRandomTextureManifold.osl:402
#             result.Q[0] = result.Q[1];
	compref		$tmp246 result.Q $const3 	%line{402} %argrw{"wrr"}
	compassign	result.Q $const2 $tmp246 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:403
#             result.Q[1] = tmp;
	compassign	result.Q $const3 ___753_tmp 	%line{403} %argrw{"wrr"}
# PxrRandomTextureManifold.osl:405
#         if (randomFlipS && rnd[1] > 0.5)
	neq		$tmp247 randomFlipS $const2 	%line{405} %argrw{"wrr"}
	if		$tmp247 474 474 	%argrw{"r"}
	compref		$tmp248 ___752_rnd $const3 	%argrw{"wrr"}
	gt		$tmp249 $tmp248 $const14 	%argrw{"wrr"}
	neq		$tmp250 $tmp249 $const2 	%argrw{"wrr"}
	assign		$tmp247 $tmp250 	%argrw{"wr"}
	if		$tmp247 478 478 	%argrw{"r"}
# PxrRandomTextureManifold.osl:406
#             result.Q[0] = 1.0 - result.Q[0];
	compref		$tmp251 result.Q $const2 	%line{406} %argrw{"wrr"}
	sub		$tmp252 $const32 $tmp251 	%argrw{"wrr"}
	compassign	result.Q $const2 $tmp252 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:407
#         if (randomFlipT && rnd[2] > 0.5)
	neq		$tmp253 randomFlipT $const2 	%line{407} %argrw{"wrr"}
	if		$tmp253 484 484 	%argrw{"r"}
	compref		$tmp254 ___752_rnd $const4 	%argrw{"wrr"}
	gt		$tmp255 $tmp254 $const14 	%argrw{"wrr"}
	neq		$tmp256 $tmp255 $const2 	%argrw{"wrr"}
	assign		$tmp253 $tmp256 	%argrw{"wr"}
	if		$tmp253 488 488 	%argrw{"r"}
# PxrRandomTextureManifold.osl:408
#             result.Q[1] = 1.0 - result.Q[1];
	compref		$tmp257 result.Q $const3 	%line{408} %argrw{"wrr"}
	sub		$tmp258 $const32 $tmp257 	%argrw{"wrr"}
	compassign	result.Q $const3 $tmp258 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:409
#         if (randomOffsetS)
	if		randomOffsetS 493 493 	%line{409} %argrw{"r"}
# PxrRandomTextureManifold.osl:410
#             result.Q[0] += rnd[1];
	compref		$tmp259 result.Q $const2 	%line{410} %argrw{"wrr"}
	compref		$tmp260 ___752_rnd $const3 	%argrw{"wrr"}
	add		$tmp261 $tmp259 $tmp260 	%argrw{"wrr"}
	compassign	result.Q $const2 $tmp261 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:411
#         if (randomOffsetT)
	if		randomOffsetT 498 498 	%line{411} %argrw{"r"}
# PxrRandomTextureManifold.osl:412
#             result.Q[1] += rnd[2];
	compref		$tmp262 result.Q $const3 	%line{412} %argrw{"wrr"}
	compref		$tmp263 ___752_rnd $const4 	%argrw{"wrr"}
	add		$tmp264 $tmp262 $tmp263 	%argrw{"wrr"}
	compassign	result.Q $const3 $tmp264 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:414
#         result.Q *= frequency;
	mul		result.Q result.Q frequency 	%line{414} %argrw{"wrr"}
	assign		result.Q result.Q 	%argrw{"wr"}
# PxrRandomTextureManifold.osl:416
#         if (tilingMode == k_tile_hex)
	eq		$tmp265 tilingMode $const3 	%line{416} %argrw{"wrr"}
	if		$tmp265 765 765 	%argrw{"r"}
# PxrRandomTextureManifold.osl:421
#             hexTile(point(result.Q[0], result.Q[1], 0.0),
	compref		$tmp267 result.Q $const2 	%line{421} %argrw{"wrr"}
	compref		$tmp268 result.Q $const3 	%argrw{"wrr"}
	point		$tmp266 $tmp267 $tmp268 $const13 	%argrw{"wrrr"}
	functioncall	$const49 761 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:94
#     float cellRotation = rotation;
	assign		___703_cellRotation $const13 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{94} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:95
#     float r1 = 0, r2 = 0, r3 = 0;
	assign		___703_r1 $const2 	%line{95} %argrw{"wr"}
	assign		___703_r2 $const2 	%argrw{"wr"}
	assign		___703_r3 $const2 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:97
#     float s = pIn[0];
	compref		___703_s $tmp266 $const2 	%line{97} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:98
#     float t = pIn[1];
	compref		___703_t $tmp266 $const3 	%line{98} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:104
#     float Yscale = 1.154700538;
	assign		___703_Yscale $const50 	%line{104} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:105
#     float invYscale = 0.866025404;
	assign		___703_invYscale $const51 	%line{105} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:107
#     float cellY = t * Yscale;
	mul		___703_cellY ___703_t ___703_Yscale 	%line{107} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:109
#     float cellX = s - cellY * 0.5;
	mul		$tmp269 ___703_cellY $const14 	%line{109} %argrw{"wrr"}
	sub		___703_cellX ___703_s $tmp269 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:110
#     float cellXInt = floor(cellX);
	floor		___703_cellXInt ___703_cellX 	%line{110} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:111
#     float cellYInt = floor(cellY);
	floor		___703_cellYInt ___703_cellY 	%line{111} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:112
#     float cellXFract = cellX - cellXInt;
	sub		___703_cellXFract ___703_cellX ___703_cellXInt 	%line{112} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:113
#     float cellYFract = cellY - cellYInt;
	sub		___703_cellYFract ___703_cellY ___703_cellYInt 	%line{113} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:118
#     point cellV1 = point(cellXInt,   cellYInt,   0.0);
	point		___703_cellV1 ___703_cellXInt ___703_cellYInt $const13 	%line{118} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:119
#     point cellV2 = point(cellXInt+1, cellYInt,   0.0);
	add		$tmp270 ___703_cellXInt $const32 	%line{119} %argrw{"wrr"}
	point		___703_cellV2 $tmp270 ___703_cellYInt $const13 	%argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:120
#     point cellV3 = point(cellXInt,   cellYInt+1, 0.0);
	add		$tmp271 ___703_cellYInt $const32 	%line{120} %argrw{"wrr"}
	point		___703_cellV3 ___703_cellXInt $tmp271 $const13 	%argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:121
#     float cellW1 = 1.0 - cellXFract - cellYFract;
	sub		$tmp272 $const32 ___703_cellXFract 	%line{121} %argrw{"wrr"}
	sub		___703_cellW1 $tmp272 ___703_cellYFract 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:122
#     float cellW2 = cellXFract;
	assign		___703_cellW2 ___703_cellXFract 	%line{122} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:123
#     float cellW3 = cellYFract;
	assign		___703_cellW3 ___703_cellYFract 	%line{123} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:127
#     if (cellXFract + cellYFract > 1.0) {
	add		$tmp273 ___703_cellXFract ___703_cellYFract 	%line{127} %argrw{"wrr"}
	gt		$tmp274 $tmp273 $const32 	%argrw{"wrr"}
	if		$tmp274 540 540 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:128
#         cellV1 = point(cellXInt+1, cellYInt+1, 0.0);
	add		$tmp275 ___703_cellXInt $const32 	%line{128} %argrw{"wrr"}
	add		$tmp276 ___703_cellYInt $const32 	%argrw{"wrr"}
	point		___703_cellV1 $tmp275 $tmp276 $const13 	%argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:129
#         cellW1 = -cellW1;
	neg		___703_cellW1 ___703_cellW1 	%line{129} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:130
#         cellW2 = 1.0 - cellW3;
	sub		___703_cellW2 $const32 ___703_cellW3 	%line{130} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:131
#         cellW3 = 1.0 - cellW1 - cellW2;
	sub		$tmp277 $const32 ___703_cellW1 	%line{131} %argrw{"wrr"}
	sub		___703_cellW3 $tmp277 ___703_cellW2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:135
#     point textureST1 = point(s, t, 0.0);
	point		___703_textureST1 ___703_s ___703_t $const13 	%line{135} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:136
#     point textureST2 = point(s, t, 0.0);
	point		___703_textureST2 ___703_s ___703_t $const13 	%line{136} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:137
#     point textureST3 = point(s, t, 0.0);
	point		___703_textureST3 ___703_s ___703_t $const13 	%line{137} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:139
#     if (texFreq != 1.0 ||
	neq		$tmp278 textureFrequency $const32 	%line{139} %argrw{"wrr"}
	neq		$tmp279 $tmp278 $const2 	%argrw{"wrr"}
	if		$tmp279 546 548 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:140
#         scaleJitter ||
	neq		$tmp280 scaleJitter $const13 	%line{140} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:139
#     if (texFreq != 1.0 ||
	assign		$tmp279 $tmp280 	%line{139} %argrw{"wr"}
	neq		$tmp281 $tmp279 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:140
#         scaleJitter ||
	if		$tmp281 550 552 	%line{140} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:141
#         rotateJitter ||
	neq		$tmp282 rotateJitter $const13 	%line{141} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:140
#         scaleJitter ||
	assign		$tmp281 $tmp282 	%line{140} %argrw{"wr"}
	neq		$tmp283 $tmp281 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:141
#         rotateJitter ||
	if		$tmp283 554 556 	%line{141} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:142
#         cellRotation ||
	neq		$tmp284 ___703_cellRotation $const13 	%line{142} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:141
#         rotateJitter ||
	assign		$tmp283 $tmp284 	%line{141} %argrw{"wr"}
	neq		$tmp285 $tmp283 $const2 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:142
#         cellRotation ||
	if		$tmp285 558 560 	%line{142} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:143
#         useOrientation) {
	neq		$tmp286 $const2 $const2 	%line{143} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:142
#         cellRotation ||
	assign		$tmp285 $tmp286 	%line{142} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:139
#     if (texFreq != 1.0 ||
	if		$tmp285 721 721 	%line{139} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:147
#         point cellOffset1 = point(cellV1[0] + cellV1[1] * 0.5,
	compref		$tmp287 ___703_cellV1 $const2 	%line{147} %argrw{"wrr"}
	compref		$tmp288 ___703_cellV1 $const3 	%argrw{"wrr"}
	mul		$tmp289 $tmp288 $const14 	%argrw{"wrr"}
	add		$tmp290 $tmp287 $tmp289 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:148
#                                   cellV1[1] * invYscale,
	compref		$tmp291 ___703_cellV1 $const3 	%line{148} %argrw{"wrr"}
	mul		$tmp292 $tmp291 ___703_invYscale 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:147
#         point cellOffset1 = point(cellV1[0] + cellV1[1] * 0.5,
	point		___705_cellOffset1 $tmp290 $tmp292 $const13 	%line{147} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:150
#         point cellOffset2 = point(cellV2[0] + cellV2[1] * 0.5,
	compref		$tmp293 ___703_cellV2 $const2 	%line{150} %argrw{"wrr"}
	compref		$tmp294 ___703_cellV2 $const3 	%argrw{"wrr"}
	mul		$tmp295 $tmp294 $const14 	%argrw{"wrr"}
	add		$tmp296 $tmp293 $tmp295 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:151
#                                   cellV2[1] * invYscale,
	compref		$tmp297 ___703_cellV2 $const3 	%line{151} %argrw{"wrr"}
	mul		$tmp298 $tmp297 ___703_invYscale 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:150
#         point cellOffset2 = point(cellV2[0] + cellV2[1] * 0.5,
	point		___705_cellOffset2 $tmp296 $tmp298 $const13 	%line{150} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:153
#         point cellOffset3 = point(cellV3[0] + cellV3[1] * 0.5,
	compref		$tmp299 ___703_cellV3 $const2 	%line{153} %argrw{"wrr"}
	compref		$tmp300 ___703_cellV3 $const3 	%argrw{"wrr"}
	mul		$tmp301 $tmp300 $const14 	%argrw{"wrr"}
	add		$tmp302 $tmp299 $tmp301 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:154
#                                   cellV3[1] * invYscale,
	compref		$tmp303 ___703_cellV3 $const3 	%line{154} %argrw{"wrr"}
	mul		$tmp304 $tmp303 ___703_invYscale 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:153
#         point cellOffset3 = point(cellV3[0] + cellV3[1] * 0.5,
	point		___705_cellOffset3 $tmp302 $tmp304 $const13 	%line{153} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:158
#         point origin1 = textureST1 - cellOffset1;
	sub		___705_origin1 ___703_textureST1 ___705_cellOffset1 	%line{158} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:159
#         point origin2 = textureST2 - cellOffset2;
	sub		___705_origin2 ___703_textureST2 ___705_cellOffset2 	%line{159} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:160
#         point origin3 = textureST3 - cellOffset3;
	sub		___705_origin3 ___703_textureST3 ___705_cellOffset3 	%line{160} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:163
#         point noiseV1 = cellnoise(cellV1 * point(123.456, 867.5309, 555.1212));
	mul		$tmp306 ___703_cellV1 $const52 	%line{163} %argrw{"wrr"}
	cellnoise	___705_noiseV1 $tmp306 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:164
#         point noiseV2 = cellnoise(cellV2 * point(123.456, 867.5309, 555.1212));
	mul		$tmp308 ___703_cellV2 $const52 	%line{164} %argrw{"wrr"}
	cellnoise	___705_noiseV2 $tmp308 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:165
#         point noiseV3 = cellnoise(cellV3 * point(123.456, 867.5309, 555.1212));
	mul		$tmp310 ___703_cellV3 $const52 	%line{165} %argrw{"wrr"}
	cellnoise	___705_noiseV3 $tmp310 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:168
#         if (rotateJitter || cellRotation || useOrientation)
	neq		$tmp311 rotateJitter $const13 	%line{168} %argrw{"wrr"}
	if		$tmp311 593 595 	%argrw{"r"}
	neq		$tmp312 ___703_cellRotation $const13 	%argrw{"wrr"}
	assign		$tmp311 $tmp312 	%argrw{"wr"}
	neq		$tmp313 $tmp311 $const2 	%argrw{"wrr"}
	if		$tmp313 597 599 	%argrw{"r"}
	neq		$tmp314 $const2 $const2 	%argrw{"wrr"}
	assign		$tmp313 $tmp314 	%argrw{"wr"}
	if		$tmp313 699 699 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:170
#             float angle = 0.0;
	assign		___706_angle $const13 	%line{170} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:171
#             if (useOrientation)
	if		$const2 603 603 	%line{171} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:172
#                 angle = orientation;
	assign		___706_angle $const13 	%line{172} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:174
#             r1 = degrees(M_2PI * rotateJitter * (noiseV1[0]-0.5) + angle);
	mul		$tmp315 $const53 rotateJitter 	%line{174} %argrw{"wrr"}
	compref		$tmp316 ___705_noiseV1 $const2 	%argrw{"wrr"}
	sub		$tmp317 $tmp316 $const14 	%argrw{"wrr"}
	mul		$tmp318 $tmp315 $tmp317 	%argrw{"wrr"}
	add		$tmp319 $tmp318 ___706_angle 	%argrw{"wrr"}
	functioncall	$const54 611 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:83
# float  degrees (float x)  { return x*(180.0/M_PI); }
	div		$tmp320 $const35 $const34 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{83} %argrw{"wrr"}
	mul		___703_r1 $tmp319 $tmp320 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:175
#             r2 = degrees(M_2PI * rotateJitter * (noiseV2[0]-0.5) + angle);
	mul		$tmp321 $const53 rotateJitter 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{175} %argrw{"wrr"}
	compref		$tmp322 ___705_noiseV2 $const2 	%argrw{"wrr"}
	sub		$tmp323 $tmp322 $const14 	%argrw{"wrr"}
	mul		$tmp324 $tmp321 $tmp323 	%argrw{"wrr"}
	add		$tmp325 $tmp324 ___706_angle 	%argrw{"wrr"}
	functioncall	$const54 619 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:83
# float  degrees (float x)  { return x*(180.0/M_PI); }
	div		$tmp326 $const35 $const34 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{83} %argrw{"wrr"}
	mul		___703_r2 $tmp325 $tmp326 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:176
#             r3 = degrees(M_2PI * rotateJitter * (noiseV3[0]-0.5) + angle);
	mul		$tmp327 $const53 rotateJitter 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{176} %argrw{"wrr"}
	compref		$tmp328 ___705_noiseV3 $const2 	%argrw{"wrr"}
	sub		$tmp329 $tmp328 $const14 	%argrw{"wrr"}
	mul		$tmp330 $tmp327 $tmp329 	%argrw{"wrr"}
	add		$tmp331 $tmp330 ___706_angle 	%argrw{"wrr"}
	functioncall	$const54 627 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:83
# float  degrees (float x)  { return x*(180.0/M_PI); }
	div		$tmp332 $const35 $const34 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{83} %argrw{"wrr"}
	mul		___703_r3 $tmp331 $tmp332 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:178
#             origin1 = Math_RotateZ(cellRotation + r1, origin1);
	add		$tmp333 ___703_cellRotation ___703_r1 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{178} %argrw{"wrr"}
	functioncall	$const55 651 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:309
#     if (angle != 0.0) {
	neq		$tmp334 $tmp333 $const13 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{309} %argrw{"wrr"}
	if		$tmp334 649 651 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:311
#         sincos(radians(angle), sinAng, cosAng);
	functioncall	$const33 634 	%line{311} %argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:88
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp336 $const34 $const35 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{88} %argrw{"wrr"}
	mul		$tmp335 $tmp333 $tmp336 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:311
#         sincos(radians(angle), sinAng, cosAng);
	sincos		$tmp335 ___356_sinAng ___356_cosAng 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{311} %argrw{"rww"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:312
#         return Math_RotateZ(sinAng, cosAng, Q);
	functioncall	$const55 648 	%line{312} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:301
#     return point(cosAng * Q[0] - sinAng * Q[1],
	compref		$tmp337 ___705_origin1 $const2 	%line{301} %argrw{"wrr"}
	mul		$tmp338 ___356_cosAng $tmp337 	%argrw{"wrr"}
	compref		$tmp339 ___705_origin1 $const3 	%argrw{"wrr"}
	mul		$tmp340 ___356_sinAng $tmp339 	%argrw{"wrr"}
	sub		$tmp341 $tmp338 $tmp340 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:302
#                  sinAng * Q[0] + cosAng * Q[1],
	compref		$tmp342 ___705_origin1 $const2 	%line{302} %argrw{"wrr"}
	mul		$tmp343 ___356_sinAng $tmp342 	%argrw{"wrr"}
	compref		$tmp344 ___705_origin1 $const3 	%argrw{"wrr"}
	mul		$tmp345 ___356_cosAng $tmp344 	%argrw{"wrr"}
	add		$tmp346 $tmp343 $tmp345 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:303
#                  Q[2]);
	compref		$tmp347 ___705_origin1 $const4 	%line{303} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:301
#     return point(cosAng * Q[0] - sinAng * Q[1],
	point		___705_origin1 $tmp341 $tmp346 $tmp347 	%line{301} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:312
#         return Math_RotateZ(sinAng, cosAng, Q);
	return	%line{312}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:314
#         return Q;
	assign		___705_origin1 ___705_origin1 	%line{314} %argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:179
#             origin2 = Math_RotateZ(cellRotation + r2, origin2);
	add		$tmp348 ___703_cellRotation ___703_r2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{179} %argrw{"wrr"}
	functioncall	$const55 675 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:309
#     if (angle != 0.0) {
	neq		$tmp349 $tmp348 $const13 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{309} %argrw{"wrr"}
	if		$tmp349 673 675 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:311
#         sincos(radians(angle), sinAng, cosAng);
	functioncall	$const33 658 	%line{311} %argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:88
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp351 $const34 $const35 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{88} %argrw{"wrr"}
	mul		$tmp350 $tmp348 $tmp351 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:311
#         sincos(radians(angle), sinAng, cosAng);
	sincos		$tmp350 ___356_sinAng ___356_cosAng 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{311} %argrw{"rww"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:312
#         return Math_RotateZ(sinAng, cosAng, Q);
	functioncall	$const55 672 	%line{312} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:301
#     return point(cosAng * Q[0] - sinAng * Q[1],
	compref		$tmp352 ___705_origin2 $const2 	%line{301} %argrw{"wrr"}
	mul		$tmp353 ___356_cosAng $tmp352 	%argrw{"wrr"}
	compref		$tmp354 ___705_origin2 $const3 	%argrw{"wrr"}
	mul		$tmp355 ___356_sinAng $tmp354 	%argrw{"wrr"}
	sub		$tmp356 $tmp353 $tmp355 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:302
#                  sinAng * Q[0] + cosAng * Q[1],
	compref		$tmp357 ___705_origin2 $const2 	%line{302} %argrw{"wrr"}
	mul		$tmp358 ___356_sinAng $tmp357 	%argrw{"wrr"}
	compref		$tmp359 ___705_origin2 $const3 	%argrw{"wrr"}
	mul		$tmp360 ___356_cosAng $tmp359 	%argrw{"wrr"}
	add		$tmp361 $tmp358 $tmp360 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:303
#                  Q[2]);
	compref		$tmp362 ___705_origin2 $const4 	%line{303} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:301
#     return point(cosAng * Q[0] - sinAng * Q[1],
	point		___705_origin2 $tmp356 $tmp361 $tmp362 	%line{301} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:312
#         return Math_RotateZ(sinAng, cosAng, Q);
	return	%line{312}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:314
#         return Q;
	assign		___705_origin2 ___705_origin2 	%line{314} %argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:180
#             origin3 = Math_RotateZ(cellRotation + r3, origin3);
	add		$tmp363 ___703_cellRotation ___703_r3 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{180} %argrw{"wrr"}
	functioncall	$const55 699 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:309
#     if (angle != 0.0) {
	neq		$tmp364 $tmp363 $const13 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{309} %argrw{"wrr"}
	if		$tmp364 697 699 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:311
#         sincos(radians(angle), sinAng, cosAng);
	functioncall	$const33 682 	%line{311} %argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:88
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp366 $const34 $const35 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{88} %argrw{"wrr"}
	mul		$tmp365 $tmp363 $tmp366 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:311
#         sincos(radians(angle), sinAng, cosAng);
	sincos		$tmp365 ___356_sinAng ___356_cosAng 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{311} %argrw{"rww"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:312
#         return Math_RotateZ(sinAng, cosAng, Q);
	functioncall	$const55 696 	%line{312} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:301
#     return point(cosAng * Q[0] - sinAng * Q[1],
	compref		$tmp367 ___705_origin3 $const2 	%line{301} %argrw{"wrr"}
	mul		$tmp368 ___356_cosAng $tmp367 	%argrw{"wrr"}
	compref		$tmp369 ___705_origin3 $const3 	%argrw{"wrr"}
	mul		$tmp370 ___356_sinAng $tmp369 	%argrw{"wrr"}
	sub		$tmp371 $tmp368 $tmp370 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:302
#                  sinAng * Q[0] + cosAng * Q[1],
	compref		$tmp372 ___705_origin3 $const2 	%line{302} %argrw{"wrr"}
	mul		$tmp373 ___356_sinAng $tmp372 	%argrw{"wrr"}
	compref		$tmp374 ___705_origin3 $const3 	%argrw{"wrr"}
	mul		$tmp375 ___356_cosAng $tmp374 	%argrw{"wrr"}
	add		$tmp376 $tmp373 $tmp375 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:303
#                  Q[2]);
	compref		$tmp377 ___705_origin3 $const4 	%line{303} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:301
#     return point(cosAng * Q[0] - sinAng * Q[1],
	point		___705_origin3 $tmp371 $tmp376 $tmp377 	%line{301} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:312
#         return Math_RotateZ(sinAng, cosAng, Q);
	return	%line{312}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:314
#         return Q;
	assign		___705_origin3 ___705_origin3 	%line{314} %argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:184
#         if (scaleJitter) {
	neq		$tmp378 scaleJitter $const13 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{184} %argrw{"wrr"}
	if		$tmp378 713 713 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:185
#             origin1 *= mix(1.0, 2.0 * noiseV1[1], scaleJitter);
	compref		$tmp380 ___705_noiseV1 $const3 	%line{185} %argrw{"wrr"}
	mul		$tmp381 $const56 $tmp380 	%argrw{"wrr"}
	mix		$tmp379 $const32 $tmp381 scaleJitter 	%argrw{"wrrr"}
	mul		___705_origin1 ___705_origin1 $tmp379 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:186
#             origin2 *= mix(1.0, 2.0 * noiseV2[1], scaleJitter);
	compref		$tmp383 ___705_noiseV2 $const3 	%line{186} %argrw{"wrr"}
	mul		$tmp384 $const56 $tmp383 	%argrw{"wrr"}
	mix		$tmp382 $const32 $tmp384 scaleJitter 	%argrw{"wrrr"}
	mul		___705_origin2 ___705_origin2 $tmp382 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:187
#             origin3 *= mix(1.0, 2.0 * noiseV3[1], scaleJitter);
	compref		$tmp386 ___705_noiseV3 $const3 	%line{187} %argrw{"wrr"}
	mul		$tmp387 $const56 $tmp386 	%argrw{"wrr"}
	mix		$tmp385 $const32 $tmp387 scaleJitter 	%argrw{"wrrr"}
	mul		___705_origin3 ___705_origin3 $tmp385 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:190
#         if (texFreq != 1.0) {
	neq		$tmp388 textureFrequency $const32 	%line{190} %argrw{"wrr"}
	if		$tmp388 718 718 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:191
#             origin1 *= texFreq;
	mul		___705_origin1 ___705_origin1 textureFrequency 	%line{191} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:192
#             origin2 *= texFreq;
	mul		___705_origin2 ___705_origin2 textureFrequency 	%line{192} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:193
#             origin3 *= texFreq;
	mul		___705_origin3 ___705_origin3 textureFrequency 	%line{193} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:197
#         textureST1 = origin1 + cellOffset1;
	add		___703_textureST1 ___705_origin1 ___705_cellOffset1 	%line{197} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:198
#         textureST2 = origin2 + cellOffset2;
	add		___703_textureST2 ___705_origin2 ___705_cellOffset2 	%line{198} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:199
#         textureST3 = origin3 + cellOffset3;
	add		___703_textureST3 ___705_origin3 ___705_cellOffset3 	%line{199} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:203
#     point noiseV1 = cellnoise(cellV1 * vector(555.1212, 1234.567, 8675.309));
	mul		$tmp390 ___703_cellV1 $const57 	%line{203} %argrw{"wrr"}
	cellnoise	___703_noiseV1 $tmp390 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:204
#     point noiseV2 = cellnoise(cellV2 * vector(555.1212, 1234.567, 8675.309));
	mul		$tmp392 ___703_cellV2 $const57 	%line{204} %argrw{"wrr"}
	cellnoise	___703_noiseV2 $tmp392 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:205
#     point noiseV3 = cellnoise(cellV3 * vector(555.1212, 1234.567, 8675.309));
	mul		$tmp394 ___703_cellV3 $const57 	%line{205} %argrw{"wrr"}
	cellnoise	___703_noiseV3 $tmp394 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:206
#     noiseV1 *= translateJitter;
	mul		___703_noiseV1 ___703_noiseV1 translateJitter 	%line{206} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:207
#     noiseV2 *= translateJitter;
	mul		___703_noiseV2 ___703_noiseV2 translateJitter 	%line{207} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:208
#     noiseV3 *= translateJitter;
	mul		___703_noiseV3 ___703_noiseV3 translateJitter 	%line{208} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:211
#     textureST1 = textureST1 + noiseV1;
	add		___703_textureST1 ___703_textureST1 ___703_noiseV1 	%line{211} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:212
#     textureST2 = textureST2 + noiseV2;
	add		___703_textureST2 ___703_textureST2 ___703_noiseV2 	%line{212} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:213
#     textureST3 = textureST3 + noiseV3;
	add		___703_textureST3 ___703_textureST3 ___703_noiseV3 	%line{213} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:216
#     if (blendWidth < 1.0)
	lt		$tmp395 blendWidth $const32 	%line{216} %argrw{"wrr"}
	if		$tmp395 745 745 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:218
#         float transExp = mix(8.0, 1.0, blendWidth);
	mix		___709_transExp $const58 $const32 blendWidth 	%line{218} %argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:219
#         cellW1 = pow(cellW1, transExp);
	pow		___703_cellW1 ___703_cellW1 ___709_transExp 	%line{219} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:220
#         cellW2 = pow(cellW2, transExp);
	pow		___703_cellW2 ___703_cellW2 ___709_transExp 	%line{220} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:221
#         cellW3 = pow(cellW3, transExp);
	pow		___703_cellW3 ___703_cellW3 ___709_transExp 	%line{221} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:222
#         float normW = 1.0 / (cellW1 + cellW2 + cellW3);
	add		$tmp396 ___703_cellW1 ___703_cellW2 	%line{222} %argrw{"wrr"}
	add		$tmp397 $tmp396 ___703_cellW3 	%argrw{"wrr"}
	div		___709_normW $const32 $tmp397 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:223
#         cellW1 *= normW;
	mul		___703_cellW1 ___703_cellW1 ___709_normW 	%line{223} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:224
#         cellW2 *= normW;
	mul		___703_cellW2 ___703_cellW2 ___709_normW 	%line{224} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:225
#         cellW3 *= normW;
	mul		___703_cellW3 ___703_cellW3 ___709_normW 	%line{225} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:229
#     result.s = point(textureST1[0], textureST2[0], textureST3[0]);
	compref		$tmp398 ___703_textureST1 $const2 	%line{229} %argrw{"wrr"}
	compref		$tmp399 ___703_textureST2 $const2 	%argrw{"wrr"}
	compref		$tmp400 ___703_textureST3 $const2 	%argrw{"wrr"}
	point		___754_hxt.s $tmp398 $tmp399 $tmp400 	%argrw{"wrrr"}
	assign		___754_hxt.s ___754_hxt.s 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:230
#     result.t = point(textureST1[1], textureST2[1], textureST3[1]);
	compref		$tmp401 ___703_textureST1 $const3 	%line{230} %argrw{"wrr"}
	compref		$tmp402 ___703_textureST2 $const3 	%argrw{"wrr"}
	compref		$tmp403 ___703_textureST3 $const3 	%argrw{"wrr"}
	point		___754_hxt.t $tmp401 $tmp402 $tmp403 	%argrw{"wrrr"}
	assign		___754_hxt.t ___754_hxt.t 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:231
#     result.w = point(cellW1, cellW2, cellW3);
	point		___754_hxt.w ___703_cellW1 ___703_cellW2 ___703_cellW3 	%line{231} %argrw{"wrrr"}
	assign		___754_hxt.w ___754_hxt.w 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:232
#     result.r = point(r1, r2, r3) + point(cellRotation);
	point		$tmp404 ___703_r1 ___703_r2 ___703_r3 	%line{232} %argrw{"wrrr"}
	assign		$tmp405 ___703_cellRotation 	%argrw{"wr"}
	add		___754_hxt.r $tmp404 $tmp405 	%argrw{"wrr"}
	assign		___754_hxt.r ___754_hxt.r 	%argrw{"wr"}
# PxrRandomTextureManifold.osl:434
#             resultMulti.hextile0[0] = hxt.s;
	aassign		resultMulti.hextile0 $const2 ___754_hxt.s 	%filename{"PxrRandomTextureManifold.osl"} %line{434} %argrw{"wrr"}
# PxrRandomTextureManifold.osl:435
#             resultMulti.hextile0[1] = hxt.t;
	aassign		resultMulti.hextile0 $const3 ___754_hxt.t 	%line{435} %argrw{"wrr"}
# PxrRandomTextureManifold.osl:436
#             resultMulti.hextile0[2] = hxt.w;
	aassign		resultMulti.hextile0 $const4 ___754_hxt.w 	%line{436} %argrw{"wrr"}
# PxrRandomTextureManifold.osl:437
#             resultMulti.hextile0[3] = hxt.r;
	aassign		resultMulti.hextile0 $const5 ___754_hxt.r 	%line{437} %argrw{"wrr"}
# PxrRandomTextureManifold.osl:445
#         resultMulti.stAlpha0 = point(result.Q[0], result.Q[1], 1);
	compref		$tmp406 result.Q $const2 	%line{445} %argrw{"wrr"}
	compref		$tmp407 result.Q $const3 	%argrw{"wrr"}
	point		resultMulti.stAlpha0 $tmp406 $tmp407 $const32 	%argrw{"wrrr"}
	assign		resultMulti.stAlpha0 resultMulti.stAlpha0 	%argrw{"wr"}
# PxrRandomTextureManifold.osl:446
#         if (randomSource == k_primVar)
	eq		$tmp408 randomSource $const4 	%line{446} %argrw{"wrr"}
	if		$tmp408 773 775 	%argrw{"r"}
# PxrRandomTextureManifold.osl:447
#             resultMulti.tileidRunflag0 = point(id_pvar, 0.0, 1);
	point		resultMulti.tileidRunflag0 id_pvar $const13 $const32 	%line{447} %argrw{"wrrr"}
	assign		resultMulti.tileidRunflag0 resultMulti.tileidRunflag0 	%argrw{"wr"}
# PxrRandomTextureManifold.osl:449
#             resultMulti.tileidRunflag0 = point(id_seed, 0.0, 1);
	point		resultMulti.tileidRunflag0 id_seed $const13 $const32 	%line{449} %argrw{"wrrr"}
	assign		resultMulti.tileidRunflag0 resultMulti.tileidRunflag0 	%argrw{"wr"}
# PxrRandomTextureManifold.osl:450
#         resultMulti.radius = result.Qradius;
	assign		resultMulti.radius result.Qradius 	%line{450} %argrw{"wr"}
# PxrRandomTextureManifold.osl:451
#         if (tilingMode == k_tile_regular)
	eq		$tmp409 tilingMode $const2 	%line{451} %argrw{"wrr"}
	if		$tmp409 831 831 	%argrw{"r"}
# PxrRandomTextureManifold.osl:453
#             GenBasisTB(resultMulti.Tn[0], resultMulti.Bn[0],
	aref		$tmp410 resultMulti.Tn $const2 	%line{453} %argrw{"wrr"}
	aref		$tmp411 resultMulti.Bn $const2 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:454
#                        float2(resultMulti.stAlpha0[0], resultMulti.stAlpha0[1]), N);
	compref		$tmp412.x resultMulti.stAlpha0 $const2 	%line{454} %argrw{"wrr"}
	compref		$tmp412.y resultMulti.stAlpha0 $const3 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:453
#             GenBasisTB(resultMulti.Tn[0], resultMulti.Bn[0],
	functioncall	$const59 829 	%line{453} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:55
#     vector sigmaX = dPdu - dot(dPdu, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp413 dPdu N 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{55} %argrw{"wrr"}
	mul		$tmp414 $tmp413 N 	%argrw{"wrr"}
	sub		___684_sigmaX dPdu $tmp414 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:56
#     vector sigmaY = dPdv - dot(dPdv, nrmBaseNormal)*nrmBaseNormal;
	dot		$tmp415 dPdv N 	%line{56} %argrw{"wrr"}
	mul		$tmp416 $tmp415 N 	%argrw{"wrr"}
	sub		___684_sigmaY dPdv $tmp416 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:57
#     float flip_sign = dot(dPdv, cross(nrmBaseNormal, dPdu)) < 0.0 ? -1.0 : 1.0;
	cross		$tmp418 N dPdu 	%line{57} %argrw{"wrr"}
	dot		$tmp417 dPdv $tmp418 	%argrw{"wrr"}
	lt		$tmp419 $tmp417 $const13 	%argrw{"wrr"}
	if		$tmp419 794 795 	%argrw{"r"}
	assign		___684_flip_sign $const60 	%argrw{"wr"}
	assign		___684_flip_sign $const32 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:59
#     float2 dSTdx = Dx(texST);
	functioncall	$const61 798 	%line{59} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:167
#     return float2(Dx(a.x), Dx(a.y));
	Dx		___684_dSTdx.x $tmp412.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{167} %argrw{"wr"} %argderivs{1}
	Dx		___684_dSTdx.y $tmp412.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:60
#     float2 dSTdy = Dy(texST);
	functioncall	$const62 801 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{60} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:172
#     return float2(Dy(a.x), Dy(a.y));
	Dy		___684_dSTdy.x $tmp412.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{172} %argrw{"wr"} %argderivs{1}
	Dy		___684_dSTdy.y $tmp412.y 	%argrw{"wr"} %argderivs{1}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:61
#     float det = dot(dSTdx, float2(dSTdy.y, -dSTdy.x));
	assign		$tmp420.x ___684_dSTdy.y 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{61} %argrw{"wr"}
	neg		$tmp420.y ___684_dSTdy.x 	%argrw{"wr"}
	functioncall	$const63 807 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:162
#     return a.x * b.x + a.y * b.y;
	mul		$tmp421 ___684_dSTdx.x $tmp420.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{162} %argrw{"wrr"}
	mul		$tmp422 ___684_dSTdx.y $tmp420.y 	%argrw{"wrr"}
	add		___684_det $tmp421 $tmp422 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:62
#     float sign_det = det < 0.0 ? -1.0 : 1.0;
	lt		$tmp423 ___684_det $const13 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{62} %argrw{"wrr"}
	if		$tmp423 810 811 	%argrw{"r"}
	assign		___684_sign_det $const60 	%argrw{"wr"}
	assign		___684_sign_det $const32 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:66
#     float2 invC0 = sign_det * float2(dSTdy.y, -dSTdx.y);
	assign		$tmp424.x ___684_dSTdy.y 	%line{66} %argrw{"wr"}
	neg		$tmp424.y ___684_dSTdx.y 	%argrw{"wr"}
# PxrRandomTextureManifold.osl:464
# 
	functioncall	$const64 819 	%filename{"PxrRandomTextureManifold.osl"} %line{464} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:130
#     return b * float2(a, a);
	assign		$tmp425.x ___684_sign_det 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{130} %argrw{"wr"}
	assign		$tmp425.y ___684_sign_det 	%argrw{"wr"}
# PxrRandomTextureManifold.osl:464
# 
	functioncall	$const64 819 	%filename{"PxrRandomTextureManifold.osl"} %line{464} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		___684_invC0.x $tmp424.x $tmp425.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		___684_invC0.y $tmp424.y $tmp425.y 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:67
#     vT = sigmaX * invC0.x + sigmaY * invC0.y;
	mul		$tmp426 ___684_sigmaX ___684_invC0.x 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{67} %argrw{"wrr"}
	mul		$tmp427 ___684_sigmaY ___684_invC0.y 	%argrw{"wrr"}
	add		$tmp410 $tmp426 $tmp427 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:68
#     if (abs(det) > 0.0) vT = normalize(vT);
	abs		$tmp428 ___684_det 	%line{68} %argrw{"wr"}
	gt		$tmp429 $tmp428 $const13 	%argrw{"wrr"}
	if		$tmp429 826 826 	%argrw{"r"}
	normalize	$tmp410 $tmp410 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:69
#     vB = (sign_det * flip_sign) * cross(nrmBaseNormal, vT);
	mul		$tmp430 ___684_sign_det ___684_flip_sign 	%line{69} %argrw{"wrr"}
	cross		$tmp431 N $tmp410 	%argrw{"wrr"}
	mul		$tmp411 $tmp430 $tmp431 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:453
#             GenBasisTB(resultMulti.Tn[0], resultMulti.Bn[0],
	aassign		resultMulti.Tn $const2 $tmp410 	%filename{"PxrRandomTextureManifold.osl"} %line{453} %argrw{"wrr"}
	aassign		resultMulti.Bn $const2 $tmp411 	%argrw{"wrr"}
# PxrRandomTextureManifold.osl:460
#     resultMask = color(id_seed);
	assign		resultMask id_seed 	%line{460} %argrw{"wr"}
# PxrRandomTextureManifold.osl:461
#     resultS = result.Q[0];
	compref		resultS result.Q $const2 	%line{461} %argrw{"wrr"}
# PxrRandomTextureManifold.osl:462
#     resultT = result.Q[1];
	compref		resultT result.Q $const3 	%line{462} %argrw{"wrr"}
	end
