OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: -DOSX -I/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include -I/data/build/ratbuild/rmanshare/RIS/include -I/data/build/ratbuild/rmanshare/RIS/include/common -I/data/build/ratbuild/rmanshare/RIS/pattern/osl -I/data/build/ratbuild/rmanshare/RIS/include/osl -o /data/build/ratbuild/rmanshare/_built/osxMojave_x86-64_clang10_external_release/osl/PxrArithmetic.osl/obj/PxrArithmetic.oso
shader PxrArithmetic	%meta{int,rfm_nodeid,1233488} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/utility"} %meta{string,rfh_classification,"Pattern/Utility"} 
param	int	operation	1		%meta{string,label,"Operation"} %meta{string,widget,"mapper"} %meta{string,options,"No operation:0|Multiply:1|Divide:2|Multiply-Add:204|Add:4|Subtract:5|Power:3|Logarithm:6|Square Root:100|Inverse Square Root:101|Absolute:102|Exponent:103|Exponent 2:104|Minimum:7|Maximum:8|Less Than:9|Greater Than:10|Sign:105|Compare:200|Smooth Minimum:201|Smooth Maximum:202|Round:106|Floor:107|Ceil:108|Truncate:109|Fraction:110|Modulo:11|Wrap:203|Snap:12|Ping-Pong:13|Sine:111|Cosine:112|Tangent:113|ArcSine:114|ArcCosine:115|ArcTangent:116|Arctan 2:14|Hyperbolic Sine:117|Hyperbolic Cosine:118|Hyperbolic Tangent:119|To Radians:120|To Degrees:121"} %meta{int,connectable,0} %meta{string,help,"No operation: input1<br>Multiply: input1 * input2<br>Divide: input1 / input2<br>Multiply-Add: input1 * input2 + input3<br>Add: input1 + input2<br>Subtract: input1 - input2<br>Power: pow(input1, input2)<br>Logarithm: log(input1, input2)<br>Square Root: sqrt(input1)<br>Inverse Square Root: inversesqrt(input1)<br>Absolute: abs(input1)<br>Exponent: exp(input1)<br>Exponent 2: exp2(input1)<br>Minimum: min(input1, input2)<br>Maximum: max(input1, input2)<br>Less Than: 1 if input1 < input2 else 0<br>Greater Than: 1 if input1 > input2 else 0<br>Sign: 1 if input1 >= 0 else 0<br>Compare: input1 == input2 with tolerance input3<br>Smooth Minimum: min(input1, input2) with smoothed transition input3<br>Smooth Maximum: max(input1, input2) with smoothed transition input3<br>Round: round(input1)<br>Floor: floor(input1)<br>Ceil: ceil(input1)<br>Truncate: integer part of input1<br>Fraction: fractional part of input1<br>Modulo: fmod(input1, input2)<br>Wrap: wrap input1 to range input2 to input3<br>Snap: snap input1 to increment input2<br>Ping-Pong: wrap input1 and reverse every other cycle of size input2<br>Sine: sin(input1)<br>Cosine: cos(input1)<br>Tangent: tan(input1)<br>ArcSine: asin(input1)<br>ArcCosine: acos(input1)<br>ArcTangent: atan(input1)<br>ArcTan2: atan2(input1, input2)<br>Hyperbolic Sine: sinh(input1)<br>Hyperbolic Cosine: cosh(input1)<br>Hyperbolic Tangent: tanh(input1)<br>To Radians: convert input1 from degrees to radians<br>To Degrees: convert input1 from radians to degrees"}  %read{0,460} %write{2147483647,-1}
param	color	input1	0 0 0		%meta{string,label,"Input 1"} %meta{int,color_enableFilmlookVis,0}  %read{2,465} %write{2147483647,-1} %derivs
param	color	input2	0 0 0		%meta{string,label,"Input 2"} %meta{int,color_enableFilmlookVis,0} %meta{string,conditionalVis1Path,"../operation"} %meta{string,conditionalVis1Op,"lessThan"} %meta{string,conditionalVis1Value,"99"} %meta{string,conditionalVis2Path,"../operation"} %meta{string,conditionalVis2Op,"greaterThan"} %meta{string,conditionalVis2Value,"199"} %meta{string,conditionalVisLeft,"conditionalVis1"} %meta{string,conditionalVisOp,"or"} %meta{string,conditionalVisRight,"conditionalVis2"}  %read{2,445} %write{2147483647,-1} %derivs
param	color	input3	0 0 0		%meta{string,label,"Input 3"} %meta{int,color_enableFilmlookVis,0} %meta{string,conditionalVisPath,"../operation"} %meta{string,conditionalVisOp,"greaterThan"} %meta{string,conditionalVisValue,"199"}  %read{9,323} %write{2147483647,-1} %derivs
param	int	clampResult	0		%meta{string,label,"Clamp"} %meta{string,widget,"checkBox"} %meta{string,help,"Clamp the result to the [0, 1] range."}  %read{466,466} %write{2147483647,-1}
param	float	clampFilterWidth	0		%meta{string,label,"Clamp Filter Width"} %meta{string,help,"When set to a non-zero value, the clamping operation will be filtered, which is more expensive."} %meta{string,conditionalVisPath,"../clampResult"} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisValue,"1"}  %read{468,521} %write{2147483647,-1} %derivs
oparam	color	resultRGB	0 0 0		%meta{string,match,"output"}  %read{471,531} %write{2,528} %derivs
oparam	float	resultR	0		%meta{string,match,"outputX"}  %read{2147483647,-1} %write{529,529}
oparam	float	resultG	0		%meta{string,match,"outputY"}  %read{2147483647,-1} %write{530,530}
oparam	float	resultB	0		%meta{string,match,"outputZ"}  %read{2147483647,-1} %write{531,531}
local	float	___382_h	%read{148,261} %write{146,258} %derivs
local	float	___384_range	%read{298,331} %write{297,325} %derivs
local	float	___387_w	%read{486,525} %write{485,521} %derivs
const	int	$const1	1		%read{0,530} %write{2147483647,-1}
temp	int	$tmp1	%read{1,1} %write{0,0}
const	int	$const2	2		%read{3,531} %write{2147483647,-1}
temp	int	$tmp2	%read{4,4} %write{3,3}
const	int	$const3	204		%read{6,6} %write{2147483647,-1}
temp	int	$tmp3	%read{7,7} %write{6,6}
temp	color	$tmp4	%read{9,9} %write{8,8} %derivs
const	int	$const4	3		%read{10,10} %write{2147483647,-1}
temp	int	$tmp5	%read{11,11} %write{10,10}
const	int	$const5	4		%read{13,13} %write{2147483647,-1}
temp	int	$tmp6	%read{14,14} %write{13,13}
const	int	$const6	5		%read{16,16} %write{2147483647,-1}
temp	int	$tmp7	%read{17,17} %write{16,16}
const	int	$const7	6		%read{19,19} %write{2147483647,-1}
temp	int	$tmp8	%read{20,20} %write{19,19}
const	int	$const8	0		%read{21,529} %write{2147483647,-1}
temp	float	$tmp9	%read{24,24} %write{21,21} %derivs
const	string	$const9	"log"		%read{22,22} %write{2147483647,-1}
temp	color	$tmp10	%read{25,25} %write{23,23} %derivs
temp	float	$tmp11	%read{25,25} %write{24,24} %derivs
const	int	$const10	100		%read{26,26} %write{2147483647,-1}
temp	int	$tmp12	%read{27,27} %write{26,26}
const	int	$const11	101		%read{29,29} %write{2147483647,-1}
temp	int	$tmp13	%read{30,30} %write{29,29}
const	int	$const12	102		%read{32,32} %write{2147483647,-1}
temp	int	$tmp14	%read{33,33} %write{32,32}
const	int	$const13	103		%read{35,35} %write{2147483647,-1}
temp	int	$tmp15	%read{36,36} %write{35,35}
const	int	$const14	104		%read{38,38} %write{2147483647,-1}
temp	int	$tmp16	%read{39,39} %write{38,38}
const	int	$const15	7		%read{41,41} %write{2147483647,-1}
temp	int	$tmp17	%read{42,42} %write{41,41}
const	int	$const16	8		%read{44,44} %write{2147483647,-1}
temp	int	$tmp18	%read{45,45} %write{44,44}
const	int	$const17	9		%read{47,47} %write{2147483647,-1}
temp	int	$tmp19	%read{48,48} %write{47,47}
temp	float	$tmp20	%read{51,51} %write{49,49} %derivs
temp	float	$tmp21	%read{51,51} %write{50,50} %derivs
temp	int	$tmp22	%read{52,52} %write{51,51} %derivs
temp	float	$tmp23	%read{55,55} %write{53,53} %derivs
temp	float	$tmp24	%read{55,55} %write{54,54} %derivs
temp	int	$tmp25	%read{56,56} %write{55,55} %derivs
temp	float	$tmp26	%read{59,59} %write{57,57} %derivs
temp	float	$tmp27	%read{59,59} %write{58,58} %derivs
temp	int	$tmp28	%read{60,60} %write{59,59} %derivs
const	int	$const18	10		%read{61,61} %write{2147483647,-1}
temp	int	$tmp29	%read{62,62} %write{61,61}
temp	float	$tmp30	%read{65,65} %write{63,63} %derivs
temp	float	$tmp31	%read{65,65} %write{64,64} %derivs
temp	int	$tmp32	%read{66,66} %write{65,65} %derivs
temp	float	$tmp33	%read{69,69} %write{67,67} %derivs
temp	float	$tmp34	%read{69,69} %write{68,68} %derivs
temp	int	$tmp35	%read{70,70} %write{69,69} %derivs
temp	float	$tmp36	%read{73,73} %write{71,71} %derivs
temp	float	$tmp37	%read{73,73} %write{72,72} %derivs
temp	int	$tmp38	%read{74,74} %write{73,73} %derivs
const	int	$const19	105		%read{75,75} %write{2147483647,-1}
temp	int	$tmp39	%read{76,76} %write{75,75}
const	int	$const20	200		%read{78,78} %write{2147483647,-1}
temp	int	$tmp40	%read{79,79} %write{78,78}
const	string	$const21	"Color_Compare"		%read{80,80} %write{2147483647,-1}
temp	float	$tmp41	%read{132,132} %write{95,96} %derivs
temp	float	$tmp42	%read{85,88} %write{81,81}
temp	float	$tmp43	%read{85,88} %write{82,82}
temp	float	$tmp44	%read{90,90} %write{83,83}
const	string	$const22	"Math_Compare"		%read{84,118} %write{2147483647,-1}
temp	int	$tmp45	%read{86,86} %write{85,85}
temp	int	$tmp46	%read{87,94} %write{86,93}
temp	float	$tmp47	%read{91,91} %write{89,89}
temp	float	$tmp48	%read{89,89} %write{88,88}
temp	float	$tmp49	%read{91,91} %write{90,90}
const	float	$const23	9.99999997e-07		%read{90,124} %write{2147483647,-1}
temp	int	$tmp50	%read{92,92} %write{91,91}
temp	int	$tmp51	%read{93,93} %write{92,92}
const	float	$const24	1		%read{95,263} %write{2147483647,-1}
const	float	$const25	0		%read{96,514} %write{2147483647,-1}
temp	float	$tmp52	%read{132,132} %write{112,113} %derivs
temp	float	$tmp53	%read{102,105} %write{98,98}
temp	float	$tmp54	%read{102,105} %write{99,99}
temp	float	$tmp55	%read{107,107} %write{100,100}
temp	int	$tmp56	%read{103,103} %write{102,102}
temp	int	$tmp57	%read{104,111} %write{103,110}
temp	float	$tmp58	%read{108,108} %write{106,106}
temp	float	$tmp59	%read{106,106} %write{105,105}
temp	float	$tmp60	%read{108,108} %write{107,107}
temp	int	$tmp61	%read{109,109} %write{108,108}
temp	int	$tmp62	%read{110,110} %write{109,109}
temp	float	$tmp63	%read{132,132} %write{129,130} %derivs
temp	float	$tmp64	%read{119,122} %write{115,115}
temp	float	$tmp65	%read{119,122} %write{116,116}
temp	float	$tmp66	%read{124,124} %write{117,117}
temp	int	$tmp67	%read{120,120} %write{119,119}
temp	int	$tmp68	%read{121,128} %write{120,127}
temp	float	$tmp69	%read{125,125} %write{123,123}
temp	float	$tmp70	%read{123,123} %write{122,122}
temp	float	$tmp71	%read{125,125} %write{124,124}
temp	int	$tmp72	%read{126,126} %write{125,125}
temp	int	$tmp73	%read{127,127} %write{126,126}
const	int	$const26	201		%read{133,133} %write{2147483647,-1}
temp	int	$tmp74	%read{134,134} %write{133,133}
const	string	$const27	"Color_SmoothMin"		%read{135,135} %write{2147483647,-1}
temp	float	$tmp75	%read{196,196} %write{153,155} %derivs
temp	float	$tmp76	%read{142,155} %write{136,136} %derivs
temp	float	$tmp77	%read{142,155} %write{137,137} %derivs
temp	float	$tmp78	%read{140,150} %write{138,138} %derivs
const	string	$const28	"Math_SmoothMin"		%read{139,251} %write{2147483647,-1}
temp	int	$tmp79	%read{141,141} %write{140,140}
temp	float	$tmp80	%read{146,146} %write{145,145} %derivs
temp	float	$tmp81	%read{144,144} %write{143,143} %derivs
temp	float	$tmp82	%read{143,143} %write{142,142} %derivs
temp	float	$tmp83	%read{145,145} %write{144,144} %derivs
temp	float	$tmp84	%read{153,153} %write{147,147} %derivs
temp	float	$tmp85	%read{149,149} %write{148,148} %derivs
temp	float	$tmp86	%read{150,150} %write{149,149} %derivs
temp	float	$tmp87	%read{152,152} %write{150,150} %derivs
const	float	$const29	6		%read{151,263} %write{2147483647,-1}
temp	float	$tmp88	%read{152,152} %write{151,151} %derivs
temp	float	$tmp89	%read{153,153} %write{152,152} %derivs
temp	float	$tmp90	%read{196,196} %write{173,175} %derivs
temp	float	$tmp91	%read{162,175} %write{156,156} %derivs
temp	float	$tmp92	%read{162,175} %write{157,157} %derivs
temp	float	$tmp93	%read{160,170} %write{158,158} %derivs
temp	int	$tmp94	%read{161,161} %write{160,160}
temp	float	$tmp95	%read{166,166} %write{165,165} %derivs
temp	float	$tmp96	%read{164,164} %write{163,163} %derivs
temp	float	$tmp97	%read{163,163} %write{162,162} %derivs
temp	float	$tmp98	%read{165,165} %write{164,164} %derivs
temp	float	$tmp99	%read{173,173} %write{167,167} %derivs
temp	float	$tmp100	%read{169,169} %write{168,168} %derivs
temp	float	$tmp101	%read{170,170} %write{169,169} %derivs
temp	float	$tmp102	%read{172,172} %write{170,170} %derivs
temp	float	$tmp103	%read{172,172} %write{171,171} %derivs
temp	float	$tmp104	%read{173,173} %write{172,172} %derivs
temp	float	$tmp105	%read{196,196} %write{193,195} %derivs
temp	float	$tmp106	%read{182,195} %write{176,176} %derivs
temp	float	$tmp107	%read{182,195} %write{177,177} %derivs
temp	float	$tmp108	%read{180,190} %write{178,178} %derivs
temp	int	$tmp109	%read{181,181} %write{180,180}
temp	float	$tmp110	%read{186,186} %write{185,185} %derivs
temp	float	$tmp111	%read{184,184} %write{183,183} %derivs
temp	float	$tmp112	%read{183,183} %write{182,182} %derivs
temp	float	$tmp113	%read{185,185} %write{184,184} %derivs
temp	float	$tmp114	%read{193,193} %write{187,187} %derivs
temp	float	$tmp115	%read{189,189} %write{188,188} %derivs
temp	float	$tmp116	%read{190,190} %write{189,189} %derivs
temp	float	$tmp117	%read{192,192} %write{190,190} %derivs
temp	float	$tmp118	%read{192,192} %write{191,191} %derivs
temp	float	$tmp119	%read{193,193} %write{192,192} %derivs
const	int	$const30	202		%read{197,197} %write{2147483647,-1}
temp	int	$tmp120	%read{198,198} %write{197,197}
const	string	$const31	"Color_SmoothMax"		%read{199,199} %write{2147483647,-1}
temp	float	$tmp121	%read{222,222} %write{219,221} %derivs
temp	float	$tmp122	%read{201,201} %write{200,200} %derivs
temp	float	$tmp123	%read{208,221} %write{201,201} %derivs
temp	float	$tmp124	%read{203,203} %write{202,202} %derivs
temp	float	$tmp125	%read{208,221} %write{203,203} %derivs
temp	float	$tmp126	%read{206,216} %write{204,204} %derivs
temp	int	$tmp127	%read{207,207} %write{206,206}
temp	float	$tmp128	%read{212,212} %write{211,211} %derivs
temp	float	$tmp129	%read{210,210} %write{209,209} %derivs
temp	float	$tmp130	%read{209,209} %write{208,208} %derivs
temp	float	$tmp131	%read{211,211} %write{210,210} %derivs
temp	float	$tmp132	%read{219,219} %write{213,213} %derivs
temp	float	$tmp133	%read{215,215} %write{214,214} %derivs
temp	float	$tmp134	%read{216,216} %write{215,215} %derivs
temp	float	$tmp135	%read{218,218} %write{216,216} %derivs
temp	float	$tmp136	%read{218,218} %write{217,217} %derivs
temp	float	$tmp137	%read{219,219} %write{218,218} %derivs
temp	float	$tmp138	%read{269,269} %write{222,222} %derivs
temp	float	$tmp139	%read{245,245} %write{242,244} %derivs
temp	float	$tmp140	%read{224,224} %write{223,223} %derivs
temp	float	$tmp141	%read{231,244} %write{224,224} %derivs
temp	float	$tmp142	%read{226,226} %write{225,225} %derivs
temp	float	$tmp143	%read{231,244} %write{226,226} %derivs
temp	float	$tmp144	%read{229,239} %write{227,227} %derivs
temp	int	$tmp145	%read{230,230} %write{229,229}
temp	float	$tmp146	%read{235,235} %write{234,234} %derivs
temp	float	$tmp147	%read{233,233} %write{232,232} %derivs
temp	float	$tmp148	%read{232,232} %write{231,231} %derivs
temp	float	$tmp149	%read{234,234} %write{233,233} %derivs
temp	float	$tmp150	%read{242,242} %write{236,236} %derivs
temp	float	$tmp151	%read{238,238} %write{237,237} %derivs
temp	float	$tmp152	%read{239,239} %write{238,238} %derivs
temp	float	$tmp153	%read{241,241} %write{239,239} %derivs
temp	float	$tmp154	%read{241,241} %write{240,240} %derivs
temp	float	$tmp155	%read{242,242} %write{241,241} %derivs
temp	float	$tmp156	%read{269,269} %write{245,245} %derivs
temp	float	$tmp157	%read{268,268} %write{265,267} %derivs
temp	float	$tmp158	%read{247,247} %write{246,246} %derivs
temp	float	$tmp159	%read{254,267} %write{247,247} %derivs
temp	float	$tmp160	%read{249,249} %write{248,248} %derivs
temp	float	$tmp161	%read{254,267} %write{249,249} %derivs
temp	float	$tmp162	%read{252,262} %write{250,250} %derivs
temp	int	$tmp163	%read{253,253} %write{252,252}
temp	float	$tmp164	%read{258,258} %write{257,257} %derivs
temp	float	$tmp165	%read{256,256} %write{255,255} %derivs
temp	float	$tmp166	%read{255,255} %write{254,254} %derivs
temp	float	$tmp167	%read{257,257} %write{256,256} %derivs
temp	float	$tmp168	%read{265,265} %write{259,259} %derivs
temp	float	$tmp169	%read{261,261} %write{260,260} %derivs
temp	float	$tmp170	%read{262,262} %write{261,261} %derivs
temp	float	$tmp171	%read{264,264} %write{262,262} %derivs
temp	float	$tmp172	%read{264,264} %write{263,263} %derivs
temp	float	$tmp173	%read{265,265} %write{264,264} %derivs
temp	float	$tmp174	%read{269,269} %write{268,268} %derivs
const	int	$const32	106		%read{270,270} %write{2147483647,-1}
temp	int	$tmp175	%read{271,271} %write{270,270}
const	int	$const33	107		%read{273,273} %write{2147483647,-1}
temp	int	$tmp176	%read{274,274} %write{273,273}
const	int	$const34	108		%read{276,276} %write{2147483647,-1}
temp	int	$tmp177	%read{277,277} %write{276,276}
const	int	$const35	109		%read{279,279} %write{2147483647,-1}
temp	int	$tmp178	%read{280,280} %write{279,279}
const	int	$const36	110		%read{282,282} %write{2147483647,-1}
temp	int	$tmp179	%read{283,283} %write{282,282}
const	string	$const37	"Color_Fractional"		%read{284,284} %write{2147483647,-1}
temp	color	$tmp180	%read{286,286} %write{285,285} %derivs
const	int	$const38	11		%read{287,287} %write{2147483647,-1}
temp	int	$tmp181	%read{288,288} %write{287,287}
const	int	$const39	203		%read{290,290} %write{2147483647,-1}
temp	int	$tmp182	%read{291,291} %write{290,290}
const	string	$const40	"Color_Wrap"		%read{292,292} %write{2147483647,-1}
temp	float	$tmp183	%read{335,335} %write{304,305} %derivs
temp	float	$tmp184	%read{300,304} %write{293,293} %derivs
temp	float	$tmp185	%read{297,305} %write{294,294} %derivs
temp	float	$tmp186	%read{297,297} %write{295,295} %derivs
const	string	$const41	"Math_Wrap"		%read{296,324} %write{2147483647,-1}
temp	int	$tmp187	%read{299,299} %write{298,298}
temp	float	$tmp188	%read{303,303} %write{302,302} %derivs
temp	float	$tmp189	%read{301,301} %write{300,300} %derivs
temp	float	$tmp190	%read{302,302} %write{301,301} %derivs
temp	float	$tmp191	%read{304,304} %write{303,303} %derivs
temp	float	$tmp192	%read{335,335} %write{318,319} %derivs
temp	float	$tmp193	%read{314,318} %write{307,307} %derivs
temp	float	$tmp194	%read{311,319} %write{308,308} %derivs
temp	float	$tmp195	%read{311,311} %write{309,309} %derivs
temp	int	$tmp196	%read{313,313} %write{312,312}
temp	float	$tmp197	%read{317,317} %write{316,316} %derivs
temp	float	$tmp198	%read{315,315} %write{314,314} %derivs
temp	float	$tmp199	%read{316,316} %write{315,315} %derivs
temp	float	$tmp200	%read{318,318} %write{317,317} %derivs
temp	float	$tmp201	%read{335,335} %write{332,333} %derivs
temp	float	$tmp202	%read{328,332} %write{321,321} %derivs
temp	float	$tmp203	%read{325,333} %write{322,322} %derivs
temp	float	$tmp204	%read{325,325} %write{323,323} %derivs
temp	int	$tmp205	%read{327,327} %write{326,326}
temp	float	$tmp206	%read{331,331} %write{330,330} %derivs
temp	float	$tmp207	%read{329,329} %write{328,328} %derivs
temp	float	$tmp208	%read{330,330} %write{329,329} %derivs
temp	float	$tmp209	%read{332,332} %write{331,331} %derivs
const	int	$const42	12		%read{336,336} %write{2147483647,-1}
temp	int	$tmp210	%read{337,337} %write{336,336}
const	string	$const43	"Color_Snap"		%read{338,338} %write{2147483647,-1}
temp	float	$tmp211	%read{369,369} %write{344,348} %derivs
temp	float	$tmp212	%read{346,346} %write{339,339} %derivs
temp	float	$tmp213	%read{342,348} %write{340,340} %derivs
const	string	$const44	"Math_Snap"		%read{341,361} %write{2147483647,-1}
temp	int	$tmp214	%read{343,343} %write{342,342}
temp	float	$tmp215	%read{348,348} %write{347,347} %derivs
temp	float	$tmp216	%read{347,347} %write{346,346} %derivs
temp	float	$tmp217	%read{369,369} %write{354,358} %derivs
temp	float	$tmp218	%read{356,356} %write{349,349} %derivs
temp	float	$tmp219	%read{352,358} %write{350,350} %derivs
temp	int	$tmp220	%read{353,353} %write{352,352}
temp	float	$tmp221	%read{358,358} %write{357,357} %derivs
temp	float	$tmp222	%read{357,357} %write{356,356} %derivs
temp	float	$tmp223	%read{369,369} %write{364,368} %derivs
temp	float	$tmp224	%read{366,366} %write{359,359} %derivs
temp	float	$tmp225	%read{362,368} %write{360,360} %derivs
temp	int	$tmp226	%read{363,363} %write{362,362}
temp	float	$tmp227	%read{368,368} %write{367,367} %derivs
temp	float	$tmp228	%read{367,367} %write{366,366} %derivs
const	int	$const45	13		%read{370,370} %write{2147483647,-1}
temp	int	$tmp229	%read{371,371} %write{370,370}
const	string	$const46	"Color_PingPong"		%read{372,372} %write{2147483647,-1}
temp	float	$tmp230	%read{424,424} %write{378,389} %derivs
temp	float	$tmp231	%read{380,380} %write{373,373} %derivs
temp	float	$tmp232	%read{376,388} %write{374,374} %derivs
const	string	$const47	"Math_PingPong"		%read{375,409} %write{2147483647,-1}
temp	int	$tmp233	%read{377,377} %write{376,376}
temp	float	$tmp234	%read{386,386} %write{385,385} %derivs
temp	float	$tmp235	%read{382,382} %write{380,380} %derivs
const	float	$const48	2		%read{381,421} %write{2147483647,-1}
temp	float	$tmp236	%read{382,382} %write{381,381} %derivs
temp	float	$tmp237	%read{384,385} %write{382,382} %derivs
const	string	$const49	"Math_Fractional"		%read{383,417} %write{2147483647,-1}
temp	float	$tmp238	%read{385,385} %write{384,384} %derivs
temp	float	$tmp239	%read{387,387} %write{386,386} %derivs
temp	float	$tmp240	%read{388,388} %write{387,387} %derivs
temp	float	$tmp241	%read{389,389} %write{388,388} %derivs
temp	float	$tmp242	%read{424,424} %write{395,406} %derivs
temp	float	$tmp243	%read{397,397} %write{390,390} %derivs
temp	float	$tmp244	%read{393,405} %write{391,391} %derivs
temp	int	$tmp245	%read{394,394} %write{393,393}
temp	float	$tmp246	%read{403,403} %write{402,402} %derivs
temp	float	$tmp247	%read{399,399} %write{397,397} %derivs
temp	float	$tmp248	%read{399,399} %write{398,398} %derivs
temp	float	$tmp249	%read{401,402} %write{399,399} %derivs
temp	float	$tmp250	%read{402,402} %write{401,401} %derivs
temp	float	$tmp251	%read{404,404} %write{403,403} %derivs
temp	float	$tmp252	%read{405,405} %write{404,404} %derivs
temp	float	$tmp253	%read{406,406} %write{405,405} %derivs
temp	float	$tmp254	%read{424,424} %write{412,423} %derivs
temp	float	$tmp255	%read{414,414} %write{407,407} %derivs
temp	float	$tmp256	%read{410,422} %write{408,408} %derivs
temp	int	$tmp257	%read{411,411} %write{410,410}
temp	float	$tmp258	%read{420,420} %write{419,419} %derivs
temp	float	$tmp259	%read{416,416} %write{414,414} %derivs
temp	float	$tmp260	%read{416,416} %write{415,415} %derivs
temp	float	$tmp261	%read{418,419} %write{416,416} %derivs
temp	float	$tmp262	%read{419,419} %write{418,418} %derivs
temp	float	$tmp263	%read{421,421} %write{420,420} %derivs
temp	float	$tmp264	%read{422,422} %write{421,421} %derivs
temp	float	$tmp265	%read{423,423} %write{422,422} %derivs
const	int	$const50	111		%read{425,425} %write{2147483647,-1}
temp	int	$tmp266	%read{426,426} %write{425,425}
const	int	$const51	112		%read{428,428} %write{2147483647,-1}
temp	int	$tmp267	%read{429,429} %write{428,428}
const	int	$const52	113		%read{431,431} %write{2147483647,-1}
temp	int	$tmp268	%read{432,432} %write{431,431}
const	int	$const53	114		%read{434,434} %write{2147483647,-1}
temp	int	$tmp269	%read{435,435} %write{434,434}
const	int	$const54	115		%read{437,437} %write{2147483647,-1}
temp	int	$tmp270	%read{438,438} %write{437,437}
const	int	$const55	116		%read{440,440} %write{2147483647,-1}
temp	int	$tmp271	%read{441,441} %write{440,440}
const	int	$const56	14		%read{443,443} %write{2147483647,-1}
temp	int	$tmp272	%read{444,444} %write{443,443}
const	int	$const57	117		%read{446,446} %write{2147483647,-1}
temp	int	$tmp273	%read{447,447} %write{446,446}
const	int	$const58	118		%read{449,449} %write{2147483647,-1}
temp	int	$tmp274	%read{450,450} %write{449,449}
const	int	$const59	119		%read{452,452} %write{2147483647,-1}
temp	int	$tmp275	%read{453,453} %write{452,452}
const	int	$const60	120		%read{455,455} %write{2147483647,-1}
temp	int	$tmp276	%read{456,456} %write{455,455}
const	string	$const61	"radians"		%read{457,457} %write{2147483647,-1}
const	float	$const62	3.14159274		%read{458,463} %write{2147483647,-1}
const	float	$const63	180		%read{458,463} %write{2147483647,-1}
temp	float	$tmp277	%read{459,459} %write{458,458} %derivs
const	int	$const64	121		%read{460,460} %write{2147483647,-1}
temp	int	$tmp278	%read{461,461} %write{460,460}
const	string	$const65	"degrees"		%read{462,462} %write{2147483647,-1}
temp	float	$tmp279	%read{464,464} %write{463,463} %derivs
const	color	$const66	0 0 0		%read{472,511} %write{2147483647,-1}
const	color	$const67	1 1 1		%read{471,512} %write{2147483647,-1}
const	string	$const68	"Color_filteredClamp"		%read{467,467} %write{2147483647,-1}
temp	int	$tmp282	%read{469,469} %write{468,468}
const	string	$const69	"clamp"		%read{470,516} %write{2147483647,-1}
temp	color	$tmp283	%read{472,472} %write{471,471} %derivs
temp	float	$tmp284	%read{528,528} %write{482,491} %derivs
temp	float	$tmp285	%read{481,490} %write{474,474} %derivs
temp	float	$tmp286	%read{482,491} %write{475,475} %derivs
temp	float	$tmp287	%read{481,488} %write{476,476} %derivs
const	string	$const70	"Math_FilteredClamp"		%read{477,513} %write{2147483647,-1}
temp	int	$tmp288	%read{479,479} %write{478,478}
temp	float	$tmp289	%read{482,482} %write{481,481} %derivs
temp	float	$tmp290	%read{485,485} %write{484,484} %derivs
temp	float	$tmp291	%read{491,491} %write{488,488} %derivs
temp	float	$tmp292	%read{488,488} %write{487,487} %derivs
temp	float	$tmp293	%read{487,487} %write{486,486} %derivs
temp	float	$tmp294	%read{491,491} %write{490,490} %derivs
temp	float	$tmp295	%read{490,490} %write{489,489} %derivs
temp	float	$tmp296	%read{528,528} %write{500,509} %derivs
temp	float	$tmp297	%read{499,508} %write{492,492} %derivs
temp	float	$tmp298	%read{500,509} %write{493,493} %derivs
temp	float	$tmp299	%read{499,506} %write{494,494} %derivs
temp	int	$tmp300	%read{497,497} %write{496,496}
temp	float	$tmp301	%read{500,500} %write{499,499} %derivs
temp	float	$tmp302	%read{503,503} %write{502,502} %derivs
temp	float	$tmp303	%read{509,509} %write{506,506} %derivs
temp	float	$tmp304	%read{506,506} %write{505,505} %derivs
temp	float	$tmp305	%read{505,505} %write{504,504} %derivs
temp	float	$tmp306	%read{509,509} %write{508,508} %derivs
temp	float	$tmp307	%read{508,508} %write{507,507} %derivs
temp	float	$tmp308	%read{528,528} %write{518,527} %derivs
temp	float	$tmp309	%read{517,526} %write{510,510} %derivs
temp	float	$tmp310	%read{518,527} %write{511,511} %derivs
temp	float	$tmp311	%read{517,524} %write{512,512} %derivs
temp	int	$tmp312	%read{515,515} %write{514,514}
temp	float	$tmp313	%read{518,518} %write{517,517} %derivs
temp	float	$tmp314	%read{521,521} %write{520,520} %derivs
temp	float	$tmp315	%read{527,527} %write{524,524} %derivs
temp	float	$tmp316	%read{524,524} %write{523,523} %derivs
temp	float	$tmp317	%read{523,523} %write{522,522} %derivs
temp	float	$tmp318	%read{527,527} %write{526,526} %derivs
temp	float	$tmp319	%read{526,526} %write{525,525} %derivs
code ___main___
# PxrArithmetic.osl:246
#     if (operation == k_multiply)
	eq		$tmp1 operation $const1 	%filename{"PxrArithmetic.osl"} %line{246} %argrw{"wrr"}
	if		$tmp1 3 466 	%argrw{"r"}
# PxrArithmetic.osl:248
#         resultRGB = input1 * input2;
	mul		resultRGB input1 input2 	%line{248} %argrw{"wrr"}
# PxrArithmetic.osl:250
#     else if (operation == k_divide)
	eq		$tmp2 operation $const2 	%line{250} %argrw{"wrr"}
	if		$tmp2 6 466 	%argrw{"r"}
# PxrArithmetic.osl:253
#         resultRGB = input1 / input2;
	div		resultRGB input1 input2 	%line{253} %argrw{"wrr"}
# PxrArithmetic.osl:255
#     else if (operation == k_multiply_add)
	eq		$tmp3 operation $const3 	%line{255} %argrw{"wrr"}
	if		$tmp3 10 466 	%argrw{"r"}
# PxrArithmetic.osl:257
#         resultRGB = input1 * input2 + input3;
	mul		$tmp4 input1 input2 	%line{257} %argrw{"wrr"}
	add		resultRGB $tmp4 input3 	%argrw{"wrr"}
# PxrArithmetic.osl:259
#     else if (operation == k_power)
	eq		$tmp5 operation $const4 	%line{259} %argrw{"wrr"}
	if		$tmp5 13 466 	%argrw{"r"}
# PxrArithmetic.osl:261
#         resultRGB = pow(input1, input2);
	pow		resultRGB input1 input2 	%line{261} %argrw{"wrr"}
# PxrArithmetic.osl:263
#     else if (operation == k_add)
	eq		$tmp6 operation $const5 	%line{263} %argrw{"wrr"}
	if		$tmp6 16 466 	%argrw{"r"}
# PxrArithmetic.osl:265
#         resultRGB = input1 + input2;
	add		resultRGB input1 input2 	%line{265} %argrw{"wrr"}
# PxrArithmetic.osl:267
#     else if (operation == k_subtract)
	eq		$tmp7 operation $const6 	%line{267} %argrw{"wrr"}
	if		$tmp7 19 466 	%argrw{"r"}
# PxrArithmetic.osl:269
#         resultRGB = input1 - input2;
	sub		resultRGB input1 input2 	%line{269} %argrw{"wrr"}
# PxrArithmetic.osl:271
#     else if (operation == k_logarithm)
	eq		$tmp8 operation $const7 	%line{271} %argrw{"wrr"}
	if		$tmp8 26 466 	%argrw{"r"}
# PxrArithmetic.osl:273
#         resultRGB = log(input1, input2[0]);
	compref		$tmp9 input2 $const8 	%line{273} %argrw{"wrr"}
	functioncall	$const9 26 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:116
# color  log (color a,  float b) { return log(a)/log(b); }
	log		$tmp10 input1 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{116} %argrw{"wr"}
	log		$tmp11 $tmp9 	%argrw{"wr"}
	div		resultRGB $tmp10 $tmp11 	%argrw{"wrr"}
# PxrArithmetic.osl:275
#     else if (operation == k_sqr)
	eq		$tmp12 operation $const10 	%filename{"PxrArithmetic.osl"} %line{275} %argrw{"wrr"}
	if		$tmp12 29 466 	%argrw{"r"}
# PxrArithmetic.osl:277
#         resultRGB = sqrt(input1);
	sqrt		resultRGB input1 	%line{277} %argrw{"wr"}
# PxrArithmetic.osl:279
#     else if (operation == k_invsqr)
	eq		$tmp13 operation $const11 	%line{279} %argrw{"wrr"}
	if		$tmp13 32 466 	%argrw{"r"}
# PxrArithmetic.osl:281
#         resultRGB = inversesqrt(input1);
	inversesqrt	resultRGB input1 	%line{281} %argrw{"wr"}
# PxrArithmetic.osl:283
#     else if (operation == k_absolute)
	eq		$tmp14 operation $const12 	%line{283} %argrw{"wrr"}
	if		$tmp14 35 466 	%argrw{"r"}
# PxrArithmetic.osl:285
#         resultRGB = abs(input1);
	abs		resultRGB input1 	%line{285} %argrw{"wr"}
# PxrArithmetic.osl:287
#     else if (operation == k_exponent)
	eq		$tmp15 operation $const13 	%line{287} %argrw{"wrr"}
	if		$tmp15 38 466 	%argrw{"r"}
# PxrArithmetic.osl:289
#         resultRGB = exp(input1);
	exp		resultRGB input1 	%line{289} %argrw{"wr"}
# PxrArithmetic.osl:291
#     else if (operation == k_exponent_2)
	eq		$tmp16 operation $const14 	%line{291} %argrw{"wrr"}
	if		$tmp16 41 466 	%argrw{"r"}
# PxrArithmetic.osl:293
#         resultRGB = exp2(input1);
	exp2		resultRGB input1 	%line{293} %argrw{"wr"}
# PxrArithmetic.osl:295
#     else if (operation == k_minimum)
	eq		$tmp17 operation $const15 	%line{295} %argrw{"wrr"}
	if		$tmp17 44 466 	%argrw{"r"}
# PxrArithmetic.osl:297
#         resultRGB = min(input1, input2);
	min		resultRGB input1 input2 	%line{297} %argrw{"wrr"}
# PxrArithmetic.osl:299
#     else if (operation == k_maximum)
	eq		$tmp18 operation $const16 	%line{299} %argrw{"wrr"}
	if		$tmp18 47 466 	%argrw{"r"}
# PxrArithmetic.osl:301
#         resultRGB = max(input1, input2);
	max		resultRGB input1 input2 	%line{301} %argrw{"wrr"}
# PxrArithmetic.osl:303
#     else if (operation == k_less_than)
	eq		$tmp19 operation $const17 	%line{303} %argrw{"wrr"}
	if		$tmp19 61 466 	%argrw{"r"}
# PxrArithmetic.osl:305
#         resultRGB[0] = input1[0] < input2[0];
	compref		$tmp20 input1 $const8 	%line{305} %argrw{"wrr"}
	compref		$tmp21 input2 $const8 	%argrw{"wrr"}
	lt		$tmp22 $tmp20 $tmp21 	%argrw{"wrr"}
	compassign	resultRGB $const8 $tmp22 	%argrw{"wrr"}
# PxrArithmetic.osl:306
#         resultRGB[1] = input1[1] < input2[1];
	compref		$tmp23 input1 $const1 	%line{306} %argrw{"wrr"}
	compref		$tmp24 input2 $const1 	%argrw{"wrr"}
	lt		$tmp25 $tmp23 $tmp24 	%argrw{"wrr"}
	compassign	resultRGB $const1 $tmp25 	%argrw{"wrr"}
# PxrArithmetic.osl:307
#         resultRGB[2] = input1[2] < input2[2];
	compref		$tmp26 input1 $const2 	%line{307} %argrw{"wrr"}
	compref		$tmp27 input2 $const2 	%argrw{"wrr"}
	lt		$tmp28 $tmp26 $tmp27 	%argrw{"wrr"}
	compassign	resultRGB $const2 $tmp28 	%argrw{"wrr"}
# PxrArithmetic.osl:309
#     else if (operation == k_greater_than)
	eq		$tmp29 operation $const18 	%line{309} %argrw{"wrr"}
	if		$tmp29 75 466 	%argrw{"r"}
# PxrArithmetic.osl:311
#         resultRGB[0] = input1[0] > input2[0];
	compref		$tmp30 input1 $const8 	%line{311} %argrw{"wrr"}
	compref		$tmp31 input2 $const8 	%argrw{"wrr"}
	gt		$tmp32 $tmp30 $tmp31 	%argrw{"wrr"}
	compassign	resultRGB $const8 $tmp32 	%argrw{"wrr"}
# PxrArithmetic.osl:312
#         resultRGB[1] = input1[1] > input2[1];
	compref		$tmp33 input1 $const1 	%line{312} %argrw{"wrr"}
	compref		$tmp34 input2 $const1 	%argrw{"wrr"}
	gt		$tmp35 $tmp33 $tmp34 	%argrw{"wrr"}
	compassign	resultRGB $const1 $tmp35 	%argrw{"wrr"}
# PxrArithmetic.osl:313
#         resultRGB[2] = input1[2] > input2[2];
	compref		$tmp36 input1 $const2 	%line{313} %argrw{"wrr"}
	compref		$tmp37 input2 $const2 	%argrw{"wrr"}
	gt		$tmp38 $tmp36 $tmp37 	%argrw{"wrr"}
	compassign	resultRGB $const2 $tmp38 	%argrw{"wrr"}
# PxrArithmetic.osl:315
#     else if (operation == k_sign)
	eq		$tmp39 operation $const19 	%line{315} %argrw{"wrr"}
	if		$tmp39 78 466 	%argrw{"r"}
# PxrArithmetic.osl:317
#         resultRGB = sign(input1);
	sign		resultRGB input1 	%line{317} %argrw{"wr"}
# PxrArithmetic.osl:319
#     else if (operation == k_compare)
	eq		$tmp40 operation $const20 	%line{319} %argrw{"wrr"}
	if		$tmp40 133 466 	%argrw{"r"}
# PxrArithmetic.osl:321
#         resultRGB = Color_Compare(input1, input2, input3);
	functioncall	$const21 133 	%line{321} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:181
#     return color(Math_Compare(a[0], b[0], eps[0]),
	compref		$tmp42 input1 $const8 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{181} %argrw{"wrr"}
	compref		$tmp43 input2 $const8 	%argrw{"wrr"}
	compref		$tmp44 input3 $const8 	%argrw{"wrr"}
	functioncall	$const22 98 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:586
#     return ((a == b) || (abs(a - b) <= max(eps, 1.0e-6))) ? 1.0 : 0.0;
	eq		$tmp45 $tmp42 $tmp43 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{586} %argrw{"wrr"}
	neq		$tmp46 $tmp45 $const8 	%argrw{"wrr"}
	if		$tmp46 88 94 	%argrw{"r"}
	sub		$tmp48 $tmp42 $tmp43 	%argrw{"wrr"}
	abs		$tmp47 $tmp48 	%argrw{"wr"}
	max		$tmp49 $tmp44 $const23 	%argrw{"wrr"}
	le		$tmp50 $tmp47 $tmp49 	%argrw{"wrr"}
	neq		$tmp51 $tmp50 $const8 	%argrw{"wrr"}
	assign		$tmp46 $tmp51 	%argrw{"wr"}
	if		$tmp46 96 97 	%argrw{"r"}
	assign		$tmp41 $const24 	%argrw{"wr"}
	assign		$tmp41 $const25 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:182
#                  Math_Compare(a[1], b[1], eps[1]),
	compref		$tmp53 input1 $const1 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{182} %argrw{"wrr"}
	compref		$tmp54 input2 $const1 	%argrw{"wrr"}
	compref		$tmp55 input3 $const1 	%argrw{"wrr"}
	functioncall	$const22 115 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:586
#     return ((a == b) || (abs(a - b) <= max(eps, 1.0e-6))) ? 1.0 : 0.0;
	eq		$tmp56 $tmp53 $tmp54 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{586} %argrw{"wrr"}
	neq		$tmp57 $tmp56 $const8 	%argrw{"wrr"}
	if		$tmp57 105 111 	%argrw{"r"}
	sub		$tmp59 $tmp53 $tmp54 	%argrw{"wrr"}
	abs		$tmp58 $tmp59 	%argrw{"wr"}
	max		$tmp60 $tmp55 $const23 	%argrw{"wrr"}
	le		$tmp61 $tmp58 $tmp60 	%argrw{"wrr"}
	neq		$tmp62 $tmp61 $const8 	%argrw{"wrr"}
	assign		$tmp57 $tmp62 	%argrw{"wr"}
	if		$tmp57 113 114 	%argrw{"r"}
	assign		$tmp52 $const24 	%argrw{"wr"}
	assign		$tmp52 $const25 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:183
#                  Math_Compare(a[2], b[2], eps[2]));
	compref		$tmp64 input1 $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{183} %argrw{"wrr"}
	compref		$tmp65 input2 $const2 	%argrw{"wrr"}
	compref		$tmp66 input3 $const2 	%argrw{"wrr"}
	functioncall	$const22 132 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:586
#     return ((a == b) || (abs(a - b) <= max(eps, 1.0e-6))) ? 1.0 : 0.0;
	eq		$tmp67 $tmp64 $tmp65 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{586} %argrw{"wrr"}
	neq		$tmp68 $tmp67 $const8 	%argrw{"wrr"}
	if		$tmp68 122 128 	%argrw{"r"}
	sub		$tmp70 $tmp64 $tmp65 	%argrw{"wrr"}
	abs		$tmp69 $tmp70 	%argrw{"wr"}
	max		$tmp71 $tmp66 $const23 	%argrw{"wrr"}
	le		$tmp72 $tmp69 $tmp71 	%argrw{"wrr"}
	neq		$tmp73 $tmp72 $const8 	%argrw{"wrr"}
	assign		$tmp68 $tmp73 	%argrw{"wr"}
	if		$tmp68 130 131 	%argrw{"r"}
	assign		$tmp63 $const24 	%argrw{"wr"}
	assign		$tmp63 $const25 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:181
#     return color(Math_Compare(a[0], b[0], eps[0]),
	color		resultRGB $tmp41 $tmp52 $tmp63 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{181} %argrw{"wrrr"}
# PxrArithmetic.osl:323
#     else if (operation == k_smooth_min)
	eq		$tmp74 operation $const26 	%filename{"PxrArithmetic.osl"} %line{323} %argrw{"wrr"}
	if		$tmp74 197 466 	%argrw{"r"}
# PxrArithmetic.osl:325
#         resultRGB = Color_SmoothMin(input1, input2, input3);
	functioncall	$const27 197 	%line{325} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:167
#     return color(Math_SmoothMin(a[0], b[0], k[0]),
	compref		$tmp76 input1 $const8 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{167} %argrw{"wrr"}
	compref		$tmp77 input2 $const8 	%argrw{"wrr"}
	compref		$tmp78 input3 $const8 	%argrw{"wrr"}
	functioncall	$const28 156 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:576
#     if (k != 0.0)
	neq		$tmp79 $tmp78 $const25 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{576} %argrw{"wrr"}
	if		$tmp79 155 155 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:578
#         float h = max(k - abs(a - b), 0.0) / k;
	sub		$tmp82 $tmp76 $tmp77 	%line{578} %argrw{"wrr"}
	abs		$tmp81 $tmp82 	%argrw{"wr"}
	sub		$tmp83 $tmp78 $tmp81 	%argrw{"wrr"}
	max		$tmp80 $tmp83 $const25 	%argrw{"wrr"}
	div		___382_h $tmp80 $tmp78 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:579
#         return min(a, b) - h * h * h * k * (1.0 / 6.0);
	min		$tmp84 $tmp76 $tmp77 	%line{579} %argrw{"wrr"}
	mul		$tmp85 ___382_h ___382_h 	%argrw{"wrr"}
	mul		$tmp86 $tmp85 ___382_h 	%argrw{"wrr"}
	mul		$tmp87 $tmp86 $tmp78 	%argrw{"wrr"}
	div		$tmp88 $const24 $const29 	%argrw{"wrr"}
	mul		$tmp89 $tmp87 $tmp88 	%argrw{"wrr"}
	sub		$tmp75 $tmp84 $tmp89 	%argrw{"wrr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:581
#     return min(a, b);
	min		$tmp75 $tmp76 $tmp77 	%line{581} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:168
#                  Math_SmoothMin(a[1], b[1], k[1]),
	compref		$tmp91 input1 $const1 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{168} %argrw{"wrr"}
	compref		$tmp92 input2 $const1 	%argrw{"wrr"}
	compref		$tmp93 input3 $const1 	%argrw{"wrr"}
	functioncall	$const28 176 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:576
#     if (k != 0.0)
	neq		$tmp94 $tmp93 $const25 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{576} %argrw{"wrr"}
	if		$tmp94 175 175 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:578
#         float h = max(k - abs(a - b), 0.0) / k;
	sub		$tmp97 $tmp91 $tmp92 	%line{578} %argrw{"wrr"}
	abs		$tmp96 $tmp97 	%argrw{"wr"}
	sub		$tmp98 $tmp93 $tmp96 	%argrw{"wrr"}
	max		$tmp95 $tmp98 $const25 	%argrw{"wrr"}
	div		___382_h $tmp95 $tmp93 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:579
#         return min(a, b) - h * h * h * k * (1.0 / 6.0);
	min		$tmp99 $tmp91 $tmp92 	%line{579} %argrw{"wrr"}
	mul		$tmp100 ___382_h ___382_h 	%argrw{"wrr"}
	mul		$tmp101 $tmp100 ___382_h 	%argrw{"wrr"}
	mul		$tmp102 $tmp101 $tmp93 	%argrw{"wrr"}
	div		$tmp103 $const24 $const29 	%argrw{"wrr"}
	mul		$tmp104 $tmp102 $tmp103 	%argrw{"wrr"}
	sub		$tmp90 $tmp99 $tmp104 	%argrw{"wrr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:581
#     return min(a, b);
	min		$tmp90 $tmp91 $tmp92 	%line{581} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:169
#                  Math_SmoothMin(a[2], b[2], k[2]));
	compref		$tmp106 input1 $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{169} %argrw{"wrr"}
	compref		$tmp107 input2 $const2 	%argrw{"wrr"}
	compref		$tmp108 input3 $const2 	%argrw{"wrr"}
	functioncall	$const28 196 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:576
#     if (k != 0.0)
	neq		$tmp109 $tmp108 $const25 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{576} %argrw{"wrr"}
	if		$tmp109 195 195 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:578
#         float h = max(k - abs(a - b), 0.0) / k;
	sub		$tmp112 $tmp106 $tmp107 	%line{578} %argrw{"wrr"}
	abs		$tmp111 $tmp112 	%argrw{"wr"}
	sub		$tmp113 $tmp108 $tmp111 	%argrw{"wrr"}
	max		$tmp110 $tmp113 $const25 	%argrw{"wrr"}
	div		___382_h $tmp110 $tmp108 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:579
#         return min(a, b) - h * h * h * k * (1.0 / 6.0);
	min		$tmp114 $tmp106 $tmp107 	%line{579} %argrw{"wrr"}
	mul		$tmp115 ___382_h ___382_h 	%argrw{"wrr"}
	mul		$tmp116 $tmp115 ___382_h 	%argrw{"wrr"}
	mul		$tmp117 $tmp116 $tmp108 	%argrw{"wrr"}
	div		$tmp118 $const24 $const29 	%argrw{"wrr"}
	mul		$tmp119 $tmp117 $tmp118 	%argrw{"wrr"}
	sub		$tmp105 $tmp114 $tmp119 	%argrw{"wrr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:581
#     return min(a, b);
	min		$tmp105 $tmp106 $tmp107 	%line{581} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:167
#     return color(Math_SmoothMin(a[0], b[0], k[0]),
	color		resultRGB $tmp75 $tmp90 $tmp105 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{167} %argrw{"wrrr"}
# PxrArithmetic.osl:327
#     else if (operation == k_smooth_max)
	eq		$tmp120 operation $const30 	%filename{"PxrArithmetic.osl"} %line{327} %argrw{"wrr"}
	if		$tmp120 270 466 	%argrw{"r"}
# PxrArithmetic.osl:329
#         resultRGB = Color_SmoothMax(input1, input2, input3);
	functioncall	$const31 270 	%line{329} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:174
#     return color(-Math_SmoothMin(-a[0], -b[0], k[0]),
	compref		$tmp122 input1 $const8 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{174} %argrw{"wrr"}
	neg		$tmp123 $tmp122 	%argrw{"wr"}
	compref		$tmp124 input2 $const8 	%argrw{"wrr"}
	neg		$tmp125 $tmp124 	%argrw{"wr"}
	compref		$tmp126 input3 $const8 	%argrw{"wrr"}
	functioncall	$const28 222 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:576
#     if (k != 0.0)
	neq		$tmp127 $tmp126 $const25 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{576} %argrw{"wrr"}
	if		$tmp127 221 221 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:578
#         float h = max(k - abs(a - b), 0.0) / k;
	sub		$tmp130 $tmp123 $tmp125 	%line{578} %argrw{"wrr"}
	abs		$tmp129 $tmp130 	%argrw{"wr"}
	sub		$tmp131 $tmp126 $tmp129 	%argrw{"wrr"}
	max		$tmp128 $tmp131 $const25 	%argrw{"wrr"}
	div		___382_h $tmp128 $tmp126 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:579
#         return min(a, b) - h * h * h * k * (1.0 / 6.0);
	min		$tmp132 $tmp123 $tmp125 	%line{579} %argrw{"wrr"}
	mul		$tmp133 ___382_h ___382_h 	%argrw{"wrr"}
	mul		$tmp134 $tmp133 ___382_h 	%argrw{"wrr"}
	mul		$tmp135 $tmp134 $tmp126 	%argrw{"wrr"}
	div		$tmp136 $const24 $const29 	%argrw{"wrr"}
	mul		$tmp137 $tmp135 $tmp136 	%argrw{"wrr"}
	sub		$tmp121 $tmp132 $tmp137 	%argrw{"wrr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:581
#     return min(a, b);
	min		$tmp121 $tmp123 $tmp125 	%line{581} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:174
#     return color(-Math_SmoothMin(-a[0], -b[0], k[0]),
	neg		$tmp138 $tmp121 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{174} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:175
#                  -Math_SmoothMin(-a[1], -b[1], k[1]),
	compref		$tmp140 input1 $const1 	%line{175} %argrw{"wrr"}
	neg		$tmp141 $tmp140 	%argrw{"wr"}
	compref		$tmp142 input2 $const1 	%argrw{"wrr"}
	neg		$tmp143 $tmp142 	%argrw{"wr"}
	compref		$tmp144 input3 $const1 	%argrw{"wrr"}
	functioncall	$const28 245 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:576
#     if (k != 0.0)
	neq		$tmp145 $tmp144 $const25 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{576} %argrw{"wrr"}
	if		$tmp145 244 244 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:578
#         float h = max(k - abs(a - b), 0.0) / k;
	sub		$tmp148 $tmp141 $tmp143 	%line{578} %argrw{"wrr"}
	abs		$tmp147 $tmp148 	%argrw{"wr"}
	sub		$tmp149 $tmp144 $tmp147 	%argrw{"wrr"}
	max		$tmp146 $tmp149 $const25 	%argrw{"wrr"}
	div		___382_h $tmp146 $tmp144 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:579
#         return min(a, b) - h * h * h * k * (1.0 / 6.0);
	min		$tmp150 $tmp141 $tmp143 	%line{579} %argrw{"wrr"}
	mul		$tmp151 ___382_h ___382_h 	%argrw{"wrr"}
	mul		$tmp152 $tmp151 ___382_h 	%argrw{"wrr"}
	mul		$tmp153 $tmp152 $tmp144 	%argrw{"wrr"}
	div		$tmp154 $const24 $const29 	%argrw{"wrr"}
	mul		$tmp155 $tmp153 $tmp154 	%argrw{"wrr"}
	sub		$tmp139 $tmp150 $tmp155 	%argrw{"wrr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:581
#     return min(a, b);
	min		$tmp139 $tmp141 $tmp143 	%line{581} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:175
#                  -Math_SmoothMin(-a[1], -b[1], k[1]),
	neg		$tmp156 $tmp139 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{175} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:176
#                  -Math_SmoothMin(-a[2], -b[2], k[2]));
	compref		$tmp158 input1 $const2 	%line{176} %argrw{"wrr"}
	neg		$tmp159 $tmp158 	%argrw{"wr"}
	compref		$tmp160 input2 $const2 	%argrw{"wrr"}
	neg		$tmp161 $tmp160 	%argrw{"wr"}
	compref		$tmp162 input3 $const2 	%argrw{"wrr"}
	functioncall	$const28 268 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:576
#     if (k != 0.0)
	neq		$tmp163 $tmp162 $const25 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{576} %argrw{"wrr"}
	if		$tmp163 267 267 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:578
#         float h = max(k - abs(a - b), 0.0) / k;
	sub		$tmp166 $tmp159 $tmp161 	%line{578} %argrw{"wrr"}
	abs		$tmp165 $tmp166 	%argrw{"wr"}
	sub		$tmp167 $tmp162 $tmp165 	%argrw{"wrr"}
	max		$tmp164 $tmp167 $const25 	%argrw{"wrr"}
	div		___382_h $tmp164 $tmp162 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:579
#         return min(a, b) - h * h * h * k * (1.0 / 6.0);
	min		$tmp168 $tmp159 $tmp161 	%line{579} %argrw{"wrr"}
	mul		$tmp169 ___382_h ___382_h 	%argrw{"wrr"}
	mul		$tmp170 $tmp169 ___382_h 	%argrw{"wrr"}
	mul		$tmp171 $tmp170 $tmp162 	%argrw{"wrr"}
	div		$tmp172 $const24 $const29 	%argrw{"wrr"}
	mul		$tmp173 $tmp171 $tmp172 	%argrw{"wrr"}
	sub		$tmp157 $tmp168 $tmp173 	%argrw{"wrr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:581
#     return min(a, b);
	min		$tmp157 $tmp159 $tmp161 	%line{581} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:176
#                  -Math_SmoothMin(-a[2], -b[2], k[2]));
	neg		$tmp174 $tmp157 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{176} %argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:174
#     return color(-Math_SmoothMin(-a[0], -b[0], k[0]),
	color		resultRGB $tmp138 $tmp156 $tmp174 	%line{174} %argrw{"wrrr"}
# PxrArithmetic.osl:331
#     else if (operation == k_round)
	eq		$tmp175 operation $const32 	%filename{"PxrArithmetic.osl"} %line{331} %argrw{"wrr"}
	if		$tmp175 273 466 	%argrw{"r"}
# PxrArithmetic.osl:333
#         resultRGB = round(input1);
	round		resultRGB input1 	%line{333} %argrw{"wr"}
# PxrArithmetic.osl:335
#     else if (operation == k_floor)
	eq		$tmp176 operation $const33 	%line{335} %argrw{"wrr"}
	if		$tmp176 276 466 	%argrw{"r"}
# PxrArithmetic.osl:337
#         resultRGB = floor(input1);
	floor		resultRGB input1 	%line{337} %argrw{"wr"}
# PxrArithmetic.osl:339
#     else if (operation == k_ceil)
	eq		$tmp177 operation $const34 	%line{339} %argrw{"wrr"}
	if		$tmp177 279 466 	%argrw{"r"}
# PxrArithmetic.osl:341
#         resultRGB = ceil(input1);
	ceil		resultRGB input1 	%line{341} %argrw{"wr"}
# PxrArithmetic.osl:343
#     else if (operation == k_truncate)
	eq		$tmp178 operation $const35 	%line{343} %argrw{"wrr"}
	if		$tmp178 282 466 	%argrw{"r"}
# PxrArithmetic.osl:345
#         resultRGB = trunc(input1);
	trunc		resultRGB input1 	%line{345} %argrw{"wr"}
# PxrArithmetic.osl:347
#     else if (operation == k_fraction)
	eq		$tmp179 operation $const36 	%line{347} %argrw{"wrr"}
	if		$tmp179 287 466 	%argrw{"r"}
# PxrArithmetic.osl:349
#         resultRGB = Color_Fractional(input1);
	functioncall	$const37 287 	%line{349} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:162
#     return a - trunc(a);
	trunc		$tmp180 input1 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{162} %argrw{"wr"}
	sub		resultRGB input1 $tmp180 	%argrw{"wrr"}
# PxrArithmetic.osl:351
#     else if (operation == k_modulo)
	eq		$tmp181 operation $const38 	%filename{"PxrArithmetic.osl"} %line{351} %argrw{"wrr"}
	if		$tmp181 290 466 	%argrw{"r"}
# PxrArithmetic.osl:353
#         resultRGB = fmod(input1, input2);
	fmod		resultRGB input1 input2 	%line{353} %argrw{"wrr"}
# PxrArithmetic.osl:355
#     else if (operation == k_wrap)
	eq		$tmp182 operation $const39 	%line{355} %argrw{"wrr"}
	if		$tmp182 336 466 	%argrw{"r"}
# PxrArithmetic.osl:357
#         resultRGB = Color_Wrap(input1, input2, input3);
	functioncall	$const40 336 	%line{357} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:189
#     return color(Math_Wrap(a[0], b[0], c[0]),
	compref		$tmp184 input1 $const8 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{189} %argrw{"wrr"}
	compref		$tmp185 input2 $const8 	%argrw{"wrr"}
	compref		$tmp186 input3 $const8 	%argrw{"wrr"}
	functioncall	$const41 307 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:593
#     float range = fmax - fmin;
	sub		___384_range $tmp186 $tmp185 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{593} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:594
#     return (range != 0.0) ? a - (range * floor((a - fmin) / range)) : fmin;
	neq		$tmp187 ___384_range $const25 	%line{594} %argrw{"wrr"}
	if		$tmp187 305 306 	%argrw{"r"}
	sub		$tmp189 $tmp184 $tmp185 	%argrw{"wrr"}
	div		$tmp190 $tmp189 ___384_range 	%argrw{"wrr"}
	floor		$tmp188 $tmp190 	%argrw{"wr"}
	mul		$tmp191 ___384_range $tmp188 	%argrw{"wrr"}
	sub		$tmp183 $tmp184 $tmp191 	%argrw{"wrr"}
	assign		$tmp183 $tmp185 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:190
#                  Math_Wrap(a[1], b[1], c[1]),
	compref		$tmp193 input1 $const1 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{190} %argrw{"wrr"}
	compref		$tmp194 input2 $const1 	%argrw{"wrr"}
	compref		$tmp195 input3 $const1 	%argrw{"wrr"}
	functioncall	$const41 321 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:593
#     float range = fmax - fmin;
	sub		___384_range $tmp195 $tmp194 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{593} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:594
#     return (range != 0.0) ? a - (range * floor((a - fmin) / range)) : fmin;
	neq		$tmp196 ___384_range $const25 	%line{594} %argrw{"wrr"}
	if		$tmp196 319 320 	%argrw{"r"}
	sub		$tmp198 $tmp193 $tmp194 	%argrw{"wrr"}
	div		$tmp199 $tmp198 ___384_range 	%argrw{"wrr"}
	floor		$tmp197 $tmp199 	%argrw{"wr"}
	mul		$tmp200 ___384_range $tmp197 	%argrw{"wrr"}
	sub		$tmp192 $tmp193 $tmp200 	%argrw{"wrr"}
	assign		$tmp192 $tmp194 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:191
#                  Math_Wrap(a[2], b[2], c[2]));
	compref		$tmp202 input1 $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{191} %argrw{"wrr"}
	compref		$tmp203 input2 $const2 	%argrw{"wrr"}
	compref		$tmp204 input3 $const2 	%argrw{"wrr"}
	functioncall	$const41 335 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:593
#     float range = fmax - fmin;
	sub		___384_range $tmp204 $tmp203 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{593} %argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:594
#     return (range != 0.0) ? a - (range * floor((a - fmin) / range)) : fmin;
	neq		$tmp205 ___384_range $const25 	%line{594} %argrw{"wrr"}
	if		$tmp205 333 334 	%argrw{"r"}
	sub		$tmp207 $tmp202 $tmp203 	%argrw{"wrr"}
	div		$tmp208 $tmp207 ___384_range 	%argrw{"wrr"}
	floor		$tmp206 $tmp208 	%argrw{"wr"}
	mul		$tmp209 ___384_range $tmp206 	%argrw{"wrr"}
	sub		$tmp201 $tmp202 $tmp209 	%argrw{"wrr"}
	assign		$tmp201 $tmp203 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:189
#     return color(Math_Wrap(a[0], b[0], c[0]),
	color		resultRGB $tmp183 $tmp192 $tmp201 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{189} %argrw{"wrrr"}
# PxrArithmetic.osl:359
#     else if (operation == k_snap)
	eq		$tmp210 operation $const42 	%filename{"PxrArithmetic.osl"} %line{359} %argrw{"wrr"}
	if		$tmp210 370 466 	%argrw{"r"}
# PxrArithmetic.osl:361
#         resultRGB = Color_Snap(input1, input2);
	functioncall	$const43 370 	%line{361} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:196
#     return color(Math_Snap(a[0], b[0]),
	compref		$tmp212 input1 $const8 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{196} %argrw{"wrr"}
	compref		$tmp213 input2 $const8 	%argrw{"wrr"}
	functioncall	$const44 349 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:601
#     if (b == 0.0) return 0.0;
	eq		$tmp214 $tmp213 $const25 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{601} %argrw{"wrr"}
	if		$tmp214 346 346 	%argrw{"r"}
	assign		$tmp211 $const25 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:602
#     return floor(a / b) * b;
	div		$tmp216 $tmp212 $tmp213 	%line{602} %argrw{"wrr"}
	floor		$tmp215 $tmp216 	%argrw{"wr"}
	mul		$tmp211 $tmp215 $tmp213 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:197
#                  Math_Snap(a[1], b[1]),
	compref		$tmp218 input1 $const1 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{197} %argrw{"wrr"}
	compref		$tmp219 input2 $const1 	%argrw{"wrr"}
	functioncall	$const44 359 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:601
#     if (b == 0.0) return 0.0;
	eq		$tmp220 $tmp219 $const25 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{601} %argrw{"wrr"}
	if		$tmp220 356 356 	%argrw{"r"}
	assign		$tmp217 $const25 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:602
#     return floor(a / b) * b;
	div		$tmp222 $tmp218 $tmp219 	%line{602} %argrw{"wrr"}
	floor		$tmp221 $tmp222 	%argrw{"wr"}
	mul		$tmp217 $tmp221 $tmp219 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:198
#                  Math_Snap(a[2], b[2]));
	compref		$tmp224 input1 $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{198} %argrw{"wrr"}
	compref		$tmp225 input2 $const2 	%argrw{"wrr"}
	functioncall	$const44 369 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:601
#     if (b == 0.0) return 0.0;
	eq		$tmp226 $tmp225 $const25 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{601} %argrw{"wrr"}
	if		$tmp226 366 366 	%argrw{"r"}
	assign		$tmp223 $const25 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:602
#     return floor(a / b) * b;
	div		$tmp228 $tmp224 $tmp225 	%line{602} %argrw{"wrr"}
	floor		$tmp227 $tmp228 	%argrw{"wr"}
	mul		$tmp223 $tmp227 $tmp225 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:196
#     return color(Math_Snap(a[0], b[0]),
	color		resultRGB $tmp211 $tmp217 $tmp223 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{196} %argrw{"wrrr"}
# PxrArithmetic.osl:363
#     else if (operation == k_ping_pong)
	eq		$tmp229 operation $const45 	%filename{"PxrArithmetic.osl"} %line{363} %argrw{"wrr"}
	if		$tmp229 425 466 	%argrw{"r"}
# PxrArithmetic.osl:365
#         resultRGB = Color_PingPong(input1, input2);
	functioncall	$const46 425 	%line{365} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:203
#     return color(Math_PingPong(a[0], b[0]),
	compref		$tmp231 input1 $const8 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{203} %argrw{"wrr"}
	compref		$tmp232 input2 $const8 	%argrw{"wrr"}
	functioncall	$const47 390 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:609
#     if (b == 0.0) return 0.0;
	eq		$tmp233 $tmp232 $const25 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{609} %argrw{"wrr"}
	if		$tmp233 380 380 	%argrw{"r"}
	assign		$tmp230 $const25 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:610
#     return abs(Math_Fractional((a - b) / (b * 2.0)) * b * 2.0 - b);
	sub		$tmp235 $tmp231 $tmp232 	%line{610} %argrw{"wrr"}
	mul		$tmp236 $tmp232 $const48 	%argrw{"wrr"}
	div		$tmp237 $tmp235 $tmp236 	%argrw{"wrr"}
	functioncall	$const49 386 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:569
#     return a - trunc(a);
	trunc		$tmp238 $tmp237 	%line{569} %argrw{"wr"}
	sub		$tmp234 $tmp237 $tmp238 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:610
#     return abs(Math_Fractional((a - b) / (b * 2.0)) * b * 2.0 - b);
	mul		$tmp239 $tmp234 $tmp232 	%line{610} %argrw{"wrr"}
	mul		$tmp240 $tmp239 $const48 	%argrw{"wrr"}
	sub		$tmp241 $tmp240 $tmp232 	%argrw{"wrr"}
	abs		$tmp230 $tmp241 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:204
#                  Math_PingPong(a[1], b[1]),
	compref		$tmp243 input1 $const1 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{204} %argrw{"wrr"}
	compref		$tmp244 input2 $const1 	%argrw{"wrr"}
	functioncall	$const47 407 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:609
#     if (b == 0.0) return 0.0;
	eq		$tmp245 $tmp244 $const25 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{609} %argrw{"wrr"}
	if		$tmp245 397 397 	%argrw{"r"}
	assign		$tmp242 $const25 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:610
#     return abs(Math_Fractional((a - b) / (b * 2.0)) * b * 2.0 - b);
	sub		$tmp247 $tmp243 $tmp244 	%line{610} %argrw{"wrr"}
	mul		$tmp248 $tmp244 $const48 	%argrw{"wrr"}
	div		$tmp249 $tmp247 $tmp248 	%argrw{"wrr"}
	functioncall	$const49 403 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:569
#     return a - trunc(a);
	trunc		$tmp250 $tmp249 	%line{569} %argrw{"wr"}
	sub		$tmp246 $tmp249 $tmp250 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:610
#     return abs(Math_Fractional((a - b) / (b * 2.0)) * b * 2.0 - b);
	mul		$tmp251 $tmp246 $tmp244 	%line{610} %argrw{"wrr"}
	mul		$tmp252 $tmp251 $const48 	%argrw{"wrr"}
	sub		$tmp253 $tmp252 $tmp244 	%argrw{"wrr"}
	abs		$tmp242 $tmp253 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:205
#                  Math_PingPong(a[2], b[2]));
	compref		$tmp255 input1 $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{205} %argrw{"wrr"}
	compref		$tmp256 input2 $const2 	%argrw{"wrr"}
	functioncall	$const47 424 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:609
#     if (b == 0.0) return 0.0;
	eq		$tmp257 $tmp256 $const25 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{609} %argrw{"wrr"}
	if		$tmp257 414 414 	%argrw{"r"}
	assign		$tmp254 $const25 	%argrw{"wr"}
	return
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:610
#     return abs(Math_Fractional((a - b) / (b * 2.0)) * b * 2.0 - b);
	sub		$tmp259 $tmp255 $tmp256 	%line{610} %argrw{"wrr"}
	mul		$tmp260 $tmp256 $const48 	%argrw{"wrr"}
	div		$tmp261 $tmp259 $tmp260 	%argrw{"wrr"}
	functioncall	$const49 420 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:569
#     return a - trunc(a);
	trunc		$tmp262 $tmp261 	%line{569} %argrw{"wr"}
	sub		$tmp258 $tmp261 $tmp262 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:610
#     return abs(Math_Fractional((a - b) / (b * 2.0)) * b * 2.0 - b);
	mul		$tmp263 $tmp258 $tmp256 	%line{610} %argrw{"wrr"}
	mul		$tmp264 $tmp263 $const48 	%argrw{"wrr"}
	sub		$tmp265 $tmp264 $tmp256 	%argrw{"wrr"}
	abs		$tmp254 $tmp265 	%argrw{"wr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:203
#     return color(Math_PingPong(a[0], b[0]),
	color		resultRGB $tmp230 $tmp242 $tmp254 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{203} %argrw{"wrrr"}
# PxrArithmetic.osl:367
#     else if (operation == k_sin)
	eq		$tmp266 operation $const50 	%filename{"PxrArithmetic.osl"} %line{367} %argrw{"wrr"}
	if		$tmp266 428 466 	%argrw{"r"}
# PxrArithmetic.osl:369
#         resultRGB = sin(input1);
	sin		resultRGB input1 	%line{369} %argrw{"wr"}
# PxrArithmetic.osl:371
#     else if (operation == k_cos)
	eq		$tmp267 operation $const51 	%line{371} %argrw{"wrr"}
	if		$tmp267 431 466 	%argrw{"r"}
# PxrArithmetic.osl:373
#         resultRGB = cos(input1);
	cos		resultRGB input1 	%line{373} %argrw{"wr"}
# PxrArithmetic.osl:375
#     else if (operation == k_tan)
	eq		$tmp268 operation $const52 	%line{375} %argrw{"wrr"}
	if		$tmp268 434 466 	%argrw{"r"}
# PxrArithmetic.osl:377
#         resultRGB = tan(input1);
	tan		resultRGB input1 	%line{377} %argrw{"wr"}
# PxrArithmetic.osl:379
#     else if (operation == k_asin)
	eq		$tmp269 operation $const53 	%line{379} %argrw{"wrr"}
	if		$tmp269 437 466 	%argrw{"r"}
# PxrArithmetic.osl:381
#         resultRGB = asin(input1);
	asin		resultRGB input1 	%line{381} %argrw{"wr"}
# PxrArithmetic.osl:383
#     else if (operation == k_acos)
	eq		$tmp270 operation $const54 	%line{383} %argrw{"wrr"}
	if		$tmp270 440 466 	%argrw{"r"}
# PxrArithmetic.osl:385
#         resultRGB = acos(input1);
	acos		resultRGB input1 	%line{385} %argrw{"wr"}
# PxrArithmetic.osl:387
#     else if (operation == k_atan)
	eq		$tmp271 operation $const55 	%line{387} %argrw{"wrr"}
	if		$tmp271 443 466 	%argrw{"r"}
# PxrArithmetic.osl:389
#         resultRGB = atan(input1);
	atan		resultRGB input1 	%line{389} %argrw{"wr"}
# PxrArithmetic.osl:391
#     else if (operation == k_atan2)
	eq		$tmp272 operation $const56 	%line{391} %argrw{"wrr"}
	if		$tmp272 446 466 	%argrw{"r"}
# PxrArithmetic.osl:393
#         resultRGB = atan2(input1, input2);
	atan2		resultRGB input1 input2 	%line{393} %argrw{"wrr"}
# PxrArithmetic.osl:395
#     else if (operation == k_sinh)
	eq		$tmp273 operation $const57 	%line{395} %argrw{"wrr"}
	if		$tmp273 449 466 	%argrw{"r"}
# PxrArithmetic.osl:397
#         resultRGB = sinh(input1);
	sinh		resultRGB input1 	%line{397} %argrw{"wr"}
# PxrArithmetic.osl:399
#     else if (operation == k_cosh)
	eq		$tmp274 operation $const58 	%line{399} %argrw{"wrr"}
	if		$tmp274 452 466 	%argrw{"r"}
# PxrArithmetic.osl:401
#         resultRGB = cosh(input1);
	cosh		resultRGB input1 	%line{401} %argrw{"wr"}
# PxrArithmetic.osl:403
#     else if (operation == k_tanh)
	eq		$tmp275 operation $const59 	%line{403} %argrw{"wrr"}
	if		$tmp275 455 466 	%argrw{"r"}
# PxrArithmetic.osl:405
#         resultRGB = tanh(input1);
	tanh		resultRGB input1 	%line{405} %argrw{"wr"}
# PxrArithmetic.osl:407
#     else if (operation == k_to_radians)
	eq		$tmp276 operation $const60 	%line{407} %argrw{"wrr"}
	if		$tmp276 460 466 	%argrw{"r"}
# PxrArithmetic.osl:409
#         resultRGB = radians(input1);
	functioncall	$const61 460 	%line{409} %argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:87
# color  radians (color x)  { return x*(M_PI/180.0); }
	div		$tmp277 $const62 $const63 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{87} %argrw{"wrr"}
	mul		resultRGB input1 $tmp277 	%argrw{"wrr"}
# PxrArithmetic.osl:411
#     else if (operation == k_to_degrees)
	eq		$tmp278 operation $const64 	%filename{"PxrArithmetic.osl"} %line{411} %argrw{"wrr"}
	if		$tmp278 465 466 	%argrw{"r"}
# PxrArithmetic.osl:413
#         resultRGB = degrees(input1);
	functioncall	$const65 465 	%line{413} %argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:82
# color  degrees (color x)  { return x*(180.0/M_PI); }
	div		$tmp279 $const63 $const62 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{82} %argrw{"wrr"}
	mul		resultRGB input1 $tmp279 	%argrw{"wrr"}
# PxrArithmetic.osl:417
#         resultRGB = input1;
	assign		resultRGB input1 	%filename{"PxrArithmetic.osl"} %line{417} %argrw{"wr"}
# PxrArithmetic.osl:420
#     if (clampResult)
	if		clampResult 529 529 	%line{420} %argrw{"r"}
# PxrArithmetic.osl:421
#         resultRGB = Color_filteredClamp(resultRGB, BLACK, WHITE, clampFilterWidth);
	functioncall	$const68 529 	%line{421} %argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:210
#     if (fwidth <= 0.0) return clamp(c, cmin, cmax);
	le		$tmp282 clampFilterWidth $const25 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{210} %argrw{"wrr"}
	if		$tmp282 474 474 	%argrw{"r"}
	functioncall	$const69 473 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:162
# color  clamp (color x, color minval, color maxval) { return max(min(x,maxval),minval); }
	min		$tmp283 resultRGB $const67 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{162} %argrw{"wrr"}
	max		resultRGB $tmp283 $const66 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:210
#     if (fwidth <= 0.0) return clamp(c, cmin, cmax);
	return	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{210}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:211
#     return color(Math_FilteredClamp(c[0], cmin[0], cmax[0], fwidth),
	compref		$tmp285 resultRGB $const8 	%line{211} %argrw{"wrr"}
	compref		$tmp286 $const66 $const8 	%argrw{"wrr"}
	compref		$tmp287 $const67 $const8 	%argrw{"wrr"}
	functioncall	$const70 492 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:615
#     if (fwidth <= 0.0) return clamp(x, fmin, fmax);
	le		$tmp288 clampFilterWidth $const25 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{615} %argrw{"wrr"}
	if		$tmp288 484 484 	%argrw{"r"}
	functioncall	$const69 483 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp289 $tmp285 $tmp287 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		$tmp284 $tmp289 $tmp286 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:615
#     if (fwidth <= 0.0) return clamp(x, fmin, fmax);
	return	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{615}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:616
#     float w = filterwidth(x) * fwidth;
	filterwidth	$tmp290 $tmp285 	%line{616} %argrw{"wr"} %argderivs{1}
	mul		___387_w $tmp290 clampFilterWidth 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:617
#     return mix(fmin, mix(x, fmax, smoothstep(fmax - w, fmax, x)), smoothstep(fmin, fmin + w, x));
	sub		$tmp293 $tmp287 ___387_w 	%line{617} %argrw{"wrr"}
	smoothstep	$tmp292 $tmp293 $tmp287 $tmp285 	%argrw{"wrrr"}
	mix		$tmp291 $tmp285 $tmp287 $tmp292 	%argrw{"wrrr"}
	add		$tmp295 $tmp286 ___387_w 	%argrw{"wrr"}
	smoothstep	$tmp294 $tmp286 $tmp295 $tmp285 	%argrw{"wrrr"}
	mix		$tmp284 $tmp286 $tmp291 $tmp294 	%argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:212
#                  Math_FilteredClamp(c[1], cmin[1], cmax[1], fwidth),
	compref		$tmp297 resultRGB $const1 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{212} %argrw{"wrr"}
	compref		$tmp298 $const66 $const1 	%argrw{"wrr"}
	compref		$tmp299 $const67 $const1 	%argrw{"wrr"}
	functioncall	$const70 510 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:615
#     if (fwidth <= 0.0) return clamp(x, fmin, fmax);
	le		$tmp300 clampFilterWidth $const25 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{615} %argrw{"wrr"}
	if		$tmp300 502 502 	%argrw{"r"}
	functioncall	$const69 501 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp301 $tmp297 $tmp299 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		$tmp296 $tmp301 $tmp298 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:615
#     if (fwidth <= 0.0) return clamp(x, fmin, fmax);
	return	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{615}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:616
#     float w = filterwidth(x) * fwidth;
	filterwidth	$tmp302 $tmp297 	%line{616} %argrw{"wr"} %argderivs{1}
	mul		___387_w $tmp302 clampFilterWidth 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:617
#     return mix(fmin, mix(x, fmax, smoothstep(fmax - w, fmax, x)), smoothstep(fmin, fmin + w, x));
	sub		$tmp305 $tmp299 ___387_w 	%line{617} %argrw{"wrr"}
	smoothstep	$tmp304 $tmp305 $tmp299 $tmp297 	%argrw{"wrrr"}
	mix		$tmp303 $tmp297 $tmp299 $tmp304 	%argrw{"wrrr"}
	add		$tmp307 $tmp298 ___387_w 	%argrw{"wrr"}
	smoothstep	$tmp306 $tmp298 $tmp307 $tmp297 	%argrw{"wrrr"}
	mix		$tmp296 $tmp298 $tmp303 $tmp306 	%argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:213
#                  Math_FilteredClamp(c[2], cmin[2], cmax[2], fwidth));
	compref		$tmp309 resultRGB $const2 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{213} %argrw{"wrr"}
	compref		$tmp310 $const66 $const2 	%argrw{"wrr"}
	compref		$tmp311 $const67 $const2 	%argrw{"wrr"}
	functioncall	$const70 528 	%argrw{"r"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:615
#     if (fwidth <= 0.0) return clamp(x, fmin, fmax);
	le		$tmp312 clampFilterWidth $const25 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{615} %argrw{"wrr"}
	if		$tmp312 520 520 	%argrw{"r"}
	functioncall	$const69 519 	%argrw{"r"}
# /data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp313 $tmp309 $tmp311 	%filename{"/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		$tmp308 $tmp313 $tmp310 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:615
#     if (fwidth <= 0.0) return clamp(x, fmin, fmax);
	return	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{615}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:616
#     float w = filterwidth(x) * fwidth;
	filterwidth	$tmp314 $tmp309 	%line{616} %argrw{"wr"} %argderivs{1}
	mul		___387_w $tmp314 clampFilterWidth 	%argrw{"wrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/Math.h:617
#     return mix(fmin, mix(x, fmax, smoothstep(fmax - w, fmax, x)), smoothstep(fmin, fmin + w, x));
	sub		$tmp317 $tmp311 ___387_w 	%line{617} %argrw{"wrr"}
	smoothstep	$tmp316 $tmp317 $tmp311 $tmp309 	%argrw{"wrrr"}
	mix		$tmp315 $tmp309 $tmp311 $tmp316 	%argrw{"wrrr"}
	add		$tmp319 $tmp310 ___387_w 	%argrw{"wrr"}
	smoothstep	$tmp318 $tmp310 $tmp319 $tmp309 	%argrw{"wrrr"}
	mix		$tmp308 $tmp310 $tmp315 $tmp318 	%argrw{"wrrr"}
# /data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h:211
#     return color(Math_FilteredClamp(c[0], cmin[0], cmax[0], fwidth),
	color		resultRGB $tmp284 $tmp296 $tmp308 	%filename{"/data/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLColor.h"} %line{211} %argrw{"wrrr"}
# PxrArithmetic.osl:423
#     resultR = resultRGB[0];
	compref		resultR resultRGB $const8 	%filename{"PxrArithmetic.osl"} %line{423} %argrw{"wrr"}
# PxrArithmetic.osl:424
#     resultG = resultRGB[1];
	compref		resultG resultRGB $const1 	%line{424} %argrw{"wrr"}
# PxrArithmetic.osl:425
#     resultB = resultRGB[2];
	compref		resultB resultRGB $const2 	%line{425} %argrw{"wrr"}
	end
