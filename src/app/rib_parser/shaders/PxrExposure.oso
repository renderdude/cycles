OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: -DOSX -I/data/build/ratbuild/rman/_built/osxMojave_x86-64_clang10_external_release/include -I/data/build/ratbuild/rmanshare/RIS/include -I/data/build/ratbuild/rmanshare/RIS/include/common -I/data/build/ratbuild/rmanshare/RIS/pattern/osl -I/data/build/ratbuild/rmanshare/RIS/include/osl -o /data/build/ratbuild/rmanshare/_built/osxMojave_x86-64_clang10_external_release/osl/PxrExposure.osl/obj/PxrExposure.oso
shader PxrExposure	%meta{int,rfm_nodeid,1053427} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/color"} %meta{string,rfh_classification,"Pattern/Color"} %meta{string,help,"Adjust the exposure of the input color by the given stops. Each positive stop will double the input's intensity. Each negative stop will halve the input's intensity.  Often it is preferable to use Exposure instead of a<br>straight multiplication (also called gain), as it is perceptually linear."} 
param	color	inputRGB	0 0 0		%meta{string,widget,"color"} %meta{string,help,"Plug a color pattern here."} %meta{string,label,"Input Color"}  %read{1,29} %write{2147483647,-1}
param	float	stops	0		%meta{string,widget,"default"} %meta{string,help,"The result is multiplied by pow(2, stops)."} %meta{string,label,"Stops"} %meta{float,max,10} %meta{float,min,-10} %meta{int,slider,1} %meta{float,slidermax,4} %meta{float,slidermin,-4}  %read{22,22} %write{2147483647,-1}
oparam	color	resultRGB	0 0 0		%meta{string,help,"resultRGB (color)"}  %read{32,34} %write{17,31}
oparam	float	resultR	0		%meta{string,help,"resultR (float)"}  %read{2147483647,-1} %write{32,32}
oparam	float	resultG	0		%meta{string,help,"resultG (float)"}  %read{2147483647,-1} %write{33,33}
oparam	float	resultB	0		%meta{string,help,"resultB (float)"}  %read{2147483647,-1} %write{34,34}
local	float	ev	%read{24,30} %write{0,22}
const	float	$const1	0		%read{0,0} %write{2147483647,-1}
const	int	$const2	0		%read{1,32} %write{2147483647,-1}
temp	float	$tmp1	%read{2,2} %write{1,1}
const	float	$const3	9.99999997e-07		%read{2,12} %write{2147483647,-1}
temp	int	$tmp2	%read{3,3} %write{2,2}
temp	int	$tmp3	%read{4,9} %write{3,8}
const	int	$const4	1		%read{5,33} %write{2147483647,-1}
temp	float	$tmp4	%read{6,6} %write{5,5}
temp	int	$tmp5	%read{7,7} %write{6,6}
temp	int	$tmp6	%read{8,8} %write{7,7}
temp	int	$tmp7	%read{10,15} %write{9,14}
const	int	$const5	2		%read{11,34} %write{2147483647,-1}
temp	float	$tmp8	%read{12,12} %write{11,11}
temp	int	$tmp9	%read{13,13} %write{12,12}
temp	int	$tmp10	%read{14,14} %write{13,13}
temp	float	$tmp11	%read{17,17} %write{16,16}
temp	float	$tmp12	%read{19,19} %write{18,18}
temp	float	$tmp13	%read{21,21} %write{20,20}
const	float	$const6	2		%read{22,22} %write{2147483647,-1}
temp	float	$tmp14	%read{24,24} %write{23,23}
temp	float	$tmp15	%read{25,25} %write{24,24}
temp	float	$tmp16	%read{27,27} %write{26,26}
temp	float	$tmp17	%read{28,28} %write{27,27}
temp	float	$tmp18	%read{30,30} %write{29,29}
temp	float	$tmp19	%read{31,31} %write{30,30}
code ___main___
# PxrExposure.osl:88
#     float ev = 0.0;
	assign		ev $const1 	%filename{"PxrExposure.osl"} %line{88} %argrw{"wr"}
# PxrExposure.osl:90
#     if (inputRGB[0] < EPSILON && inputRGB[1] < EPSILON && inputRGB[2] < EPSILON)
	compref		$tmp1 inputRGB $const2 	%line{90} %argrw{"wrr"}
	lt		$tmp2 $tmp1 $const3 	%argrw{"wrr"}
	neq		$tmp3 $tmp2 $const2 	%argrw{"wrr"}
	if		$tmp3 9 9 	%argrw{"r"}
	compref		$tmp4 inputRGB $const4 	%argrw{"wrr"}
	lt		$tmp5 $tmp4 $const3 	%argrw{"wrr"}
	neq		$tmp6 $tmp5 $const2 	%argrw{"wrr"}
	assign		$tmp3 $tmp6 	%argrw{"wr"}
	neq		$tmp7 $tmp3 $const2 	%argrw{"wrr"}
	if		$tmp7 15 15 	%argrw{"r"}
	compref		$tmp8 inputRGB $const5 	%argrw{"wrr"}
	lt		$tmp9 $tmp8 $const3 	%argrw{"wrr"}
	neq		$tmp10 $tmp9 $const2 	%argrw{"wrr"}
	assign		$tmp7 $tmp10 	%argrw{"wr"}
	if		$tmp7 22 32 	%argrw{"r"}
# PxrExposure.osl:95
#         resultRGB[0] = inputRGB[0];
	compref		$tmp11 inputRGB $const2 	%line{95} %argrw{"wrr"}
	compassign	resultRGB $const2 $tmp11 	%argrw{"wrr"}
# PxrExposure.osl:96
#         resultRGB[1] = inputRGB[1];
	compref		$tmp12 inputRGB $const4 	%line{96} %argrw{"wrr"}
	compassign	resultRGB $const4 $tmp12 	%argrw{"wrr"}
# PxrExposure.osl:97
#         resultRGB[2] = inputRGB[2];
	compref		$tmp13 inputRGB $const5 	%line{97} %argrw{"wrr"}
	compassign	resultRGB $const5 $tmp13 	%argrw{"wrr"}
# PxrExposure.osl:101
#         ev = pow(2.0, stops);
	pow		ev $const6 stops 	%line{101} %argrw{"wrr"}
# PxrExposure.osl:104
#         resultRGB[0] = inputRGB[0] * ev;
	compref		$tmp14 inputRGB $const2 	%line{104} %argrw{"wrr"}
	mul		$tmp15 $tmp14 ev 	%argrw{"wrr"}
	compassign	resultRGB $const2 $tmp15 	%argrw{"wrr"}
# PxrExposure.osl:105
#         resultRGB[1] = inputRGB[1] * ev;
	compref		$tmp16 inputRGB $const4 	%line{105} %argrw{"wrr"}
	mul		$tmp17 $tmp16 ev 	%argrw{"wrr"}
	compassign	resultRGB $const4 $tmp17 	%argrw{"wrr"}
# PxrExposure.osl:106
#         resultRGB[2] = inputRGB[2] * ev;
	compref		$tmp18 inputRGB $const5 	%line{106} %argrw{"wrr"}
	mul		$tmp19 $tmp18 ev 	%argrw{"wrr"}
	compassign	resultRGB $const5 $tmp19 	%argrw{"wrr"}
# PxrExposure.osl:109
#     resultR = resultRGB[0];
	compref		resultR resultRGB $const2 	%line{109} %argrw{"wrr"}
# PxrExposure.osl:110
#     resultG = resultRGB[1];
	compref		resultG resultRGB $const4 	%line{110} %argrw{"wrr"}
# PxrExposure.osl:111
#     resultB = resultRGB[2];
	compref		resultB resultRGB $const5 	%line{111} %argrw{"wrr"}
	end
